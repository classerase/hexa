// Generated by Hexa 0.0.1 https://hexalang.github.io
// The Hexa Compiler
// LICENSE LGPL-2.1-or-later
;(function() {
    "use strict"
    const $global = typeof(window) === "undefined"?global:window
    function $toIterator(v) { if (typeof(v) === "number") { v = Math.max(v, 0); const i = new Uint32Array(v); let n = 0; while (n < v) i[n] = n++; return i; } return v; };
    const ProcessT = require("process")
    const Path = require("path")
    const Fs = require("fs")
    var Token = {}
    Token.stringify = (token_2564, param = null) => { {
            const temp_2565 = token_2564;
            switch (temp_2565) {
            case 70: {
                return '@'
            } break;

            case 83: {
                return '$'
            } break;

            case 78: {
                return '#'
            } break;

            case 71: {
                return ']'
            } break;

            case 72: {
                return '['
            } break;

            case 73: {
                return '}'
            } break;

            case 74: {
                return '{'
            } break;

            case 75: {
                return ','
            } break;

            case 76: {
                return ':'
            } break;

            case 123: {
                return '<!--default-->'
            } break;

            case 77: {
                return '.'
            } break;

            case 0: {
                return '<!--eof-->'
            } break;

            case 98: {
                return '...'
            } break;

            case 58: {
                return 'as'
            } break;

            case 3: {
                return 'break'
            } break;

            case 4: {
                return 'case'
            } break;

            case 6: {
                return 'catch'
            } break;

            case 7: {
                return 'class'
            } break;

            case 8: {
                return 'continue'
            } break;

            case 9: {
                return 'do'
            } break;

            case 10: {
                return 'else'
            } break;

            case 11: {
                return 'enum'
            } break;

            case 12: {
                return 'extends'
            } break;

            case 13: {
                return 'declare'
            } break;

            case 14: {
                return 'false'
            } break;

            case 15: {
                return 'for'
            } break;

            case 16: {
                return 'function'
            } break;

            case 17: {
                return 'if'
            } break;

            case 18: {
                return 'implements'
            } break;

            case 20: {
                return 'in'
            } break;

            case 22: {
                return 'interface'
            } break;

            case 23: {
                return 'let'
            } break;

            case 25: {
                return 'new'
            } break;

            case 26: {
                return 'null'
            } break;

            case 28: {
                return 'module'
            } break;

            case 29: {
                return 'private'
            } break;

            case 31: {
                return 'return'
            } break;

            case 32: {
                return 'static'
            } break;

            case 59: {
                return 'super'
            } break;

            case 33: {
                return 'switch'
            } break;

            case 34: {
                return 'this'
            } break;

            case 35: {
                return 'throw'
            } break;

            case 36: {
                return 'true'
            } break;

            case 37: {
                return 'try'
            } break;

            case 39: {
                return 'using'
            } break;

            case 40: {
                return 'var'
            } break;

            case 41: {
                return 'while'
            } break;

            case 111: {
                return '+'
            } break;

            case 112: {
                return '&'
            } break;

            case 90: {
                return '=>'
            } break;

            case 91: {
                return '='
            } break;

            case 92: {
                return '&&'
            } break;

            case 93: {
                return '||'
            } break;

            case 86: {
                return '--'
            } break;

            case 94: {
                return '/'
            } break;

            case 95: {
                return '=='
            } break;

            case 96: {
                return '>'
            } break;

            case 97: {
                return '>='
            } break;

            case 87: {
                return '++'
            } break;

            case 110: {
                return '\\'
            } break;

            case 99: {
                return '<'
            } break;

            case 100: {
                return '<='
            } break;

            case 101: {
                return '%'
            } break;

            case 102: {
                return '*'
            } break;

            case 88: {
                return '~'
            } break;

            case 89: {
                return '!'
            } break;

            case 103: {
                return '!='
            } break;

            case 104: {
                return '|'
            } break;

            case 105: {
                return '<<'
            } break;

            case 106: {
                return '>>'
            } break;

            case 107: {
                return '-'
            } break;

            case 108: {
                return '>>>'
            } break;

            case 109: {
                return '^'
            } break;

            case 113: {
                return '?.'
            } break;

            case 79: {
                return ')'
            } break;

            case 80: {
                return '('
            } break;

            case 81: {
                return '?'
            } break;

            case 82: {
                return ';'
            } break;

            case 1: {
                return '_'
            } break;

            case 61: {
                return ((param == null))? ('UpperCase') : param
            } break;

            case 64: {
                return ((param == null))? ('"string"') : ('\'' + (param) + '\'')
            } break;

            case 66: {
                return ((param == null))? ('<backtick>') : ('`' + (param) + '`')
            } break;

            case 62: {
                return ((param == null))? ('lowercase') : param
            } break;

            case 63: {
                return ((param == null))? ('<integer>') : param
            } break;

            case 60: {
                return ((param == null))? ('<float>') : param
            } break;

            case 65: {
                return ('///' + (param) + '')
            } break;

            case 57: {
                return 'is'
            } break;
            };
        } };
    var NativeOperatorKind = {}
    var Hints = {}
    var Generator = {}
    var ClassTypeKind = {}
    Object.defineProperty(ClassTypeKind, "Class", { get: function() { return ["Class",0] }})
    Object.defineProperty(ClassTypeKind, "NotDefinedEnum", { get: function() { return ["NotDefinedEnum",1] }})
    Object.defineProperty(ClassTypeKind, "EnumSimple", { get: function() { return ["EnumSimple",2] }})
    Object.defineProperty(ClassTypeKind, "EnumClass", { get: function() { return ["EnumClass",3] }})
    var Type = {}
    Type.Unknown = (handle)=>["Unknown",0,handle];
    Type.UnknownNullable = (handle_648)=>["UnknownNullable",1,handle_648];
    Type.Nullable = (type_649)=>["Nullable",2,type_649];
    Type.Class = (type_650)=>["Class",3,type_650];
    Type.Enum = (type_651)=>["Enum",4,type_651];
    Type.Alias = (value_652)=>["Alias",5,value_652];
    Type.ClassInstance = (type_653,generic_654)=>["ClassInstance",6,type_653,generic_654];
    Type.EnumInstance = (type_655,tag_656)=>["EnumInstance",7,type_655,tag_656];
    Type.EnumConstructor = (type_657,tag_658)=>["EnumConstructor",8,type_657,tag_658];
    Type.SuperOf = (type_659)=>["SuperOf",9,type_659];
    Type.Function = (args_660,returns,lazyTypeCheck)=>["Function",10,args_660,returns,lazyTypeCheck];
    Type.Struct = (names_661,types_662)=>["Struct",11,names_661,types_662];
    Type.stringify = (type_663) => { {
            const temp_664 = type_663;
            switch (temp_664 && temp_664[1]) {
            case 6: {
                {
                    const type_665 = temp_664[2];
                    const generic_666 = temp_664[3];
                    {
                        {
                            let step_667 = 0;
                            const gen = generic_666;
                            if (step_667 == 0 && gen != null) { step_667 = 1 };
                            if (step_667 == 1) { return DataHelper.nameOf(type_665.parent) + '<' + (() => {
                                const result_668 = [];
                                const value_669 = gen;
                                for (const g of $toIterator(value_669)) result_668.push(Type.stringify(g));
                                return result_668;
                            })().join(', ') + '>' };
                        };
                        return DataHelper.nameOf(type_665.parent);
                    };
                }
            } break;

            case 3: {
                {
                    const type_670 = temp_664[2];
                    return DataHelper.nameOf(type_670.parent);
                }
            } break;

            case 10: {
                {
                    const args_671 = temp_664[2];
                    const returns_672 = temp_664[3];
                    return '(' + (() => {
                        const result_673 = [];
                        const value_674 = args_671;
                        for (const arg of $toIterator(value_674)) result_673.push(Type.stringify(arg));
                        return result_673;
                    })().join(', ') + ') => ' + Type.stringify(returns_672);
                }
            } break;

            case 1: {
                {
                    const handle_675 = temp_664[2];
                    {
                        {
                            let step_676 = 0;
                            const value_677 = handle_675.value;
                            if (step_676 == 0 && value_677 != null) { step_676 = 1 };
                            if (step_676 == 1) { return Type.stringify(value_677) + '?' };
                        };
                        return 'Unknown?';
                    };
                }
            } break;

            case 2: {
                {
                    const type_678 = temp_664[2];
                    return Type.stringify(type_678) + '?';
                }
            } break;

            case 4: {
                {
                    const type_679 = temp_664[2];
                    return DataHelper.nameOf(type_679.parent);
                }
            } break;

            case 0: {
                {
                    const handle_680 = temp_664[2];
                    {
                        {
                            let step_681 = 0;
                            const value_682 = handle_680.value;
                            if (step_681 == 0 && value_682 != null) { step_681 = 1 };
                            if (step_681 == 1) { return Type.stringify(value_682) };
                        };
                        return 'Unknown';
                    };
                }
            } break;

            default:
            return '~?' + type_663 + '?~'
            };
        } };
    var NiceExpression = {}
    NiceExpression.String = (s_2566)=>["String",0,s_2566];
    NiceExpression.Int = (s_2567)=>["Int",1,s_2567];
    NiceExpression.Float = (s_2568)=>["Float",2,s_2568];
    Object.defineProperty(NiceExpression, "True", { get: function() { return ["True",3] }})
    Object.defineProperty(NiceExpression, "False", { get: function() { return ["False",4] }})
    NiceExpression.Ident = (s_2569)=>["Ident",5,s_2569];
    Object.defineProperty(NiceExpression, "Null", { get: function() { return ["Null",6] }})
    Object.defineProperty(NiceExpression, "This", { get: function() { return ["This",7] }})
    NiceExpression.Dot = (expr_2570,name_2571)=>["Dot",8,expr_2570,name_2571];
    NiceExpression.Call = (e_2572,args_2573)=>["Call",9,e_2572,args_2573];
    NiceExpression.New = (e_2574,args_2575)=>["New",10,e_2574,args_2575];
    NiceExpression.Binop = (a_2576,op_2577,b_2578)=>["Binop",11,a_2576,op_2577,b_2578];
    NiceExpression.Function = (name_2579,expr_2580,args_2581,defaults_2582,types_2583,returns_2584)=>["Function",12,name_2579,expr_2580,args_2581,defaults_2582,types_2583,returns_2584];
    NiceExpression.Arrow = (expr_2585,args_2586,defaults_2587,types_2588,returns_2589)=>["Arrow",13,expr_2585,args_2586,defaults_2587,types_2588,returns_2589];
    NiceExpression.Parenthesis = (inner_2590)=>["Parenthesis",14,inner_2590];
    NiceExpression.Object = (names_2591,el_2592,types_2593)=>["Object",15,names_2591,el_2592,types_2593];
    NiceExpression.Array = (values_2594,valueType)=>["Array",16,values_2594,valueType];
    NiceExpression.Map = (keys_2595,values_2596,keyType,valueType_2597)=>["Map",17,keys_2595,values_2596,keyType,valueType_2597];
    NiceExpression.Unop = (op_2598,postfix_2599,e_2600)=>["Unop",18,op_2598,postfix_2599,e_2600];
    NiceExpression.Elvis = (nullable_2601,othewise_2602)=>["Elvis",19,nullable_2601,othewise_2602];
    NiceExpression.If = (econd_2603,eif_2604,eelse_2605)=>["If",20,econd_2603,eif_2604,eelse_2605];
    NiceExpression.Index = (expr_2606,index_2607)=>["Index",21,expr_2606,index_2607];
    NiceExpression.Assignop = (name_2608,op_2609,value_2610)=>["Assignop",22,name_2608,op_2609,value_2610];
    NiceExpression.NativeOperator = (kind_2611,args_2612,name_2613)=>["NativeOperator",23,kind_2611,args_2612,name_2613];
    NiceExpression.Enum = (type_2614,tagName_2615,tag_2616,args_2617)=>["Enum",24,type_2614,tagName_2615,tag_2616,args_2617];
    Object.defineProperty(NiceExpression, "Underscore", { get: function() { return ["Underscore",25] }})
    var NiceStatement = {}
    NiceStatement.Statements = (el_2618)=>["Statements",0,el_2618];
    NiceStatement.Block = (el_2619)=>["Block",1,el_2619];
    NiceStatement.Call = (e_2620,args_2621)=>["Call",2,e_2620,args_2621];
    NiceStatement.New = (e_2622,args_2623)=>["New",3,e_2622,args_2623];
    NiceStatement.UnusedExpression = (e_2624)=>["UnusedExpression",4,e_2624];
    NiceStatement.Var = (name_2625,expr_2626,type_2627)=>["Var",5,name_2625,expr_2626,type_2627];
    NiceStatement.Const = (name_2628,expr_2629,type_2630)=>["Const",6,name_2628,expr_2629,type_2630];
    NiceStatement.Function = (name_2631,expr_2632,args_2633,defaults_2634,types_2635,returns_2636)=>["Function",7,name_2631,expr_2632,args_2633,defaults_2634,types_2635,returns_2636];
    NiceStatement.Return = (e_2637)=>["Return",8,e_2637];
    NiceStatement.If = (econd_2638,eif_2639,eelse_2640)=>["If",9,econd_2638,eif_2639,eelse_2640];
    NiceStatement.Try = (expr_2641,t_2642,v_2643,catches_2644)=>["Try",10,expr_2641,t_2642,v_2643,catches_2644];
    NiceStatement.Throw = (value_2645)=>["Throw",11,value_2645];
    NiceStatement.Assign = (name_2646,value_2647)=>["Assign",12,name_2646,value_2647];
    NiceStatement.Assignop = (name_2648,op_2649,value_2650)=>["Assignop",13,name_2648,op_2649,value_2650];
    NiceStatement.Dot = (expr_2651,name_2652)=>["Dot",14,expr_2651,name_2652];
    NiceStatement.For = (name_2653,over_2654,by_2655)=>["For",15,name_2653,over_2654,by_2655];
    NiceStatement.While = (econd_2656,e_2657,pre_2658)=>["While",16,econd_2656,e_2657,pre_2658];
    NiceStatement.Increment = (e_2659)=>["Increment",17,e_2659];
    NiceStatement.Decrement = (e_2660)=>["Decrement",18,e_2660];
    NiceStatement.Switch = (expr_2661,cases_2662,statements_2663)=>["Switch",19,expr_2661,cases_2662,statements_2663];
    Object.defineProperty(NiceStatement, "Continue", { get: function() { return ["Continue",20] }})
    Object.defineProperty(NiceStatement, "Break", { get: function() { return ["Break",21] }})
    var NodeType = {}
    NodeType.Optional = (type_2664)=>["Optional",0,type_2664];
    NodeType.Type = (name_2665)=>["Type",1,name_2665];
    NodeType.ParametricType = (name_2666,params_2667)=>["ParametricType",2,name_2666,params_2667];
    NodeType.Function = (args_2668,ret_2669)=>["Function",3,args_2668,ret_2669];
    NodeType.FunctionArg = (name_2670,type_2671,defaultValue)=>["FunctionArg",4,name_2670,type_2671,defaultValue];
    NodeType.Object = (names_2672,types_2673)=>["Object",5,names_2672,types_2673];
    var Node = {}
    Node.TString = (s_2713)=>["TString",0,s_2713];
    Node.TIdent = (name_2714)=>["TIdent",1,name_2714];
    Node.TBool = (b_2715)=>["TBool",2,b_2715];
    Object.defineProperty(Node, "TThis", { get: function() { return ["TThis",3] }})
    Object.defineProperty(Node, "TSuper", { get: function() { return ["TSuper",4] }})
    Node.TInt = (s_2716)=>["TInt",5,s_2716];
    Node.TFloat = (s_2717)=>["TFloat",6,s_2717];
    Object.defineProperty(Node, "TNull", { get: function() { return ["TNull",7] }})
    Node.TTypeAlias = (alias_2718,value_2719)=>["TTypeAlias",8,alias_2718,value_2719];
    Node.TBinop = (a_2720,op_2721,b_2722)=>["TBinop",9,a_2720,op_2721,b_2722];
    Node.TAssignop = (a_2723,op_2724,b_2725)=>["TAssignop",10,a_2723,op_2724,b_2725];
    Node.TBlock = (el_2726)=>["TBlock",11,el_2726];
    Node.TCall = (e_2727,args_2728,argNames_2729)=>["TCall",12,e_2727,args_2728,argNames_2729];
    Node.TIf = (econd_2730,eif_2731,eelse_2732)=>["TIf",13,econd_2730,eif_2731,eelse_2732];
    Node.TParenthesis = (inner_2733)=>["TParenthesis",14,inner_2733];
    Node.TReturn = (e_2734)=>["TReturn",15,e_2734];
    Node.TThrow = (e_2735)=>["TThrow",16,e_2735];
    Object.defineProperty(Node, "TBreak", { get: function() { return ["TBreak",17] }})
    Object.defineProperty(Node, "TContinue", { get: function() { return ["TContinue",18] }})
    Node.TUnop = (op_2736,postfix_2737,e_2738)=>["TUnop",19,op_2736,postfix_2737,e_2738];
    Node.TWhile = (econd_2739,e_2740,pre_2741)=>["TWhile",20,econd_2739,e_2740,pre_2741];
    Node.TFunction = (name_2742,expr_2743,vars_2744,retType,external_2745)=>["TFunction",21,name_2742,expr_2743,vars_2744,retType,external_2745];
    Node.TArrow = (expr_2746,vars_2747,retType_2748)=>["TArrow",22,expr_2746,vars_2747,retType_2748];
    Node.TVar = (name_2749,t_2750,expr_2751,const_2752,external_2753)=>["TVar",23,name_2749,t_2750,expr_2751,const_2752,external_2753];
    Node.TVars = (vars_2754)=>["TVars",24,vars_2754];
    Node.TClass = (t_2755,extend_2756,implement_2757,fields_2758,external_2759)=>["TClass",25,t_2755,extend_2756,implement_2757,fields_2758,external_2759];
    Node.TProperty = (v_2760,g,s_2761)=>["TProperty",26,v_2760,g,s_2761];
    Node.TTry = (expr_2762,t_2763,v_2764,catches_2765)=>["TTry",27,expr_2762,t_2763,v_2764,catches_2765];
    Node.TDot = (expr_2766,name_2767)=>["TDot",28,expr_2766,name_2767];
    Node.TDotUpper = (expr_2768,name_2769)=>["TDotUpper",29,expr_2768,name_2769];
    Node.TNew = (path_2770,t_2771,args_2772,fields_2773,el_2774,argNames_2775)=>["TNew",30,path_2770,t_2771,args_2772,fields_2773,el_2774,argNames_2775];
    Node.TArray = (elements)=>["TArray",31,elements];
    Node.TMap = (keys_2776,values_2777)=>["TMap",32,keys_2776,values_2777];
    Node.TIndex = (expr_2778,index_2779)=>["TIndex",33,expr_2778,index_2779];
    Node.TSwitch = (exprs_2780,conds_2781,guards_2782,cases_2783)=>["TSwitch",34,exprs_2780,conds_2781,guards_2782,cases_2783];
    Node.TModule = (path_2784,el_2785)=>["TModule",35,path_2784,el_2785];
    Node.TObject = (names_2786,el_2787)=>["TObject",36,names_2786,el_2787];
    Node.TEnum = (t_2788,fields_2789,valuesType_2790)=>["TEnum",37,t_2788,fields_2789,valuesType_2790];
    Node.TEnumExtract = (path_2791,bind_2792,expr_2793)=>["TEnumExtract",38,path_2791,bind_2792,expr_2793];
    Node.TUsing = (path_2794)=>["TUsing",39,path_2794];
    Node.TIs = (expr_2795,t_2796)=>["TIs",40,expr_2795,t_2796];
    Node.TAs = (expr_2797,kind_2798,t_2799)=>["TAs",41,expr_2797,kind_2798,t_2799];
    Object.defineProperty(Node, "TUnderscore", { get: function() { return ["TUnderscore",42] }})
    Node.TStatic = (field_2800)=>["TStatic",43,field_2800];
    Node.TPrivate = (field_2801)=>["TPrivate",44,field_2801];
    Node.TExport = (field_2802)=>["TExport",45,field_2802];
    Node.TFor = (name_2803,over_2804,by_2805,range_2806)=>["TFor",46,name_2803,over_2804,by_2805,range_2806];
    Node.TElvis = (nullable_2807,othewise_2808)=>["TElvis",47,nullable_2807,othewise_2808];
    Node.NodeTypeValue = (type_2809)=>["NodeTypeValue",48,type_2809];
    Node.stringify = (node_2810) => { {
            let x_2811 = (["TString",0,'s']);
            {
                const temp_2812 = node_2810;
                switch (temp_2812 && temp_2812[1]) {
                case 0: {
                    {
                        const s_2813 = temp_2812[2];
                        return ('\'' + (s_2813) + '\'');
                    }
                } break;

                case 1: {
                    {
                        const name_2814 = temp_2812[2];
                        return name_2814;
                    }
                } break;

                case 2: {
                    {
                        const b_2815 = temp_2812[2];
                        return (b_2815)? ('true') : 'false';
                    }
                } break;

                case 5: {
                    {
                        const s_2816 = temp_2812[2];
                        return s_2816;
                    }
                } break;

                case 6: {
                    {
                        const s_2817 = temp_2812[2];
                        return s_2817;
                    }
                } break;

                case 7: {
                    return 'null'
                } break;

                case 3: {
                    return 'this'
                } break;

                case 33: {
                    {
                        const expr_2818 = temp_2812[2];
                        const index_2819 = temp_2812[3];
                        return Node.stringify(expr_2818) + '[' + Node.stringify(index_2819) + ']';
                    }
                } break;

                case 28: {
                    {
                        const expr_2820 = temp_2812[2];
                        const name_2821 = temp_2812[3];
                        return Node.stringify(expr_2820) + '.' + name_2821;
                    }
                } break;

                case 29: {
                    {
                        const expr_2822 = temp_2812[2];
                        const name_2823 = temp_2812[3];
                        return Node.stringify(expr_2822) + '.' + name_2823;
                    }
                } break;

                case 12: {
                    {
                        const e_2824 = temp_2812[2];
                        const args_2825 = temp_2812[3];
                        const argNames_2826 = temp_2812[4];
                        {
                            const arg_2827 = [];
                            {
                                let i_2828 = 0;
                                let it_2829 = 0;
                                let at_2830 = args_2825.length;
                                while (it_2829 < at_2830) {
                                    i_2828 = it_2829;
                                    it_2829++;
                                    {
                                        let step_2831 = 0;
                                        const name_2832 = argNames_2826[i_2828];
                                        if (step_2831 == 0 && name_2832 != null) { step_2831 = 1 };
                                        if (step_2831 == 1) { arg_2827.push(name_2832 + ': ' + Node.stringify(args_2825[i_2828])) } else arg_2827.push(Node.stringify(args_2825[i_2828]));
                                    };
                                };
                            };
                            return Node.stringify(e_2824) + '(' + arg_2827.join(', ') + ')';
                        };
                    }
                } break;

                case 31: {
                    {
                        const elements_2833 = temp_2812[2];
                        return '[' + (() => {
                            const result_2834 = [];
                            const value_2835 = elements_2833;
                            for (const el of $toIterator(value_2835)) result_2834.push(Node.stringify(el));
                            return result_2834;
                        })().join(', ') + ']';
                    }
                } break;

                case 9: {
                    {
                        const a_2836 = temp_2812[2];
                        const op_2837 = temp_2812[3];
                        const b_2838 = temp_2812[4];
                        return Node.stringify(a_2836) + ' ' + Token.stringify(op_2837) + ' ' + Node.stringify(b_2838);
                    }
                } break;

                case 36: {
                    {
                        const names_2839 = temp_2812[2];
                        const el_2840 = temp_2812[3];
                        return '{' + (() => {
                            const result_2841 = [];
                            const value_2842 = el_2840.length;
                            for (const i of $toIterator(value_2842)) result_2841.push(names_2839[i] + ': ' + Node.stringify(el_2840[i]));
                            return result_2841;
                        })().join(', ') + '}';
                    }
                } break;

                case 48: {
                    {
                        const t_2843 = temp_2812[2];
                        {
                            if (false) { DataHelper.extractTypeName(t_2843) };
                            return DataHelper.extractTypeName(t_2843);
                        };
                    }
                } break;

                case 23: {
                    {
                        const name_2844 = temp_2812[2];
                        const t_2845 = temp_2812[3];
                        const expr_2846 = temp_2812[4];
                        const const_2847 = temp_2812[5];
                        const external_2848 = temp_2812[6];
                        return ((external_2848)? ('declare ') : '') + ((const_2847)? ('let ') : 'var ') + name_2844;
                    }
                } break;

                case 21: {
                    {
                        const name_2849 = temp_2812[2];
                        return 'function ' + name_2849 + '() {...}';
                    }
                } break;

                case 43: {
                    {
                        const f_2850 = temp_2812[2];
                        return 'static ' + Node.stringify(f_2850);
                    }
                } break;

                case 46: {
                    {
                        const name_2851 = temp_2812[2];
                        const over_2852 = temp_2812[3];
                        const by_2853 = temp_2812[4];
                        const range_2854 = temp_2812[5];
                        return ('for (' + (name_2851) + ' in ') + Node.stringify(over_2852) + ') {...}';
                    }
                } break;

                default:
                return '...' + node_2810
                };
            };
        } };
    var Fail = {}
    Object.defineProperty(Fail, "ParserError", { get: function() { return ["ParserError",0] }})
    Object.defineProperty(Fail, "ParserInternalError", { get: function() { return ["ParserInternalError",1] }})
    Object.defineProperty(Fail, "LexerError", { get: function() { return ["LexerError",2] }})
    Object.defineProperty(Fail, "TyperError", { get: function() { return ["TyperError",3] }})
    Object.defineProperty(Fail, "InfererError", { get: function() { return ["InfererError",4] }})
    var Buffer = $global.Buffer
    var ArrayBuffer = $global.ArrayBuffer
    var ProcessStd = $global.ProcessStd
    var Process = $global.process
    var ParsedPath = $global.ParsedPath
    var RangeError = $global.RangeError
    var ReferenceError = $global.ReferenceError
    var SyntaxError = $global.SyntaxError
    var TypeError = $global.TypeError
    var URIError = $global.URIError
    var EvalError = $global.EvalError
    var Error = $global.Error
    var Uint32Array = $global.Uint32Array
    var Uint8Array = $global.Uint8Array
    var RegExpMatch = $global.RegExpMatch
    var RegExp = $global.RegExp
    var Date = $global.Date
    var Array = $global.Array
    var Console = $global.console
    var Map = $global.Map
    var JSON = $global.JSON
    var Math = $global.Math
    var String = $global.String
    var Float = $global.Float
    var Bool = $global.Bool
    var Int = $global.Int
    var Any = $global.Any
    var Void = $global.Void
    var NiceTaggedEnum = class {
        constructor() {
        {
        } };
    }
    var NiceComplexEnum = class {
        constructor() {
            this.staticMethods = []
            this.staticVars = []
        {
        } };
    }
    var NiceSimpleEnum = class {
        constructor() {
            this.staticMethods = []
            this.staticVars = []
        {
        } };
    }
    var NiceClass = class {
        constructor() {
            this.staticMethods = []
            this.staticVars = []
            this.methods = []
            this.vars = []
            this.property = []
            this.jsRequire = null
            this.jsNative = null
        {
        } };
    }
    var NiceProject = class {
        constructor() {
            this.interfaces = []
            this.classes = []
            this.enumsSimple = []
            this.enumsComplex = []
            this.enumsTagged = []
            this.globalVars = []
            this.globalFuncs = []
            this.init = []
        {
        } };
    }
    var Normalizer = class {
        constructor() {
            this.project = new NiceProject()
            this.keywords = []
            this.reservedGlobals = []
            this.collected = []
            this.nativeEnums = false
            this.globalAccessor = '<!-- global -->'
            this.scopes = [new Map()]
            this.id = Math.round(Math.random() * 123.0)
            this.parentNames = new Map()
        {
        } };
        normalize() { {
            for (const global of $toIterator(this.reservedGlobals)) this.addToScope(global);
            for (const file of $toIterator(this.collected)) for (const e of $toIterator(file)) {
                const temp = e;
                switch (temp && temp[1]) {
                case 35: {
                    {
                        const path_78 = temp[2];
                        const el = temp[3];
                        for (const e of $toIterator(el)) {
                            const temp_79 = e;
                            switch (temp_79 && temp_79[1]) {
                            case 25: {
                                {
                                    const t = temp_79[2];
                                    const ext = temp_79[3];
                                    const impl = temp_79[4];
                                    const fields = temp_79[5];
                                    const external = temp_79[6];
                                    this.renameClassFields(fields);
                                }
                            } break;

                            case 37: {
                                {
                                    const t_80 = temp_79[2];
                                    const fields_81 = temp_79[3];
                                    const valuesType = temp_79[4];
                                    this.renameClassFields(fields_81);
                                }
                            } break;

                            case 23: {
                                {
                                    const name_82 = temp_79[2];
                                    const t_83 = temp_79[3];
                                    const expr = temp_79[4];
                                    const const_84 = temp_79[5];
                                    const external_85 = temp_79[6];
                                    this.unique(name_82, e);
                                }
                            } break;

                            case 21: {
                                {
                                    const name_86 = temp_79[2];
                                    const expr_87 = temp_79[3];
                                    const vars = temp_79[4];
                                    const rettype = temp_79[5];
                                    const external_88 = temp_79[6];
                                    {
                                        let step = 0;
                                        const name_89 = name_86;
                                        if (step == 0 && name_89 != null) { step = 1 };
                                        if (step == 1) { this.unique(name_89, e) };
                                    };
                                }
                            } break;
                            };
                        };
                    }
                } break;
                };
            };
            const init = [];
            for (const file of $toIterator(this.collected)) {
                const initial = [];
                this.pushScope();
                for (const e of $toIterator(file)) {
                    {
                        const temp_90 = e;
                        switch (temp_90 && temp_90[1]) {
                        case 35: {
                            {
                                const path_91 = temp_90[2];
                                const el_92 = temp_90[3];
                                {
                                    this.pushScope();
                                    for (const e of $toIterator(el_92)) {
                                        const temp_93 = e;
                                        switch (temp_93 && temp_93[1]) {
                                        case 21: {
                                            {
                                                let step_94 = 0;
                                                const s = this.nodeToStatement(e);
                                                if (step_94 == 0 && s != null) { step_94 = 1 };
                                                if (step_94 == 1) { this.project.globalFuncs.push(s) };
                                            }
                                        } break;

                                        case 23: {
                                            {
                                                let step_95 = 0;
                                                const s_96 = this.nodeToStatement(e);
                                                if (step_95 == 0 && s_96 != null) { step_95 = 1 };
                                                if (step_95 == 1) { this.project.globalVars.push(s_96) };
                                            }
                                        } break;

                                        case 24: {
                                            {
                                                const vars_97 = temp_93[2];
                                                for (const v of $toIterator(vars_97)) {
                                                    let step_98 = 0;
                                                    const s_99 = this.nodeToStatement(v);
                                                    if (step_98 == 0 && s_99 != null) { step_98 = 1 };
                                                    if (step_98 == 1) { this.project.globalVars.push(s_99) };
                                                };
                                            }
                                        } break;

                                        default:
                                        this.fillStatement(e, path_91)
                                        };
                                    };
                                    this.popScope();
                                };
                            }
                        } break;

                        default:
                        {
                            const statement = this.fillStatement(e, null);
                            {
                                const temp_100 = statement;
                                switch (temp_100 && temp_100[1]) {
                                case null: case undefined: {
                                    {
                                    }
                                } break;

                                case 1: {
                                    {
                                        const el_101 = temp_100[2];
                                        if (el_101.length > 0) { initial.push(statement) };
                                    }
                                } break;

                                default:
                                initial.push(statement)
                                };
                            };
                        }
                        };
                    };
                };
                this.popScope();
                if (initial.length > 0) { init.push((["Block",1,initial])) };
            };
            this.project.init.push((["Block",1,init]));
            if (this.project.init.length > 1) { throw 'too many inits' };
            this.project.package = this.package;
            return this.project;
        } };
        nodeToExpression(e) { {
            if (e == null) { return null };
            {
                const temp_102 = e;
                switch (temp_102 && temp_102[1]) {
                case 0: {
                    {
                        const v_103 = temp_102[2];
                        return (["String",0,v_103]);
                    }
                } break;

                case 5: {
                    {
                        const v_104 = temp_102[2];
                        return (["Int",1,v_104]);
                    }
                } break;

                case 6: {
                    {
                        const v_105 = temp_102[2];
                        return (["Float",2,v_105]);
                    }
                } break;

                case 2: {
                    {
                        const v_106 = temp_102[2];
                        {
                            if (v_106) { return NiceExpression.True };
                            return NiceExpression.False;
                        };
                    }
                } break;

                case 7: {
                    return NiceExpression.Null
                } break;

                case 48: {
                    {
                        const t_107 = temp_102[2];
                        {
                            const temp_108 = t_107;
                            switch (temp_108 && temp_108[1]) {
                            case 1: {
                                {
                                    const name_109 = temp_108[2];
                                    return (["Ident",5,name_109]);
                                }
                            } break;
                            };
                        };
                    }
                } break;

                case 1: {
                    {
                        const name_110 = temp_102[2];
                        {
                            let source = this.typer.parents.get(e);
                            {
                                const temp_111 = source;
                                switch (temp_111 && temp_111[1]) {
                                case null: case undefined: {
                                    throw ('Unmapped `' + (e) + '` of name `' + (name_110) + '` ') + JSON.stringify(Project.data.get(e))
                                } break;

                                case 23: {
                                    {
                                        const name_112 = temp_111[2];
                                        {
                                            let step_113 = 0;
                                            const map = this.typer.parents.get(source);
                                            if (step_113 == 0 && map != null) { step_113 = 1 };
                                            if (step_113 == 1) {
                                                const temp_114 = map;
                                                switch (temp_114 && temp_114[1]) {
                                                case 35: {
                                                    {
                                                        const path_115 = temp_114[2];
                                                        return (["Ident",5,this.globalAccessor + name_112]);
                                                    }
                                                } break;

                                                default:
                                                return (["Dot",8,NiceExpression.This,name_112])
                                                };
                                            };
                                        };
                                    }
                                } break;

                                case 21: {
                                    {
                                        const name_116 = temp_111[2];
                                        {
                                            let step_117 = 0;
                                            const map_118 = this.typer.parents.get(source);
                                            if (step_117 == 0 && map_118 != null) { step_117 = 1 };
                                            if (step_117 == 1) {
                                                const temp_119 = map_118;
                                                switch (temp_119 && temp_119[1]) {
                                                case 35: {
                                                    {
                                                        const path_120 = temp_119[2];
                                                        return (["Ident",5,this.globalAccessor + name_116]);
                                                    }
                                                } break;

                                                default:
                                                return (["Dot",8,NiceExpression.This,name_116])
                                                };
                                            };
                                        };
                                    }
                                } break;

                                case 43: {
                                    {
                                        const f_121 = temp_111[2];
                                        {
                                            const staticSource = this.typer.parents.get(source);
                                            {
                                                const temp_122 = staticSource;
                                                switch (temp_122 && temp_122[1]) {
                                                case 25: {
                                                    {
                                                        const t_123 = temp_122[2];
                                                        return (["Dot",8,(["Ident",5,DataHelper.extractTypeName(t_123)]),this.getClassDotField(staticSource, name_110)]);
                                                    }
                                                } break;

                                                case 37: {
                                                    {
                                                        const t_124 = temp_122[2];
                                                        return (["Dot",8,(["Ident",5,DataHelper.extractTypeName(t_124)]),name_110]);
                                                    }
                                                } break;

                                                default:
                                                throw ('staticSource is ' + (staticSource) + ' for ' + (name_110) + '')
                                                };
                                            };
                                        };
                                    }
                                } break;
                                };
                            };
                            return (["Ident",5,((this.parentNames.get(source)) || (name_110))]);
                        };
                    }
                } break;

                case 28: {
                    {
                        const expr_125 = temp_102[2];
                        const name_126 = temp_102[3];
                        {
                            const parent = this.typer.parents.get(expr_125);
                            const hasNoSideEffects = (expr_127) => { return true };
                            if (name_126 == 'length') { {
                                const temp_128 = expr_125;
                                switch (temp_128 && temp_128[1]) {
                                case 31: {
                                    {
                                        const el_129 = temp_128[2];
                                        return (["Int",1,el_129.length]);
                                    }
                                } break;

                                case 0: {
                                    {
                                        const s_130 = temp_128[2];
                                        return (["Int",1,s_130.length]);
                                    }
                                } break;

                                case 1: {
                                    {
                                        const name_131 = temp_128[2];
                                        {
                                            const temp_132 = parent;
                                            switch (temp_132 && temp_132[1]) {
                                            case 23: {
                                                {
                                                    const name_133 = temp_132[2];
                                                    const t_134 = temp_132[3];
                                                    const expr_135 = temp_132[4];
                                                    const const_136 = temp_132[5];
                                                    if (const_136) {
                                                        const temp_137 = expr_135;
                                                        switch (temp_137 && temp_137[1]) {
                                                        case 0: {
                                                            {
                                                                const s_138 = temp_137[2];
                                                                return (["Int",1,s_138.length]);
                                                            }
                                                        } break;
                                                        };
                                                    };
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;
                                };
                            } };
                            {
                                const temp_139 = parent;
                                switch (temp_139 && temp_139[1]) {
                                case 37: {
                                    {
                                        const t_140 = temp_139[2];
                                        const fields_141 = temp_139[3];
                                        const valuesType_142 = temp_139[4];
                                        {
                                            {
                                                let step_143 = 0;
                                                const temp_144 = !this.nativeEnums;
                                                let vt = null;
                                                if (step_143 == 0 && temp_144 != false) {
                                                    vt = valuesType_142;
                                                    step_143 = 1;
                                                };
                                                let tag = null;
                                                if (step_143 == 1 && vt != null) {
                                                    tag = this.getTag(parent, name_126);
                                                    step_143 = 2;
                                                };
                                                if (step_143 == 2 && tag != null) { step_143 = 3 };
                                                if (step_143 == 3) { return tag };
                                            };
                                            return (["Dot",8,this.nodeToExpression(expr_125),((this.getClassDotField(parent, name_126)) || (name_126))]);
                                        };
                                    }
                                } break;

                                case 25: {
                                    return (["Dot",8,this.nodeToExpression(expr_125),((this.getClassDotField(parent, name_126)) || (name_126))])
                                } break;
                                };
                            };
                            {
                                let step_145 = 0;
                                const type = this.typer.types.get(expr_125);
                                if (step_145 == 0 && type != null) { step_145 = 1 };
                                if (step_145 == 1) {
                                    const temp_146 = type;
                                    switch (temp_146 && temp_146[1]) {
                                    case 6: {
                                        {
                                            const type_147 = temp_146[2];
                                            {
                                                const renamed = type_147.fieldRenames[type_147.fieldNames.indexOf(name_126)];
                                                {
                                                    let step_148 = 0;
                                                    const rename = renamed;
                                                    if (step_148 == 0 && rename != null) { step_148 = 1 };
                                                    if (step_148 == 1) { return (["Dot",8,this.nodeToExpression(expr_125),rename]) };
                                                };
                                            };
                                        }
                                    } break;
                                    };
                                };
                            };
                            return (["Dot",8,this.nodeToExpression(expr_125),name_126]);
                        };
                    }
                } break;

                case 29: {
                    {
                        const expr_149 = temp_102[2];
                        const name_150 = temp_102[3];
                        {
                            const parent_151 = this.typer.parents.get(expr_149);
                            {
                                const temp_152 = parent_151;
                                switch (temp_152 && temp_152[1]) {
                                case 37: {
                                    {
                                        const t_153 = temp_152[2];
                                        const fields_154 = temp_152[3];
                                        const valuesType_155 = temp_152[4];
                                        {
                                            {
                                                let step_156 = 0;
                                                const temp_157 = !this.nativeEnums;
                                                let vt_158 = null;
                                                if (step_156 == 0 && temp_157 != false) {
                                                    vt_158 = valuesType_155;
                                                    step_156 = 1;
                                                };
                                                let tag_159 = null;
                                                if (step_156 == 1 && vt_158 != null) {
                                                    tag_159 = this.getTag(parent_151, name_150);
                                                    step_156 = 2;
                                                };
                                                if (step_156 == 2 && tag_159 != null) { step_156 = 3 };
                                                if (step_156 == 3) { return tag_159 };
                                            };
                                            return (["Dot",8,this.nodeToExpression(expr_149),((this.getClassDotField(parent_151, name_150)) || (name_150))]);
                                        };
                                    }
                                } break;

                                case 25: {
                                    return (["Dot",8,this.nodeToExpression(expr_149),((this.getClassDotField(parent_151, name_150)) || (name_150))])
                                } break;
                                };
                            };
                            return (["Dot",8,this.nodeToExpression(expr_149),name_150]);
                        };
                    }
                } break;

                case 12: {
                    {
                        const e_160 = temp_102[2];
                        const args = temp_102[3];
                        const argNames = temp_102[4];
                        {
                            if (args.length == 1) {
                                const temp_161 = e_160;
                                switch (temp_161 && temp_161[1]) {
                                case 28: {
                                    {
                                        const expr_162 = temp_161[2];
                                        const name_163 = temp_161[3];
                                        if (name_163 == 'charCodeAt') {
                                            const temp_164 = expr_162;
                                            switch (temp_164 && temp_164[1]) {
                                            case 0: {
                                                {
                                                    const s_165 = temp_164[2];
                                                    if (s_165.indexOf('\\') == -1) {
                                                        const temp_166 = args[0];
                                                        switch (temp_166 && temp_166[1]) {
                                                        case 5: {
                                                            {
                                                                const v_167 = temp_166[2];
                                                                {
                                                                    const i = parseInt(v_167);
                                                                    if ((i < s_165.length) && (i > -1)) { return (["Int",1,s_165.charCodeAt(i)]) };
                                                                };
                                                            }
                                                        } break;
                                                        };
                                                    };
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;
                                };
                            };
                            const a_168 = [];
                            for (const arg of $toIterator(args)) {
                                a_168.push(this.nodeToExpression(arg));
                            };
                            if (!this.nativeEnums) {
                                const temp_169 = e_160;
                                switch (temp_169 && temp_169[1]) {
                                case 29: {
                                    {
                                        const expr_170 = temp_169[2];
                                        const name_171 = temp_169[3];
                                        {
                                            const parent_172 = this.typer.parents.get(expr_170);
                                            {
                                                const temp_173 = parent_172;
                                                switch (temp_173 && temp_173[1]) {
                                                case 37: {
                                                    {
                                                        const t_174 = temp_173[2];
                                                        const fields_175 = temp_173[3];
                                                        const valuesType_176 = temp_173[4];
                                                        {
                                                            let step_177 = 0;
                                                            const tag_178 = this.getTag(parent_172, name_171);
                                                            if (step_177 == 0 && tag_178 != null) { step_177 = 1 };
                                                            if (step_177 == 1) { return (["Enum",24,DataHelper.extractTypeName(t_174),name_171,tag_178,a_168]) };
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                        };
                                    }
                                } break;
                                };
                            };
                            const atts = Project.mapAttributes.get(this.typer.parents.get(e_160));
                            const infix = this.getAtt(atts, 'infix');
                            if (infix != null) {
                                const temp_179 = infix.values[0];
                                switch (temp_179 && temp_179[1]) {
                                case 0: {
                                    {
                                        const s_180 = temp_179[2];
                                        return (["NativeOperator",23,0,a_168,s_180]);
                                    }
                                } break;

                                default:
                                throw '@infix takes string as argument'
                                };
                            };
                            const operator = this.getAtt(atts, 'operator');
                            if (operator != null) {
                                const temp_181 = operator.values[0];
                                switch (temp_181 && temp_181[1]) {
                                case 0: {
                                    {
                                        const s_182 = temp_181[2];
                                        return (["NativeOperator",23,1,a_168,s_182]);
                                    }
                                } break;

                                default:
                                throw '@operator takes string as argument'
                                };
                            };
                            const v_183 = this.nodeToExpression(e_160);
                            return (["Call",9,v_183,a_168]);
                        };
                    }
                } break;

                case 9: {
                    {
                        const a_184 = temp_102[2];
                        const op = temp_102[3];
                        const b_185 = temp_102[4];
                        {
                            const ea = this.nodeToExpression(a_184);
                            const eb = this.nodeToExpression(b_185);
                            if (op == 111) {
                                const temp_186 = ea;
                                switch (temp_186 && temp_186[1]) {
                                case 0: {
                                    {
                                        const sa = temp_186[2];
                                        {
                                            const temp_187 = eb;
                                            switch (temp_187 && temp_187[1]) {
                                            case 0: {
                                                {
                                                    const sb = temp_187[2];
                                                    return (["String",0,sa + sb]);
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;
                                };
                            };
                            return (["Binop",11,ea,op,eb]);
                        };
                    }
                } break;

                case 30: {
                    {
                        const path_188 = temp_102[2];
                        const t_189 = temp_102[3];
                        const args_190 = temp_102[4];
                        const fields_191 = temp_102[5];
                        const el_192 = temp_102[6];
                        {
                            const v_193 = (["Ident",5,DataHelper.extractTypeName(t_189)]);
                            const a_194 = [];
                            for (const arg of $toIterator(args_190)) {
                                a_194.push(this.nodeToExpression(arg));
                            };
                            return (["New",10,v_193,a_194]);
                        };
                    }
                } break;

                case 21: {
                    {
                        const name_195 = temp_102[2];
                        const expr_196 = temp_102[3];
                        const vars_197 = temp_102[4];
                        const rettype_198 = temp_102[5];
                        {
                            const a_199 = [];
                            const defaults = [];
                            const types = [];
                            for (const arg of $toIterator(vars_197)) {
                                const temp_200 = arg;
                                switch (temp_200 && temp_200[1]) {
                                case 23: {
                                    {
                                        const name_201 = temp_200[2];
                                        const t_202 = temp_200[3];
                                        const expr_203 = temp_200[4];
                                        const const_204 = temp_200[5];
                                        {
                                            a_199.push(this.unique(name_201, arg));
                                            types.push(t_202);
                                            if (expr_203 != null) { defaults.push(this.nodeToExpression(expr_203)) } else defaults.push(null);
                                        };
                                    }
                                } break;
                                };
                            };
                            return (["Function",12,name_195 != (null)? (this.unique(name_195, e)) : null,this.nodeToStatement(expr_196),a_199,defaults,types,rettype_198]);
                        };
                    }
                } break;

                case 22: {
                    {
                        const expr_205 = temp_102[2];
                        const vars_206 = temp_102[3];
                        const rettype_207 = temp_102[4];
                        {
                            const a_208 = [];
                            const defaults_209 = [];
                            const types_210 = [];
                            for (const arg of $toIterator(vars_206)) {
                                const temp_211 = arg;
                                switch (temp_211 && temp_211[1]) {
                                case 23: {
                                    {
                                        const name_212 = temp_211[2];
                                        const t_213 = temp_211[3];
                                        const expr_214 = temp_211[4];
                                        const const_215 = temp_211[5];
                                        {
                                            a_208.push(this.unique(name_212, arg));
                                            types_210.push(t_213);
                                            if (expr_214 != null) { defaults_209.push(this.nodeToExpression(expr_214)) } else defaults_209.push(null);
                                        };
                                    }
                                } break;
                                };
                            };
                            return (["Arrow",13,this.nodeToExpression(expr_205),a_208,defaults_209,types_210,rettype_207]);
                        };
                    }
                } break;

                case 11: {
                    {
                        const el_216 = temp_102[2];
                        {
                            const block = [];
                            let i_217 = 0;
                            while (i_217 < el_216.length - 1) {
                                block.push(this.nodeToStatement(el_216[i_217]));
                                i_217++;
                            };
                            block.push((["Return",8,this.nodeToExpression(el_216[el_216.length - 1])]));
                            return (["Call",9,(["Parenthesis",14,(["Function",12,null,(["Block",1,block]),[]])]),[]]);
                        };
                    }
                } break;

                case 36: {
                    {
                        const names = temp_102[2];
                        const el_218 = temp_102[3];
                        {
                            const els = [];
                            for (const e of $toIterator(el_218)) {
                                els.push(this.nodeToExpression(e));
                            };
                            return (["Object",15,names,els]);
                        };
                    }
                } break;

                case 14: {
                    {
                        const inner = temp_102[2];
                        {
                            const unwrapNestedParens = (inner_219) => {
                                const temp_220 = inner_219;
                                switch (temp_220 && temp_220[1]) {
                                case 14: {
                                    {
                                        const i_221 = temp_220[2];
                                        return unwrapNestedParens(i_221);
                                    }
                                } break;

                                default:
                                return inner_219
                                };
                            };
                            const value_222 = unwrapNestedParens(inner);
                            return (["Parenthesis",14,this.nodeToExpression(value_222)]);
                        };
                    }
                } break;

                case 31: {
                    {
                        const el_223 = temp_102[2];
                        {
                            if (el_223.length == 1) {
                                const temp_224 = el_223[0];
                                switch (temp_224 && temp_224[1]) {
                                case 46: {
                                    {
                                        const name_225 = temp_224[2];
                                        const over = temp_224[3];
                                        const by = temp_224[4];
                                        {
                                            const block_226 = [];
                                            const result = this.unique('result');
                                            block_226.push((["Const",6,result,(["Array",16,[]])]));
                                            const value_227 = this.unique('value');
                                            block_226.push((["Const",6,value_227,this.nodeToExpression(over)]));
                                            const push = (["Call",2,(["Dot",8,(["Ident",5,result]),'push']),[this.nodeToExpression(by)]]);
                                            const fillLoop = () => {
                                                {
                                                    const temp_228 = over;
                                                    switch (temp_228 && temp_228[1]) {
                                                    case 5: {
                                                        {
                                                            const s_229 = temp_228[2];
                                                            {
                                                                const i_230 = name_225;
                                                                block_226.push((["Const",6,i_230,(["Int",1,-1])]));
                                                                block_226.push((["While",16,(["Binop",11,(["Parenthesis",14,(["Binop",11,(["Ident",5,i_230]),111,(["Int",1,1])])]),99,(["Ident",5,value_227])]),(["Block",1,[(["Increment",17,(["Ident",5,i_230])]), push]]),true]));
                                                                return;
                                                            };
                                                        }
                                                    } break;
                                                    };
                                                };
                                                block_226.push((["For",15,name_225,(["Ident",5,value_227]),push]));
                                            };
                                            fillLoop();
                                            block_226.push((["Return",8,(["Ident",5,result])]));
                                            return (["Call",9,(["Parenthesis",14,(["Function",12,null,(["Block",1,block_226]),[]])]),[]]);
                                        };
                                    }
                                } break;
                                };
                            };
                            const els_231 = [];
                            for (const e of $toIterator(el_223)) els_231.push(this.nodeToExpression(e));
                            return (["Array",16,els_231]);
                        };
                    }
                } break;

                case 47: {
                    {
                        const nullable = temp_102[2];
                        const otherwise = temp_102[3];
                        return (["Elvis",19,this.nodeToExpression(nullable),this.nodeToExpression(otherwise)]);
                    }
                } break;

                case 19: {
                    {
                        const op_232 = temp_102[2];
                        const postfix = temp_102[3];
                        const e_233 = temp_102[4];
                        return (["Unop",18,op_232,postfix,this.nodeToExpression(e_233)]);
                    }
                } break;

                case 3: {
                    return NiceExpression.This
                } break;

                case 32: {
                    {
                        const keys = temp_102[2];
                        const values = temp_102[3];
                        {
                            const k_234 = [];
                            const v_235 = [];
                            for (const key of $toIterator(keys)) k_234.push(this.nodeToExpression(key));
                            for (const value of $toIterator(values)) v_235.push(this.nodeToExpression(value));
                            return (["Map",17,k_234,v_235]);
                        };
                    }
                } break;

                case 10: {
                    {
                        const a_236 = temp_102[2];
                        const op_237 = temp_102[3];
                        const b_238 = temp_102[4];
                        return (["Assignop",22,this.nodeToExpression(a_236),op_237,this.nodeToExpression(b_238)]);
                    }
                } break;

                case 13: {
                    {
                        const econd = temp_102[2];
                        const eif = temp_102[3];
                        const eelse = temp_102[4];
                        {
                            let binds = false;
                            for (const cond of $toIterator(econd)) {
                                const temp_239 = cond;
                                switch (temp_239 && temp_239[1]) {
                                case 23: {
                                    binds = true
                                } break;
                                };
                            };
                            if (!binds && econd.length == 1) { return (["If",20,this.nodeToExpression(econd[0]),this.nodeToExpression(eif),this.nodeToExpression(eelse)]) };
                            if (!binds) {
                                let parens = (["Parenthesis",14,this.nodeToExpression(econd[0])]);
                                let i_240 = 1;
                                while (i_240 < econd.length) {
                                    parens = (["Binop",11,parens,92,(["Parenthesis",14,this.nodeToExpression(econd[i_240])])]);
                                    i_240++;
                                };
                                return (["If",20,parens,this.nodeToExpression(eif),this.nodeToExpression(eelse)]);
                            };
                            return (["If",20,this.nodeToExpression(econd[0]),this.nodeToExpression(eif),this.nodeToExpression(eelse)]);
                        };
                    }
                } break;

                case 33: {
                    {
                        const expr_241 = temp_102[2];
                        const index_242 = temp_102[3];
                        return (["Index",21,this.nodeToExpression(expr_241),this.nodeToExpression(index_242)]);
                    }
                } break;

                default:
                console.error('Unknown node type for expression:', e, Project.data.get(e))
                };
            };
            return null;
        } };
        nodeToStatement(e_243) { {
            if (e_243 == null) { return null };
            {
                const temp_244 = e_243;
                switch (temp_244 && temp_244[1]) {
                case 11: {
                    {
                        const el_245 = temp_244[2];
                        {
                            let els_246 = [];
                            for (const e of $toIterator(el_245)) {
                                const statement_247 = this.nodeToStatement(e);
                                if (statement_247 != null) { els_246.push(statement_247) };
                            };
                            return (["Block",1,els_246]);
                        };
                    }
                } break;

                case 37: {
                    {
                        const t_248 = temp_244[2];
                        const fields_249 = temp_244[3];
                        const valuesType_250 = temp_244[4];
                        {
                            this.renameClassFields(fields_249);
                            const isComplexEnum = valuesType_250 == null;
                            if (isComplexEnum) {
                                const type_251 = new NiceComplexEnum();
                                type_251.name = DataHelper.extractTypeName(t_248);
                                const names_252 = [];
                                const constructors = [];
                                const types_253 = [];
                                for (const f of $toIterator(fields_249)) {
                                    const temp_254 = f;
                                    switch (temp_254 && temp_254[1]) {
                                    case 48: {
                                        {
                                            const t_255 = temp_254[2];
                                            {
                                                const temp_256 = t_255;
                                                switch (temp_256 && temp_256[1]) {
                                                case 1: {
                                                    {
                                                        const name_257 = temp_256[2];
                                                        {
                                                            names_252.push(name_257);
                                                            constructors.push(null);
                                                            types_253.push(null);
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                        }
                                    } break;

                                    case 12: {
                                        {
                                            const e_258 = temp_254[2];
                                            const args_259 = temp_254[3];
                                            const argNames_260 = temp_254[4];
                                            {
                                                {
                                                    const temp_261 = e_258;
                                                    switch (temp_261 && temp_261[1]) {
                                                    case 48: {
                                                        {
                                                            const t_262 = temp_261[2];
                                                            {
                                                                const temp_263 = t_262;
                                                                switch (temp_263 && temp_263[1]) {
                                                                case 1: {
                                                                    {
                                                                        const name_264 = temp_263[2];
                                                                        names_252.push(name_264);
                                                                    }
                                                                } break;
                                                                };
                                                            };
                                                        }
                                                    } break;
                                                    };
                                                };
                                                constructors.push((() => {
                                                    const result_265 = [];
                                                    const value_266 = argNames_260;
                                                    for (const arg of $toIterator(value_266)) result_265.push(this.unique(arg));
                                                    return result_265;
                                                })());
                                                types_253.push((() => {
                                                    const result_267 = [];
                                                    const value_268 = args_259;
                                                    for (const arg of $toIterator(value_268)) result_267.push(this.unique(arg));
                                                    return result_267;
                                                })());
                                            };
                                        }
                                    } break;

                                    case 43: {
                                        {
                                            const field = temp_254[2];
                                            {
                                                const temp_269 = field;
                                                switch (temp_269 && temp_269[1]) {
                                                case 23: {
                                                    {
                                                        const name_270 = temp_269[2];
                                                        const t_271 = temp_269[3];
                                                        const expr_272 = temp_269[4];
                                                        const const_273 = temp_269[5];
                                                        {
                                                            const uname = ((this.parentNames.get(field)) || (this.unique(name_270, field)));
                                                            if (const_273) { type_251.staticVars.push((["Const",6,uname,this.nodeToExpression(expr_272)])) } else type_251.staticVars.push((["Var",5,uname,this.nodeToExpression(expr_272)]));
                                                        };
                                                    }
                                                } break;

                                                case 21: {
                                                    {
                                                        const name_274 = temp_269[2];
                                                        const expr_275 = temp_269[3];
                                                        const vars_276 = temp_269[4];
                                                        const rettype_277 = temp_269[5];
                                                        {
                                                            const uname_278 = ((this.parentNames.get(field)) || (this.unique(name_274, field)));
                                                            const a_279 = [];
                                                            const defaults_280 = [];
                                                            const types_281 = [];
                                                            for (const arg of $toIterator(vars_276)) {
                                                                const temp_282 = arg;
                                                                switch (temp_282 && temp_282[1]) {
                                                                case 23: {
                                                                    {
                                                                        const name_283 = temp_282[2];
                                                                        const t_284 = temp_282[3];
                                                                        const expr_285 = temp_282[4];
                                                                        const const_286 = temp_282[5];
                                                                        {
                                                                            a_279.push(this.unique(name_283, arg));
                                                                            types_281.push(t_284);
                                                                            if (expr_285 != null) { defaults_280.push(this.nodeToExpression(expr_285)) } else defaults_280.push(null);
                                                                        };
                                                                    }
                                                                } break;
                                                                };
                                                            };
                                                            type_251.staticMethods.push((["Function",7,uname_278,this.unwrapNestingBlocks(this.nodeToStatement(expr_275)),a_279,defaults_280,types_281,rettype_277]));
                                                        };
                                                    }
                                                } break;

                                                default:
                                                console.error('Unknown complex enum static field kind:', field)
                                                };
                                            };
                                        }
                                    } break;

                                    default:
                                    console.error('Unknown complex enum field kind:', f)
                                    };
                                };
                                type_251.names = names_252;
                                type_251.constructors = constructors;
                                type_251.types = types_253;
                                this.project.enumsComplex.push(type_251);
                                return null;
                            } else {
                                const type_287 = new NiceSimpleEnum();
                                type_287.name = DataHelper.extractTypeName(t_248);
                                const names_288 = [];
                                const values_289 = [];
                                for (const f of $toIterator(fields_249)) {
                                    const temp_290 = f;
                                    switch (temp_290 && temp_290[1]) {
                                    case 9: {
                                        {
                                            const a_291 = temp_290[2];
                                            const op_292 = temp_290[3];
                                            const b_293 = temp_290[4];
                                            {
                                                {
                                                    const temp_294 = a_291;
                                                    switch (temp_294 && temp_294[1]) {
                                                    case 48: {
                                                        {
                                                            const t_295 = temp_294[2];
                                                            {
                                                                const temp_296 = t_295;
                                                                switch (temp_296 && temp_296[1]) {
                                                                case 1: {
                                                                    {
                                                                        const name_297 = temp_296[2];
                                                                        names_288.push(name_297);
                                                                    }
                                                                } break;
                                                                };
                                                            };
                                                        }
                                                    } break;
                                                    };
                                                };
                                                {
                                                    const temp_298 = b_293;
                                                    switch (temp_298 && temp_298[1]) {
                                                    case 0: {
                                                        {
                                                            const s_299 = temp_298[2];
                                                            values_289.push((["String",0,s_299]));
                                                        }
                                                    } break;

                                                    case 5: {
                                                        {
                                                            const s_300 = temp_298[2];
                                                            values_289.push((["Int",1,s_300]));
                                                        }
                                                    } break;

                                                    default:
                                                    console.error('Unknown node field value kind:', b_293)
                                                    };
                                                };
                                            };
                                        }
                                    } break;

                                    case 43: {
                                        {
                                            const field_301 = temp_290[2];
                                            {
                                                const temp_302 = field_301;
                                                switch (temp_302 && temp_302[1]) {
                                                case 23: {
                                                    {
                                                        const name_303 = temp_302[2];
                                                        const t_304 = temp_302[3];
                                                        const expr_305 = temp_302[4];
                                                        const const_306 = temp_302[5];
                                                        {
                                                            const uname_307 = ((this.parentNames.get(field_301)) || (this.unique(name_303, field_301)));
                                                            if (const_306) { type_287.staticVars.push((["Const",6,uname_307,this.nodeToExpression(expr_305)])) } else type_287.staticVars.push((["Var",5,uname_307,this.nodeToExpression(expr_305)]));
                                                        };
                                                    }
                                                } break;

                                                case 21: {
                                                    {
                                                        const name_308 = temp_302[2];
                                                        const expr_309 = temp_302[3];
                                                        const vars_310 = temp_302[4];
                                                        const rettype_311 = temp_302[5];
                                                        {
                                                            const uname_312 = ((this.parentNames.get(field_301)) || (this.unique(name_308, field_301)));
                                                            const a_313 = [];
                                                            const defaults_314 = [];
                                                            const types_315 = [];
                                                            for (const arg of $toIterator(vars_310)) {
                                                                const temp_316 = arg;
                                                                switch (temp_316 && temp_316[1]) {
                                                                case 23: {
                                                                    {
                                                                        const name_317 = temp_316[2];
                                                                        const t_318 = temp_316[3];
                                                                        const expr_319 = temp_316[4];
                                                                        const const_320 = temp_316[5];
                                                                        {
                                                                            a_313.push(this.unique(name_317, arg));
                                                                            types_315.push(t_318);
                                                                            if (expr_319 != null) { defaults_314.push(this.nodeToExpression(expr_319)) } else defaults_314.push(null);
                                                                        };
                                                                    }
                                                                } break;
                                                                };
                                                            };
                                                            type_287.staticMethods.push((["Function",7,uname_312,this.unwrapNestingBlocks(this.nodeToStatement(expr_309)),a_313,defaults_314,types_315,rettype_311]));
                                                        };
                                                    }
                                                } break;

                                                default:
                                                console.error('Unknown simple enum static field kind:', field_301)
                                                };
                                            };
                                        }
                                    } break;

                                    default:
                                    console.error('Unknown simple enum field kind:', f)
                                    };
                                };
                                type_287.names = names_288;
                                type_287.values = values_289;
                                this.project.enumsSimple.push(type_287);
                                return null;
                            };
                        };
                    }
                } break;

                case 25: {
                    {
                        const t_321 = temp_244[2];
                        const ext_322 = temp_244[3];
                        const impl_323 = temp_244[4];
                        const fields_324 = temp_244[5];
                        const external_325 = temp_244[6];
                        {
                            this.renameClassFields(fields_324);
                            const name_326 = DataHelper.extractTypeName(t_321);
                            const type_327 = new NiceClass();
                            type_327.name = name_326;
                            type_327.external = external_325;
                            for (const implement of $toIterator(impl_323)) {
                                const temp_328 = implement;
                                switch (temp_328 && temp_328[1]) {
                                case 1: {
                                    {
                                        const name_329 = temp_328[2];
                                        type_327.implement = name_329;
                                    }
                                } break;

                                case 2: {
                                    {
                                        const name_330 = temp_328[2];
                                        const params = temp_328[3];
                                        {
                                            type_327.implement = name_330;
                                            type_327.implementParams = (() => {
                                                const result_331 = [];
                                                const value_332 = params;
                                                for (const param of $toIterator(value_332)) result_331.push(DataHelper.extractTypeName(param));
                                                return result_331;
                                            })();
                                        };
                                    }
                                } break;
                                };
                            };
                            {
                                const temp_333 = t_321;
                                switch (temp_333 && temp_333[1]) {
                                case 1: {
                                    {
                                        const name_334 = temp_333[2];
                                        {
                                        };
                                    }
                                } break;

                                case 2: {
                                    {
                                        const name_335 = temp_333[2];
                                        const params_336 = temp_333[3];
                                        type_327.genericParams = (() => {
                                            const result_337 = [];
                                            const value_338 = params_336;
                                            for (const param of $toIterator(value_338)) result_337.push(DataHelper.extractTypeName(param));
                                            return result_337;
                                        })();
                                    }
                                } break;
                                };
                            };
                            const atts_339 = Project.mapAttributes.get(e_243);
                            const require_340 = this.getAtt(atts_339, 'require');
                            if (require_340 != null) {
                                const temp_341 = require_340.values[0];
                                switch (temp_341 && temp_341[1]) {
                                case 0: {
                                    {
                                        const s_342 = temp_341[2];
                                        type_327.jsRequire = s_342;
                                    }
                                } break;

                                default:
                                throw '@require takes string as argument'
                                };
                            };
                            const native = this.getAtt(atts_339, 'native');
                            if (native != null) {
                                const temp_343 = native.values[0];
                                switch (temp_343 && temp_343[1]) {
                                case 0: {
                                    {
                                        const s_344 = temp_343[2];
                                        {
                                            type_327.jsNative = s_344;
                                            this.unique(s_344, e_243);
                                        };
                                    }
                                } break;

                                default:
                                throw '@native takes string as argument'
                                };
                            };
                            for (const f of $toIterator(fields_324)) {
                                const temp_345 = f;
                                switch (temp_345 && temp_345[1]) {
                                case 23: {
                                    {
                                        const name_346 = temp_345[2];
                                        const t_347 = temp_345[3];
                                        const expr_348 = temp_345[4];
                                        const const_349 = temp_345[5];
                                        {
                                            const uname_350 = ((this.parentNames.get(f)) || (this.unique(name_346, f)));
                                            if (const_349) { type_327.vars.push((["Const",6,uname_350,this.nodeToExpression(expr_348)])) } else type_327.vars.push((["Var",5,uname_350,this.nodeToExpression(expr_348)]));
                                        };
                                    }
                                } break;

                                case 26: {
                                    {
                                        const field_351 = temp_345[2];
                                        {
                                            const temp_352 = field_351;
                                            switch (temp_352 && temp_352[1]) {
                                            case 23: {
                                                {
                                                    const name_353 = temp_352[2];
                                                    const t_354 = temp_352[3];
                                                    const expr_355 = temp_352[4];
                                                    const const_356 = temp_352[5];
                                                    {
                                                        const uname_357 = ((this.parentNames.get(f)) || (this.unique(name_353, f)));
                                                        if (const_356) { type_327.vars.push((["Const",6,uname_357,this.nodeToExpression(expr_355),t_354])) } else type_327.vars.push((["Var",5,uname_357,this.nodeToExpression(expr_355),t_354]));
                                                        type_327.property.push(uname_357);
                                                    };
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;

                                case 21: {
                                    {
                                        const name_358 = temp_345[2];
                                        const expr_359 = temp_345[3];
                                        const vars_360 = temp_345[4];
                                        const rettype_361 = temp_345[5];
                                        {
                                            const uname_362 = ((name_358 == 'new'))? ('new') : (((this.parentNames.get(f)) || (this.unique(name_358, f))));
                                            const a_363 = [];
                                            const defaults_364 = [];
                                            const types_365 = [];
                                            for (const arg of $toIterator(vars_360)) {
                                                const temp_366 = arg;
                                                switch (temp_366 && temp_366[1]) {
                                                case 23: {
                                                    {
                                                        const name_367 = temp_366[2];
                                                        const t_368 = temp_366[3];
                                                        const expr_369 = temp_366[4];
                                                        const const_370 = temp_366[5];
                                                        {
                                                            a_363.push(this.unique(name_367, arg));
                                                            types_365.push(t_368);
                                                            if (expr_369 != null) { defaults_364.push(this.nodeToExpression(expr_369)) } else defaults_364.push(null);
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                            type_327.methods.push((["Function",7,uname_362,this.unwrapNestingBlocks(this.nodeToStatement(expr_359)),a_363,defaults_364,types_365,rettype_361]));
                                        };
                                    }
                                } break;

                                case 43: {
                                    {
                                        const field_371 = temp_345[2];
                                        {
                                            const temp_372 = field_371;
                                            switch (temp_372 && temp_372[1]) {
                                            case 23: {
                                                {
                                                    const name_373 = temp_372[2];
                                                    const t_374 = temp_372[3];
                                                    const expr_375 = temp_372[4];
                                                    const const_376 = temp_372[5];
                                                    {
                                                        const uname_377 = ((this.parentNames.get(field_371)) || (this.unique(name_373, field_371)));
                                                        if (const_376) { type_327.staticVars.push((["Const",6,uname_377,this.nodeToExpression(expr_375)])) } else type_327.staticVars.push((["Var",5,uname_377,this.nodeToExpression(expr_375)]));
                                                    };
                                                }
                                            } break;

                                            case 21: {
                                                {
                                                    const name_378 = temp_372[2];
                                                    const expr_379 = temp_372[3];
                                                    const vars_380 = temp_372[4];
                                                    const rettype_381 = temp_372[5];
                                                    {
                                                        const uname_382 = ((this.parentNames.get(field_371)) || (this.unique(name_378, field_371)));
                                                        const a_383 = [];
                                                        const defaults_384 = [];
                                                        const types_385 = [];
                                                        for (const arg of $toIterator(vars_380)) {
                                                            const temp_386 = arg;
                                                            switch (temp_386 && temp_386[1]) {
                                                            case 23: {
                                                                {
                                                                    const name_387 = temp_386[2];
                                                                    const t_388 = temp_386[3];
                                                                    const expr_389 = temp_386[4];
                                                                    const const_390 = temp_386[5];
                                                                    {
                                                                        a_383.push(this.unique(name_387, arg));
                                                                        types_385.push(t_388);
                                                                        if (expr_389 != null) { defaults_384.push(this.nodeToExpression(expr_389)) } else defaults_384.push(null);
                                                                    };
                                                                }
                                                            } break;
                                                            };
                                                        };
                                                        type_327.staticMethods.push((["Function",7,uname_382,this.unwrapNestingBlocks(this.nodeToStatement(expr_379)),a_383,defaults_384,types_385,rettype_381]));
                                                    };
                                                }
                                            } break;

                                            default:
                                            console.error('Unknown class static field kind:', field_371)
                                            };
                                        };
                                    }
                                } break;

                                default:
                                console.error('Unknown class field kind:', f)
                                };
                            };
                            this.project.classes.push(type_327);
                            return null;
                        };
                    }
                } break;

                case 8: {
                    {
                    }
                } break;

                case 30: {
                    {
                        const path_391 = temp_244[2];
                        const t_392 = temp_244[3];
                        const args_393 = temp_244[4];
                        const fields_394 = temp_244[5];
                        const values_395 = temp_244[6];
                        {
                            const v_396 = (["Ident",5,DataHelper.extractTypeName(t_392)]);
                            const a_397 = [];
                            for (const arg of $toIterator(args_393)) {
                                a_397.push(this.nodeToExpression(arg));
                            };
                            const result_398 = (["New",3,v_396,a_397]);
                            if (fields_394.length > 0) {
                                const temp_399 = this.unique('temp');
                                const block_400 = [(["Const",6,temp_399,(["New",10,v_396,a_397])])];
                                {
                                    let field_401 = 0;
                                    let it = 0;
                                    let at = fields_394.length;
                                    while (it < at) {
                                        field_401 = it;
                                        it++;
                                        block_400.push((["Assign",12,(["Dot",8,(["Ident",5,temp_399]),fields_394[field_401]]),this.nodeToExpression(values_395[field_401])]));
                                    };
                                };
                                return (["Block",1,block_400]);
                            };
                            return result_398;
                        };
                    }
                } break;

                case 12: {
                    {
                        const e_402 = temp_244[2];
                        const args_403 = temp_244[3];
                        const argNames_404 = temp_244[4];
                        {
                            const v_405 = this.nodeToExpression(e_402);
                            const a_406 = [];
                            for (const arg of $toIterator(args_403)) {
                                a_406.push(this.nodeToExpression(arg));
                            };
                            return (["Call",2,v_405,a_406]);
                        };
                    }
                } break;

                case 23: {
                    {
                        const name_407 = temp_244[2];
                        const t_408 = temp_244[3];
                        const expr_409 = temp_244[4];
                        const const_410 = temp_244[5];
                        const external_411 = temp_244[6];
                        {
                            const uname_412 = ((this.parentNames.get(e_243)) || (this.unique(name_407, e_243)));
                            if (external_411) { return null };
                            if (const_410) { return (["Const",6,uname_412,this.nodeToExpression(expr_409),t_408]) };
                            return (["Var",5,uname_412,this.nodeToExpression(expr_409),t_408]);
                        };
                    }
                } break;

                case 21: {
                    {
                        const name_413 = temp_244[2];
                        const expr_414 = temp_244[3];
                        const vars_415 = temp_244[4];
                        const rettype_416 = temp_244[5];
                        const external_417 = temp_244[6];
                        {
                            const uname_418 = name_413 != (null)? ((((this.parentNames.get(e_243)) || (this.unique(name_413, e_243))))) : null;
                            if (external_417) { return null };
                            let rettype_419 = rettype_416;
                            const a_420 = [];
                            const defaults_421 = [];
                            let types_422 = [];
                            for (const arg of $toIterator(vars_415)) {
                                const temp_423 = arg;
                                switch (temp_423 && temp_423[1]) {
                                case 23: {
                                    {
                                        const name_424 = temp_423[2];
                                        const t_425 = temp_423[3];
                                        const expr_426 = temp_423[4];
                                        const const_427 = temp_423[5];
                                        {
                                            a_420.push(this.unique(name_424, arg));
                                            types_422.push(t_425);
                                            if (expr_426 != null) { defaults_421.push(this.nodeToExpression(expr_426)) } else defaults_421.push(null);
                                        };
                                    }
                                } break;
                                };
                            };
                            if (name_413 == 'new') { return (["Function",7,null,this.unwrapNestingBlocks(this.nodeToStatement(expr_414)),a_420,defaults_421,types_422,rettype_419]) };
                            return (["Function",7,uname_418,this.unwrapNestingBlocks(this.nodeToStatement(expr_414)),a_420,defaults_421,types_422,rettype_419]);
                        };
                    }
                } break;

                case 46: {
                    {
                        const name_428 = temp_244[2];
                        const over_429 = temp_244[3];
                        const by_430 = temp_244[4];
                        const range = temp_244[5];
                        {
                            const data_431 = Project.data.get(over_429);
                            const ov = (Node.stringify)? (Node.stringify(over_429)) : ('' + over_429);
                            const type_432 = ((this.typer.types.get(over_429)) || (this.typer.types.get(this.typer.parents.get(over_429))));
                            if (type_432 == null) { console.log(data_431.fileName, data_431.line, ('for ' + (name_428) + ' over `' + (ov) + '` no type')) } else {
                                const nameOf = (type_432[2].parent)? (DataHelper.nameOf(type_432[2].parent)) : '<undefined>';
                                if (this.typer.types.get(e_243) == null) { console.log(data_431.fileName, data_431.line, ('++++++++++++++++++++++++++++for ' + (name_428) + ' over `' + (ov) + '` type ='), Type.stringify(type_432), ' iterator type =', this.typer.types.get(e_243), nameOf) };
                            };
                            if (range == null) {
                                const temp_433 = over_429;
                                switch (temp_433 && temp_433[1]) {
                                case 5: {
                                    {
                                        const s_434 = temp_433[2];
                                        {
                                            const i_435 = this.unique(name_428, e_243);
                                            const it_436 = this.unique('it');
                                            return (["Block",1,[(["Var",5,i_435,(["Int",1,0])]), (["Var",5,it_436,(["Int",1,0])]), (["While",16,(["Binop",11,(["Ident",5,it_436]),99,(["Int",1,s_434])]),(["Block",1,[(["Assign",12,(["Ident",5,i_435]),(["Ident",5,it_436])]), (["Increment",17,(["Ident",5,it_436])]), this.nodeToStatement(by_430)]]),true])]]);
                                        };
                                    }
                                } break;

                                default:
                                {
                                    let iteratorOverInt = false;
                                    {
                                        const temp_437 = this.typer.types.get(over_429);
                                        switch (temp_437 && temp_437[1]) {
                                        case 6: {
                                            {
                                                const type_438 = temp_437[2];
                                                const generic = temp_437[3];
                                                if ((generic == null || generic.length == 0) && (type_438.name == 'Int')) { iteratorOverInt = true };
                                            }
                                        } break;
                                        };
                                    };
                                    if (iteratorOverInt) {
                                        const i_439 = this.unique(name_428, e_243);
                                        const it_440 = this.unique('it');
                                        const finish = this.unique('at');
                                        return (["Block",1,[(["Var",5,i_439,(["Int",1,0])]), (["Var",5,it_440,(["Int",1,0])]), (["Var",5,finish,this.nodeToExpression(over_429)]), (["While",16,(["Binop",11,(["Ident",5,it_440]),99,(["Ident",5,finish])]),(["Block",1,[(["Assign",12,(["Ident",5,i_439]),(["Ident",5,it_440])]), (["Increment",17,(["Ident",5,it_440])]), this.nodeToStatement(by_430)]]),true])]]);
                                    };
                                }
                                };
                            };
                            {
                                let step_441 = 0;
                                const range_442 = range;
                                if (step_441 == 0 && range_442 != null) { step_441 = 1 };
                                if (step_441 == 1) {
                                    const i_443 = this.unique(name_428, e_243);
                                    const it_444 = this.unique('it');
                                    const finish_445 = this.unique('at');
                                    return (["Block",1,[(["Var",5,i_443,(["Int",1,0])]), (["Var",5,it_444,this.nodeToExpression(over_429)]), (["Var",5,finish_445,this.nodeToExpression(range_442)]), (["While",16,(["Binop",11,(["Ident",5,it_444]),99,(["Ident",5,finish_445])]),(["Block",1,[(["Assign",12,(["Ident",5,i_443]),(["Ident",5,it_444])]), (["Increment",17,(["Ident",5,it_444])]), this.nodeToStatement(by_430)]]),true])]]);
                                };
                            };
                            return (["For",15,name_428,this.nodeToExpression(over_429),this.nodeToStatement(by_430)]);
                        };
                    }
                } break;

                case 15: {
                    {
                        const e_446 = temp_244[2];
                        {
                            if (e_446 == null) { return (["Return",8,null]) };
                            return (["Return",8,this.nodeToExpression(e_446)]);
                        };
                    }
                } break;

                case 28: {
                    {
                        const expr_447 = temp_244[2];
                        const name_448 = temp_244[3];
                        return (["Dot",14,this.nodeToExpression(expr_447),name_448]);
                    }
                } break;

                case 29: {
                    {
                        const expr_449 = temp_244[2];
                        const name_450 = temp_244[3];
                        return (["Dot",14,this.nodeToExpression(expr_449),name_450]);
                    }
                } break;

                case 13: {
                    {
                        const econd_451 = temp_244[2];
                        const eif_452 = temp_244[3];
                        const eelse_453 = temp_244[4];
                        {
                            let binds_454 = false;
                            for (const cond of $toIterator(econd_451)) {
                                const temp_455 = cond;
                                switch (temp_455 && temp_455[1]) {
                                case 23: {
                                    binds_454 = true
                                } break;
                                };
                            };
                            if (!binds_454 && econd_451.length == 1) { return (["If",9,this.nodeToExpression(econd_451[0]),this.nodeToStatement(eif_452),this.nodeToStatement(eelse_453)]) };
                            if (!binds_454) {
                                let parens_456 = (["Parenthesis",14,this.nodeToExpression(econd_451[0])]);
                                let i_457 = 1;
                                while (i_457 < econd_451.length) {
                                    parens_456 = (["Binop",11,parens_456,92,(["Parenthesis",14,this.nodeToExpression(econd_451[i_457])])]);
                                    i_457++;
                                };
                                return (["If",9,parens_456,this.nodeToStatement(eif_452),this.nodeToStatement(eelse_453)]);
                            };
                            const block_458 = [];
                            let current = 0;
                            const step_459 = this.unique('step');
                            block_458.push((["Var",5,step_459,(["Int",1,0])]));
                            let nullable_460 = false;
                            let last = '';
                            {
                                const temp_461 = econd_451[0];
                                switch (temp_461 && temp_461[1]) {
                                case 23: {
                                    {
                                        const name_462 = temp_461[2];
                                        const t_463 = temp_461[3];
                                        const expr_464 = temp_461[4];
                                        const const_465 = temp_461[5];
                                        {
                                            last = this.unique(name_462, econd_451[0]);
                                            nullable_460 = true;
                                            block_458.push((["Const",6,last,this.nodeToExpression(expr_464),t_463]));
                                        };
                                    }
                                } break;

                                default:
                                {
                                    last = this.unique('temp');
                                    block_458.push((["Const",6,last,this.nodeToExpression(econd_451[0])]));
                                }
                                };
                            };
                            while (current < econd_451.length - 1) {
                                const temp_466 = econd_451[current + 1];
                                switch (temp_466 && temp_466[1]) {
                                case 23: {
                                    {
                                        const vname = temp_466[2];
                                        const t_467 = temp_466[3];
                                        const expr_468 = temp_466[4];
                                        const const_469 = temp_466[5];
                                        {
                                            const name_470 = this.unique(vname, econd_451[current + 1]);
                                            block_458.push((["Var",5,name_470,NiceExpression.Null]));
                                            block_458.push((["If",9,(["Binop",11,(["Binop",11,(["Ident",5,step_459]),95,(["Int",1,current + 0])]),92,(["Binop",11,(["Ident",5,last]),103,(nullable_460)? (NiceExpression.Null) : NiceExpression.False])]),(["Block",1,[(["Assign",12,(["Ident",5,name_470]),this.nodeToExpression(expr_468)]), (["Assign",12,(["Ident",5,step_459]),(["Int",1,current + 1])]), null]]),null]));
                                            current++;
                                            last = name_470;
                                            nullable_460 = true;
                                        };
                                    }
                                } break;

                                default:
                                {
                                    const next = this.unique('temp');
                                    block_458.push((["Var",5,next,NiceExpression.Null]));
                                    block_458.push((["If",9,(["Binop",11,(["Binop",11,(["Ident",5,step_459]),95,(["Int",1,current + 0])]),92,(["Binop",11,(["Ident",5,last]),103,(nullable_460)? (NiceExpression.Null) : NiceExpression.False])]),(["Block",1,[(["Assign",12,(["Ident",5,next]),this.nodeToExpression(econd_451[current + 1])]), (["Assign",12,(["Ident",5,step_459]),(["Int",1,current + 1])]), null]]),null]));
                                    current++;
                                    last = next;
                                    nullable_460 = false;
                                }
                                };
                            };
                            block_458.push((["If",9,(["Binop",11,(["Binop",11,(["Ident",5,step_459]),95,(["Int",1,econd_451.length - 1])]),92,(["Binop",11,(["Ident",5,last]),103,NiceExpression.Null])]),(["Assign",12,(["Ident",5,step_459]),(["Int",1,econd_451.length])]),null]));
                            block_458.push((["If",9,(["Binop",11,(["Ident",5,step_459]),95,(["Int",1,econd_451.length])]),this.nodeToStatement(eif_452),this.nodeToStatement(eelse_453)]));
                            return (["Block",1,block_458]);
                        };
                    }
                } break;

                case 27: {
                    {
                        const expr_471 = temp_244[2];
                        const t_472 = temp_244[3];
                        const v_473 = temp_244[4];
                        const catches = temp_244[5];
                        {
                            let tt = [];
                            let vv = [];
                            for (const c of $toIterator(v_473)) vv.push(DataHelper.nameOf(c));
                            let cc = [];
                            for (const c of $toIterator(catches)) cc.push(this.nodeToStatement(c));
                            return (["Try",10,this.nodeToStatement(expr_471),tt,vv,cc]);
                        };
                    }
                } break;

                case 16: {
                    {
                        const value_474 = temp_244[2];
                        return (["Throw",11,this.nodeToExpression(value_474)]);
                    }
                } break;

                case 10: {
                    {
                        const a_475 = temp_244[2];
                        const op_476 = temp_244[3];
                        const b_477 = temp_244[4];
                        return (["Assignop",13,this.nodeToExpression(a_475),op_476,this.nodeToExpression(b_477)]);
                    }
                } break;

                case 9: {
                    {
                        const a_478 = temp_244[2];
                        const op_479 = temp_244[3];
                        const b_480 = temp_244[4];
                        {
                            const temp_481 = op_479;
                            switch (temp_481) {
                            case 91: {
                                return (["Assign",12,this.nodeToExpression(a_478),this.nodeToExpression(b_480)])
                            } break;

                            default:
                            {
                                const sa_482 = this.nodeToStatement(a_478);
                                const sb_483 = this.nodeToStatement(b_480);
                                if ((sa_482 == null) && (sb_483 == null)) { return null };
                                if ((sa_482 == null) || (sb_483 == null)) { return ((sa_482) || (sb_483)) };
                                return (["Statements",0,[sa_482, sb_483]]);
                            }
                            };
                        };
                    }
                } break;

                case 18: {
                    return NiceStatement.Continue
                } break;

                case 17: {
                    return NiceStatement.Break
                } break;

                case 20: {
                    {
                        const econd_484 = temp_244[2];
                        const e_485 = temp_244[3];
                        const pre = temp_244[4];
                        return (["While",16,this.nodeToExpression(econd_484),this.nodeToStatement(e_485),pre]);
                    }
                } break;

                case 19: {
                    {
                        const op_486 = temp_244[2];
                        const postfix_487 = temp_244[3];
                        const e_488 = temp_244[4];
                        {
                            const temp_489 = op_486;
                            switch (temp_489) {
                            case 87: {
                                return (["Increment",17,this.nodeToExpression(e_488)])
                            } break;

                            case 86: {
                                return (["Decrement",18,this.nodeToExpression(e_488)])
                            } break;

                            default:
                            {
                            }
                            };
                        };
                    }
                } break;

                case 14: {
                    {
                        const inner_490 = temp_244[2];
                        {
                            const unwrapNestedParens_491 = (inner_492) => {
                                const temp_493 = inner_492;
                                switch (temp_493 && temp_493[1]) {
                                case 14: {
                                    {
                                        const i_494 = temp_493[2];
                                        return unwrapNestedParens_491(i_494);
                                    }
                                } break;

                                default:
                                return inner_492
                                };
                            };
                            return this.nodeToStatement(unwrapNestedParens_491(inner_490));
                        };
                    }
                } break;

                case 34: {
                    {
                        const exprs = temp_244[2];
                        const conds = temp_244[3];
                        const guards = temp_244[4];
                        const cases = temp_244[5];
                        {
                            if (exprs.length > 1) { console.error('Multiple switch values not supported:', e_243, Project.data.get(e_243)) };
                            const s_495 = [];
                            const c = [];
                            if (this.nativeEnums) {
                                const index_496 = this.nodeToExpression(exprs[0]);
                                {
                                    let i_497 = 0;
                                    let it_498 = 0;
                                    let at_499 = cases.length;
                                    while (it_498 < at_499) {
                                        i_497 = it_498;
                                        it_498++;
                                        {
                                            const toCase = (co) => {
                                                const temp_500 = co;
                                                switch (temp_500 && temp_500[1]) {
                                                case 7: {
                                                    return NiceExpression.Null
                                                } break;

                                                case 42: {
                                                    return NiceExpression.Underscore
                                                } break;

                                                case 0: {
                                                    {
                                                        const v_501 = temp_500[2];
                                                        return (["String",0,v_501]);
                                                    }
                                                } break;

                                                case 5: {
                                                    {
                                                        const v_502 = temp_500[2];
                                                        return (["Int",1,v_502]);
                                                    }
                                                } break;

                                                case 6: {
                                                    {
                                                        const v_503 = temp_500[2];
                                                        return (["Float",2,v_503]);
                                                    }
                                                } break;

                                                case 2: {
                                                    {
                                                        const v_504 = temp_500[2];
                                                        {
                                                            if (v_504) { return NiceExpression.True };
                                                            return NiceExpression.False;
                                                        };
                                                    }
                                                } break;

                                                case 28: {
                                                    {
                                                        const expr_505 = temp_500[2];
                                                        const name_506 = temp_500[3];
                                                        return (["Dot",8,this.nodeToExpression(expr_505),name_506]);
                                                    }
                                                } break;

                                                case 29: {
                                                    {
                                                        const expr_507 = temp_500[2];
                                                        const name_508 = temp_500[3];
                                                        return (["Dot",8,this.nodeToExpression(expr_507),name_508]);
                                                    }
                                                } break;

                                                case 9: {
                                                    {
                                                        const a_509 = temp_500[2];
                                                        const op_510 = temp_500[3];
                                                        const b_511 = temp_500[4];
                                                        {
                                                            const temp_512 = op_510;
                                                            switch (temp_512) {
                                                            case 104: {
                                                                return (["Binop",11,toCase(a_509),104,toCase(b_511)])
                                                            } break;

                                                            default:
                                                            console.error('Unknown native case binop kind:', e_243, this.typer.parents.get(e_243))
                                                            };
                                                        };
                                                    }
                                                } break;

                                                case 12: {
                                                    {
                                                        const e_513 = temp_500[2];
                                                        const args_514 = temp_500[3];
                                                        const argNames_515 = temp_500[4];
                                                        {
                                                            const temp_516 = e_513;
                                                            switch (temp_516 && temp_516[1]) {
                                                            case 29: {
                                                                {
                                                                    const expr_517 = temp_516[2];
                                                                    const name_518 = temp_516[3];
                                                                    {
                                                                        const a_519 = [];
                                                                        {
                                                                            let arg = 0;
                                                                            let it_520 = 0;
                                                                            let at_521 = args_514.length;
                                                                            while (it_520 < at_521) {
                                                                                arg = it_520;
                                                                                it_520++;
                                                                                {
                                                                                    const temp_522 = args_514[arg];
                                                                                    switch (temp_522 && temp_522[1]) {
                                                                                    case 1: {
                                                                                        {
                                                                                            const name_523 = temp_522[2];
                                                                                            a_519.push((["Ident",5,this.unique(name_523, args_514[arg])]));
                                                                                        }
                                                                                    } break;

                                                                                    case 42: {
                                                                                        a_519.push(NiceExpression.Underscore)
                                                                                    } break;

                                                                                    default:
                                                                                    console.log('Unknown native case extract value kind:', args_514[arg])
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                        return (["Call",9,this.nodeToExpression(e_513),a_519]);
                                                                    };
                                                                }
                                                            } break;

                                                            default:
                                                            console.error('Unknown case extract kind:', e_513, this.typer.parents.get(e_513))
                                                            };
                                                        };
                                                    }
                                                } break;

                                                default:
                                                console.error('Unknown native enum case kind:', co, Project.data.get(co))
                                                };
                                            };
                                            c.push([toCase(conds[i_497])]);
                                            s_495.push(this.nodeToStatement(cases[i_497]));
                                        };
                                    };
                                };
                                return (["Switch",19,index_496,c,s_495]);
                            };
                            const temp_524 = this.unique('temp');
                            const value_525 = this.nodeToExpression(exprs[0]);
                            let index_526 = (["Ident",5,temp_524]);
                            let i_527 = 0;
                            for (const ec of $toIterator(cases)) {
                                const block_528 = [];
                                const co_529 = conds[i_527];
                                const cx = [];
                                const addTag = (co_530) => {
                                    const temp_531 = co_530;
                                    switch (temp_531 && temp_531[1]) {
                                    case 7: {
                                        cx.push(NiceExpression.Null)
                                    } break;

                                    case 42: {
                                        {
                                        }
                                    } break;

                                    case 0: {
                                        {
                                            const v_532 = temp_531[2];
                                            cx.push((["String",0,v_532]));
                                        }
                                    } break;

                                    case 5: {
                                        {
                                            const v_533 = temp_531[2];
                                            cx.push((["Int",1,v_533]));
                                        }
                                    } break;

                                    case 6: {
                                        {
                                            const v_534 = temp_531[2];
                                            cx.push((["Float",2,v_534]));
                                        }
                                    } break;

                                    case 2: {
                                        {
                                            const v_535 = temp_531[2];
                                            if (v_535) { cx.push(NiceExpression.True) } else cx.push(NiceExpression.False);
                                        }
                                    } break;

                                    case 12: {
                                        {
                                            const e_536 = temp_531[2];
                                            const args_537 = temp_531[3];
                                            const argNames_538 = temp_531[4];
                                            {
                                                const temp_539 = e_536;
                                                switch (temp_539 && temp_539[1]) {
                                                case 29: {
                                                    {
                                                        const expr_540 = temp_539[2];
                                                        const name_541 = temp_539[3];
                                                        {
                                                            const parent_542 = this.typer.parents.get(expr_540);
                                                            const tag_543 = this.getTag(parent_542, name_541);
                                                            cx.push(tag_543);
                                                            index_526 = (["Binop",11,(["Ident",5,temp_524]),92,(["Index",21,(["Ident",5,temp_524]),(["Int",1,1])])]);
                                                            {
                                                                let arg_544 = 0;
                                                                let it_545 = 0;
                                                                let at_546 = args_537.length;
                                                                while (it_545 < at_546) {
                                                                    arg_544 = it_545;
                                                                    it_545++;
                                                                    {
                                                                        const temp_547 = args_537[arg_544];
                                                                        switch (temp_547 && temp_547[1]) {
                                                                        case 1: {
                                                                            {
                                                                                const name_548 = temp_547[2];
                                                                                block_528.push((["Const",6,this.unique(name_548, args_537[arg_544]),(["Index",21,(["Ident",5,temp_524]),(["Int",1,2 + arg_544])])]));
                                                                            }
                                                                        } break;

                                                                        case 42: {
                                                                            {
                                                                            }
                                                                        } break;

                                                                        default:
                                                                        console.log('Unknown case extract value kind:', arg_544)
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    }
                                                } break;

                                                default:
                                                console.error('Unknown case extract kind:', e_536, this.typer.parents.get(e_536))
                                                };
                                            };
                                        }
                                    } break;

                                    case 29: {
                                        {
                                            const expr_549 = temp_531[2];
                                            const name_550 = temp_531[3];
                                            cx.push(this.getTag(this.typer.parents.get(expr_549), name_550));
                                        }
                                    } break;

                                    case 9: {
                                        {
                                            const a_551 = temp_531[2];
                                            const op_552 = temp_531[3];
                                            const b_553 = temp_531[4];
                                            {
                                                const temp_554 = op_552;
                                                switch (temp_554) {
                                                case 104: {
                                                    {
                                                        addTag(a_551);
                                                        addTag(b_553);
                                                    }
                                                } break;

                                                default:
                                                console.error('Unknown case binop kind:', e_243, this.typer.parents.get(e_243))
                                                };
                                            };
                                        }
                                    } break;

                                    default:
                                    console.error('Unknown case kind:', co_530, Project.data.get(co_530))
                                    };
                                };
                                addTag(co_529);
                                c.push(cx);
                                block_528.push(this.unwrapNestingBlocks(this.nodeToStatement(ec)));
                                s_495.push(this.unwrapNestingBlocks((["Block",1,block_528])));
                                i_527++;
                            };
                            return (["Block",1,[(["Const",6,temp_524,value_525,this.typer.types.get(this.typer.parents.get(exprs[0]))]), (["Switch",19,index_526,c,s_495])]]);
                        };
                    }
                } break;

                case 24: {
                    {
                        const vars_555 = temp_244[2];
                        {
                            const s_556 = [];
                            for (const v of $toIterator(vars_555)) {
                                let step_557 = 0;
                                const st = this.nodeToStatement(v);
                                if (step_557 == 0 && st != null) { step_557 = 1 };
                                if (step_557 == 1) { s_556.push(st) };
                            };
                            return (["Statements",0,s_556]);
                        };
                    }
                } break;

                case 33: {
                    {
                        const v_558 = temp_244[2];
                        const index_559 = temp_244[3];
                        return (["Statements",0,[this.nodeToStatement(v_558), this.nodeToStatement(index_559)]]);
                    }
                } break;

                case 1: {
                    {
                        const name_560 = temp_244[2];
                        {
                        };
                    }
                } break;

                case 22: {
                    {
                    }
                } break;

                case 0: {
                    {
                        const v_561 = temp_244[2];
                        Project.hints.push(new Hint(10, ('Unused string `\"' + (v_561) + '\"`'), Project.data.get(e_243)));
                    }
                } break;

                case 2: {
                    {
                        const v_562 = temp_244[2];
                        Project.hints.push(new Hint(10, ('Unused boolean `' + (v_562) + '`'), Project.data.get(e_243)));
                    }
                } break;

                case 5: {
                    {
                        const v_563 = temp_244[2];
                        Project.hints.push(new Hint(10, ('Unused number `' + (v_563) + '`'), Project.data.get(e_243)));
                    }
                } break;

                case 6: {
                    {
                        const v_564 = temp_244[2];
                        Project.hints.push(new Hint(10, ('Unused float `' + (v_564) + '`'), Project.data.get(e_243)));
                    }
                } break;

                case 7: {
                    Project.hints.push(new Hint(10, 'Unused `null`', Project.data.get(e_243)))
                } break;

                default:
                return (["UnusedExpression",4,this.nodeToExpression(e_243)])
                };
            };
            return null;
        } };
        getTag(enumNode, name_565) { {
            const temp_566 = enumNode;
            switch (temp_566 && temp_566[1]) {
            case 37: {
                {
                    const t_567 = temp_566[2];
                    const fields_568 = temp_566[3];
                    const valuesType_569 = temp_566[4];
                    {
                        let i_570 = 0;
                        for (const f of $toIterator(fields_568)) {
                            {
                                const temp_571 = f;
                                switch (temp_571 && temp_571[1]) {
                                case 48: {
                                    {
                                        const t_572 = temp_571[2];
                                        {
                                            const temp_573 = t_572;
                                            switch (temp_573 && temp_573[1]) {
                                            case 1: {
                                                {
                                                    const n = temp_573[2];
                                                    if (n == name_565) { return (["Int",1,i_570]) };
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;

                                case 12: {
                                    {
                                        const e_574 = temp_571[2];
                                        {
                                            const temp_575 = e_574;
                                            switch (temp_575 && temp_575[1]) {
                                            case 48: {
                                                {
                                                    const t_576 = temp_575[2];
                                                    {
                                                        const temp_577 = t_576;
                                                        switch (temp_577 && temp_577[1]) {
                                                        case 1: {
                                                            {
                                                                const n_578 = temp_577[2];
                                                                if (n_578 == name_565) { return (["Int",1,i_570]) };
                                                            }
                                                        } break;
                                                        };
                                                    };
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;

                                case 9: {
                                    {
                                        const a_579 = temp_571[2];
                                        const op_580 = temp_571[3];
                                        const b_581 = temp_571[4];
                                        {
                                            const temp_582 = a_579;
                                            switch (temp_582 && temp_582[1]) {
                                            case 48: {
                                                {
                                                    const t_583 = temp_582[2];
                                                    {
                                                        const temp_584 = t_583;
                                                        switch (temp_584 && temp_584[1]) {
                                                        case 1: {
                                                            {
                                                                const n_585 = temp_584[2];
                                                                if (n_585 == name_565) { return this.nodeToExpression(b_581) };
                                                            }
                                                        } break;
                                                        };
                                                    };
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;

                                case 43: {
                                    return null
                                } break;

                                default:
                                console.error('Unknown enum tag kind:', f)
                                };
                            };
                            i_570++;
                        };
                        throw ('Enum has no tag or field `' + (name_565) + '` ') + t_567;
                    };
                }
            } break;
            };
        } };
        getAtt(atts_586, atname) { {
            if (atts_586 != null && atts_586.length > 0) { for (const att of $toIterator(atts_586)) {
                if (att.name == atname) { return att };
            } };
            return null;
        } };
        pushScope() { this.scopes.push((new Map())) };
        popScope() { this.scopes.pop() };
        hasInScope(name_587) { {
            for (const scope of $toIterator(this.scopes)) {
                if (scope.get(name_587) != null) { return true };
            };
            return false;
        } };
        addToScope(name_588) { this.scopes[this.scopes.length - 1].set(name_588, true) };
        unique(name_589, node) { {
            let uname_590 = name_589;
            while (this.hasInScope(uname_590) || (this.keywords.indexOf(uname_590) != -1)) uname_590 = name_589 + '_' + (++this.id);
            this.addToScope(uname_590);
            this.parentNames.set(node, uname_590);
            return uname_590;
        } };
        fillStatement(e_591) { return this.nodeToStatement(e_591) };
        renameClassFields(fields_592) { {
            this.pushScope();
            for (const f of $toIterator(fields_592)) {
                const temp_593 = f;
                switch (temp_593 && temp_593[1]) {
                case 23: {
                    {
                        const name_594 = temp_593[2];
                        const t_595 = temp_593[3];
                        const expr_596 = temp_593[4];
                        const const_597 = temp_593[5];
                        {
                            const atts_598 = Project.mapAttributes.get(f);
                            const native_599 = this.getAtt(atts_598, 'native');
                            if (native_599 != null) {
                                const temp_600 = native_599.values[0];
                                switch (temp_600 && temp_600[1]) {
                                case 0: {
                                    {
                                        const s_601 = temp_600[2];
                                        if (this.parentNames.get(f) == null) { this.unique(s_601, f) };
                                    }
                                } break;

                                default:
                                throw '@native takes string as argument'
                                };
                            } else if (this.parentNames.get(f) == null) { this.unique(name_594, f) };
                        };
                    }
                } break;

                case 21: {
                    {
                        const name_602 = temp_593[2];
                        const expr_603 = temp_593[3];
                        const vars_604 = temp_593[4];
                        const rettype_605 = temp_593[5];
                        if (name_602 == 'new') { this.parentNames.set(f, 'new') } else {
                            const atts_606 = Project.mapAttributes.get(f);
                            const native_607 = this.getAtt(atts_606, 'native');
                            if (native_607 != null) {
                                const temp_608 = native_607.values[0];
                                switch (temp_608 && temp_608[1]) {
                                case 0: {
                                    {
                                        const s_609 = temp_608[2];
                                        if (this.parentNames.get(f) == null) { this.unique(s_609, f) };
                                    }
                                } break;

                                default:
                                throw '@native takes string as argument'
                                };
                            } else if (this.parentNames.get(f) == null) { this.unique(name_602, f) };
                        };
                    }
                } break;

                case 43: {
                    {
                        const field_610 = temp_593[2];
                        {
                            const temp_611 = field_610;
                            switch (temp_611 && temp_611[1]) {
                            case 23: {
                                {
                                    const name_612 = temp_611[2];
                                    const t_613 = temp_611[3];
                                    const expr_614 = temp_611[4];
                                    const const_615 = temp_611[5];
                                    if (this.parentNames.get(field_610) == null) { this.unique(name_612, field_610) };
                                }
                            } break;

                            case 21: {
                                {
                                    const name_616 = temp_611[2];
                                    const expr_617 = temp_611[3];
                                    const vars_618 = temp_611[4];
                                    const rettype_619 = temp_611[5];
                                    {
                                        const atts_620 = Project.mapAttributes.get(f);
                                        const native_621 = this.getAtt(atts_620, 'native');
                                        if (native_621 != null) {
                                            const temp_622 = native_621.values[0];
                                            switch (temp_622 && temp_622[1]) {
                                            case 0: {
                                                {
                                                    const s_623 = temp_622[2];
                                                    if (this.parentNames.get(field_610) == null) { this.unique(s_623, field_610) };
                                                }
                                            } break;

                                            default:
                                            throw '@native takes string as argument'
                                            };
                                        } else if (this.parentNames.get(field_610) == null) { this.unique(name_616, field_610) };
                                    };
                                }
                            } break;
                            };
                        };
                    }
                } break;
                };
            };
            this.popScope();
        } };
        getClassDotField(expr_624, name_625) { {
            {
                const temp_626 = expr_624;
                switch (temp_626 && temp_626[1]) {
                case 25: {
                    {
                        const t_627 = temp_626[2];
                        const ext_628 = temp_626[3];
                        const impl_629 = temp_626[4];
                        const fields_630 = temp_626[5];
                        const external_631 = temp_626[6];
                        for (const f of $toIterator(fields_630)) {
                            const temp_632 = f;
                            switch (temp_632 && temp_632[1]) {
                            case 43: {
                                {
                                    const sf = temp_632[2];
                                    if (DataHelper.nameOf(sf) == name_625) { return ((this.parentNames.get(sf)) || (name_625)) };
                                }
                            } break;

                            case 23: {
                                {
                                    const n_633 = temp_632[2];
                                    if (n_633 == name_625) { return ((this.parentNames.get(f)) || (name_625)) };
                                }
                            } break;
                            };
                        };
                    }
                } break;

                case 37: {
                    {
                        const t_634 = temp_626[2];
                        const fields_635 = temp_626[3];
                        const valuesType_636 = temp_626[4];
                        for (const f of $toIterator(fields_635)) {
                            const temp_637 = f;
                            switch (temp_637 && temp_637[1]) {
                            case 43: {
                                {
                                    const sf_638 = temp_637[2];
                                    if (DataHelper.nameOf(sf_638) == name_625) { return ((this.parentNames.get(sf_638)) || (name_625)) };
                                }
                            } break;
                            };
                        };
                    }
                } break;
                };
            };
            return null;
        } };
        unwrapNestingBlocks(block_639) { {
            const temp_640 = block_639;
            switch (temp_640 && temp_640[1]) {
            case 1: {
                {
                    const el_641 = temp_640[2];
                    {
                        if (el_641.length == 1) { return this.unwrapNestingBlocks(el_641[0]) };
                        return block_639;
                    };
                }
            } break;

            default:
            return block_639
            };
        } };
    }
    var FunctionType = class {
    }
    var ModuleType = class {
    }
    var EnumType = class {
        constructor() {
            this.fieldNames = []
            this.tagBindVars = []
            this.tagBindVarsNames = []
            this.fieldStatic = []
            this.fieldEnumConstructor = []
            this.fieldType = []
        {
        } };
    }
    var ClassType = class {
        constructor() {
            this.owner = null
            this.fieldNames = []
            this.fieldRenames = []
            this.fieldStatic = []
            this.fieldInitialized = []
            this.protected = []
            this.immutable = []
            this.constructor = -1
            this.indexKeyType = null
            this.indexValueType = null
            this.fields = new Map()
            this.genericParams = []
            this.instanceCache = (["ClassInstance",6,this,null])
            this.genericCache = []
        {
        } };
        instantiate() { return this.instanceCache };
        instantiateGeneric(params_642) { {
            for (const cached of $toIterator(this.genericCache)) {
                if (cached.length != (params_642.length + 1)) { continue };
                let found = true;
                {
                    let i_643 = 0;
                    let it_644 = 0;
                    let at_645 = cached.length - 1;
                    while (it_644 < at_645) {
                        i_643 = it_644;
                        it_644++;
                        {
                            if (params_642[i_643] != cached[i_643 + 1]) {
                                found = false;
                                break;
                            };
                        };
                    };
                };
                if (found) {
                    const result_646 = cached[0];
                    return result_646;
                };
            };
            const result_647 = (["ClassInstance",6,this,params_642]);
            const cache = [result_647];
            for (const param of $toIterator(params_642)) cache.push(param);
            this.genericCache.push(cache);
            return result_647;
        } };
    }
    var ClassTypeField = class {
    }
    var Typer = class {
        constructor() {
            this.scopes = [new Map()]
            this.parents = new Map()
            this.types = new Map()
            this.typeString = null
            this.typeInt = null
            this.typeFloat = null
            this.typeBool = null
            this.typeArray = null
            this.typeMap = null
            this.typeAny = null
            this.typeVoid = null
            this.namespaces = new Map()
            this.functionAllowedToThrow = false
            this.functionThrows = false
            this.insideTry = false
            this.insideFunction = false
            this.allowBreakAndContinue = false
            this.functionReturnsAType = null
            this.insideClassMethod = false
            this.allowSuper = false
        {
        } };
        fillFiles(collected) { {
            const fillModuleNamespace = (m) => {
                let el_683 = null;
                let root = null;
                {
                    const temp_684 = m;
                    switch (temp_684 && temp_684[1]) {
                    case 35: {
                        {
                            const path_685 = temp_684[2];
                            const els_686 = temp_684[3];
                            {
                                el_683 = els_686;
                                root = path_685.join('.');
                            };
                        }
                    } break;

                    default:
                    throw 'Unreachable #2'
                    };
                };
                if (this.namespaces.get(root) == null) { this.namespaces.set(root, m) } else {
                    let els_687 = null;
                    {
                        const temp_688 = this.namespaces.get(root);
                        switch (temp_688 && temp_688[1]) {
                        case 35: {
                            {
                                const el_689 = temp_688[3];
                                els_687 = el_689;
                            }
                        } break;

                        default:
                        throw 'Unreachable #1'
                        };
                    };
                    while (el_683.length > 0) els_687.push(el_683.pop());
                };
                {
                    let els_690 = null;
                    {
                        const temp_691 = this.namespaces.get(root);
                        switch (temp_691 && temp_691[1]) {
                        case 35: {
                            {
                                const el_692 = temp_691[3];
                                els_690 = el_692;
                            }
                        } break;

                        default:
                        throw 'Unreachable #4'
                        };
                    };
                    for (const e of $toIterator(els_690)) {
                        let name_693 = this.nameOfModuleItem(e);
                        let found_694 = false;
                        for (const el of $toIterator(els_690)) {
                            if (this.nameOfModuleItem(el) == name_693) {
                                if (found_694) { Typer.fail(('The `' + (name_693) + '` already exists in module\n') + Typer.positionOf(el) + ('`' + (name_693) + '` is defined here'), e) };
                                if (!found_694) { found_694 = true };
                            };
                        };
                    };
                };
            };
            for (const file of $toIterator(collected)) {
                let didInit = false;
                let lastOne = file[0];
                for (const e of $toIterator(file)) {
                    const temp_695 = e;
                    switch (temp_695 && temp_695[1]) {
                    case 35: {
                        {
                            const path_696 = temp_695[2];
                            const el_697 = temp_695[3];
                            {
                                if (didInit) { Typer.fail('Modules should follow before expressions\n' + Typer.positionOf(lastOne) + 'Expression is here', e) };
                                fillModuleNamespace(e);
                            };
                        }
                    } break;

                    default:
                    {
                        lastOne = e;
                        didInit = true;
                    }
                    };
                };
            };
            let intermediate = [];
            {
                let intermediateSubs = [];
                const keys_698 = this.namespaces.keys();
                for (const ns of $toIterator(keys_698)) {
                    let path_699 = ns.split('.');
                    let namespace = path_699.shift();
                    const check = (namespace_700) => { if (this.namespaces.get(namespace_700) == null && intermediate.indexOf(namespace_700) == -1) { intermediate.push(namespace_700) } };
                    check(namespace);
                    while (path_699.length > 0) {
                        namespace += '.' + path_699.shift();
                        check(namespace);
                    };
                };
                for (const path of $toIterator(intermediate)) {
                    let m_701 = (["TModule",35,path.split('.'),[]]);
                    this.namespaces.set(path, m_701);
                };
            };
            const findBasicType = (name_702) => {
                const subj = this.findInNamespaceRoots(name_702);
                if (subj == null) { console.log('', collected, '\n\n', JSON.stringify(collected), '\n\n\n\n') };
                if (subj == null) { Typer.fail(('Cannot find basic type `' + (name_702) + '`. This type should be a part of standard library of the compilation target.')) };
                return this.registerClassType(subj);
            };
            this.typeInt = findBasicType('Int').instantiate();
            this.typeBool = findBasicType('Bool').instantiate();
            this.typeFloat = findBasicType('Float').instantiate();
            this.typeString = findBasicType('String').instantiate();
            this.typeArray = findBasicType('Array');
            this.typeMap = findBasicType('Map');
            this.typeAny = findBasicType('Any').instantiate();
            this.typeVoid = findBasicType('Void').instantiate();
            this.pushScope();
            for (const file of $toIterator(collected)) for (const e of $toIterator(file)) {
                const temp_703 = e;
                switch (temp_703 && temp_703[1]) {
                case 35: {
                    {
                        const path_704 = temp_703[2];
                        const el_705 = temp_703[3];
                        {
                            for (const node of $toIterator(el_705)) {
                                const temp_706 = node;
                                switch (temp_706 && temp_706[1]) {
                                case 25: {
                                    {
                                        this.parents.set(node, e);
                                        this.fill(node);
                                    }
                                } break;

                                case 37: {
                                    {
                                        this.parents.set(node, e);
                                        this.fill(node);
                                    }
                                } break;

                                default:
                                {
                                }
                                };
                            };
                            for (const node of $toIterator(el_705)) {
                                const temp_707 = node;
                                switch (temp_707 && temp_707[1]) {
                                case 25: {
                                    {
                                    }
                                } break;

                                case 37: {
                                    {
                                    }
                                } break;

                                case 21: {
                                    {
                                        this.parents.set(node, e);
                                        this.fill(node);
                                    }
                                } break;

                                default:
                                {
                                    this.parents.set(node, e);
                                    this.fill(node);
                                }
                                };
                            };
                        };
                    }
                } break;

                default:
                {
                }
                };
            };
            this.popScope();
            for (const file of $toIterator(collected)) {
                this.pushScope();
                for (const e of $toIterator(file)) {
                    const temp_708 = e;
                    switch (temp_708 && temp_708[1]) {
                    case 35: {
                        {
                            const path_709 = temp_708[2];
                            const el_710 = temp_708[3];
                            {
                            };
                        }
                    } break;

                    default:
                    this.fill(e)
                    };
                };
                this.popScope();
            };
        } };
        registerClassType(node_711) { {
            let step_712 = 0;
            const type_713 = this.types.get(node_711);
            if (step_712 == 0 && type_713 != null) { step_712 = 1 };
            if (step_712 == 1) { {
                const temp_714 = type_713;
                switch (temp_714 && temp_714[1]) {
                case 3: {
                    {
                        const t_715 = temp_714[2];
                        return t_715;
                    }
                } break;

                default:
                Typer.fail('registerClassType called again for? ' + DataHelper.nameOf(node_711), node_711)
                };
            } } else {
                const type_716 = new ClassType();
                type_716.parent = node_711;
                type_716.name = DataHelper.nameOf(node_711);
                this.types.set(node_711, (["Class",3,type_716]));
                const getRename = (f_717) => {
                    const atts_718 = Project.mapAttributes.get(f_717);
                    {
                        let step_719 = 0;
                        const native_720 = DataHelper.getAttribute(atts_718, 'native');
                        if (step_719 == 0 && native_720 != null) { step_719 = 1 };
                        if (step_719 == 1) {
                            if (native_720.values.length != 1) { throw '@native takes one string argument' };
                            if (native_720 != null) {
                                const temp_721 = native_720.values[0];
                                switch (temp_721 && temp_721[1]) {
                                case 0: {
                                    {
                                        const s_722 = temp_721[2];
                                        return s_722;
                                    }
                                } break;

                                default:
                                throw '@native takes string as argument'
                                };
                            };
                        };
                    };
                    return null;
                };
                {
                    const temp_723 = node_711;
                    switch (temp_723 && temp_723[1]) {
                    case 25: {
                        {
                            const t_724 = temp_723[2];
                            const extend = temp_723[3];
                            const implement = temp_723[4];
                            const f_725 = temp_723[5];
                            const external_726 = temp_723[6];
                            {
                                {
                                    let step_727 = 0;
                                    const ext_728 = extend;
                                    if (step_727 == 0 && ext_728 != null) { step_727 = 1 };
                                    if (step_727 == 1) { this.toType(ext_728, node_711) };
                                };
                                for (const impl of $toIterator(implement)) this.toType(impl, node_711);
                                this.pushScope();
                                for (const field of $toIterator(f_725)) {
                                    {
                                        const temp_729 = field;
                                        switch (temp_729 && temp_729[1]) {
                                        case 21: {
                                            {
                                                const name_730 = temp_729[2];
                                                {
                                                    if (type_716.fieldNames.includes(name_730)) { Typer.fail(('Field `' + (name_730) + '` already exists'), field) };
                                                    type_716.fieldNames.push(name_730);
                                                    if (name_730 == 'new') { type_716.constructor = type_716.fieldNames.length - 1 } else type_716.fieldRenames[type_716.fieldNames.length - 1] = getRename(field);
                                                    this.addScope(name_730, field);
                                                };
                                            }
                                        } break;

                                        case 23: {
                                            {
                                                const name_731 = temp_729[2];
                                                {
                                                    if (type_716.fieldNames.includes(name_731)) { Typer.fail(('Field `' + (name_731) + '` already exists'), field) };
                                                    type_716.fieldNames.push(name_731);
                                                    type_716.fieldInitialized[type_716.fieldNames.length - 1] = false;
                                                    type_716.fieldRenames[type_716.fieldNames.length - 1] = getRename(field);
                                                    this.addScope(name_731, field);
                                                };
                                            }
                                        } break;

                                        case 26: {
                                            {
                                                const field_732 = temp_729[2];
                                                {
                                                    const temp_733 = field_732;
                                                    switch (temp_733 && temp_733[1]) {
                                                    case 23: {
                                                        {
                                                            const name_734 = temp_733[2];
                                                            {
                                                                if (type_716.fieldNames.includes(name_734)) { Typer.fail(('Field `' + (name_734) + '` already exists'), field_732) };
                                                                type_716.fieldNames.push(name_734);
                                                                this.addScope(name_734, field_732);
                                                            };
                                                        }
                                                    } break;
                                                    };
                                                };
                                            }
                                        } break;

                                        case 43: {
                                            {
                                                const f_735 = temp_729[2];
                                                {
                                                    const temp_736 = f_735;
                                                    switch (temp_736 && temp_736[1]) {
                                                    case 21: {
                                                        {
                                                            const name_737 = temp_736[2];
                                                            {
                                                                if (type_716.fieldNames.includes(name_737)) { Typer.fail(('Field `' + (name_737) + '` already exists'), field) };
                                                                type_716.fieldNames.push(name_737);
                                                                type_716.fieldStatic[type_716.fieldNames.length - 1] = true;
                                                                this.addScope(name_737, field);
                                                            };
                                                        }
                                                    } break;

                                                    case 23: {
                                                        {
                                                            const name_738 = temp_736[2];
                                                            {
                                                                if (type_716.fieldNames.includes(name_738)) { Typer.fail(('Field `' + (name_738) + '` already exists'), field) };
                                                                type_716.fieldNames.push(name_738);
                                                                type_716.fieldStatic[type_716.fieldNames.length - 1] = true;
                                                                this.addScope(name_738, field);
                                                            };
                                                        }
                                                    } break;
                                                    };
                                                };
                                            }
                                        } break;

                                        default:
                                        Typer.fail('Wrong class field format', field)
                                        };
                                    };
                                    this.parents.set(field, node_711);
                                };
                                for (const field of $toIterator(f_725)) {
                                    const temp_739 = field;
                                    switch (temp_739 && temp_739[1]) {
                                    case 23: {
                                        {
                                            const name_740 = temp_739[2];
                                            const t_741 = temp_739[3];
                                            const e_742 = temp_739[4];
                                            const const_743 = temp_739[5];
                                            {
                                                let step_744 = 0;
                                                const t_745 = t_741;
                                                if (step_744 == 0 && t_745 != null) { step_744 = 1 };
                                                if (step_744 == 1) { this.types.set(field, this.toType(t_745, field)) };
                                            };
                                        }
                                    } break;

                                    case 21: {
                                        {
                                            const name_746 = temp_739[2];
                                            const expr_747 = temp_739[3];
                                            const vars_748 = temp_739[4];
                                            const rettype_749 = temp_739[5];
                                            {
                                                let step_750 = 0;
                                                const rettype_751 = rettype_749;
                                                let temp_752 = null;
                                                if (step_750 == 0 && rettype_751 != null) {
                                                    temp_752 = vars_748.length == 0;
                                                    step_750 = 1;
                                                };
                                                if (step_750 == 1 && temp_752 != null) { step_750 = 2 };
                                                if (step_750 == 2) { this.types.set(field, (["Function",10,[],this.toType(rettype_751, field)])) };
                                            };
                                        }
                                    } break;
                                    };
                                };
                                for (const field of $toIterator(f_725)) {
                                    const temp_753 = field;
                                    switch (temp_753 && temp_753[1]) {
                                    case 21: {
                                        {
                                            const name_754 = temp_753[2];
                                            const expr_755 = temp_753[3];
                                            const vars_756 = temp_753[4];
                                            const rettype_757 = temp_753[5];
                                            {
                                                if (name_754 == 'new') { type_716.constructor = type_716.fieldNames.length - 1 };
                                                if ((external_726) && (expr_755 != null)) { if (name_754 == 'new') { Typer.fail('External class constructor `new()` cannot have a body', field) } else Typer.fail(('External class field `function ' + (name_754) + '` cannot have a body'), field) };
                                                const _insideClassMethod = this.insideClassMethod;
                                                const _allowSuper = this.allowSuper;
                                                this.insideClassMethod = true;
                                                this.allowSuper = (extend != null);
                                                if (!external_726) { this.fillFunction(field, expr_755, vars_756, rettype_757) };
                                                if ((external_726) && (this.types.get(field) == null)) { this.types.set(field, (["Function",10,[],rettype_757 != (null)? (this.toType(rettype_757, field)) : this.typeVoid])) };
                                                this.insideClassMethod = _insideClassMethod;
                                                this.allowSuper = _allowSuper;
                                            };
                                        }
                                    } break;

                                    case 23: {
                                        {
                                            const name_758 = temp_753[2];
                                            const t_759 = temp_753[3];
                                            const e_760 = temp_753[4];
                                            const const_761 = temp_753[5];
                                            {
                                                if ((external_726) && (e_760 != null)) { Typer.fail(('External class field `var ' + (name_758) + '` cannot have `= value`'), field) };
                                                const _insideClassMethod_762 = this.insideClassMethod;
                                                this.insideClassMethod = true;
                                                if (e_760 != null) { this.fillExpression(e_760) };
                                                this.insideClassMethod = _insideClassMethod_762;
                                                this.mixVarTypes(t_759, e_760, field);
                                                type_716.fieldInitialized[type_716.fieldNames.indexOf(name_758)] = true;
                                                if (this.types.get(field) == null) { Typer.fail(('Field `var ' + (name_758) + '` initialized, but got no type ') + e_760, field) };
                                            };
                                        }
                                    } break;

                                    case 26: {
                                        {
                                            const f_763 = temp_753[2];
                                            {
                                                const temp_764 = f_763;
                                                switch (temp_764 && temp_764[1]) {
                                                case 23: {
                                                    {
                                                        const name_765 = temp_764[2];
                                                        const t_766 = temp_764[3];
                                                        const e_767 = temp_764[4];
                                                        const const_768 = temp_764[5];
                                                        {
                                                            if ((external_726) && (e_767 != null)) { Typer.fail(('External class field `var ' + (name_765) + '` cannot have expression'), field) };
                                                            const _insideClassMethod_769 = this.insideClassMethod;
                                                            this.insideClassMethod = true;
                                                            if (e_767 != null) { this.fillExpression(e_767) };
                                                            this.insideClassMethod = _insideClassMethod_769;
                                                            this.mixVarTypes(t_766, e_767, f_763);
                                                            type_716.fieldInitialized[type_716.fieldNames.indexOf(name_765)] = true;
                                                            if (this.types.get(f_763) == null) { Typer.fail(('Property `' + (name_765) + '` initialized, but got no type ') + e_767, field) };
                                                            this.types.set(field, this.types.get(f_763));
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                        }
                                    } break;

                                    case 43: {
                                        {
                                            const f_770 = temp_753[2];
                                            {
                                                const temp_771 = f_770;
                                                switch (temp_771 && temp_771[1]) {
                                                case 21: {
                                                    {
                                                        const name_772 = temp_771[2];
                                                        const expr_773 = temp_771[3];
                                                        const vars_774 = temp_771[4];
                                                        const rettype_775 = temp_771[5];
                                                        {
                                                            if ((external_726) && (expr_773 != null)) { Typer.fail(('External class field `static function ' + (name_772) + '` cannot have a body'), field) };
                                                            const _insideClassMethod_776 = this.insideClassMethod;
                                                            this.insideClassMethod = false;
                                                            if (!external_726) { this.fillFunction(f_770, expr_773, vars_774, rettype_775) };
                                                            if (external_726) { this.types.set(f_770, (["Function",10,[],rettype_775 != (null)? (this.toType(rettype_775, f_770)) : this.typeVoid])) };
                                                            this.insideClassMethod = _insideClassMethod_776;
                                                            if (this.types.get(f_770) == null) { Typer.fail('Function get no type: class ' + DataHelper.nameOf(node_711) + ' static ' + name_772, f_770) };
                                                            this.types.set(field, this.types.get(f_770));
                                                        };
                                                    }
                                                } break;

                                                case 23: {
                                                    {
                                                        const name_777 = temp_771[2];
                                                        const t_778 = temp_771[3];
                                                        const e_779 = temp_771[4];
                                                        const const_780 = temp_771[5];
                                                        {
                                                            if ((external_726) && (e_779 != null)) { Typer.fail(('External class field `static var ' + (name_777) + '` cannot have expression'), field) };
                                                            if (e_779 != null) { this.fillExpression(e_779) };
                                                            this.mixVarTypes(t_778, e_779, f_770);
                                                            this.types.set(field, this.types.get(f_770));
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                        }
                                    } break;

                                    default:
                                    Typer.fail('Wrong class field format', node_711)
                                    };
                                };
                                this.popScope();
                            };
                        }
                    } break;

                    default:
                    Typer.fail('ClassType expects (declare) class node, but got ' + node_711, node_711)
                    };
                };
                return type_716;
            };
        } };
        registerEnumType(node_781) { {
            let step_782 = 0;
            const type_783 = this.types.get(node_781);
            if (step_782 == 0 && type_783 != null) { step_782 = 1 };
            if (step_782 == 1) { {
                const temp_784 = type_783;
                switch (temp_784 && temp_784[1]) {
                case 4: {
                    {
                        const t_785 = temp_784[2];
                        return t_785;
                    }
                } break;
                };
            } } else {
                const type_786 = new EnumType();
                type_786.parent = node_781;
                type_786.name = DataHelper.nameOf(node_781);
                this.types.set(node_781, (["Enum",4,type_786]));
                let tag_787 = 0;
                {
                    const temp_788 = node_781;
                    switch (temp_788 && temp_788[1]) {
                    case 37: {
                        {
                            const t_789 = temp_788[2];
                            const f_790 = temp_788[3];
                            const valuesType_791 = temp_788[4];
                            {
                                this.pushScope();
                                for (const field of $toIterator(f_790)) {
                                    {
                                        const temp_792 = field;
                                        switch (temp_792 && temp_792[1]) {
                                        case 48: {
                                            {
                                                const t_793 = temp_792[2];
                                                {
                                                    const temp_794 = t_793;
                                                    switch (temp_794 && temp_794[1]) {
                                                    case 1: {
                                                        {
                                                            const name_795 = temp_794[2];
                                                            {
                                                                if (type_786.fieldNames.includes(name_795)) { throw Typer.fail(('Field `' + (name_795) + '` already exists'), node_781) };
                                                                type_786.fieldNames.push(name_795);
                                                                type_786.fieldEnumConstructor[type_786.fieldNames.length - 1] = true;
                                                                type_786.tagBindVars[type_786.fieldNames.length - 1] = [];
                                                                type_786.tagBindVarsNames[type_786.fieldNames.length - 1] = [];
                                                                type_786.fieldType[type_786.fieldNames.length - 1] = (["EnumInstance",7,type_786,tag_787++]);
                                                            };
                                                        }
                                                    } break;

                                                    default:
                                                    Typer.fail('Wrong enum constructor format, should be `Name`', node_781)
                                                    };
                                                };
                                            }
                                        } break;

                                        case 12: {
                                            {
                                                const e_796 = temp_792[2];
                                                const args_797 = temp_792[3];
                                                const argNames_798 = temp_792[4];
                                                {
                                                    if (valuesType_791 != null) { throw Typer.fail('Cannot use `Value(args)` format for simple enum', node_781) };
                                                    {
                                                        const temp_799 = e_796;
                                                        switch (temp_799 && temp_799[1]) {
                                                        case 48: {
                                                            {
                                                                const t_800 = temp_799[2];
                                                                {
                                                                    const temp_801 = t_800;
                                                                    switch (temp_801 && temp_801[1]) {
                                                                    case 1: {
                                                                        {
                                                                            const name_802 = temp_801[2];
                                                                            {
                                                                                if (type_786.fieldNames.includes(name_802)) { throw Typer.fail(('Field `' + (name_802) + '` already exists'), node_781) };
                                                                                type_786.fieldNames.push(name_802);
                                                                                type_786.fieldEnumConstructor[type_786.fieldNames.length - 1] = true;
                                                                                type_786.fieldType[type_786.fieldNames.length - 1] = (["EnumConstructor",8,type_786,tag_787++]);
                                                                                const tagBindVars = [];
                                                                                const tagBindVarsNames = [];
                                                                                type_786.tagBindVars[type_786.fieldNames.length - 1] = tagBindVars;
                                                                                type_786.tagBindVarsNames[type_786.fieldNames.length - 1] = tagBindVarsNames;
                                                                                if (args_797.length == 0) { Typer.fail('lol why 0', e_796) };
                                                                                const nodeToNodeType = (node_803) => {
                                                                                    const temp_804 = node_803;
                                                                                    switch (temp_804 && temp_804[1]) {
                                                                                    case 31: {
                                                                                        {
                                                                                            const el_805 = temp_804[2];
                                                                                            {
                                                                                                if (el_805.length > 1) { Typer.fail('Array type `[T]` cannot have more than 1 parameter `T`', el_805[1]) };
                                                                                                return (["ParametricType",2,'Array',[nodeToNodeType(el_805[0])]]);
                                                                                            };
                                                                                        }
                                                                                    } break;

                                                                                    case 48: {
                                                                                        {
                                                                                            const t_806 = temp_804[2];
                                                                                            return t_806;
                                                                                        }
                                                                                    } break;

                                                                                    case 36: {
                                                                                        {
                                                                                            const names_807 = temp_804[2];
                                                                                            const el_808 = temp_804[3];
                                                                                            {
                                                                                                const types_809 = (() => {
                                                                                                    const result_810 = [];
                                                                                                    const value_811 = el_808;
                                                                                                    for (const e of $toIterator(value_811)) result_810.push(nodeToNodeType(e));
                                                                                                    return result_810;
                                                                                                })();
                                                                                                return (["Object",5,names_807,types_809]);
                                                                                            };
                                                                                        }
                                                                                    } break;

                                                                                    default:
                                                                                    Typer.fail('Cannot nodeToNodeType of ' + Node.stringify(node_803), node_803)
                                                                                    };
                                                                                };
                                                                                {
                                                                                    let i_812 = 0;
                                                                                    let it_813 = 0;
                                                                                    let at_814 = args_797.length;
                                                                                    while (it_813 < at_814) {
                                                                                        i_812 = it_813;
                                                                                        it_813++;
                                                                                        {
                                                                                            if (argNames_798[i_812] == null) { Typer.fail('Enum constructor arguments should have names `E(name1: T, name2: T)', args_797[i_812]) };
                                                                                            tagBindVars[i_812] = nodeToNodeType(args_797[i_812]);
                                                                                            tagBindVarsNames[i_812] = argNames_798[i_812];
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        }
                                                                    } break;

                                                                    default:
                                                                    Typer.fail('Wrong enum constructor format, should be `Name(value: T)`', e_796)
                                                                    };
                                                                };
                                                            }
                                                        } break;
                                                        };
                                                    };
                                                };
                                            }
                                        } break;

                                        case 9: {
                                            {
                                                const a_815 = temp_792[2];
                                                const op_816 = temp_792[3];
                                                const b_817 = temp_792[4];
                                                {
                                                    if (op_816 != 91) { Typer.fail(('Should use `Value = value` not `Value ' + (Token.stringify(op_816)) + ' value` format for enum tag value'), node_781) };
                                                    if (valuesType_791 == null) { Typer.fail('Cannot use `Value = value` format for complex enum', node_781) };
                                                    {
                                                        const temp_818 = a_815;
                                                        switch (temp_818 && temp_818[1]) {
                                                        case 48: {
                                                            {
                                                                const t_819 = temp_818[2];
                                                                {
                                                                    const temp_820 = t_819;
                                                                    switch (temp_820 && temp_820[1]) {
                                                                    case 1: {
                                                                        {
                                                                            const name_821 = temp_820[2];
                                                                            {
                                                                                if (type_786.fieldNames.includes(name_821)) { Typer.fail(('Field `' + (name_821) + '` already exists'), node_781) };
                                                                                type_786.fieldNames.push(name_821);
                                                                                type_786.fieldEnumConstructor[type_786.fieldNames.length - 1] = true;
                                                                                this.fillExpression(b_817);
                                                                                type_786.fieldType[type_786.fieldNames.length - 1] = this.types.get(b_817);
                                                                            };
                                                                        }
                                                                    } break;
                                                                    };
                                                                };
                                                            }
                                                        } break;
                                                        };
                                                    };
                                                };
                                            }
                                        } break;

                                        case 1: {
                                            {
                                                const name_822 = temp_792[2];
                                                Typer.fail(('Cannot use lowercase `' + (name_822) + '` format for enum values'), node_781);
                                            }
                                        } break;

                                        case 43: {
                                            {
                                                const f_823 = temp_792[2];
                                                {
                                                    const temp_824 = f_823;
                                                    switch (temp_824 && temp_824[1]) {
                                                    case 21: {
                                                        {
                                                            const name_825 = temp_824[2];
                                                            {
                                                                if (type_786.fieldNames.includes(name_825)) { Typer.fail(('Field `' + (name_825) + '` already exists'), node_781) };
                                                                type_786.fieldNames.push(name_825);
                                                                type_786.fieldStatic[type_786.fieldNames.length - 1] = true;
                                                                this.addScope(name_825, field);
                                                            };
                                                        }
                                                    } break;

                                                    case 23: {
                                                        {
                                                            const name_826 = temp_824[2];
                                                            {
                                                                if (type_786.fieldNames.includes(name_826)) { Typer.fail(('Field `' + (name_826) + '` already exists'), node_781) };
                                                                type_786.fieldNames.push(name_826);
                                                                type_786.fieldStatic[type_786.fieldNames.length - 1] = true;
                                                                this.addScope(name_826, field);
                                                            };
                                                        }
                                                    } break;
                                                    };
                                                };
                                            }
                                        } break;

                                        default:
                                        Typer.fail('Wrong enum field format', field)
                                        };
                                    };
                                    this.parents.set(field, node_781);
                                };
                                for (const field of $toIterator(f_790)) {
                                    const temp_827 = field;
                                    switch (temp_827 && temp_827[1]) {
                                    case 21: {
                                        {
                                            const name_828 = temp_827[2];
                                            const expr_829 = temp_827[3];
                                            const vars_830 = temp_827[4];
                                            const rettype_831 = temp_827[5];
                                            this.fillFunction(field, expr_829, vars_830, rettype_831);
                                        }
                                    } break;

                                    case 23: {
                                        {
                                            const name_832 = temp_827[2];
                                            {
                                            };
                                        }
                                    } break;

                                    case 43: {
                                        {
                                            const f_833 = temp_827[2];
                                            {
                                                const temp_834 = f_833;
                                                switch (temp_834 && temp_834[1]) {
                                                case 21: {
                                                    {
                                                        const name_835 = temp_834[2];
                                                        const expr_836 = temp_834[3];
                                                        const vars_837 = temp_834[4];
                                                        const rettype_838 = temp_834[5];
                                                        {
                                                            const _insideClassMethod_839 = this.insideClassMethod;
                                                            this.insideClassMethod = false;
                                                            if (rettype_838 != null) { this.types.set(f_833, (["Function",10,[],this.toType(rettype_838, f_833)])) } else this.types.set(f_833, (["Function",10,[],this.typeVoid]));
                                                            this.types.set(field, this.types.get(f_833));
                                                            this.fillFunction(f_833, expr_836, vars_837, rettype_838);
                                                            this.insideClassMethod = _insideClassMethod_839;
                                                            if (this.types.get(f_833) == null) { Typer.fail('Function get no type: enum ' + DataHelper.nameOf(node_781) + ' static ' + name_835, f_833) };
                                                            this.types.set(field, this.types.get(f_833));
                                                        };
                                                    }
                                                } break;

                                                case 23: {
                                                    {
                                                        const name_840 = temp_834[2];
                                                        const t_841 = temp_834[3];
                                                        const e_842 = temp_834[4];
                                                        const const_843 = temp_834[5];
                                                        {
                                                            if (e_842 != null) { this.fillExpression(e_842) };
                                                            this.mixVarTypes(t_841, e_842, f_833);
                                                            this.types.set(field, this.types.get(f_833));
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                        }
                                    } break;

                                    case 48: {
                                        {
                                        }
                                    } break;

                                    case 12: {
                                        {
                                        }
                                    } break;

                                    case 9: {
                                        {
                                        }
                                    } break;

                                    default:
                                    {
                                        Typer.fail('Unknown enum field format ' + field, field);
                                        Typer.fail('Unknown enum field format', field);
                                    }
                                    };
                                };
                                this.popScope();
                            };
                        }
                    } break;

                    default:
                    Typer.fail('EnumType expects (declare) enum node, but got ' + node_781, node_781)
                    };
                };
                return type_786;
            };
        } };
        nameOfModuleItem(node_848) { {
            const temp_849 = node_848;
            switch (temp_849 && temp_849[1]) {
            case 23: {
                {
                    const name_850 = temp_849[2];
                    return name_850;
                }
            } break;

            case 21: {
                {
                    const name_851 = temp_849[2];
                    {
                        let step_852 = 0;
                        const named = name_851;
                        if (step_852 == 0 && named != null) { step_852 = 1 };
                        if (step_852 == 1) { return named } else throw 'Module function should have a name';
                    };
                }
            } break;

            case 44: {
                {
                    const node_853 = temp_849[2];
                    {
                        const temp_854 = node_853;
                        switch (temp_854 && temp_854[1]) {
                        case 25: {
                            {
                                const t_855 = temp_854[2];
                                {
                                    const temp_856 = t_855;
                                    switch (temp_856 && temp_856[1]) {
                                    case 1: {
                                        {
                                            const name_857 = temp_856[2];
                                            return name_857;
                                        }
                                    } break;

                                    case 2: {
                                        {
                                            const name_858 = temp_856[2];
                                            return name_858;
                                        }
                                    } break;
                                    };
                                };
                            }
                        } break;
                        };
                    };
                }
            } break;

            case 25: {
                {
                    const t_859 = temp_849[2];
                    {
                        const temp_860 = t_859;
                        switch (temp_860 && temp_860[1]) {
                        case 1: {
                            {
                                const name_861 = temp_860[2];
                                return name_861;
                            }
                        } break;

                        case 2: {
                            {
                                const name_862 = temp_860[2];
                                return name_862;
                            }
                        } break;
                        };
                    };
                }
            } break;

            case 37: {
                {
                    const t_863 = temp_849[2];
                    {
                        const temp_864 = t_863;
                        switch (temp_864 && temp_864[1]) {
                        case 1: {
                            {
                                const name_865 = temp_864[2];
                                return name_865;
                            }
                        } break;

                        case 2: {
                            {
                                const name_866 = temp_864[2];
                                return name_866;
                            }
                        } break;
                        };
                    };
                }
            } break;

            case 8: {
                {
                    const t_867 = temp_849[2];
                    {
                        const temp_868 = t_867;
                        switch (temp_868 && temp_868[1]) {
                        case 1: {
                            {
                                const name_869 = temp_868[2];
                                return name_869;
                            }
                        } break;

                        case 2: {
                            {
                                const name_870 = temp_868[2];
                                return name_870;
                            }
                        } break;
                        };
                    };
                }
            } break;

            default:
            throw 'Improper module item format ' + TestParser.stringify(node_848)
            };
        } };
        findInNamespaceRoots(name_871) { {
            if (this.namespaces.get(name_871) != null) { return this.namespaces.get(name_871) };
            let m_872 = this.namespaces.get('');
            let el_873 = null;
            {
                const temp_874 = m_872;
                switch (temp_874 && temp_874[1]) {
                case 35: {
                    {
                        const els_875 = temp_874[3];
                        el_873 = els_875;
                    }
                } break;

                default:
                return null
                };
            };
            for (const e of $toIterator(el_873)) if (name_871 == this.nameOfModuleItem(e)) { return e };
            return null;
        } };
        pushScope() { this.scopes.push((new Map())) };
        popScope() { this.scopes.pop() };
        addScope(name_876, node_877) { this.scopes[this.scopes.length - 1].set(name_876, node_877) };
        unify(to, from, node_878) { {
            if (to == from) { return to };
            if (to == this.typeAny) { return to };
            if (from == this.typeVoid) { Typer.fail(('Incompatible types `' + (Type.stringify(to)) + '` and non-value type `Void`'), node_878) };
            if ((to == this.typeFloat) && (from == this.typeInt)) { return this.typeFloat };
            const isNullable = (t_879) => {
                {
                    const temp_880 = t_879;
                    switch (temp_880 && temp_880[1]) {
                    case 1: {
                        return true
                    } break;

                    case 2: {
                        return true
                    } break;
                    };
                };
                return false;
            };
            const unwrapNullable = (t_881) => {
                {
                    const temp_882 = t_881;
                    switch (temp_882 && temp_882[1]) {
                    case 1: {
                        {
                            const handle_883 = temp_882[2];
                            return handle_883.value;
                        }
                    } break;

                    case 2: {
                        {
                            const t_884 = temp_882[2];
                            return t_884;
                        }
                    } break;
                    };
                };
                return t_881;
            };
            const instanceOfClass = (t_885) => {
                {
                    const temp_886 = unwrapNullable(t_885);
                    switch (temp_886 && temp_886[1]) {
                    case 6: {
                        {
                            const t_887 = temp_886[2];
                            return t_887;
                        }
                    } break;

                    case 3: {
                        {
                            const t_888 = temp_886[2];
                            Typer.fail(('Cannot take classes `class ' + (t_888.name) + '` as values'), node_878);
                        }
                    } break;
                    };
                };
                return null;
            };
            let toNullable = isNullable(to);
            let fromNullable = isNullable(from);
            let toInstance = instanceOfClass(to);
            let fromInstance = instanceOfClass(from);
            if (toInstance == null || fromInstance == null) { return ((to) || (from)) };
            if ((toInstance != fromInstance) && (to != this.typeAny) && (from != this.typeAny)) { Typer.fail(('Incompatible types `' + (Type.stringify(to)) + '` and value of `' + (Type.stringify(from)) + '`'), node_878) };
            return ((to) || (from));
        } };
        findType(name_889) { {
            {
                let i_890 = 0;
                let it_891 = 0;
                let at_892 = this.scopes.length;
                while (it_891 < at_892) {
                    i_890 = it_891;
                    it_891++;
                    {
                        {
                            let step_893 = 0;
                            const subj_894 = this.scopes[this.scopes.length - i_890 - 1].get(name_889);
                            if (step_893 == 0 && subj_894 != null) { step_893 = 1 };
                            if (step_893 == 1) { return subj_894 };
                        };
                    };
                };
            };
            return this.findInNamespaceRoots(name_889);
        } };
        toType(t_895, node_896) { {
            const temp_897 = t_895;
            switch (temp_897 && temp_897[1]) {
            case 1: {
                {
                    const name_898 = temp_897[2];
                    {
                        const nodeType = this.findType(name_898);
                        if (this.types.get(nodeType) == null) {
                            const temp_899 = nodeType;
                            switch (temp_899 && temp_899[1]) {
                            case 25: {
                                this.registerClassType(nodeType)
                            } break;

                            case 37: {
                                this.registerEnumType(nodeType)
                            } break;
                            };
                        };
                        {
                            const temp_900 = this.types.get(nodeType);
                            switch (temp_900 && temp_900[1]) {
                            case 3: {
                                {
                                    const type_901 = temp_900[2];
                                    return type_901.instantiate();
                                }
                            } break;

                            case 4: {
                                {
                                    const type_902 = temp_900[2];
                                    return this.types.get(nodeType);
                                }
                            } break;

                            case null: case undefined: {
                                {
                                    if (this.typeAny == null) { this.typeAny = this.registerClassType(this.findInNamespaceRoots('Any')).instantiate() };
                                    if (this.typeAny == null) { Typer.fail('still, typeAny == null', node_896) };
                                    if (name_898 == 'T') { return this.typeAny };
                                    if (name_898 == 'V') { return this.typeAny };
                                    if (name_898 == 'K') { return this.typeAny };
                                    Typer.fail(('Cannot find type `' + (name_898) + '`'), node_896);
                                }
                            } break;

                            default:
                            Typer.fail(('Unsupported type `' + (name_898) + '`'), node_896)
                            };
                        };
                    };
                }
            } break;

            case 2: {
                {
                    const name_903 = temp_897[2];
                    const params_904 = temp_897[3];
                    {
                        const nodeType_905 = this.findType(name_903);
                        if (this.types.get(nodeType_905) == null) {
                            const temp_906 = nodeType_905;
                            switch (temp_906 && temp_906[1]) {
                            case 25: {
                                this.registerClassType(nodeType_905)
                            } break;

                            case 37: {
                                this.registerEnumType(nodeType_905)
                            } break;
                            };
                        };
                        {
                            const temp_907 = this.types.get(nodeType_905);
                            switch (temp_907 && temp_907[1]) {
                            case 3: {
                                {
                                    const type_908 = temp_907[2];
                                    return type_908.instantiateGeneric((() => {
                                        const result_909 = [];
                                        const value_910 = params_904;
                                        for (const p of $toIterator(value_910)) result_909.push(this.toType(p, node_896));
                                        return result_909;
                                    })());
                                }
                            } break;

                            case null: case undefined: {
                                Typer.fail(('Cannot find type `' + (name_903) + '`'), node_896)
                            } break;

                            default:
                            Typer.fail(('Unsupported type `' + (name_903) + '`'), node_896)
                            };
                        };
                    };
                }
            } break;

            case 0: {
                {
                    const t_911 = temp_897[2];
                    return (["Nullable",2,this.toType(t_911, node_896)]);
                }
            } break;

            case 3: {
                {
                    const args_912 = temp_897[2];
                    const ret = temp_897[3];
                    return (["Function",10,(() => {
                        const result_913 = [];
                        const value_914 = args_912;
                        for (const arg of $toIterator(value_914)) result_913.push(this.toType(arg, node_896));
                        return result_913;
                    })(),this.toType(ret, node_896)]);
                }
            } break;

            case 5: {
                {
                    const names_915 = temp_897[2];
                    const el_916 = temp_897[3];
                    {
                        const els_917 = (() => {
                            const result_918 = [];
                            const value_919 = el_916;
                            for (const e of $toIterator(value_919)) result_918.push(this.toType(e, node_896));
                            return result_918;
                        })();
                        return (["Struct",11,names_915,els_917]);
                    };
                }
            } break;

            default:
            Typer.fail('Unsupported node type ' + t_895 + Typer.never, node_896)
            };
        } };
        mixVarTypes(t_920, e_921, node_922) { {
            if ((t_920 != null) && (e_921 != null)) { this.types.set(node_922, this.unify(this.toType(t_920, node_922), this.types.get(e_921), e_921)) };
            if ((t_920 == null) && (e_921 != null)) { this.types.set(node_922, this.types.get(e_921)) };
            if ((t_920 == null) && (e_921 == null)) { this.types.set(node_922, (["UnknownNullable",1,{value:null}])) };
            if ((t_920 != null) && (e_921 == null)) { this.types.set(node_922, this.toType(t_920, node_922)) };
        } };
        fillFunction(node_923, expr_924, vars_925, rettype_926, arrow) { {
            this.pushScope();
            const _insideFunction = this.insideFunction;
            const _functionAllowedToThrow = this.functionAllowedToThrow;
            const _functionThrows = this.functionThrows;
            const _functionReturnsAType = this.functionReturnsAType;
            const _insideTry = this.insideTry;
            {
                let i_927 = 0;
                let it_928 = 0;
                let at_929 = vars_925.length;
                while (it_928 < at_929) {
                    i_927 = it_928;
                    it_928++;
                    {
                        const v_930 = vars_925[i_927];
                        {
                            const temp_931 = v_930;
                            switch (temp_931 && temp_931[1]) {
                            case 23: {
                                {
                                    const vname_932 = temp_931[2];
                                    const t_933 = temp_931[3];
                                    const e_934 = temp_931[4];
                                    const const_935 = temp_931[5];
                                    {
                                        if ((t_933 != null) && (this.toType(t_933, v_930) == this.typeVoid)) { Typer.fail('Argument cannot be of type `Void`', v_930) };
                                        if (e_934 != null) { this.fillExpression(e_934) };
                                        if (t_933 != null) { this.types.set(v_930, this.toType(t_933, v_930)) };
                                        this.addScope(vname_932, v_930);
                                    };
                                }
                            } break;
                            };
                        };
                    };
                };
            };
            let ret_936 = (rettype_926 != null)? (this.toType(rettype_926, node_923)) : null;
            this.functionReturnsAType = ret_936;
            const atts_937 = Project.mapAttributes.get(node_923);
            {
                let step_938 = 0;
                const noThrow = DataHelper.getAttribute(atts_937, 'noThrow');
                if (step_938 == 0 && noThrow != null) { step_938 = 1 };
                if (step_938 == 1) {
                    if (noThrow.values.length > 0) { Typer.fail('Attribute `@noThrow` should have no parameters', node_923) };
                    this.functionAllowedToThrow = false;
                } else this.functionAllowedToThrow = true;
            };
            {
                let step_939 = 0;
                const throws = DataHelper.getAttribute(atts_937, 'throws');
                if (step_939 == 0 && throws != null) { step_939 = 1 };
                if (step_939 == 1) {
                    if (this.functionAllowedToThrow == false) { Typer.fail('Attribute `@noThrow` cannot be used with `@throws`', node_923) };
                    this.functionThrows = true;
                } else this.functionThrows = false;
            };
            this.insideFunction = true;
            this.insideTry = false;
            if ((arrow) && (expr_924 != null)) { this.fillExpression(expr_924) };
            if ((!arrow) && (expr_924 != null)) { this.fill(expr_924) };
            this.popScope();
            ret_936 = this.functionReturnsAType;
            if (ret_936 == null) { ret_936 = this.typeVoid };
            this.insideFunction = _insideFunction;
            this.functionReturnsAType = _functionReturnsAType;
            this.types.set(node_923, (["Function",10,(() => {
                const result_940 = [];
                const value_941 = vars_925;
                for (const v of $toIterator(value_941)) result_940.push(this.types.get(v));
                return result_940;
            })(),ret_936,node_923]));
        } };
        fill(node_942) { {
            const temp_943 = node_942;
            switch (temp_943 && temp_943[1]) {
            case 25: {
                {
                    const t_944 = temp_943[2];
                    const extend_945 = temp_943[3];
                    const implement_946 = temp_943[4];
                    const f_947 = temp_943[5];
                    const external_948 = temp_943[6];
                    {
                        this.addScope(DataHelper.extractTypeName(t_944), node_942);
                        this.registerClassType(node_942);
                    };
                }
            } break;

            case 37: {
                {
                    const t_949 = temp_943[2];
                    const f_950 = temp_943[3];
                    const valuesType_951 = temp_943[4];
                    {
                        this.addScope(DataHelper.extractTypeName(t_949), node_942);
                        this.registerEnumType(node_942);
                    };
                }
            } break;

            case 8: {
                {
                    const alias = temp_943[2];
                    const value_952 = temp_943[3];
                    {
                        this.types.set(node_942, (["Alias",5,null]));
                        this.addScope(this.nameOfModuleItem(node_942), node_942);
                    };
                }
            } break;

            case 24: {
                {
                    const e_953 = temp_943[2];
                    for (const ee of $toIterator(e_953)) this.fill(ee);
                }
            } break;

            case 11: {
                {
                    const el_954 = temp_943[2];
                    {
                        this.pushScope();
                        for (const e of $toIterator(el_954)) this.fill(e);
                        this.popScope();
                    };
                }
            } break;

            case 23: {
                {
                    const name_955 = temp_943[2];
                    const t_956 = temp_943[3];
                    const e_957 = temp_943[4];
                    const const_958 = temp_943[5];
                    const external_959 = temp_943[6];
                    {
                        if ((e_957 == null) && (const_958) && (!external_959)) { Typer.fail(('Constant should have a value `let ' + (name_955) + ' = value`'), node_942) };
                        if ((e_957 != null) && (external_959)) { Typer.fail(('External variable should not have a value `declare let ' + (name_955) + '`'), node_942) };
                        if ((t_956 == null) && (external_959)) { Typer.fail(('External variable should have a type `declare let ' + (name_955) + ': T`'), node_942) };
                        if (e_957 != null) {
                            this.pushScope();
                            this.fillExpression(e_957);
                            this.popScope();
                        };
                        this.mixVarTypes(t_956, e_957, node_942);
                        this.addScope(name_955, node_942);
                    };
                }
            } break;

            case 9: {
                {
                    const a_960 = temp_943[2];
                    const op_961 = temp_943[3];
                    const b_962 = temp_943[4];
                    {
                        this.fillExpression(a_960);
                        this.fillExpression(b_962);
                        let parent_963 = this.parents.get(a_960);
                        if (op_961 == 91) {
                            const temp_964 = parent_963;
                            switch (temp_964 && temp_964[1]) {
                            case null: case undefined: {
                                {
                                }
                            } break;

                            case 23: {
                                {
                                    const name_965 = temp_964[2];
                                    const const_966 = temp_964[5];
                                    {
                                        if (const_966) { Typer.fail(('Cannot reassign a constant `let ' + (name_965) + '`, redefine it as `var ' + (name_965) + '` to allow reassignment\n') + Typer.positionOf(parent_963) + ('`let ' + (name_965) + '` is defined here'), node_942) };
                                        this.types.set(node_942, this.unify(this.types.get(a_960), this.types.get(b_962), b_962));
                                    };
                                }
                            } break;

                            case 1: {
                                {
                                    const name_967 = temp_964[2];
                                    Typer.fail(('Cannot reassign case parameter `' + (name_967) + '`'), node_942);
                                }
                            } break;

                            case 21: {
                                {
                                    const name_968 = temp_964[2];
                                    Typer.fail(('Cannot reassign a function `' + (name_968) + '`'), node_942);
                                }
                            } break;

                            case 25: {
                                Typer.fail('Cannot reassign class', node_942)
                            } break;

                            case 37: {
                                Typer.fail('Cannot reassign enum', node_942)
                            } break;

                            case 46: {
                                {
                                    const name_969 = temp_964[2];
                                    Typer.fail(('Cannot reassign iterator value `' + (name_969) + '` of for loop\n') + Typer.positionOf(parent_963) + ('`for (' + (name_969) + ' in ...)` is defined here'), node_942);
                                }
                            } break;

                            case 43: {
                                {
                                }
                            } break;

                            case 4: {
                                Typer.fail('Cannot reassign `super`', node_942)
                            } break;

                            default:
                            Typer.fail('`=` not implemented for: ' + parent_963, node_942)
                            };
                        };
                    };
                }
            } break;

            case 17: {
                if (!this.allowBreakAndContinue) { Typer.fail('Cannot use `break` outside of loop', node_942) }
            } break;

            case 46: {
                {
                    const name_970 = temp_943[2];
                    const over_971 = temp_943[3];
                    const by_972 = temp_943[4];
                    const range_973 = temp_943[5];
                    {
                        this.pushScope();
                        this.fillExpression(over_971);
                        {
                            const temp_974 = this.types.get(over_971);
                            switch (temp_974 && temp_974[1]) {
                            case 6: {
                                {
                                    const type_975 = temp_974[2];
                                    const generic_976 = temp_974[3];
                                    if ((generic_976 != null) && (generic_976.length == 1)) { this.types.set(node_942, generic_976[0]) } else if (generic_976 == null) { this.types.set(node_942, this.types.get(over_971)) } else {
                                        Typer.fail('Type of iterable is neither Int nor Array ' + Type.stringify(this.types.get(over_971)), over_971);
                                    };
                                }
                            } break;

                            case 1: {
                                {
                                }
                            } break;

                            case null: case undefined: {
                                {
                                }
                            } break;

                            default:
                            Typer.fail('Type of iterable is neiter Int nor Array' + this.types.get(over_971), over_971)
                            };
                        };
                        {
                            let step_977 = 0;
                            const range_978 = range_973;
                            if (step_977 == 0 && range_978 != null) { step_977 = 1 };
                            if (step_977 == 1) {
                                this.fillExpression(range_978);
                                this.types.set(node_942, this.toType((["Type",1,'Int']), node_942));
                            };
                        };
                        this.addScope(name_970, node_942);
                        const _allowBreakAndContinue = this.allowBreakAndContinue;
                        this.allowBreakAndContinue = true;
                        this.fill(by_972);
                        this.allowBreakAndContinue = _allowBreakAndContinue;
                        this.popScope();
                    };
                }
            } break;

            case 21: {
                {
                    const name_979 = temp_943[2];
                    const expr_980 = temp_943[3];
                    const vars_981 = temp_943[4];
                    const rettype_982 = temp_943[5];
                    const external_983 = temp_943[6];
                    {
                        if ((!external_983) && (expr_980 == null)) { Typer.fail(('Non-external function `' + (name_979) + '` should have a body'), node_942) };
                        if ((external_983) && (rettype_982 == null)) { Typer.fail(('External function `' + (name_979) + '` should have a returning type'), node_942) };
                        this.addScope(name_979, node_942);
                        this.fillFunction(node_942, expr_980, vars_981, rettype_982);
                        if (false) {
                            const _insideFunction_984 = this.insideFunction;
                            this.insideFunction = true;
                            this.pushScope();
                            if (expr_980 != null) { this.fill(expr_980) };
                            this.popScope();
                            this.insideFunction = _insideFunction_984;
                        };
                    };
                }
            } break;

            case 13: {
                {
                    const econd_985 = temp_943[2];
                    const eif_986 = temp_943[3];
                    const eelse_987 = temp_943[4];
                    {
                        let depth = 0;
                        for (const e of $toIterator(econd_985)) {
                            {
                                const temp_988 = e;
                                switch (temp_988 && temp_988[1]) {
                                case 23: {
                                    {
                                        const t_989 = temp_988[3];
                                        const const_990 = temp_988[5];
                                        {
                                            if (!const_990) { Typer.fail('Only if-let bindings supported', node_942) };
                                            if (t_989 != null) { Typer.fail('Do not specify a type `: T` in if-let bindings', node_942) };
                                            depth++;
                                            this.pushScope();
                                            this.fill(e);
                                        };
                                    }
                                } break;

                                default:
                                {
                                    this.fillExpression(e);
                                    const type_991 = this.types.get(e);
                                    if ((type_991 != this.typeBool) && (type_991 != this.typeAny) && (type_991 != null)) { Typer.fail('`if (value)` expects `value` only of type `Bool`, but got `' + Type.stringify(this.types.get(e)) + '`', e) };
                                }
                                };
                            };
                        };
                        this.fill(eif_986);
                        while (depth > 0) {
                            depth--;
                            this.popScope();
                        };
                        if (eelse_987 != null) { this.fill(eelse_987) };
                    };
                }
            } break;

            case 34: {
                {
                    const exprs_992 = temp_943[2];
                    const conds_993 = temp_943[3];
                    const guards_994 = temp_943[4];
                    const cases_995 = temp_943[5];
                    {
                        for (const e of $toIterator(exprs_992)) {
                            this.pushScope();
                            this.fill(e);
                            this.popScope();
                        };
                        let i_996 = 0;
                        while (i_996 < cases_995.length) {
                            this.pushScope();
                            let e_997 = conds_993[i_996];
                            let currentType = null;
                            let currentTag = null;
                            let currentTagBind = 0;
                            const follow = (e_998) => {
                                const temp_999 = e_998;
                                switch (temp_999 && temp_999[1]) {
                                case 28: {
                                    {
                                        const ex = temp_999[2];
                                        const name_1000 = temp_999[3];
                                        this.fillExpression(e_998);
                                    }
                                } break;

                                case 29: {
                                    {
                                        const ex_1001 = temp_999[2];
                                        const name_1002 = temp_999[3];
                                        {
                                            this.fillExpression(e_998);
                                            {
                                                const temp_1003 = this.types.get(ex_1001);
                                                switch (temp_1003 && temp_1003[1]) {
                                                case 4: {
                                                    {
                                                        const type_1004 = temp_1003[2];
                                                        {
                                                            currentType = type_1004;
                                                            currentTag = name_1002;
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                        };
                                    }
                                } break;

                                case 14: {
                                    {
                                        const e_1005 = temp_999[2];
                                        this.fill(e_1005);
                                    }
                                } break;

                                case 42: {
                                    {
                                    }
                                } break;

                                case 7: {
                                    {
                                    }
                                } break;

                                case 2: {
                                    {
                                    }
                                } break;

                                case 5: {
                                    {
                                    }
                                } break;

                                case 0: {
                                    {
                                    }
                                } break;

                                case 12: {
                                    {
                                        const ex_1006 = temp_999[2];
                                        const args_1007 = temp_999[3];
                                        const argNames_1008 = temp_999[4];
                                        {
                                            follow(ex_1006);
                                            currentTagBind = 0;
                                            for (const ee of $toIterator(args_1007)) {
                                                follow(ee);
                                                currentTagBind++;
                                            };
                                        };
                                    }
                                } break;

                                case 1: {
                                    {
                                        const name_1009 = temp_999[2];
                                        if (name_1009.charAt(0) == name_1009.charAt(0).toUpperCase()) { this.fill(e_998) } else {
                                            this.addScope(name_1009, e_998);
                                            {
                                                let step_1010 = 0;
                                                const currentType_1011 = currentType;
                                                if (step_1010 == 0 && currentType_1011 != null) { step_1010 = 1 };
                                                if (step_1010 == 1) {
                                                    const indexOf = currentType_1011.fieldNames.indexOf(currentTag);
                                                    if (indexOf == -1) { Typer.fail('lblblb', e_998) };
                                                    const type_1012 = currentType_1011.tagBindVars[indexOf][currentTagBind];
                                                    const name_1013 = currentType_1011.tagBindVarsNames[indexOf][currentTagBind];
                                                    if (name_1013 == null) { Typer.fail('Too much bindings requested, available are: ' + currentType_1011.tagBindVarsNames[indexOf].join(', '), e_998) };
                                                    if (type_1012 != null) { this.types.set(e_998, this.toType(type_1012, e_998)) } else Typer.fail('tagBindVars no type for ' + name_1013, e_998);
                                                } else {
                                                    Typer.fail('No currentType for ' + name_1009, e_998);
                                                };
                                            };
                                        };
                                    }
                                } break;

                                case 9: {
                                    {
                                        const a_1014 = temp_999[2];
                                        const op_1015 = temp_999[3];
                                        const b_1016 = temp_999[4];
                                        if (op_1015 == 104) {
                                            follow(a_1014);
                                            follow(b_1016);
                                        } else Typer.fail('' + e_998, e_998);
                                    }
                                } break;

                                case 13: {
                                    {
                                        const econd_1017 = temp_999[2];
                                        {
                                            this.pushScope();
                                            this.fill(econd_1017[0]);
                                            this.popScope();
                                        };
                                    }
                                } break;

                                default:
                                Typer.fail('' + e_998, e_998)
                                };
                            };
                            follow(e_997);
                            let e_1018 = cases_995[i_996];
                            this.pushScope();
                            this.fill(e_1018);
                            this.popScope();
                            this.popScope();
                            i_996++;
                        };
                    };
                }
            } break;

            case 27: {
                {
                    const e_1019 = temp_943[2];
                    const t_1020 = temp_943[3];
                    const v_1021 = temp_943[4];
                    const ca = temp_943[5];
                    {
                        const _insideTry_1022 = this.insideTry;
                        this.insideTry = true;
                        this.fill(e_1019);
                        this.insideTry = _insideTry_1022;
                        {
                            let i_1023 = 0;
                            let it_1024 = 0;
                            let at_1025 = ca.length;
                            while (it_1024 < at_1025) {
                                i_1023 = it_1024;
                                it_1024++;
                                {
                                    this.pushScope();
                                    this.scopes[this.scopes.length - 1].set(DataHelper.varName(v_1021[i_1023]), v_1021[i_1023]);
                                    this.fill(ca[i_1023]);
                                    this.popScope();
                                };
                            };
                        };
                    };
                }
            } break;

            case 20: {
                {
                    const econd_1026 = temp_943[2];
                    const e_1027 = temp_943[3];
                    const pre_1028 = temp_943[4];
                    {
                        if (pre_1028 == true) { this.fillExpression(econd_1026) };
                        const _allowBreakAndContinue_1029 = this.allowBreakAndContinue;
                        this.allowBreakAndContinue = true;
                        this.fill(e_1027);
                        this.allowBreakAndContinue = _allowBreakAndContinue_1029;
                        if (pre_1028 == false) { this.fillExpression(econd_1026) };
                        this.types.set(node_942, this.typeVoid);
                    };
                }
            } break;

            case 18: {
                {
                    this.types.set(node_942, this.typeVoid);
                    if (!this.allowBreakAndContinue) { Typer.fail('Cannot use `continue` outside of loop', node_942) };
                }
            } break;

            default:
            this.fillExpression(node_942)
            };
        } };
        fillExpression(node_1030) { {
            const temp_1031 = node_1030;
            switch (temp_1031 && temp_1031[1]) {
            case 1: {
                {
                    const name_1032 = temp_1031[2];
                    {
                        let subj_1033 = null;
                        {
                            let i_1034 = 0;
                            let it_1035 = 0;
                            let at_1036 = this.scopes.length;
                            while (it_1035 < at_1036) {
                                i_1034 = it_1035;
                                it_1035++;
                                {
                                    subj_1033 = this.scopes[this.scopes.length - i_1034 - 1].get(name_1032);
                                    if (subj_1033 != null) { break };
                                };
                            };
                        };
                        if (subj_1033 == null) { subj_1033 = this.findInNamespaceRoots(name_1032) };
                        if ((subj_1033 == null) && (name_1032 == 'const')) { Typer.fail('No variable named `const` found. Are you trying to use `const` as a keyword? Use `let varname` syntax instead.', node_1030) };
                        if (subj_1033 == null) { Typer.fail(('Cannot find variable with name `' + (name_1032) + '`'), node_1030) };
                        if ((this.parents.get(node_1030) != null) && (this.parents.get(node_1030) != subj_1033)) { Typer.fail(('Parent overwitten from ' + (this.parents.get(node_1030)) + ' to ' + (subj_1033) + ' for node ' + (node_1030) + '') + Typer.never, node_1030) };
                        this.parents.set(node_1030, subj_1033);
                        {
                            let step_1037 = 0;
                            const type_1038 = this.types.get(subj_1033);
                            if (step_1037 == 0 && type_1038 != null) { step_1037 = 1 };
                            if (step_1037 == 1) { this.types.set(node_1030, type_1038) } else {
                                const v_1039 = '' + subj_1033;
                                {
                                };
                            };
                        };
                    };
                }
            } break;

            case 22: {
                {
                    const expr_1040 = temp_1031[2];
                    const vars_1041 = temp_1031[3];
                    const rettype_1042 = temp_1031[4];
                    {
                        this.fillFunction(node_1030, expr_1040, vars_1041, rettype_1042, true);
                        if (false) {
                            this.pushScope();
                            const _insideFunction_1043 = this.insideFunction;
                            this.insideFunction = true;
                            this.fillExpression(expr_1040);
                            this.popScope();
                            this.insideFunction = _insideFunction_1043;
                        };
                    };
                }
            } break;

            case 21: {
                {
                    const name_1044 = temp_1031[2];
                    const expr_1045 = temp_1031[3];
                    const vars_1046 = temp_1031[4];
                    const rettype_1047 = temp_1031[5];
                    const external_1048 = temp_1031[6];
                    {
                        if (external_1048) { Typer.fail(('External function `declare function ' + (name_1044) + '` cannot be taken as a value'), node_1030) };
                        this.fillFunction(node_1030, expr_1045, vars_1046, rettype_1047);
                        if (false) {
                            this.pushScope();
                            this.addScope(name_1044, node_1030);
                            const _insideFunction_1049 = this.insideFunction;
                            this.insideFunction = true;
                            if (expr_1045 != null) { this.fill(expr_1045) };
                            this.popScope();
                            this.insideFunction = _insideFunction_1049;
                        };
                    };
                }
            } break;

            case 31: {
                {
                    const el_1050 = temp_1031[2];
                    {
                        const temp_1051 = el_1050[0];
                        switch (temp_1051 && temp_1051[1]) {
                        case 46: {
                            {
                                const name_1052 = temp_1051[2];
                                const over_1053 = temp_1051[3];
                                const by_1054 = temp_1051[4];
                                const range_1055 = temp_1051[5];
                                {
                                    if (el_1050.length > 1) { Typer.fail('Cannot use loop `for` within array of more than one element `[for(), ...]`', el_1050[1]) };
                                    if (range_1055 != null) { Typer.fail('Ranges `...range` are not supported here yet', range_1055) };
                                    this.pushScope();
                                    this.fillExpression(over_1053);
                                    this.types.set(el_1050[0], this.types.get(over_1053));
                                    this.addScope(name_1052, el_1050[0]);
                                    const _allowBreakAndContinue_1056 = this.allowBreakAndContinue;
                                    this.allowBreakAndContinue = false;
                                    this.fillExpression(by_1054);
                                    this.allowBreakAndContinue = _allowBreakAndContinue_1056;
                                    this.popScope();
                                    this.types.set(node_1030, this.typeArray.instantiateGeneric([this.types.get(by_1054)]));
                                };
                            }
                        } break;

                        default:
                        {
                            for (const e of $toIterator(el_1050)) this.fillExpression(e);
                            this.types.set(node_1030, this.typeArray.instantiateGeneric([this.types.get(el_1050[0])]));
                        }
                        };
                    };
                }
            } break;

            case 32: {
                {
                    const keys_1057 = temp_1031[2];
                    const values_1058 = temp_1031[3];
                    {
                        if (keys_1057.length == 0) {
                            this.types.set(node_1030, this.typeMap.instantiateGeneric([(["Unknown",0,{value:null}]), (["Unknown",0,{value:null}])]));
                            return;
                        };
                        {
                            let i_1059 = 0;
                            let it_1060 = 0;
                            let at_1061 = keys_1057.length;
                            while (it_1060 < at_1061) {
                                i_1059 = it_1060;
                                it_1060++;
                                {
                                    this.fillExpression(keys_1057[i_1059]);
                                    this.fillExpression(values_1058[i_1059]);
                                };
                            };
                        };
                        this.types.set(node_1030, this.typeMap.instantiateGeneric([this.types.get(keys_1057[0]), this.types.get(values_1058[0])]));
                    };
                }
            } break;

            case 41: {
                {
                    const e_1062 = temp_1031[2];
                    const kind = temp_1031[3];
                    const t_1063 = temp_1031[4];
                    {
                        const type_1064 = this.toType(t_1063, node_1030);
                        if (type_1064 == this.typeVoid) { Typer.fail('Conversion `as Void` makes no sense', e_1062) };
                        this.fillExpression(e_1062);
                        if (this.types.get(e_1062) == this.typeVoid) { Typer.fail(('Conversion of `value as ' + (Type.stringify(t_1063)) + '` where `value` is of type `Void` makes no sense'), e_1062) };
                        this.types.set(node_1030, type_1064);
                    };
                }
            } break;

            case 40: {
                {
                    const e_1065 = temp_1031[2];
                    const t_1066 = temp_1031[3];
                    {
                        const type_1067 = this.toType(t_1066, node_1030);
                        if (type_1067 == this.typeAny) { Typer.fail('Comparing `is Any` makes no sense, always true', e_1065) };
                        if (type_1067 == this.typeVoid) { Typer.fail('Comparing `is Void` makes no sense', e_1065) };
                        if (this.typeAny == null) { Typer.fail('typeAny == null', e_1065) };
                        if (this.typeVoid == null) { Typer.fail('typeVoid == null', e_1065) };
                        if (this.typeBool == null) { Typer.fail('typeBool == null', e_1065) };
                        this.fillExpression(e_1065);
                        this.types.set(node_1030, this.typeBool);
                    };
                }
            } break;

            case 11: {
                {
                    const el_1068 = temp_1031[2];
                    {
                        if (el_1068.length == 0) { Typer.fail('Cannot use empty block `{}` as a value, use `{:}` syntax to create empty object', node_1030) };
                        this.pushScope();
                        {
                            let i_1069 = 0;
                            let it_1070 = 0;
                            let at_1071 = el_1068.length;
                            while (it_1070 < at_1071) {
                                i_1069 = it_1070;
                                it_1070++;
                                if (i_1069 < el_1068.length - 1) { this.fill(el_1068[i_1069]) };
                            };
                        };
                        const latest = el_1068[el_1068.length - 1];
                        this.fillExpression(latest);
                        this.types.set(node_1030, this.types.get(latest));
                        this.popScope();
                    };
                }
            } break;

            case 28: {
                {
                    const e_1072 = temp_1031[2];
                    const n_1073 = temp_1031[3];
                    {
                        {
                            const temp_1074 = e_1072;
                            switch (temp_1074 && temp_1074[1]) {
                            case 4: {
                                if (!this.allowSuper) { Typer.fail('Cannot access `super` here', node_1030) }
                            } break;

                            default:
                            this.fillExpression(e_1072)
                            };
                        };
                        {
                            let step_1075 = 0;
                            const etype = this.types.get(e_1072);
                            if (step_1075 == 0 && etype != null) { step_1075 = 1 };
                            if (step_1075 == 1) {
                                const temp_1076 = etype;
                                switch (temp_1076 && temp_1076[1]) {
                                case 6: {
                                    {
                                        const type_1077 = temp_1076[2];
                                        {
                                            if (etype == this.typeAny) {
                                                this.types.set(node_1030, this.typeAny);
                                                return;
                                            };
                                            const index_1078 = type_1077.fieldNames.indexOf(n_1073);
                                            if (index_1078 < 0) { Typer.fail(('Class `' + (this.nameOfModuleItem(type_1077.parent)) + '` has no field `.' + (n_1073) + '`\nAvailable fields are: ') + type_1077.fieldNames.join(', '), ((e_1072) || (node_1030))) };
                                            if (type_1077.fieldStatic[index_1078] == true) { Typer.fail(('Class `' + (this.nameOfModuleItem(type_1077.parent)) + '` field `.' + (n_1073) + '` is static'), node_1030) };
                                            {
                                                const temp_1079 = type_1077.parent;
                                                switch (temp_1079 && temp_1079[1]) {
                                                case 25: {
                                                    {
                                                        const t_1080 = temp_1079[2];
                                                        const extend_1081 = temp_1079[3];
                                                        const implement_1082 = temp_1079[4];
                                                        const fields_1083 = temp_1079[5];
                                                        const external_1084 = temp_1079[6];
                                                        {
                                                            this.registerClassType(type_1077.parent);
                                                            for (const field of $toIterator(fields_1083)) if (DataHelper.nameOf(field) == n_1073) {
                                                                this.types.set(node_1030, this.types.get(field));
                                                                this.parents.set(node_1030, field);
                                                                if (this.types.get(field) == null) {
                                                                    console.log(Typer.positionOf(node_1030) + ('Note: field fieldInitialized[' + (n_1073) + '] ='), type_1077.fieldInitialized[type_1077.fieldNames.indexOf(n_1073)]);
                                                                    Typer.fail('Type for this field is null: ' + n_1073, field);
                                                                };
                                                            };
                                                        };
                                                    }
                                                } break;

                                                default:
                                                Typer.fail(type_1077.parent, type_1077.parent)
                                                };
                                            };
                                        };
                                    }
                                } break;

                                case 3: {
                                    {
                                        const type_1085 = temp_1076[2];
                                        {
                                            const index_1086 = type_1085.fieldNames.indexOf(n_1073);
                                            if (index_1086 < 0) { Typer.fail(('Class `' + (this.nameOfModuleItem(type_1085.parent)) + '` has no static field `.' + (n_1073) + '`\nAvailable fields are: ') + type_1085.fieldNames.join(', '), node_1030) };
                                            if (type_1085.fieldStatic[index_1086] != true) { Typer.fail(('Class `' + (this.nameOfModuleItem(type_1085.parent)) + '` field `.' + (n_1073) + '` is not static'), node_1030) };
                                            {
                                                const temp_1087 = type_1085.parent;
                                                switch (temp_1087 && temp_1087[1]) {
                                                case 25: {
                                                    {
                                                        const t_1088 = temp_1087[2];
                                                        const extend_1089 = temp_1087[3];
                                                        const implement_1090 = temp_1087[4];
                                                        const fields_1091 = temp_1087[5];
                                                        const external_1092 = temp_1087[6];
                                                        for (const field of $toIterator(fields_1091)) if (DataHelper.nameOf(field) == n_1073) {
                                                            this.types.set(node_1030, this.types.get(field));
                                                            this.parents.set(node_1030, field);
                                                        };
                                                    }
                                                } break;

                                                default:
                                                Typer.fail(type_1085.parent, type_1085.parent)
                                                };
                                            };
                                        };
                                    }
                                } break;

                                case 4: {
                                    {
                                        const type_1093 = temp_1076[2];
                                        {
                                            const index_1094 = type_1093.fieldNames.indexOf(n_1073);
                                            if (index_1094 < 0) { Typer.fail(('Enum `' + (type_1093.name) + '` has no field `.' + (n_1073) + '`'), node_1030) };
                                            if (type_1093.fieldStatic[index_1094] != true) { Typer.fail(('Enum field `.' + (n_1073) + '` is not static'), node_1030) };
                                            {
                                                const temp_1095 = type_1093.parent;
                                                switch (temp_1095 && temp_1095[1]) {
                                                case 37: {
                                                    {
                                                        const t_1096 = temp_1095[2];
                                                        const fields_1097 = temp_1095[3];
                                                        const valuesType_1098 = temp_1095[4];
                                                        for (const field of $toIterator(fields_1097)) {
                                                            const temp_1099 = field;
                                                            switch (temp_1099 && temp_1099[1]) {
                                                            case 12: {
                                                                {
                                                                }
                                                            } break;

                                                            case 48: {
                                                                {
                                                                }
                                                            } break;

                                                            case 9: {
                                                                {
                                                                }
                                                            } break;

                                                            default:
                                                            if (DataHelper.nameOf(field) == n_1073) {
                                                                this.types.set(node_1030, this.types.get(field));
                                                                this.parents.set(node_1030, field);
                                                            }
                                                            };
                                                        };
                                                    }
                                                } break;

                                                default:
                                                Typer.fail(type_1093.parent, type_1093.parent)
                                                };
                                            };
                                        };
                                    }
                                } break;

                                case 11: {
                                    {
                                        const names_1100 = temp_1076[2];
                                        const els_1101 = temp_1076[3];
                                        {
                                            const index_1102 = names_1100.indexOf(n_1073);
                                            if (index_1102 < 0) {
                                                let object_1103 = '';
                                                {
                                                    const temp_1104 = e_1072;
                                                    switch (temp_1104 && temp_1104[1]) {
                                                    case 1: {
                                                        {
                                                            const name_1105 = temp_1104[2];
                                                            object_1103 = (' `' + (name_1105) + '`');
                                                        }
                                                    } break;

                                                    default:
                                                    {
                                                    }
                                                    };
                                                };
                                                if (names_1100.length == 0) { Typer.fail(('Object' + (object_1103) + ' is empty `{:}` and has no fields. Create object with all fields defined upfront, like this: `obj = { ' + (n_1073) + ': value }`'), node_1030) };
                                                if (names_1100.length != 0) { Typer.fail(('Object' + (object_1103) + ' has no field `.' + (n_1073) + '`\nAvailable fields are: ') + names_1100.join(', '), node_1030) };
                                            };
                                            this.types.set(node_1030, els_1101[index_1102]);
                                        };
                                    }
                                } break;

                                case null: case undefined: {
                                    {
                                    }
                                } break;

                                default:
                                {
                                }
                                };
                            };
                        };
                    };
                }
            } break;

            case 29: {
                {
                    const e_1106 = temp_1031[2];
                    const n_1107 = temp_1031[3];
                    {
                        {
                            const temp_1108 = e_1106;
                            switch (temp_1108 && temp_1108[1]) {
                            case 4: {
                                Typer.fail('Cannot access `super` here', node_1030)
                            } break;
                            };
                        };
                        this.fillExpression(e_1106);
                        {
                            const temp_1109 = this.types.get(e_1106);
                            switch (temp_1109 && temp_1109[1]) {
                            case 3: {
                                {
                                    const type_1110 = temp_1109[2];
                                    {
                                        const index_1111 = type_1110.fieldNames.indexOf(n_1107);
                                        if (index_1111 < 0) { Typer.fail(('Class has no field `.' + (n_1107) + '`'), node_1030) };
                                        if (type_1110.fieldStatic[index_1111] != true) { Typer.fail(('Class field `.' + (n_1107) + '` is not static'), node_1030) };
                                        Typer.fail('class.Upper', node_1030);
                                    };
                                }
                            } break;

                            case 4: {
                                {
                                    const type_1112 = temp_1109[2];
                                    {
                                        const index_1113 = type_1112.fieldNames.indexOf(n_1107);
                                        if (index_1113 < 0) { Typer.fail(('Enum has no value constructor `.' + (n_1107) + '`'), node_1030) };
                                        if (type_1112.fieldEnumConstructor[index_1113] != true) { Typer.fail(('Enum field `.' + (n_1107) + '` is not a value constructor'), node_1030) };
                                        {
                                            let step_1114 = 0;
                                            const fieldType = type_1112.fieldType[index_1113];
                                            if (step_1114 == 0 && fieldType != null) { step_1114 = 1 };
                                            if (step_1114 == 1) { this.types.set(node_1030, fieldType) } else Typer.fail(('Enum field type is null for `' + (Node.stringify(node_1030)) + '`'), node_1030);
                                        };
                                    };
                                }
                            } break;

                            case null: case undefined: {
                                Typer.fail(('Doing .Upper `' + (Node.stringify(node_1030)) + '` over `' + (Node.stringify(e_1106)) + '` (' + (e_1106) + ') of type null'), node_1030)
                            } break;

                            default:
                            Typer.fail('?.Upper', node_1030)
                            };
                        };
                    };
                }
            } break;

            case 48: {
                {
                    const t_1115 = temp_1031[2];
                    {
                        const temp_1116 = t_1115;
                        switch (temp_1116 && temp_1116[1]) {
                        case 1: {
                            {
                                const name_1117 = temp_1116[2];
                                {
                                    let subj_1118 = null;
                                    {
                                        let i_1119 = 0;
                                        let it_1120 = 0;
                                        let at_1121 = this.scopes.length;
                                        while (it_1120 < at_1121) {
                                            i_1119 = it_1120;
                                            it_1120++;
                                            {
                                                subj_1118 = this.scopes[this.scopes.length - i_1119 - 1].get(name_1117);
                                                if (subj_1118 != null) { break };
                                            };
                                        };
                                    };
                                    if (subj_1118 == null) { subj_1118 = this.findInNamespaceRoots(name_1117) };
                                    if (subj_1118 == null) { Typer.fail(('Cannot find type with name `' + (name_1117) + '`'), node_1030) };
                                    if ((this.parents.get(node_1030) != null) && (this.parents.get(node_1030) != subj_1118)) { Typer.fail(('Parent overwitten from ' + (this.parents.get(node_1030)) + ' to ' + (subj_1118) + ' for node ' + (node_1030) + '') + Typer.never, node_1030) };
                                    this.parents.set(node_1030, subj_1118);
                                    {
                                        let step_1122 = 0;
                                        const type_1123 = this.types.get(subj_1118);
                                        if (step_1122 == 0 && type_1123 != null) { step_1122 = 1 };
                                        if (step_1122 == 1) { this.types.set(node_1030, type_1123) } else {
                                            {
                                                const temp_1124 = subj_1118;
                                                switch (temp_1124 && temp_1124[1]) {
                                                case 25: {
                                                    this.registerClassType(subj_1118)
                                                } break;

                                                case 37: {
                                                    this.registerEnumType(subj_1118)
                                                } break;
                                                };
                                            };
                                            {
                                                let step_1125 = 0;
                                                const type_1126 = this.types.get(subj_1118);
                                                if (step_1125 == 0 && type_1126 != null) { step_1125 = 1 };
                                                if (step_1125 == 1) { this.types.set(node_1030, type_1126) } else {
                                                    console.log(Typer.positionOf(subj_1118) + ('' + (name_1117) + ' is here'));
                                                    Typer.fail(('Cannot find type for `' + (name_1117) + '` even after late build') + Typer.never, node_1030);
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                        } break;

                        case 2: {
                            {
                                const name_1127 = temp_1116[2];
                                Typer.fail(('Cannot use generic type `' + (name_1127) + '` as a value'), node_1030);
                            }
                        } break;

                        default:
                        Typer.fail('Cannot use this type as a value', node_1030)
                        };
                    };
                }
            } break;

            case 30: {
                {
                    const path_1128 = temp_1031[2];
                    const t_1129 = temp_1031[3];
                    const el_1130 = temp_1031[4];
                    const names_1131 = temp_1031[5];
                    const values_1132 = temp_1031[6];
                    {
                        const type_1133 = this.toType(t_1129, node_1030);
                        for (const e of $toIterator(el_1130)) this.fillExpression(e);
                        {
                            const temp_1134 = type_1133;
                            switch (temp_1134 && temp_1134[1]) {
                            case 6: {
                                {
                                    const type_1135 = temp_1134[2];
                                    if (type_1135.constructor == -1) { Typer.fail('Cannot construct class without `new () {}` constructor', node_1030) };
                                }
                            } break;

                            default:
                            Typer.fail('Constructor `new` may instantiate only classes', node_1030)
                            };
                        };
                        this.types.set(node_1030, type_1133);
                    };
                }
            } break;

            case 36: {
                {
                    const names_1136 = temp_1031[2];
                    const el_1137 = temp_1031[3];
                    {
                        {
                            let name_1138 = 0;
                            let it_1139 = 0;
                            let at_1140 = names_1136.length;
                            while (it_1139 < at_1140) {
                                name_1138 = it_1139;
                                it_1139++;
                                if (names_1136.indexOf(names_1136[name_1138]) != name_1138) { Typer.fail(('Field `' + (names_1136[name_1138]) + '` already exists'), node_1030) };
                            };
                        };
                        for (const e of $toIterator(el_1137)) this.fillExpression(e);
                        const els_1141 = (() => {
                            const result_1142 = [];
                            const value_1143 = el_1137;
                            for (const e of $toIterator(value_1143)) result_1142.push(this.types.get(e));
                            return result_1142;
                        })();
                        this.types.set(node_1030, (["Struct",11,names_1136,els_1141]));
                    };
                }
            } break;

            case 27: {
                {
                    const e_1144 = temp_1031[2];
                    const t_1145 = temp_1031[3];
                    const v_1146 = temp_1031[4];
                    const ca_1147 = temp_1031[5];
                    {
                        const _insideTry_1148 = this.insideTry;
                        this.insideTry = true;
                        this.fillExpression(e_1144);
                        this.insideTry = _insideTry_1148;
                        {
                            let i_1149 = 0;
                            let it_1150 = 0;
                            let at_1151 = ca_1147.length;
                            while (it_1150 < at_1151) {
                                i_1149 = it_1150;
                                it_1150++;
                                {
                                    this.pushScope();
                                    this.scopes[this.scopes.length - 1].set(DataHelper.varName(v_1146[i_1149]), v_1146[i_1149]);
                                    this.fill(ca_1147[i_1149]);
                                    this.popScope();
                                };
                            };
                        };
                        this.types.set(node_1030, this.types.get(e_1144));
                    };
                }
            } break;

            case 13: {
                {
                    const econd_1152 = temp_1031[2];
                    const eif_1153 = temp_1031[3];
                    const eelse_1154 = temp_1031[4];
                    {
                        if (econd_1152.length > 1) { Typer.fail('More than one condition is not yet supported', econd_1152[1]) };
                        {
                            const temp_1155 = econd_1152[0];
                            switch (temp_1155 && temp_1155[1]) {
                            case 23: {
                                Typer.fail('Variable bindings in conditions are not yet supported', econd_1152[0])
                            } break;
                            };
                        };
                        if (eelse_1154 == null) { Typer.fail('Expression `if` should have an `else` clause', eif_1153) };
                        this.fillExpression(econd_1152[0]);
                        this.fillExpression(eif_1153);
                        this.fillExpression(eelse_1154);
                    };
                }
            } break;

            case 7: {
                this.types.set(node_1030, (["UnknownNullable",1,{value:null}]))
            } break;

            case 0: {
                this.types.set(node_1030, this.typeString)
            } break;

            case 2: {
                this.types.set(node_1030, this.typeBool)
            } break;

            case 5: {
                this.types.set(node_1030, this.typeInt)
            } break;

            case 6: {
                this.types.set(node_1030, this.typeFloat)
            } break;

            case 14: {
                {
                    const e_1156 = temp_1031[2];
                    {
                        this.fillExpression(e_1156);
                        this.types.set(node_1030, this.types.get(e_1156));
                    };
                }
            } break;

            case 47: {
                {
                    const a_1157 = temp_1031[2];
                    const b_1158 = temp_1031[3];
                    {
                        this.fillExpression(a_1157);
                        this.fillExpression(b_1158);
                        this.types.set(node_1030, this.types.get(b_1158));
                    };
                }
            } break;

            case 12: {
                {
                    const e_1159 = temp_1031[2];
                    const el_1160 = temp_1031[3];
                    const elNames = temp_1031[4];
                    {
                        let asuper = false;
                        {
                            const temp_1161 = e_1159;
                            switch (temp_1161 && temp_1161[1]) {
                            case 4: {
                                {
                                    if (!this.allowSuper) { Typer.fail('Cannot access `super` here', node_1030) };
                                    asuper = true;
                                }
                            } break;

                            default:
                            this.fillExpression(e_1159)
                            };
                        };
                        for (const e of $toIterator(el_1160)) this.fillExpression(e);
                        {
                            const temp_1162 = this.types.get(e_1159);
                            switch (temp_1162 && temp_1162[1]) {
                            case 10: {
                                {
                                    const args_1163 = temp_1162[2];
                                    const returns_1164 = temp_1162[3];
                                    {
                                        {
                                            let i_1165 = 0;
                                            let it_1166 = 0;
                                            let at_1167 = el_1160.length;
                                            while (it_1166 < at_1167) {
                                                i_1165 = it_1166;
                                                it_1166++;
                                                {
                                                    let step_1168 = 0;
                                                    const arg_1169 = args_1163[i_1165];
                                                    if (step_1168 == 0 && arg_1169 != null) { step_1168 = 1 };
                                                    if (step_1168 == 1) { this.unify(arg_1169, this.types.get(el_1160[i_1165]), el_1160[i_1165]) };
                                                };
                                            };
                                        };
                                        this.types.set(node_1030, returns_1164);
                                    };
                                }
                            } break;

                            case 8: {
                                {
                                    const type_1170 = temp_1162[2];
                                    const tag_1171 = temp_1162[3];
                                    this.types.set(node_1030, (["EnumInstance",7,type_1170,tag_1171]));
                                }
                            } break;

                            case null: case undefined: {
                                if (('' + e_1159).indexOf('slice') != -1) { Typer.fail('Calling null ' + Node.stringify(e_1159), e_1159) }
                            } break;

                            default:
                            if (this.types.get(e_1159) == this.typeAny) { this.types.set(node_1030, this.typeAny) } else Typer.fail('Calling *not* a function, type is `' + Type.stringify(this.types.get(e_1159)) + '`', e_1159)
                            };
                        };
                    };
                }
            } break;

            case 9: {
                {
                    const a_1172 = temp_1031[2];
                    const op_1173 = temp_1031[3];
                    const b_1174 = temp_1031[4];
                    {
                        this.fill(a_1172);
                        this.fillExpression(b_1174);
                        if ((op_1173 == 111) && (this.types.get(a_1172) == this.typeString)) { this.types.set(node_1030, this.types.get(a_1172)) } else if (op_1173 == 97 || op_1173 == 96 || op_1173 == 100 || op_1173 == 99 || op_1173 == 92 || op_1173 == 93 || op_1173 == 95 || op_1173 == 103) { this.types.set(node_1030, this.typeBool) } else this.types.set(node_1030, ((this.types.get(b_1174)) || (this.types.get(a_1172))));
                    };
                }
            } break;

            case 19: {
                {
                    const op_1175 = temp_1031[2];
                    const postfix_1176 = temp_1031[3];
                    const e_1177 = temp_1031[4];
                    {
                        this.fillExpression(e_1177);
                        if ((op_1175 == 89) && (!postfix_1176)) {
                            const type_1178 = this.types.get(e_1177);
                            if ((type_1178 != this.typeBool) && (type_1178 != this.typeAny) && (type_1178 != null)) { Typer.fail(('Operator `!value` takes `value` of type `Bool` only, but got `' + (Type.stringify(this.types.get(e_1177))) + '`'), e_1177) };
                            this.types.set(node_1030, this.toType((["Type",1,'Bool']), node_1030));
                            return;
                        };
                        this.types.set(node_1030, this.types.get(e_1177));
                        const mutates = op_1175 == 87 || op_1175 == 86;
                        if (!mutates) { return };
                        let parent_1179 = this.parents.get(e_1177);
                        {
                            const temp_1180 = parent_1179;
                            switch (temp_1180 && temp_1180[1]) {
                            case 23: {
                                {
                                    const name_1181 = temp_1180[2];
                                    const const_1182 = temp_1180[5];
                                    if (const_1182) { Typer.fail(('Cannot change a constant `let ' + (name_1181) + '`, redefine it as `var ' + (name_1181) + '` to allow value changes\n') + Typer.positionOf(parent_1179) + ('`let ' + (name_1181) + '` is defined here'), node_1030) };
                                }
                            } break;

                            case 21: {
                                {
                                    const name_1183 = temp_1180[2];
                                    Typer.fail(('Cannot `' + (Token.stringify(op_1175)) + '` a function `' + (name_1183) + '`'), node_1030);
                                }
                            } break;

                            case 46: {
                                {
                                    const name_1184 = temp_1180[2];
                                    Typer.fail(('Cannot change iterator value `' + (name_1184) + '` of for loop\n') + Typer.positionOf(parent_1179) + ('`for (' + (name_1184) + ' in ...)` is defined here'), node_1030);
                                }
                            } break;

                            default:
                            {
                            }
                            };
                        };
                    };
                }
            } break;

            case 33: {
                {
                    const e_1185 = temp_1031[2];
                    const i_1186 = temp_1031[3];
                    {
                        this.fillExpression(e_1185);
                        this.fillExpression(i_1186);
                        let indexableIsAny = false;
                        {
                            const temp_1187 = this.types.get(e_1185);
                            switch (temp_1187 && temp_1187[1]) {
                            case 6: {
                                {
                                    const type_1188 = temp_1187[2];
                                    const generic_1189 = temp_1187[3];
                                    if (type_1188.name == 'Any') { indexableIsAny = true };
                                }
                            } break;
                            };
                        };
                        if (!indexableIsAny) {
                            const temp_1190 = this.types.get(i_1186);
                            switch (temp_1190 && temp_1190[1]) {
                            case 6: {
                                {
                                    const type_1191 = temp_1190[2];
                                    if ((type_1191.name != 'Int') && (type_1191.name != 'Any')) { Typer.fail('`value[i]` expects `i` only of type `Int`, but got `' + Type.stringify(this.types.get(i_1186)) + '`', e_1185) };
                                }
                            } break;

                            case null: case undefined: {
                                {
                                }
                            } break;

                            default:
                            Typer.fail('`value[i]`????? expects `i` only of type `Int`, but got `' + Type.stringify(this.types.get(i_1186)) + '`', e_1185)
                            };
                        };
                        {
                            const temp_1192 = this.types.get(e_1185);
                            switch (temp_1192 && temp_1192[1]) {
                            case 6: {
                                {
                                    const type_1193 = temp_1192[2];
                                    const generic_1194 = temp_1192[3];
                                    {
                                        if (!['Array', 'Buffer', 'Uint8Array', 'Uint32Array', 'Any'].includes(type_1193.name)) { Typer.fail('`value[i]` expects `value` only of type `Array`, but got `' + Type.stringify(this.types.get(e_1185)) + '`', e_1185) };
                                        if ((generic_1194 != null) && (generic_1194.length == 1)) { this.types.set(node_1030, generic_1194[0]) } else if (['Array', 'Buffer', 'Uint8Array', 'Uint32Array'].includes(type_1193.name)) { this.types.set(node_1030, this.toType((["Type",1,'Int']), node_1030)) } else if (['Any'].includes(type_1193.name)) { this.types.set(node_1030, this.toType((["Type",1,'Any']), node_1030)) } else Typer.fail('value[i] generic is null or >1', e_1185);
                                    };
                                }
                            } break;

                            case null: case undefined: {
                                {
                                }
                            } break;

                            default:
                            Typer.fail('`value[i]` expects `value` only of type `Array`, but got `' + Type.stringify(this.types.get(e_1185)) + '`', e_1185)
                            };
                        };
                    };
                }
            } break;

            case 10: {
                {
                    const a_1195 = temp_1031[2];
                    const op_1196 = temp_1031[3];
                    const b_1197 = temp_1031[4];
                    {
                        if (op_1196 == 95) { Typer.fail('`===` not supported, use `strictEq`', node_1030) };
                        this.fillExpression(a_1195);
                        let parent_1198 = this.parents.get(a_1195);
                        {
                            const temp_1199 = parent_1198;
                            switch (temp_1199 && temp_1199[1]) {
                            case 23: {
                                {
                                    const name_1200 = temp_1199[2];
                                    const const_1201 = temp_1199[5];
                                    if (const_1201) { Typer.fail(('Cannot change a constant `let ' + (name_1200) + '`, redefine it as `var ' + (name_1200) + '` to allow value changes\n') + Typer.positionOf(parent_1198) + ('`let ' + (name_1200) + '` is defined here'), node_1030) };
                                }
                            } break;

                            case 21: {
                                {
                                    const name_1202 = temp_1199[2];
                                    Typer.fail(('Cannot reassign a function `' + (name_1202) + '`'), node_1030);
                                }
                            } break;

                            case 46: {
                                {
                                    const name_1203 = temp_1199[2];
                                    Typer.fail(('Cannot change iterator value `' + (name_1203) + '` of for loop\n') + Typer.positionOf(parent_1198) + ('`for (' + (name_1203) + ' in ...)` is defined here'), node_1030);
                                }
                            } break;

                            default:
                            {
                            }
                            };
                        };
                        this.fillExpression(b_1197);
                    };
                }
            } break;

            case 16: {
                {
                    const e_1204 = temp_1031[2];
                    {
                        if (!this.insideFunction && !this.insideTry) { Typer.fail('Cannot throw outside of `function` or `try`', node_1030) };
                        if (this.insideFunction && !this.functionAllowedToThrow) { Typer.fail('Cannot throw in a @noThrow function', node_1030) };
                        if (this.insideFunction) { this.functionThrows = true };
                        this.fillExpression(e_1204);
                    };
                }
            } break;

            case 3: {
                if (!this.insideClassMethod) { Typer.fail('Cannot access `this` outside of class method', node_1030) }
            } break;

            case 4: {
                Typer.fail('Cannot use `super` as value', node_1030)
            } break;

            case 15: {
                {
                    const e_1205 = temp_1031[2];
                    {
                        {
                            const temp_1206 = e_1205;
                            switch (temp_1206 && temp_1206[1]) {
                            case 23: {
                                {
                                    const name_1207 = temp_1206[2];
                                    const const_1208 = temp_1206[5];
                                    {
                                        const prefix = (const_1208)? ('let') : 'var';
                                        Typer.fail(('This `return` tries to return a variable `' + (prefix) + ' ' + (name_1207) + '`. Try to wrap it into braces like this `{ return } ' + (prefix) + ' ' + (name_1207) + '`'), node_1030);
                                    };
                                }
                            } break;

                            case 15: {
                                Typer.fail('Cannot return another return. Try to wrap first `{ return } return 2` into braces', node_1030)
                            } break;
                            };
                        };
                        if (!this.insideFunction) { Typer.fail('Cannot use `return` outside of function', node_1030) };
                        if (e_1205 != null) {
                            if (this.functionReturnsAType == this.typeVoid) { Typer.fail('Function returns `Void`, cannot return a value here', e_1205) };
                            this.fillExpression(e_1205);
                            const ret_1209 = this.types.get(e_1205);
                            if (ret_1209 == this.typeVoid) { Typer.fail('Cannot `return` a `Void` non-value', node_1030) };
                            this.functionReturnsAType = this.unify(this.functionReturnsAType, ret_1209, e_1205);
                        } else {
                            {
                                let step_1210 = 0;
                                const ret_1211 = this.functionReturnsAType;
                                if (step_1210 == 0 && ret_1211 != null) { step_1210 = 1 };
                                if (step_1210 == 1) { if (ret_1211 != this.typeVoid) { Typer.fail(('Expected `return value` of type `' + (Type.stringify(ret_1211)) + '`'), node_1030) } } else this.functionReturnsAType = this.typeVoid;
                            };
                        };
                    };
                }
            } break;

            case 42: {
                Typer.fail('Cannot use underscore `_` outside of case pattern', node_1030)
            } break;

            case 45: {
                Typer.fail('Cannot use `export` here: only applicable to module declarations', node_1030)
            } break;

            case 43: {
                Typer.fail('Cannot use `static` here: only applicable to class fields', node_1030)
            } break;

            case 44: {
                Typer.fail('Cannot use `private` here: only applicable to class fields and module declarations', node_1030)
            } break;

            case 35: {
                Typer.fail('Modules should be at a file\' upper scope', node_1030)
            } break;

            case 17: {
                Typer.fail('Cannot use `break` as a value', node_1030)
            } break;

            case 18: {
                Typer.fail('Cannot use `continue` as a value', node_1030)
            } break;

            case 25: {
                Typer.fail('Cannot use `class` as a value', node_1030)
            } break;

            case 37: {
                Typer.fail('Cannot use `enum` as a value', node_1030)
            } break;

            case 8: {
                Typer.fail('Cannot use `declare` as a value', node_1030)
            } break;

            case 23: {
                {
                    const name_1212 = temp_1031[2];
                    const const_1213 = temp_1031[5];
                    {
                        const prefix_1214 = (const_1213)? ('let') : 'var';
                        Typer.fail(('Cannot use `' + (prefix_1214) + ' ' + (name_1212) + '` as a value'), node_1030);
                    };
                }
            } break;

            case 34: {
                Typer.fail('Cannot use `switch` as a value', node_1030)
            } break;

            case 20: {
                Typer.fail('Cannot use `while` as a value', node_1030)
            } break;

            case 46: {
                Typer.fail('Cannot use `for` as a value. To build array from loop, surround with `[for()]` brackets.', node_1030)
            } break;

            case null: case undefined: {
                Typer.fail('Got null node' + Typer.never, node_1030)
            } break;

            default:
            Typer.fail('Unknown node expression kind to type ' + node_1030 + Typer.never, node_1030)
            };
        } };
    }
    Typer.never = '. This should never happen. Probably incomplete feature was used. Ping a compiler developer with a code sample.'
    Typer.fail = (msg, node_844 = null) => { {
            const data_845 = Project.data.get(node_844);
            if (data_845 == null) { throw new CompilerError(Fail.TyperError, msg, 0, 0, '') };
            throw new CompilerError(Fail.TyperError, msg, data_845.line, data_845.column, data_845.fileName);
        } };
    Typer.positionOf = (node_846) => { {
            const data_847 = Project.data.get(node_846);
            if (data_847 == null) { return '[Unknown]: ' };
            return '[' + data_847.fileName + ':' + data_847.line + ':' + data_847.column + ']: ';
        } };
    Typer.internal = () => { {
        } };
    var Lexer = class {
    }
    Lexer.isident
    Lexer.isUpper
    Lexer.isLower
    Lexer.ops8a
    Lexer.op16token
    Lexer.kwd
    Lexer.tokenize = (bytes, fileName) => { {
            let position_1215 = 0;
            const len_1216 = bytes.length;
            let to_1217 = 0;
            let s_1218 = '';
            let p = 0;
            let line = 1;
            let columnBase = 0;
            const params_1219 = [];
            const tokens = Buffer.alloc(len_1216 + 1);
            let lines = [];
            let columns = [];
            const add = (t_1220) => {
                tokens[to_1217++] = t_1220;
                lines.push(line);
                columns.push(position_1215 - columnBase - 1);
            };
            const addn = (t_1221, p_1222) => {
                params_1219[to_1217] = p_1222;
                add(t_1221);
            };
            const curPos = () => { return position_1215 - columnBase - 1 };
            const get_8 = (pos_1223) => { return bytes[pos_1223] };
            const not_eof = () => { return (position_1215 < len_1216) };
            const new_line = () => {
                line++;
                columnBase = position_1215;
            };
            const fail = (message_1224, erline = null, column = null, filename = null) => {
                let erline_1225 = erline != (null)? (erline) : line;
                let column_1226 = column != (null)? (column) : curPos();
                let filename_1227 = filename != (null)? (filename) : fileName;
                return new CompilerError(Fail.LexerError, message_1224, erline_1225, column_1226, filename_1227);
            };
            if ((len_1216 > 2) && (get_8(0) == 239) && (get_8(1) == 187) && (get_8(2) == 191)) { position_1215 += 3 };
            if ((len_1216 > 2) && (get_8(0) == 35) && (get_8(1) == 33)) { while (position_1215 < len_1216 && get_8(position_1215) != 10) {
                position_1215++;
            } };
            while (position_1215 < len_1216) {
                let _8 = 0;
                do {{
                    _8 = get_8(position_1215);
                    if (_8 == 10) { new_line() };
                }} while (_8 <= 32 && (++position_1215 < len_1216));
                if (!not_eof()) { break };
                let _16 = (len_1216 - position_1215) > (1)? (_8 | (get_8(position_1215 + 1) << 8)) : _8;
                if (_8 == 47) {
                    if (_16 == 0x2f2f) {
                        let pos_1228 = position_1215 + 2;
                        while (get_8(position_1215) != 10 && not_eof()) {
                            position_1215++;
                        };
                        continue;
                    };
                    if (_16 == 10799 && get_8(position_1215 + 2) == 42) {
                        position_1215 += 3;
                        p = position_1215;
                        while (not_eof()) {
                            let _32 = (len_1216 - position_1215) > (3)? (bytes.readUInt32LE(position_1215)) : get_8(position_1215);
                            if ((_32 & 0xFF) == 10) { new_line() } else if ((_32 & 0xFFFFFF) == 3090986) { break };
                            position_1215++;
                        };
                        if (!not_eof()) { throw fail('Unclosed doc-comment') };
                        addn(65, bytes.toString('utf8', p, position_1215));
                        position_1215 += 3;
                        continue;
                    };
                    if (_16 == 10799) {
                        let pos_1229 = position_1215 + 2;
                        p = 0;
                        position_1215 += 2;
                        while (not_eof()) {
                            _16 = (len_1216 - position_1215) > (1)? (bytes.readUInt16LE(position_1215)) : get_8(position_1215);
                            if ((_16 & 0xFF) == 10) { new_line() } else if (_16 == 12074 && p > 0) { p-- } else if (_16 == 10799) { p++ } else if (_16 == 12074 && p == 0) { break };
                            position_1215++;
                        };
                        position_1215 += 2;
                        continue;
                    };
                };
                if (((_8 & 95) >= 65 && (_8 & 95) <= 90) || (_8 == 95)) {
                    const titlechar = _8;
                    p = position_1215 + 1;
                    _8 = get_8(p);
                    while (p < len_1216 && Lexer.isident[_8] != 0) _8 = get_8(++p);
                    s_1218 = bytes.toString('ascii', position_1215, p);
                    const t_1230 = (((_16 & 0xFF) <= 90))? (null) : Lexer.kwd.get(s_1218);
                    if (t_1230 != null) { add(t_1230) } else {
                        if (titlechar >= 65 && titlechar <= 90) { addn(61, s_1218) } else {
                            addn(62, s_1218);
                        };
                    };
                    position_1215 = p;
                    continue;
                };
                if (_8 == 96) {
                    position_1215++;
                    const pos_1231 = position_1215;
                    while (not_eof()) {
                        if ((get_8(position_1215) == 96) && (get_8(position_1215 + 1) == 96)) {
                            position_1215++;
                            position_1215++;
                            continue;
                        };
                        if (get_8(position_1215) == 96) { break };
                        if (get_8(position_1215) == 10) { new_line() };
                        position_1215++;
                    };
                    let result_1232 = bytes.toString('utf8', pos_1231, position_1215);
                    if (result_1232.indexOf('``') != -1) { result_1232 = result_1232.split('``').join('') };
                    addn(66, result_1232);
                    position_1215++;
                    continue;
                };
                if (_16 == 11822 && (get_8(position_1215 + 2) == 46)) {
                    add(98);
                    position_1215 += 3;
                    continue;
                };
                if (_16 == 15934 && (get_8(position_1215 + 2) == 62)) {
                    add(108);
                    position_1215 += 3;
                    continue;
                };
                const hash = Lexer.simplehash(_16);
                if (_16 == Lexer.op16token.readUInt16LE(hash * 2)) {
                    add(Lexer.op16token[hash + 512]);
                    position_1215 += 2;
                    continue;
                };
                const found_1233 = Lexer.ops8a[_8];
                if (found_1233 != 0) {
                    add(found_1233);
                    position_1215++;
                    continue;
                };
                if (_8 < 40) {
                    p = _8;
                    position_1215++;
                    const pos_1234 = position_1215;
                    while (get_8(position_1215) != p && not_eof()) {
                        if (get_8(position_1215) == 10) { new_line() };
                        if (get_8(position_1215) == '\\'.charCodeAt(0)) {
                            position_1215 += 2;
                            continue;
                        };
                        _16 = (len_1216 - position_1215) > (1)? (bytes.readUInt16LE(position_1215)) : get_8(position_1215);
                        position_1215++;
                    };
                    let result_1235 = bytes.toString('utf8', pos_1234, position_1215);
                    if (result_1235.indexOf('\r\n') != -1) { result_1235 = result_1235.split('\r\n').join('\n') };
                    addn(64, result_1235);
                    position_1215++;
                    continue;
                };
                if (_16 == 30768) {
                    p = position_1215;
                    p += 2;
                    _8 = get_8(position_1215);
                    while ((_8 >= 65 && _8 <= 70) || (_8 >= 48 && _8 <= 57) || (_8 >= 97 && _8 <= 102)) {
                        _8 = get_8(++p);
                    };
                    if (p - position_1215 == 2) { throw fail('Integer `0x` not allowed!') };
                    addn(63, bytes.toString('ascii', position_1215, p));
                    position_1215 = p;
                    continue;
                };
                if (_8 < 58) {
                    p = position_1215;
                    _8 = get_8(p);
                    let found_1236 = 63;
                    while (_8 >= 48 && _8 <= 57) {
                        _8 = get_8(++p);
                    };
                    if (_8 == 46 && get_8(p + 1) != 46) {
                        _8 = get_8(++p);
                        while (_8 >= 48 && _8 <= 57) {
                            _8 = get_8(++p);
                        };
                        found_1236 = 60;
                    };
                    if (_8 == 101 || _8 == 69) {
                        _8 = get_8(++p);
                        if (_8 == 43 || _8 == 45) { _8 = get_8(++p) };
                        while (_8 >= 48 && _8 <= 57) {
                            _8 = get_8(++p);
                        };
                        found_1236 = 60;
                    };
                    addn(found_1236, bytes.toString('ascii', position_1215, p));
                    position_1215 = p;
                    continue;
                };
                if (position_1215 >= len_1216) { break };
                throw fail('Unexpected character ' + String.fromCharCode(_8));
                break;
            };
            return new Tokens(tokens, to_1217, params_1219, lines, columns, fileName);
        } };
    Lexer.init = () => { {
            Lexer.isident = Buffer.alloc(256);
            {
                let _8_1237 = 0;
                let it_1238 = 0;
                while (it_1238 < 256) {
                    _8_1237 = it_1238;
                    it_1238++;
                    Lexer.isident[_8_1237] = (((_8_1237 >= 65 && _8_1237 <= 90) || (_8_1237 >= 48 && _8_1237 <= 57) || (_8_1237 >= 97 && _8_1237 <= 122) || _8_1237 == 95))? (128) : 0;
                };
            };
            Lexer.isUpper = Buffer.alloc(256);
            {
                let _8_1239 = 0;
                let it_1240 = 0;
                while (it_1240 < 256) {
                    _8_1239 = it_1240;
                    it_1240++;
                    Lexer.isident[_8_1239] = (((_8_1239 >= 65 && _8_1239 <= 90) || (_8_1239 >= 48 && _8_1239 <= 57) || (_8_1239 >= 97 && _8_1239 <= 122) || _8_1239 == 95))? (128) : 0;
                };
            };
            Lexer.kwd = new Map([['_', 1], ['as', 58], ['break', 3], ['case', 4], ['catch', 6], ['class', 7], ['continue', 8], ['do', 9], ['else', 10], ['enum', 11], ['extends', 12], ['declare', 13], ['false', 14], ['for', 15], ['function', 16], ['if', 17], ['implements', 18], ['in', 20], ['interface', 22], ['let', 23], ['new', 25], ['null', 26], ['module', 28], ['private', 29], ['return', 31], ['static', 32], ['super', 59], ['switch', 33], ['this', 34], ['throw', 35], ['true', 36], ['try', 37], ['using', 39], ['var', 40], ['while', 41], ['is', 57]]);
            const ops8 = new Map([[64, 70], [36, 83], [35, 78], [33, 89], [37, 101], [38, 112], [40, 80], [41, 79], [42, 102], [43, 111], [44, 75], [45, 107], [46, 77], [47, 94], [58, 76], [59, 82], [60, 99], [61, 91], [62, 96], [63, 81], [91, 72], ['\\'.charCodeAt(0), 110], [93, 71], [94, 109], [123, 74], [124, 104], [125, 73], [126, 88]]);
            Lexer.ops8a = Buffer.alloc(256);
            for (const key of $toIterator(ops8.keys())) Lexer.ops8a[key] = ops8.get(key);
            const ops16 = new Map([[11051, 87], [11565, 86], [15420, 105], [15649, 103], [15676, 100], [15677, 95], [15678, 97], [15934, 106], [31868, 93], [9766, 92], [15933, 90], [11839, 113]]);
            for (const key1 of $toIterator(ops16.keys())) {
                for (const key2 of $toIterator(ops16.keys())) {
                    if (key1 != key2 && Lexer.simplehash(key1) == Lexer.simplehash(key2)) { throw new CompilerError(Fail.LexerError, '2-byte op hash collision: ' + key1 + ' ' + key2, 0, 0, 'INTERNAL') };
                };
            };
            Lexer.op16token = Buffer.alloc(768);
            for (const key of $toIterator(ops16.keys())) {
                const hash_1241 = Lexer.simplehash(key);
                Lexer.op16token.writeUInt16LE(key, hash_1241 * 2);
                Lexer.op16token[hash_1241 + 512] = ops16.get(key);
            };
            return;
        } };
    Lexer.simplehash = (val) => { return ((val & 0xff) + (((val >> (8 * 1)) & 0xff) << 3)) & 0xEF };
    var Tokens = class {
        constructor(tokens_1242, length_1243, values_1244, lines_1245, columns_1246, fileName_1247) {
        {
            this.token = tokens_1242;
            this.length = length_1243;
            this.value = values_1244;
            this.line = lines_1245;
            this.column = columns_1246;
            this.fileName = fileName_1247;
        } };
    }
    var Parser = class {
        constructor(lexe_1248) {
            this.i = 0
            this.endif = 0
            this.lasttok = -1
            this.lasttokchecks = 10
            this.classExternal = false
            this.parametricTypeNesting = 0
            this.parametricTypeNestingToken = 0
        {
            this.lex = lexe_1248;
            this.nodes = [];
            while (this.i < this.lex.length && this.tok() != 0) {
                this.nodes.push(this.parseExpr());
            };
        } };
        parseFields() { {
            let fields_1249 = [];
            while (this.tok() != 73) {
                let atts_1250 = [];
                while (this.tok() == 70) {
                    atts_1250.push(this.parseAttribute());
                };
                let _static = false;
                if (this.tok() == 32) {
                    _static = true;
                    this.i++;
                };
                {
                    const temp_1251 = this.tok();
                    switch (temp_1251) {
                    case 29: {
                        this.i++
                    } break;

                    case 40: {
                        {
                            let f_1252 = this.parseExpr();
                            if (_static) { f_1252 = (["TStatic",43,f_1252]) };
                            Project.mapAttributes.set(f_1252, atts_1250);
                            fields_1249.push(f_1252);
                        }
                    } break;

                    case 16: {
                        {
                            let f_1253 = this.parseExpr();
                            if (_static) { f_1253 = (["TStatic",43,f_1253]) };
                            Project.mapAttributes.set(f_1253, atts_1250);
                            fields_1249.push(f_1253);
                        }
                    } break;

                    case 23: {
                        {
                            let f_1254 = this.parseExpr();
                            if (_static) { f_1254 = (["TStatic",43,f_1254]) };
                            Project.mapAttributes.set(f_1254, atts_1250);
                            fields_1249.push(f_1254);
                        }
                    } break;

                    case 25: {
                        {
                            this.i++;
                            let expr_1255 = null;
                            let vars_1256 = [];
                            let types_1257 = [];
                            let values_1258 = [];
                            this.step(80);
                            if (this.tok() != 79) { while (true) {
                                vars_1256.push(this.getgo(62));
                                let expr_1259 = null;
                                let t_1260 = null;
                                if (this.tok() == 76) {
                                    this.i++;
                                    t_1260 = this.parseType();
                                };
                                if (this.tok() == 91) {
                                    this.i++;
                                    expr_1259 = this.parseExpr();
                                };
                                types_1257.push(t_1260);
                                values_1258.push(expr_1259);
                                if (this.tok() == 75) { this.i++ } else break;
                            } };
                            this.step(79);
                            let tmp = this.i;
                            while (this.tok() == 70) this.parseAttribute();
                            if (this.tok() != 73 && this.tok() != 16) {
                                this.i = tmp;
                                expr_1255 = this.parseExpr();
                            } else this.i = tmp;
                            let v_1261 = [];
                            {
                                let i_1262 = 0;
                                let it_1263 = 0;
                                let at_1264 = vars_1256.length;
                                while (it_1263 < at_1264) {
                                    i_1262 = it_1263;
                                    it_1263++;
                                    {
                                        v_1261.push((["TVar",23,vars_1256[i_1262],types_1257[i_1262],values_1258[i_1262],true,false]));
                                    };
                                };
                            };
                            fields_1249.push((["TFunction",21,'new',expr_1255,v_1261,null]));
                        }
                    } break;

                    case 62: {
                        {
                            const name_1265 = this.getgo(62);
                            if ((name_1265 == 'get') && (this.tok() == 62)) {
                                const field_1266 = this.getgo(62);
                                this.fail(('Use property `var ' + (field_1266) + ' { get { return value } }` instead of `get ' + (field_1266) + '()`'));
                            };
                            if ((name_1265 == 'set') && (this.tok() == 62)) {
                                const field_1267 = this.getgo(62);
                                this.step(80);
                                const value_1268 = this.getgo(62);
                                this.fail(('Use property `var ' + (field_1267) + ' { set(' + (value_1268) + ') { ... } }` instead of `set ' + (field_1267) + '(' + (value_1268) + ')`'));
                            };
                            if (this.tok() == 80) {
                                if (name_1265 == 'constructor') { this.fail('Use `new()` syntax instead of `constructor()`') };
                                this.fail('Use `function ' + name_1265 + '()` syntax for methods');
                            };
                            this.fail('Fields should start with `var ' + name_1265 + '` or `let ' + name_1265 + '`');
                        }
                    } break;

                    case 61: {
                        this.fail('Fields cannot start with uppercase character `' + this.print() + '` -> `' + this.print().toLowerCase() + '`')
                    } break;

                    case 74: {
                        {
                            const pos_1269 = {line:this.lex.line[this.i], column:this.lex.column[this.i]};
                            const field_1270 = fields_1249.pop();
                            let v_1271 = null;
                            let t_1272 = null;
                            let n_1273 = null;
                            let onlyGet = false;
                            {
                                const temp_1274 = field_1270;
                                switch (temp_1274 && temp_1274[1]) {
                                case 23: {
                                    {
                                        const name_1275 = temp_1274[2];
                                        const type_1276 = temp_1274[3];
                                        const expr_1277 = temp_1274[4];
                                        const const_1278 = temp_1274[5];
                                        {
                                            if (expr_1277 != null) { this.fail('Property should not have a `= value`') };
                                            v_1271 = field_1270;
                                            t_1272 = type_1276;
                                            n_1273 = name_1275;
                                            onlyGet = const_1278;
                                        };
                                    }
                                } break;

                                default:
                                this.fail('Only `var` and `let` fields may have a getter `let v: T { get() ... }`')
                                };
                            };
                            this.i++;
                            if (this.print() == 'set') { this.fail('Expected `get` before `set`') };
                            if (this.print() != 'get') { this.fail('Expected `get`') };
                            const kind_1279 = this.print();
                            let getterExpr = null;
                            if (kind_1279 == 'get') {
                                this.i++;
                                getterExpr = this.parseExpr();
                            };
                            const kind_1280 = this.print();
                            let setterExpr = null;
                            let setterVar = null;
                            if ((kind_1280 == 'set') && (onlyGet)) { this.fail('Constants `let` may have only getter `get`') };
                            if (kind_1280 == 'set') {
                                this.i++;
                                this.step(80);
                                setterVar = this.getgo(62);
                                this.step(79);
                                setterExpr = this.parseExpr();
                            };
                            if ((setterExpr == null) && (!onlyGet)) { this.fail('Variables `var` should have both getter `get` and setter `set`') };
                            this.step(73);
                            const getter = getterExpr != (null)? ((["TFunction",21,'get_' + n_1273,getterExpr,[],t_1272])) : null;
                            const setter = setterExpr != (null)? ((["TFunction",21,'set_' + n_1273,setterExpr,[(["TVar",23,setterVar,t_1272,null,true,false])],null])) : null;
                            const property = (["TProperty",26,field_1270,getter,setter]);
                            Project.data.set(property, new NodeData(pos_1269.line, pos_1269.column, this.lex.fileName));
                            Project.data.set(getter, new NodeData(pos_1269.line, pos_1269.column, this.lex.fileName));
                            Project.data.set(setter, new NodeData(pos_1269.line, pos_1269.column, this.lex.fileName));
                            fields_1249.push(property);
                            {
                                let step_1281 = 0;
                                const getter_1282 = getter;
                                if (step_1281 == 0 && getter_1282 != null) { step_1281 = 1 };
                                if (step_1281 == 1) { fields_1249.push(getter_1282) };
                            };
                            {
                                let step_1283 = 0;
                                const setter_1284 = setter;
                                if (step_1283 == 0 && setter_1284 != null) { step_1283 = 1 };
                                if (step_1283 == 1) { fields_1249.push(setter_1284) };
                            };
                        }
                    } break;

                    default:
                    this.fail('Fields cannot start with `' + this.print() + '`')
                    };
                };
            };
            return fields_1249;
        } };
        tok() { {
            if (this.i > this.lex.length) {
                console.log('Parser is out of token space!');
                console.log('This should NOT happen.');
                console.log('Please, issue a developer (with a sample code).');
                this.fail(this.lex.fileName + ': Parser internal error: out of token space');
            };
            let t_1285 = this.lex.token[this.i];
            if (this.lasttok != this.i) {
                this.lasttok = this.i;
                this.lasttokchecks = 1000;
            } else {
                this.lasttokchecks--;
                if (this.lasttokchecks < 0) { this.fail('Parser internal error: Same token parsed too many times: ' + ('`' + (this.print()) + '`')) };
            };
            if ((t_1285 == 78) && (this.lex.value[this.i + 1] == 'end')) { if (this.endif > 0) {
                this.i++;
                this.i++;
                this.endif--;
                this.tok();
            } else this.fail('Unexpected `#end`') };
            if ((t_1285 == 78) && (this.offset(1) == 17)) {
                this.i++;
                this.i++;
                const defName = this.getgo(62);
                const def = Project.defines[defName];
                if (def == null) { this.fail('`#if` tests for `' + defName + '` parameter which is *not* defined in project file.' + (' Add `\"define\": { \"' + (defName) + '\": false }` to `hexa.json` to suppress this message.')) };
                if (def == true) { this.endif++ };
                if (def == false) {
                    let endifs = 1;
                    while (this.i < this.lex.length) {
                        if ((this.offset(0) == 78) && (this.offset(1) == 17)) {
                            this.i++;
                            this.i++;
                            endifs++;
                            continue;
                        };
                        if ((this.offset(0) == 78) && (this.lex.value[this.i + 1] == 'end')) {
                            this.i++;
                            this.i++;
                            endifs--;
                            if (endifs == 0) { break };
                            continue;
                        };
                        this.i++;
                    };
                };
                this.tok();
            };
            return this.lex.token[this.i];
        } };
        print() { return Token.stringify(this.lex.token[this.i], this.lex.value[this.i]) };
        expect(t_1286) { if (t_1286 != this.tok()) { this.expected(Token.stringify(t_1286)) } };
        fail(message_1287, line_1288, column_1289, filename_1290) { {
            const line_1291 = line_1288 != (null)? (line_1288) : this.lex.line[this.i];
            const column_1292 = column_1289 != (null)? (column_1289) : this.lex.column[this.i];
            const filename_1293 = filename_1290 != (null)? (filename_1290) : this.lex.fileName;
            throw new CompilerError(Fail.ParserError, message_1287, line_1291, column_1292, filename_1293);
        } };
        autofail(message_1294, line_1295, column_1296, filename_1297) { this.fail(message_1294 + '\nTo fix this syntax error automatically call compiler with --autofix', line_1295, column_1296, filename_1297) };
        autofix(startToken, endToken, patch, delete_1298) { {
            const start_1299 = startToken;
            const end_1300 = endToken;
            let i_1301 = 0;
            const filename_1302 = this.lex.fileName;
            const code_1303 = Fs.readFileSync(Path.resolve(filename_1302)).toString('utf8');
            const original = code_1303.substring(start_1299, end_1300 + 1);
            const updated = code_1303.substr(0, start_1299) + patch + code_1303.substr(end_1300 + 1);
            console.log('Autofixed: `' + original + '` => `' + patch + '`');
            console.log(('File `' + (filename_1302) + '` overwritten with updated code\n') + updated);
        } };
        getgo(t_1304) { {
            this.expect(t_1304);
            return this.lex.value[this.i++];
        } };
        step(t_1305) { {
            this.expect(t_1305);
            this.i++;
        } };
        next() { this.i++ };
        offset(v_1306) { return this.lex.token[this.i + v_1306] };
        unexpected() { {
            let token = Token.stringify(this.lex.token[this.i], this.lex.value[this.i]);
            let error = ('Unexpected `' + (token) + '`');
            if (this.tok() == 82) { error += ' semicolon. Note: Hexa has no semicolons!' };
            if (this.print() == 'public') { error += '. Note: Hexa has no `public` keyword!' };
            this.fail(error);
        } };
        expected(str_1307) { {
            let token_1308 = Token.stringify(this.lex.token[this.i], this.lex.value[this.i]);
            this.fail(('Expected `' + (str_1307) + '` before `' + (token_1308) + '`'));
        } };
        parseExpr() { {
            let atts_1309 = [];
            while (this.tok() == 70) atts_1309.push(this.parseAttribute());
            let node_1310 = this.tok();
            let nodePosition = {line:this.lex.line[this.i], column:this.lex.column[this.i]};
            let result_1311 = null;
            {
                const temp_1312 = node_1310;
                switch (temp_1312) {
                case 39: {
                    {
                        this.next();
                        let names_1313 = [this.getgo(61)];
                        while (this.tok() == 75) {
                            this.step(75);
                            names_1313.push(this.getgo(61));
                        };
                        result_1311 = (["TUsing",39,names_1313]);
                    }
                } break;

                case 13: {
                    {
                        this.i++;
                        {
                            const temp_1314 = this.tok();
                            switch (temp_1314) {
                            case 16: {
                                result_1311 = this.parseFunction(false, true)
                            } break;

                            case 40: case 23: {
                                {
                                    const parsed = this.parseVar(true);
                                    if (parsed.length > 1) { result_1311 = (["TVars",24,parsed]) } else result_1311 = parsed[0];
                                }
                            } break;

                            case 7: case 22: {
                                result_1311 = this.parseClass(true)
                            } break;

                            case 61: {
                                {
                                    const alias_1315 = this.parseType();
                                    this.step(91);
                                    const value_1316 = this.parseType();
                                    result_1311 = (["TTypeAlias",8,alias_1315,value_1316]);
                                }
                            } break;

                            default:
                            this.fail(('Wrong `declare` format, got `' + (Token.stringify(this.tok())) + '`'))
                            };
                        };
                    }
                } break;

                case 74: {
                    {
                        this.i++;
                        if (this.tok() == 73) {
                            this.i++;
                            result_1311 = (["TBlock",11,[]]);
                        } else if (this.tok() == 76) {
                            this.i++;
                            this.step(73);
                            result_1311 = (["TObject",36,[],[]]);
                        } else if (this.tok() == 62 && this.lex.token[this.i + 1] == 76) {
                            let names_1317 = [];
                            let el_1318 = [];
                            while (true) {
                                names_1317.push(this.getgo(62));
                                this.step(76);
                                el_1318.push(this.parseExpr());
                                if (this.tok() == 75) {
                                    this.i++;
                                    continue;
                                } else break;
                            };
                            if (this.tok() != 73) { this.fail(('Expected `}` or `,` before `' + (this.print()) + '`')) };
                            this.step(73);
                            result_1311 = (["TObject",36,names_1317,el_1318]);
                        } else {
                            let el_1319 = [];
                            while (this.tok() != 73) {
                                el_1319.push(this.parseExpr());
                            };
                            this.step(73);
                            result_1311 = (["TBlock",11,el_1319]);
                        };
                    }
                } break;

                case 17: {
                    {
                        this.i++;
                        this.step(80);
                        let econd_1320 = [this.parseExpr()];
                        while (this.tok() == 75) {
                            this.next();
                            econd_1320.push(this.parseExpr());
                        };
                        this.step(79);
                        let eif_1321 = null;
                        if (this.tok() != 76) { eif_1321 = this.parseExpr() };
                        let eelse_1322 = null;
                        if (this.tok() == 10) {
                            this.i++;
                            eelse_1322 = this.parseExpr();
                        };
                        result_1311 = (["TIf",13,econd_1320,eif_1321,eelse_1322]);
                    }
                } break;

                case 41: {
                    {
                        this.i++;
                        this.step(80);
                        let econd_1323 = this.parseExpr();
                        this.step(79);
                        let e_1324 = this.parseExpr();
                        result_1311 = (["TWhile",20,econd_1323,e_1324,true]);
                    }
                } break;

                case 9: {
                    {
                        this.i++;
                        let e_1325 = this.parseExpr();
                        this.step(41);
                        this.step(80);
                        let econd_1326 = this.parseExpr();
                        this.step(79);
                        result_1311 = (["TWhile",20,econd_1326,e_1325,false]);
                    }
                } break;

                case 80: {
                    {
                        this.next();
                        if ((this.tok() == 79 && this.offset(1) == 90) || (this.tok() == 62 && this.offset(1) == 75) || (this.tok() == 62 && this.offset(1) == 76) || (this.tok() == 62 && this.offset(1) == 79 && this.offset(2) == 90)) {
                            let vars_1327 = [];
                            let types_1328 = [];
                            let values_1329 = [];
                            while (this.tok() != 79) {
                                vars_1327.push(this.getgo(62));
                                if (this.tok() == 76) {
                                    this.i++;
                                    types_1328.push(this.parseType());
                                };
                                if (this.tok() == 91) {
                                    this.i++;
                                    values_1329.push(this.parseExpr());
                                };
                                if (this.tok() == 75) { this.i++ };
                            };
                            this.step(79);
                            this.step(90);
                            let v_1330 = [];
                            {
                                let i_1331 = 0;
                                let it_1332 = 0;
                                let at_1333 = vars_1327.length;
                                while (it_1332 < at_1333) {
                                    i_1331 = it_1332;
                                    it_1332++;
                                    {
                                        v_1330.push((["TVar",23,vars_1327[i_1331],types_1328[i_1331],values_1329[i_1331],true]));
                                    };
                                };
                            };
                            result_1311 = (["TArrow",22,this.parseExpr(),v_1330,null]);
                        } else {
                            let expr_1334 = this.parseExpr();
                            this.step(79);
                            result_1311 = (["TParenthesis",14,expr_1334]);
                        };
                    }
                } break;

                case 31: {
                    {
                        this.i++;
                        {
                            const temp_1335 = this.tok();
                            switch (temp_1335) {
                            case 73: {
                                result_1311 = (["TReturn",15,null])
                            } break;

                            case 40: {
                                result_1311 = (["TReturn",15,null])
                            } break;

                            default:
                            result_1311 = (["TReturn",15,this.parseExpr()])
                            };
                        };
                    }
                } break;

                case 35: {
                    {
                        this.i++;
                        result_1311 = (["TThrow",16,this.parseExpr()]);
                    }
                } break;

                case 8: {
                    {
                        this.i++;
                        result_1311 = Node.TContinue;
                    }
                } break;

                case 3: {
                    {
                        this.i++;
                        result_1311 = Node.TBreak;
                    }
                } break;

                case 1: {
                    {
                        this.i++;
                        result_1311 = Node.TUnderscore;
                    }
                } break;

                case 88: {
                    {
                        this.i++;
                        result_1311 = (["TUnop",19,88,false,this.parseExpr()]);
                    }
                } break;

                case 107: {
                    {
                        this.i++;
                        result_1311 = (["TUnop",19,107,false,this.parseExpr()]);
                    }
                } break;

                case 89: {
                    {
                        this.i++;
                        result_1311 = (["TUnop",19,89,false,this.parseExpr()]);
                    }
                } break;

                case 87: {
                    {
                        this.i++;
                        result_1311 = (["TUnop",19,87,false,this.parseExpr()]);
                    }
                } break;

                case 86: {
                    {
                        this.i++;
                        result_1311 = (["TUnop",19,86,false,this.parseExpr()]);
                    }
                } break;

                case 60: {
                    result_1311 = (["TFloat",6,this.getgo(60)])
                } break;

                case 63: {
                    result_1311 = (["TInt",5,this.getgo(63)])
                } break;

                case 61: {
                    if (this.lex.token[this.i + 1] == 99) {
                        let res = this.parseType();
                        result_1311 = (["NodeTypeValue",48,res]);
                    } else if (this.lex.token[this.i + 1] == 81) {
                        let name_1336 = this.getgo(61);
                        this.i++;
                        result_1311 = (["NodeTypeValue",48,(["Optional",0,(["Type",1,name_1336])])]);
                    } else {
                        let name_1337 = this.getgo(61);
                        result_1311 = (["NodeTypeValue",48,(["Type",1,name_1337])]);
                    }
                } break;

                case 62: {
                    {
                        let name_1338 = this.getgo(62);
                        if (this.tok() == 90) {
                            this.next();
                            result_1311 = (["TArrow",22,this.parseExpr(),[(["TVar",23,name_1338,null,null,true])],null]);
                        } else result_1311 = (["TIdent",1,name_1338]);
                    }
                } break;

                case 66: {
                    result_1311 = (["TString",0,this.getgo(66)])
                } break;

                case 64: {
                    {
                        let str_1339 = this.getgo(64);
                        if (this.hasInterpolation(str_1339)) { result_1311 = (["TParenthesis",14,this.parseInterpolations(str_1339)]) } else result_1311 = (["TString",0,str_1339]);
                    }
                } break;

                case 36: {
                    {
                        this.i++;
                        result_1311 = (["TBool",2,true]);
                    }
                } break;

                case 14: {
                    {
                        this.i++;
                        result_1311 = (["TBool",2,false]);
                    }
                } break;

                case 34: {
                    {
                        this.i++;
                        result_1311 = Node.TThis;
                    }
                } break;

                case 26: {
                    {
                        this.i++;
                        result_1311 = Node.TNull;
                    }
                } break;

                case 59: {
                    {
                        this.i++;
                        result_1311 = Node.TSuper;
                    }
                } break;

                case 40: {
                    {
                        let parsed_1340 = this.parseVar();
                        if (parsed_1340.length > 1) { result_1311 = (["TVars",24,parsed_1340]) } else result_1311 = parsed_1340[0];
                    }
                } break;

                case 23: {
                    {
                        let parsed_1341 = this.parseVar();
                        if (parsed_1341.length > 1) { result_1311 = (["TVars",24,parsed_1341]) } else result_1311 = parsed_1341[0];
                    }
                } break;

                case 37: {
                    {
                        this.i++;
                        let expr_1342 = this.parseExpr();
                        let vars_1343 = [];
                        let t_1344 = [];
                        let v_1345 = [];
                        let catches_1346 = [];
                        while (this.tok() == 6) {
                            this.step(6);
                            this.step(80);
                            let name_1347 = this.getgo(62);
                            vars_1343.push(name_1347);
                            this.step(76);
                            let type_1348 = this.parseType();
                            {
                                t_1344.push(type_1348);
                            };
                            v_1345.push((["TVar",23,name_1347,type_1348,null,true]));
                            this.step(79);
                            catches_1346.push(this.parseExpr());
                        };
                        result_1311 = (["TTry",27,expr_1342,t_1344,v_1345,catches_1346]);
                    }
                } break;

                case 28: {
                    {
                        this.i++;
                        let path_1349 = [];
                        if (this.tok() == 62) {
                            path_1349.push(this.getgo(62));
                            while (this.tok() == 77) {
                                this.i++;
                                path_1349.push(this.getgo(62));
                            };
                        };
                        this.step(74);
                        let el_1350 = [];
                        while (this.tok() != 73) {
                            el_1350.push(this.parseExpr());
                        };
                        this.step(73);
                        result_1311 = (["TModule",35,path_1349,el_1350]);
                        Project.data.set(result_1311, new NodeData(nodePosition.line, nodePosition.column, this.lex.fileName));
                        return result_1311;
                    }
                } break;

                case 11: {
                    {
                        this.i++;
                        let t_1351 = this.parseType();
                        let valuesType_1352 = null;
                        if (this.tok() == 76) {
                            this.i++;
                            valuesType_1352 = this.parseType();
                        };
                        this.step(74);
                        let names_1353 = [];
                        while (this.tok() != 73) {
                            while (this.tok() == 70) atts_1309.push(this.parseAttribute());
                            atts_1309 = [];
                            names_1353.push(this.parseExpr());
                        };
                        this.step(73);
                        result_1311 = (["TEnum",37,t_1351,names_1353,valuesType_1352]);
                    }
                } break;

                case 7: case 22: {
                    {
                        let att = atts_1309;
                        atts_1309 = [];
                        const me = this.parseClass();
                        Project.mapAttributes.set(me, att);
                        result_1311 = me;
                    }
                } break;

                case 16: {
                    result_1311 = this.parseFunction()
                } break;

                case 72: {
                    {
                        this.i++;
                        let el_1354 = [];
                        let values_1355 = [];
                        let isMap = false;
                        if (this.tok() != 71) { while (true) {
                            if (this.tok() == 76) {
                                isMap = true;
                                this.next();
                                break;
                            };
                            el_1354.push(this.parseExpr());
                            if (this.tok() == 76) {
                                this.i++;
                                values_1355.push(this.parseExpr());
                                isMap = true;
                            };
                            if (this.tok() == 75) {
                                this.i++;
                                if (this.tok() == 71) { this.fail('Unexpected `]`, remove trailing comma `,` before `]` or add a value after `,` if required') };
                            } else break;
                        } };
                        this.step(71);
                        if (isMap) { result_1311 = (["TMap",32,el_1354,values_1355]) } else result_1311 = (["TArray",31,el_1354]);
                    }
                } break;

                case 25: {
                    {
                        this.i++;
                        let t_1356 = this.parseType();
                        let names_1357 = [];
                        let values_1358 = [];
                        if (this.tok() == 74) {
                            this.i++;
                            if (this.tok() == 76) {
                                this.i++;
                                this.step(73);
                            } else if (this.tok() == 62 && this.lex.token[this.i + 1] == 76) {
                                while (this.tok() != 73) {
                                    names_1357.push(this.getgo(62));
                                    this.step(76);
                                    values_1358.push(this.parseExpr());
                                    if (this.tok() == 75) { this.i++ };
                                };
                                this.step(73);
                            } else if (this.tok() == 73) { this.step(73) };
                        };
                        this.step(80);
                        let args_1359 = [];
                        let argNames_1360 = [];
                        if (this.tok() != 79) { while (true) {
                            {
                                const temp_1361 = this.tok();
                                switch (temp_1361) {
                                case 61: {
                                    {
                                        argNames_1360.push(null);
                                        args_1359.push(this.parseExpr());
                                        if (this.tok() == 76) {
                                            this.step(76);
                                            this.parseType();
                                        };
                                    }
                                } break;

                                default:
                                {
                                    if (this.lex.token[this.i + 1] == 76) {
                                        argNames_1360.push(this.getgo(62));
                                        this.step(76);
                                    } else {
                                        argNames_1360.push(null);
                                    };
                                    args_1359.push(this.parseExpr());
                                }
                                };
                            };
                            if (this.tok() == 75) { this.i++ } else break;
                        } };
                        this.step(79);
                        result_1311 = (["TNew",30,[],t_1356,args_1359,names_1357,values_1358,argNames_1360]);
                    }
                } break;

                case 33: {
                    {
                        this.i++;
                        this.step(80);
                        let exprs_1362 = [this.parseExpr()];
                        while (this.tok() == 75) {
                            this.i++;
                            exprs_1362.push(this.parseExpr());
                        };
                        this.step(79);
                        this.step(74);
                        let cases_1363 = [];
                        let conds_1364 = [];
                        let guards_1365 = [];
                        while (this.tok() != 73) {
                            this.step(4);
                            if (this.tok() == 1) {
                                conds_1364.push(Node.TUnderscore);
                                this.i++;
                            } else conds_1364.push(this.parseExpr());
                            guards_1365.push(null);
                            this.step(76);
                            let exs = [];
                            while (this.tok() != 4 && this.tok() != 73) {
                                exs.push(this.parseExpr());
                            };
                            cases_1363.push((["TBlock",11,exs]));
                        };
                        this.step(73);
                        result_1311 = (["TSwitch",34,exprs_1362,conds_1364,guards_1365,cases_1363]);
                    }
                } break;

                case 15: {
                    {
                        this.i++;
                        const start_1366 = this.i;
                        this.step(80);
                        if (this.tok() == 23 || this.tok() == 40) {
                            this.i++;
                            let name_1367 = this.getgo(62);
                            {
                                if (this.print() == 'of' || this.print() == 'in') {
                                    this.i++;
                                    let values_1368 = this.print();
                                    this.i++;
                                    while (this.tok() != 79 && this.tok() != 0) {
                                        if (this.tok() == 107 || this.tok() == 111) { values_1368 += ' ' + this.print() + ' ' } else values_1368 += this.print();
                                        this.i++;
                                    };
                                    this.fail(('This loop should be replaced to `for (' + (name_1367) + ' in ' + (values_1368) + ')`'));
                                };
                            };
                            let classic = true;
                            if (this.tok() == 91) { this.i++ } else classic = false;
                            let specialCase = '';
                            if ((this.tok() == 63) && (this.lex.value[this.i] == '0')) { this.i++ } else {
                                while (this.tok() == 62 || this.tok() == 61 || this.tok() == 80 || this.tok() == 79 || this.tok() == 111 || this.tok() == 107 || this.tok() == 63 || this.tok() == 102 || this.tok() == 77) {
                                    if (this.tok() == 107 || this.tok() == 111) { specialCase += ' ' + this.print() + ' ' } else specialCase += this.print();
                                    this.i++;
                                };
                            };
                            if (this.tok() == 82) { this.i++ } else classic = false;
                            if ((this.tok() == 62) && (this.lex.value[this.i] == name_1367)) { this.i++ } else classic = false;
                            let lesserOrEqual = false;
                            if (this.tok() == 99) { this.i++ } else if (this.tok() == 100) {
                                this.i++;
                                lesserOrEqual = true;
                            } else classic = false;
                            let values_1369 = this.print();
                            this.i++;
                            while (this.tok() == 62 || this.tok() == 61 || this.tok() == 80 || this.tok() == 79 || this.tok() == 111 || this.tok() == 107 || this.tok() == 63 || this.tok() == 102 || this.tok() == 77) {
                                if (this.tok() == 107 || this.tok() == 111) { values_1369 += ' ' + this.print() + ' ' } else values_1369 += this.print();
                                this.i++;
                            };
                            if (lesserOrEqual) { values_1369 += ' + 1' };
                            if (this.tok() == 82) { this.i++ } else classic = false;
                            if ((this.tok() == 62) && (this.lex.value[this.i] == name_1367)) {
                                this.i++;
                                if (this.tok() == 87) { this.i++ } else classic = false;
                            } else if (this.tok() == 87) {
                                this.i++;
                                if ((this.tok() == 62) && (this.lex.value[this.i] == name_1367)) { this.i++ } else classic = false;
                            } else classic = false;
                            if (this.tok() == 79) {} else classic = false;
                            if ((classic) && (specialCase == '')) { this.fail(('This loop should be replaced to `for (' + (name_1367) + ' in ' + (values_1369) + ')`')) };
                            if (classic) { this.fail(('This loop should be replaced to `for (' + (name_1367) + ' in ' + (specialCase) + ' ... ' + (values_1369) + ')`')) };
                            if (classic) { this.fail('This loop should be replaced to:\n' + ('var ' + (name_1367) + ' = ' + (specialCase) + '\n') + ('while (' + (name_1367) + ' < ' + (values_1369) + ') {\n') + '\t...\n' + ('\t' + (name_1367) + '++\n') + '}') };
                            this.fail(('Hexa has only `for (' + (name_1367) + ' in values)` syntax'));
                        };
                        let name_1370 = this.getgo(62);
                        this.step(20);
                        let values_1371 = this.parseExpr();
                        const range_1372 = (this.tok() == 98)? ((() => {
                            this.i++;
                            return this.parseExpr();
                        })()) : null;
                        this.step(79);
                        let expression = this.parseExpr();
                        result_1311 = (["TFor",46,name_1370,values_1371,expression,range_1372]);
                    }
                } break;

                case 32: {
                    {
                        this.next();
                        result_1311 = (["TStatic",43,this.parseExpr()]);
                    }
                } break;

                case 29: {
                    {
                        this.next();
                        result_1311 = (["TPrivate",44,this.parseExpr()]);
                    }
                } break;

                default:
                this.unexpected()
                };
            };
            if (result_1311 == null) {
                Process.stdout.write('\n');
                this.fail('Expression is incomplete, current token is: ' + Token.stringify(this.tok()));
            };
            Project.data.set(result_1311, new NodeData(nodePosition.line, nodePosition.column, this.lex.fileName));
            if (atts_1309.length > 0) {
                Project.mapAttributes.set(result_1311, atts_1309);
                atts_1309 = [];
            };
            let done = this.i >= this.lex.length;
            while (!done) {
                Project.data.set(result_1311, new NodeData(this.lex.line[this.i], this.lex.column[this.i], this.lex.fileName));
                {
                    const temp_1373 = this.tok();
                    switch (temp_1373) {
                    case 0: {
                        done = true
                    } break;

                    case 72: {
                        {
                            this.i++;
                            let index_1374 = this.parseExpr();
                            if (this.tok() == 75) { this.fail('Expected `]` instead of `,` comma. Hexa supports only one [index] value.\n' + ('Note, you are indexing this expression: `' + (Node.stringify(result_1311)) + '[' + (Node.stringify(index_1374)) + ']`\n') + ('To create array here, wrap it with `{` as `{[' + (Node.stringify(index_1374)) + ', ...]}` so it doesn\'t index previous expression.')) };
                            this.step(71);
                            result_1311 = (["TIndex",33,result_1311,index_1374]);
                        }
                    } break;

                    case 57: {
                        {
                            this.i++;
                            {
                                const temp_1375 = this.tok();
                                switch (temp_1375) {
                                case 61: {
                                    result_1311 = (["TIs",40,result_1311,this.parseType()])
                                } break;

                                default:
                                this.fail('Cannot parse type `' + Token.stringify(this.tok()) + '`')
                                };
                            };
                        }
                    } break;

                    case 58: {
                        {
                            this.i++;
                            let kind_1376 = this.tok();
                            if (this.tok() == 89) { this.i++ } else if (this.tok() == 81) { this.i++ } else kind_1376 = 123;
                            result_1311 = (["TAs",41,result_1311,kind_1376,this.parseType()]);
                        }
                    } break;

                    case 80: {
                        {
                            let args_1377 = [];
                            let argNames_1378 = [];
                            this.i++;
                            if (this.tok() != 79) { while (true) {
                                {
                                    const temp_1379 = this.tok();
                                    switch (temp_1379) {
                                    case 61: {
                                        {
                                            argNames_1378.push(null);
                                            args_1377.push(this.parseExpr());
                                            if (this.tok() == 76) {
                                                this.step(76);
                                                this.parseType();
                                            };
                                        }
                                    } break;

                                    default:
                                    {
                                        if ((this.tok() == 62) && (this.lex.token[this.i + 1] == 76)) {
                                            argNames_1378.push(this.getgo(62));
                                            this.step(76);
                                        } else {
                                            argNames_1378.push(null);
                                        };
                                        args_1377.push(this.parseExpr());
                                    }
                                    };
                                };
                                if (this.tok() == 75) { this.i++ } else break;
                            } };
                            this.step(79);
                            result_1311 = (["TCall",12,result_1311,args_1377,argNames_1378]);
                        }
                    } break;

                    case 90: {
                        {
                            this.next();
                            result_1311 = (["TArrow",22,this.parseExpr(),[result_1311],null]);
                        }
                    } break;

                    case 87: {
                        {
                            this.i++;
                            result_1311 = (["TUnop",19,87,true,result_1311]);
                        }
                    } break;

                    case 86: {
                        {
                            this.i++;
                            result_1311 = (["TUnop",19,86,true,result_1311]);
                        }
                    } break;

                    case 77: {
                        {
                            this.i++;
                            {
                                const temp_1380 = this.tok();
                                switch (temp_1380) {
                                case 61: {
                                    result_1311 = (["TDotUpper",29,result_1311,this.getgo(61)])
                                } break;

                                default:
                                result_1311 = (["TDot",28,result_1311,this.getgo(62)])
                                };
                            };
                        }
                    } break;

                    case 81: {
                        {
                            this.i++;
                            if (this.tok() == 77) {
                                let name_1381 = this.getgo(62);
                                result_1311 = (["TDot",28,result_1311,name_1381]);
                            } else if (this.tok() == 81) {
                                this.i++;
                                result_1311 = (["TElvis",47,result_1311,this.parseExpr()]);
                            } else {
                                let eif_1382 = this.parseExpr();
                                this.step(76);
                                let eelse_1383 = this.parseExpr();
                                result_1311 = (["TIf",13,[result_1311],eif_1382,eelse_1383]);
                            };
                        }
                    } break;

                    case 113: {
                        {
                            this.i++;
                            result_1311 = this.parseExpr();
                        }
                    } break;

                    default:
                    {
                        const t_1384 = this.tok();
                        if (Parser.isBinop(t_1384) && this.offset(1) == 91) {
                            let op_1385 = this.tok();
                            this.i++;
                            this.i++;
                            let b_1386 = this.parseExpr();
                            result_1311 = (["TAssignop",10,result_1311,op_1385,b_1386]);
                        } else if (Parser.isBinop(t_1384)) {
                            this.i++;
                            let b_1387 = this.parseExpr();
                            let a_1388 = result_1311;
                            {
                                const temp_1389 = b_1387;
                                switch (temp_1389 && temp_1389[1]) {
                                case 9: {
                                    {
                                        const aa = temp_1389[2];
                                        const op_1390 = temp_1389[3];
                                        const bb = temp_1389[4];
                                        {
                                            let tp = this.precedence(t_1384);
                                            let tLeft = tp > 99;
                                            tp = tp % 100;
                                            let bp = this.precedence(op_1390);
                                            let bLeft = bp > 99;
                                            bp = bp % 100;
                                            if (bp > tp) { result_1311 = (["TBinop",9,(["TBinop",9,result_1311,t_1384,aa]),op_1390,bb]) } else result_1311 = (["TBinop",9,result_1311,t_1384,b_1387]);
                                        };
                                    }
                                } break;

                                default:
                                result_1311 = (["TBinop",9,result_1311,t_1384,b_1387])
                                };
                            };
                        } else done = true;
                    }
                    };
                };
            };
            if (result_1311 == null) {
                Process.stdout.write('\n');
                this.fail('Expression postfix is incomplete');
            };
            if (atts_1309.length > 0) {
                Project.mapAttributes.set(result_1311, atts_1309);
                atts_1309 = [];
            };
            Project.data.set(result_1311, new NodeData(nodePosition.line, nodePosition.column, this.lex.fileName));
            return result_1311;
        } };
        parseVar(external_1391) { {
            let const_1392 = this.tok() == 23;
            this.i++;
            let vars_1393 = [];
            if (this.tok() == 83) {
                this.i++;
                const name_1394 = (this.tok() == 62)? (this.print()) : 'name';
                const prefix_1395 = (const_1392)? ('let') : 'var';
                this.fail(('Hexa doesn\'t support PHP-style variables, replace it to `' + (prefix_1395) + ' ' + (name_1394) + '`'));
            };
            if (this.tok() == 61) {
                const name_1396 = this.getgo(61).toLowerCase();
                const prefix_1397 = (const_1392)? ('let') : 'var';
                this.fail(('Variable name should start with lowercase, like this `' + (prefix_1397) + ' ' + (name_1396) + '`'));
            };
            const parseSingleVar = () => {
                let varname = this.getgo(62);
                if (varname.endsWith('___')) { this.fail('Variables can\'t end with `___`, it is reserved.') };
                let type_1398 = null;
                if (this.tok() == 76) {
                    this.i++;
                    type_1398 = this.parseType();
                };
                let expr_1399 = null;
                if (this.tok() == 91) {
                    this.i++;
                    expr_1399 = this.parseExpr();
                };
                return (["TVar",23,varname,type_1398,expr_1399,const_1392,((external_1391) || (false))]);
            };
            const parseSingleBinding = () => {
                let path_1400 = [];
                while (this.tok() == 62 && this.offset(1) == 77) {
                    path_1400.push(this.getgo(62));
                    this.i++;
                };
                path_1400.push(this.getgo(61));
                this.step(77);
                path_1400.push(this.getgo(61));
                if (this.tok() == 80 && this.offset(1) == 79) { this.fail('Don\'t use empty parenthesis for `let ' + path_1400.join('.') + '()` bindings') };
                let bind = [];
                if (this.tok() == 80) {
                    do {{
                        this.i++;
                        if (this.tok() == 1) {
                            this.i++;
                            bind.push(null);
                        } else bind.push((["TVar",23,this.getgo(62),null,null,const_1392]));
                    }} while (this.tok() == 75);
                    this.step(79);
                };
                this.step(91);
                let expr_1401 = this.parseExpr();
                return (["TEnumExtract",38,path_1400,bind,expr_1401]);
            };
            while (true) {
                if (this.tok() == 61 || (this.tok() == 62 && this.offset(1) == 77)) { vars_1393.push(parseSingleBinding()) } else vars_1393.push(parseSingleVar());
                if (this.tok() == 75 && this.offset(1) == 62 && (this.offset(2) == 91 || this.offset(2) == 76)) { this.i++ } else break;
            };
            return vars_1393;
            let const_1402 = this.tok() == 23;
            this.i++;
            let vars_1403 = [];
            {
                const temp_1404 = this.tok();
                switch (temp_1404) {
                case 62: {
                    while (true) {
                        let varname_1405 = this.getgo(62);
                        if (varname_1405.endsWith('___')) { this.fail('Variables can\'t end with `___`, it is reserved.') };
                        let type_1406 = null;
                        if (this.tok() == 76) {
                            this.i++;
                            type_1406 = this.parseType();
                        };
                        let expr_1407 = null;
                        if (this.tok() == 91) {
                            this.i++;
                            expr_1407 = this.parseExpr();
                        };
                        vars_1403.push((["TVar",23,varname_1405,type_1406,expr_1407,const_1402,external_1391]));
                        if (this.tok() == 75 && this.offset(1) == 62 && (this.offset(2) == 91 || this.offset(2) == 76)) { this.i++ } else break;
                    }
                } break;

                case 61: {
                    {
                        let left = (["TIdent",1,this.getgo(61)]);
                        let res_1408 = left;
                        while (this.tok() == 77) {
                            res_1408 = (["TDot",28,res_1408,this.getgo(61)]);
                        };
                        {
                            const temp_1409 = this.tok();
                            switch (temp_1409) {
                            case 80: {
                                {
                                    let args_1410 = [];
                                    while (this.tok() != 79) {
                                        args_1410.push(this.getgo(62));
                                    };
                                    this.step(91);
                                    let varname_1411 = this.getgo(62);
                                }
                            } break;

                            case 91: {
                                {
                                }
                            } break;

                            default:
                            this.fail('Wrong syntax')
                            };
                        };
                    }
                } break;

                default:
                this.fail('Wrong syntax')
                };
            };
            return vars_1403;
        } };
        parseFunction(parseBody, external_1412) { {
            const parseBody_1413 = ((parseBody != null))? (parseBody) : true;
            this.i++;
            let expr_1414 = null;
            let name_1415 = null;
            let vars_1416 = [];
            let types_1417 = [];
            let values_1418 = [];
            let pos_1419 = [];
            {
                const temp_1420 = this.tok();
                switch (temp_1420) {
                case 62: {
                    name_1415 = this.getgo(62)
                } break;

                case 61: {
                    this.fail(('Function names can\'t start with uppercase `' + (this.print()) + '` -> `' + (this.print().toLowerCase()) + '`'))
                } break;

                default:
                {
                }
                };
            };
            this.step(80);
            {
                if (this.tok() != 79) { while (true) {
                    let expr_1421 = null;
                    let t_1422 = null;
                    if (this.tok() == 98) { this.i++ };
                    pos_1419.push({line:this.lex.line[this.i], column:this.lex.column[this.i]});
                    let name_1423 = this.getgo(62);
                    if (this.tok() == 76) {
                        this.i++;
                        t_1422 = this.parseType();
                    };
                    if (this.tok() == 91) {
                        this.i++;
                        expr_1421 = this.parseExpr();
                    };
                    vars_1416.push(name_1423);
                    types_1417.push(t_1422);
                    values_1418.push(expr_1421);
                    if (this.tok() == 75) { this.i++ } else break;
                } };
                this.step(79);
            };
            let rettype_1424 = null;
            if (this.tok() == 76) {
                this.i++;
                rettype_1424 = this.parseType();
            };
            if (parseBody_1413) {
                const temp_1425 = this.tok();
                switch (temp_1425) {
                case 25: {
                    if (this.lex.token[this.i + 1] == 80) {} else expr_1414 = this.parseExpr()
                } break;

                case 73: {
                    {
                    }
                } break;

                case 32: {
                    {
                    }
                } break;

                case 29: {
                    {
                    }
                } break;

                case 16: {
                    {
                    }
                } break;

                case 40: {
                    {
                    }
                } break;

                case 23: {
                    {
                    }
                } break;

                case 70: {
                    {
                        let tmp_1426 = this.i;
                        while (this.tok() == 70) this.parseAttribute();
                        if (this.tok() != 73 && this.tok() != 32 && this.tok() != 29 && this.tok() != 16) {
                            this.i = tmp_1426;
                            expr_1414 = this.parseExpr();
                        } else this.i = tmp_1426;
                    }
                } break;

                default:
                expr_1414 = this.parseExpr()
                };
            };
            let v_1427 = [];
            {
                let i_1428 = 0;
                let it_1429 = 0;
                let at_1430 = vars_1416.length;
                while (it_1429 < at_1430) {
                    i_1428 = it_1429;
                    it_1429++;
                    {
                        const n_1431 = (["TVar",23,vars_1416[i_1428],types_1417[i_1428],values_1418[i_1428],true,false]);
                        Project.data.set(n_1431, new NodeData(pos_1419[i_1428].line, pos_1419[i_1428].column, this.lex.fileName));
                        v_1427.push(n_1431);
                    };
                };
            };
            return (["TFunction",21,name_1415,expr_1414,v_1427,rettype_1424,external_1412]);
        } };
        parseClass(external_1432) { {
            const _classExternal = this.classExternal;
            this.classExternal = external_1432;
            let isInterface = this.tok() == 22;
            this.i++;
            let t_1433 = this.parseType();
            let ext_1434 = (this.tok() == 12)? ((() => {
                this.i++;
                return this.parseType();
            })()) : null;
            let impl_1435 = [];
            while (this.tok() == 18) {
                this.i++;
                impl_1435.push(this.parseType());
            };
            this.step(74);
            let fields_1436 = this.parseFields();
            this.step(73);
            let me_1437 = (["TClass",25,t_1433,ext_1434,impl_1435,fields_1436,((external_1432) || (false))]);
            this.classExternal = _classExternal;
            return me_1437;
        } };
        hasInterpolation(str_1438) { {
            let chars = str_1438.split('');
            let i_1439 = 0;
            while (i_1439 < chars.length) {
                if (chars[i_1439] == '\\') { if (i_1439 + 1 < chars.length) { if (chars[i_1439 + 1] == '\\') { i_1439++ } else if (chars[i_1439 + 1] == '(') { return true } } };
                i_1439++;
            };
            return false;
        } };
        parseInterpolations(str_1440) { {
            const interpolate = (s_1441) => {
                let out = ['"'];
                if (s_1441.length < 2) { return s_1441 };
                let i_1442 = 0;
                const s_1443 = s_1441.split('"').join('\\"');
                const pushInterpolator = () => {
                    i_1442++;
                    i_1442++;
                    const pushParen = () => {
                        i_1442++;
                        while (i_1442 < s_1443.length) {
                            out.push(s_1443.charAt(i_1442));
                            if (s_1443.charAt(i_1442) == '(') {
                                pushParen();
                                continue;
                            };
                            if (s_1443.charAt(i_1442) == ')') {
                                i_1442++;
                                return;
                            };
                            i_1442++;
                        };
                        throw 'String interpolation error: unclosed inner parenthesis';
                    };
                    while (i_1442 < s_1443.length) {
                        out.push(s_1443.charAt(i_1442));
                        if (s_1443.charAt(i_1442) == '(') {
                            pushParen();
                            continue;
                        };
                        if (s_1443.charAt(i_1442) == ')') {
                            i_1442++;
                            return;
                        };
                        i_1442++;
                    };
                    throw 'String interpolation error: unclosed parenthesis';
                };
                let result_1444 = ['"'];
                while (i_1442 < s_1443.length) {
                    if (s_1443.charAt(i_1442) == '\\' && s_1443.charAt(i_1442 + 1) == '(') {
                        result_1444.push('" + ');
                        out.push('" + (');
                        let ii = i_1442 + 1;
                        pushInterpolator();
                        result_1444.push(s_1443.substring(ii, i_1442 + 1));
                        result_1444.push(' + "');
                        out.push(' + "');
                    } else {
                        out.push(s_1443.charAt(i_1442));
                        result_1444.push(s_1443.charAt(i_1442));
                        i_1442++;
                    };
                };
                result_1444.push('"');
                out.push('"');
                return out.join('');
            };
            let resStr = interpolate(str_1440);
            let tokens_1445 = Lexer.tokenize(Buffer.from(resStr), this.lex.fileName);
            try {
                {
                    let parsed_1446 = Parser.toNode(Parser.parseNodes(tokens_1445));
                    {
                        const temp_1447 = parsed_1446;
                        switch (temp_1447 && temp_1447[1]) {
                        case 11: {
                            throw 'Parse interpolation error: got a block'
                        } break;

                        default:
                        return parsed_1446
                        };
                    };
                }
            } catch (e) {
                {
                    this.fail('Parse interpolation error: ' + e);
                }
            };
        } };
        parseAttribute() { {
            this.i++;
            let name_1448 = this.getgo(62);
            let values_1449 = [];
            if (this.tok() == 80) {
                this.i++;
                if (this.tok() != 79) { while (true) {
                    values_1449.push(this.parseExpr());
                    if (this.tok() == 75) { this.i++ } else break;
                } };
                this.step(79);
            };
            return new Attribute(name_1448, values_1449);
        } };
        parseType() { {
            let path_1450 = [];
            while (this.tok() == 62 && this.offset(1) == 77) {
                path_1450.push(this.getgo(62));
                this.i++;
            };
            let result_1451 = null;
            {
                const temp_1452 = this.tok();
                switch (temp_1452) {
                case 61: {
                    {
                        let name_1453 = this.getgo(61);
                        if (path_1450.length != 0) { name_1453 = path_1450.join('.') + '.' + name_1453 };
                        while (this.tok() == 77) {
                            this.i++;
                            this.getgo(61);
                        };
                        let sresult = (this.tok() == 99)? ((() => {
                            this.i++;
                            this.parametricTypeNesting++;
                            let params_1454 = [this.parseType()];
                            while (this.tok() == 75) {
                                this.i++;
                                params_1454.push(this.parseType());
                            };
                            if (this.parametricTypeNestingToken == 0) { this.parametricTypeNestingToken = this.tok() };
                            {
                                const temp_1455 = this.parametricTypeNestingToken;
                                switch (temp_1455) {
                                case 96: {
                                    {
                                        this.parametricTypeNesting -= 1;
                                        this.parametricTypeNestingToken = 0;
                                        this.i++;
                                    }
                                } break;

                                case 106: {
                                    {
                                        this.parametricTypeNesting -= 1;
                                        this.parametricTypeNestingToken = 96;
                                    }
                                } break;

                                case 108: {
                                    {
                                        this.parametricTypeNesting -= 1;
                                        this.parametricTypeNestingToken = 108;
                                    }
                                } break;

                                default:
                                this.unexpected()
                                };
                            };
                            if (this.parametricTypeNesting < 0) { this.fail('parametricTypeNesting < 0') };
                            return (["ParametricType",2,name_1453,params_1454]);
                        })()) : (["Type",1,name_1453]);
                        if (this.tok() == 90) {
                            this.i++;
                            sresult = (["Function",3,[sresult],this.parseType()]);
                        };
                        result_1451 = sresult;
                    }
                } break;

                case 72: {
                    {
                        if (path_1450.length != 0) { this.fail('Token.BkOpen') };
                        this.i++;
                        let res_1456 = null;
                        {
                            const temp_1457 = this.tok();
                            switch (temp_1457) {
                            case 71: {
                                {
                                    this.i++;
                                    res_1456 = (["ParametricType",2,'Array',[(["Object",5,[],[]])]]);
                                }
                            } break;

                            case 76: {
                                {
                                    this.i++;
                                    if (this.tok() == 71) {
                                        this.i++;
                                        res_1456 = (["ParametricType",2,'Map',[(["Object",5,[],[]]), (["Object",5,[],[]])]]);
                                    } else {
                                        res_1456 = (["ParametricType",2,'Map',[(["Object",5,[],[]]), this.parseType()]]);
                                    };
                                }
                            } break;

                            default:
                            {
                                let key = this.parseType();
                                let innerRes = (this.tok() == 76)? ((() => {
                                    this.i++;
                                    return (["ParametricType",2,'Map',[key, this.parseType()]]);
                                })()) : (["ParametricType",2,'Array',[key]]);
                                this.step(71);
                                if (this.tok() == 90) {
                                    this.i++;
                                    innerRes = (["Function",3,[res_1456],this.parseType()]);
                                };
                                res_1456 = innerRes;
                            }
                            };
                        };
                        result_1451 = res_1456;
                    }
                } break;

                case 74: {
                    {
                        if (path_1450.length != 0) { this.fail('Token.BrOpen') };
                        this.i++;
                        let sresult_1458 = (this.tok() == 76)? ((() => {
                            this.i++;
                            return (["Object",5,[],[]]);
                        })()) : (() => {
                            let names_1459 = [];
                            let types_1460 = [];
                            while (this.tok() != 73) {
                                names_1459.push(this.getgo(62));
                                if (this.tok() == 76) {
                                    this.i++;
                                    types_1460.push(this.parseType());
                                };
                                if (this.tok() == 75) { this.i++ };
                            };
                            return (["Object",5,names_1459,types_1460]);
                        })();
                        this.step(73);
                        if (this.tok() == 90) {
                            this.i++;
                            sresult_1458 = (["Function",3,[sresult_1458],this.parseType()]);
                        };
                        result_1451 = sresult_1458;
                    }
                } break;

                case 80: {
                    {
                        if (path_1450.length != 0) { this.fail('Token.POpen') };
                        this.i++;
                        let args_1461 = [];
                        while (this.tok() != 79) {
                            this.parseType();
                            if (this.tok() == 76) {
                                this.i++;
                                args_1461.push(this.parseType());
                            };
                            if (this.tok() == 75) { this.i++ };
                        };
                        this.step(79);
                        this.step(90);
                        result_1451 = (["Function",3,args_1461,this.parseType()]);
                    }
                } break;

                case 62: {
                    {
                        let res_1462 = null;
                        {
                            const temp_1463 = this.offset(1);
                            switch (temp_1463) {
                            case 76: {
                                {
                                    let argName = this.getgo(this.tok());
                                    this.step(76);
                                    let argType = this.parseType();
                                    res_1462 = (["FunctionArg",4,argName,argType,null]);
                                }
                            } break;

                            default:
                            this.fail(('Type name `' + (this.print()) + '` can not start with lowercase'))
                            };
                        };
                        result_1451 = res_1462;
                    }
                } break;

                default:
                this.fail('Expected type, parsed `' + Token.stringify(this.tok()) + '`')
                };
            };
            if (this.tok() == 81) { result_1451 = (["Optional",0,result_1451]) };
            while (this.tok() == 81) this.i++;
            if (this.tok() == 90) {
                this.i++;
                result_1451 = (["Function",3,[result_1451],this.parseType()]);
            };
            return result_1451;
        } };
        precedence(op_1464) { {
            const left_1465 = 100;
            const right = 0;
            {
                const temp_1466 = op_1464;
                switch (temp_1466) {
                case 101: {
                    return 0 + left_1465
                } break;

                case 102: {
                    return 1 + left_1465
                } break;

                case 94: {
                    return 1 + left_1465
                } break;

                case 111: {
                    return 2 + left_1465
                } break;

                case 107: {
                    return 2 + left_1465
                } break;

                case 105: {
                    return 3 + left_1465
                } break;

                case 106: {
                    return 3 + left_1465
                } break;

                case 108: {
                    return 3 + left_1465
                } break;

                case 104: {
                    return 4 + left_1465
                } break;

                case 112: {
                    return 4 + left_1465
                } break;

                case 109: {
                    return 4 + left_1465
                } break;

                case 95: {
                    return 5 + left_1465
                } break;

                case 103: {
                    return 5 + left_1465
                } break;

                case 96: {
                    return 5 + left_1465
                } break;

                case 99: {
                    return 5 + left_1465
                } break;

                case 97: {
                    return 5 + left_1465
                } break;

                case 100: {
                    return 5 + left_1465
                } break;

                case 92: {
                    return 7 + left_1465
                } break;

                case 93: {
                    return 8 + left_1465
                } break;

                case 91: {
                    return 10 + right
                } break;

                default:
                this.fail('No precedence for ' + Token.stringify(op_1464))
                };
            };
        } };
    }
    Parser.uuid = 0
    Parser.toNode = (nodes) => { {
            if (nodes.length == 0) { return null };
            if (nodes.length > 1) { return (["TBlock",11,nodes]) };
            return nodes[0];
        } };
    Parser.parseNodes = (lexe) => { {
            const parser = new Parser(lexe);
            return parser.nodes;
        } };
    Parser.uid = () => { return Parser.uuid++ };
    Parser.isBinop = (t_1467) => { {
            const temp_1468 = t_1467;
            switch (temp_1468) {
            case 111: {
                return true
            } break;

            case 102: {
                return true
            } break;

            case 94: {
                return true
            } break;

            case 107: {
                return true
            } break;

            case 91: {
                return true
            } break;

            case 95: {
                return true
            } break;

            case 103: {
                return true
            } break;

            case 96: {
                return true
            } break;

            case 97: {
                return true
            } break;

            case 99: {
                return true
            } break;

            case 100: {
                return true
            } break;

            case 112: {
                return true
            } break;

            case 104: {
                return true
            } break;

            case 109: {
                return true
            } break;

            case 92: {
                return true
            } break;

            case 93: {
                return true
            } break;

            case 105: {
                return true
            } break;

            case 106: {
                return true
            } break;

            case 108: {
                return true
            } break;

            case 101: {
                return true
            } break;

            default:
            return false
            };
        } };
    var Dumper = class {
        constructor() {
            this.tabs = ''
        {
        } };
        dumpFiles(collected_1469, types_1470) { {
            this.types = types_1470;
            const out_1471 = [];
            for (const file of $toIterator(collected_1469)) {
                out_1471.push('// file\n');
                for (const e of $toIterator(file)) {
                    out_1471.push('// file.node\n');
                    out_1471.push(this.dump(e));
                };
            };
            return out_1471.join('\n');
        } };
        pushTab() { this.tabs += '\t' };
        popTab() { this.tabs = this.tabs.substring(0, this.tabs.length - 1) };
        dump(node_1472) { return '〈' + this.dumpWrapped(node_1472) + '⭐⎰' + this.dumpType(this.types.get(node_1472)) + '⎱〉' };
        dumpWrapped(node_1473) { {
            const temp_1474 = node_1473;
            switch (temp_1474 && temp_1474[1]) {
            case 35: {
                {
                    const path_1475 = temp_1474[2];
                    const el_1476 = temp_1474[3];
                    return 'module ' + path_1475.join('.') + '{\n' + (() => {
                        const result_1477 = [];
                        const value_1478 = el_1476;
                        for (const e of $toIterator(value_1478)) result_1477.push(this.dump(e));
                        return result_1477;
                    })().join('\n') + '\n}';
                }
            } break;

            case 23: {
                return 'var'
            } break;

            case 9: {
                return 'TBinop'
            } break;

            case 25: {
                return '⋉'
            } break;

            case 12: {
                return 'call()'
            } break;

            case 37: {
                return 'enum'
            } break;

            case 21: {
                return 'function'
            } break;

            case 11: {
                return '{}'
            } break;

            case 13: {
                return 'if'
            } break;

            case 27: {
                return 'try'
            } break;

            case 8: {
                return 'declare'
            } break;

            case 30: {
                return 'new'
            } break;

            case null: case undefined: {
                throw 'Trying to dump null node'
            } break;

            default:
            throw 'Trying to dump unknown node: ' + node_1473
            };
        } };
        dumpType(type_1479) { return type_1479 };
    }
    var TestLexer = class {
    }
    TestLexer.passed = 0
    TestLexer.overall = 0
    TestLexer.test = () => { {
            console.log('TestLexer begin');
            TestLexer.compare('#!/bin', [], []);
            TestLexer.compare('#!/bin\n', [], []);
            TestLexer.compare('#!/bin\n//', [], []);
            TestLexer.compare('#!/bin\r\n123', [63], ['123']);
            TestLexer.compare('#!/bin\n\r123', [63], ['123']);
            TestLexer.compare('#!/bin\n123', [63], ['123']);
            TestLexer.compare('', [], []);
            TestLexer.compare('\n', [], []);
            TestLexer.compare('\n\n', [], []);
            TestLexer.compare('\r\r\n\r\n\r\t', [], []);
            TestLexer.compare(' ', [], []);
            TestLexer.compare('  ', [], []);
            TestLexer.compare(' ', [], []);
            TestLexer.compare('     ', [], []);
            TestLexer.compare('     ', [], []);
            TestLexer.compare('/* */', [], []);
            TestLexer.compare('/*\n*/', [], []);
            TestLexer.compare('//', [], []);
            TestLexer.compare('// ', [], []);
            TestLexer.compare('//\n', [], []);
            TestLexer.compare('123', [63], ['123']);
            TestLexer.compare(' 0 ', [63], ['0']);
            TestLexer.compare('0', [63], ['0']);
            TestLexer.compare('1 2 3', [63, 63, 63], ['1', '2', '3']);
            TestLexer.compare('0x1', [63], ['0x1']);
            TestLexer.compare('0x0', [63], ['0x0']);
            TestLexer.compare('0xF', [63], ['0xF']);
            TestLexer.compare('0xFA', [63], ['0xFA']);
            TestLexer.compare('0xFABCDEF', [63], ['0xFABCDEF']);
            TestLexer.compare('0x1F2A3B4C5D6E7F0', [63], ['0x1F2A3B4C5D6E7F0']);
            TestLexer.compare('-123', [107, 63], ['-', '123']);
            TestLexer.compare('+123', [111, 63], ['+', '123']);
            TestLexer.compare('0.123', [60], ['0.123']);
            TestLexer.compare('0.0', [60], ['0.0']);
            TestLexer.compare('0.0e+1', [60], ['0.0e+1']);
            TestLexer.compare('0.0E-1', [60], ['0.0E-1']);
            TestLexer.compare('0E-123', [60], ['0E-123']);
            TestLexer.compare('123e123', [60], ['123e123']);
            TestLexer.compare('1 2.0 3', [63, 60, 63], ['1', '2.0', '3']);
            TestLexer.compare('\'s\'', [64], ['\'s\'']);
            TestLexer.compare('"s"', [64], ['\'s\'']);
            TestLexer.compare('\"s\"', [64], ['\'s\'']);
            TestLexer.compare('`s`', [66], ['`s`']);
            TestLexer.compare('`aaa bbb``ccc` `ddd`', [66, 66], ['`aaa bbbccc`', '`ddd`']);
            TestLexer.compare('````````', [66], ['``']);
            TestLexer.compare('``', [66], ['``']);
            TestLexer.compare('``\n', [66], ['``']);
            TestLexer.compare('``\n``', [66, 66], ['``', '``']);
            TestLexer.compare('\'s\n\'', [64], ['\'s\n\'']);
            TestLexer.compare('\'s\r\n\'', [64], ['\'s\n\'']);
            TestLexer.compare('\'s\n                s\'', [64], ['\'s\n\t\t\t\ts\'']);
            TestLexer.compare('"s\n"', [64], ['\'s\n\'']);
            TestLexer.compare('"s\r\n"', [64], ['\'s\n\'']);
            TestLexer.compare('"\r\ns\r\n"', [64], ['\'\ns\n\'']);
            TestLexer.compare('`s\n`', [66], ['`s\n`']);
            TestLexer.compare('`s\r\n`', [66], ['`s\r\n`']);
            TestLexer.compare('`s\r`', [66], ['`s\r`']);
            TestLexer.compare('T', [61], ['T']);
            TestLexer.compare('T val', [61, 62], ['T', 'val']);
            TestLexer.compare('T val Type', [61, 62, 61], ['T', 'val', 'Type']);
            TestLexer.compare('_T', [62], ['_T']);
            TestLexer.compare('v', [62], ['v']);
            TestLexer.compare('_v', [62], ['_v']);
            TestLexer.compare('_123', [62], ['_123']);
            TestLexer.compare(' } ', [73], ['}']);
            TestLexer.compare('==', [95], ['==']);
            TestLexer.compare('===', [95, 91], ['==', '=']);
            TestLexer.compare('== =', [95, 91], ['==', '=']);
            TestLexer.compare('= ==', [91, 95], ['=', '==']);
            TestLexer.compare('=====', [95, 95, 91], ['==', '==', '=']);
            TestLexer.compare('> >> >>> . .. ...', [96, 106, 108, 77, 77, 77, 98], ['>', '>>', '>>>', '.', '.', '.', '...']);
            TestLexer.compare('>>>>>>.......', [108, 108, 98, 98, 77], ['>>>', '>>>', '...', '...', '.']);
            console.log(('TestLexer done ' + (Math.round((TestLexer.passed / TestLexer.overall) * 100)) + '% (' + (TestLexer.passed) + '/' + (TestLexer.overall) + ')'));
        } };
    TestLexer.shouldError = (input, includes) => { {
            TestLexer.overall++;
            try {
                {
                    Lexer.tokenize(Buffer.from(input), 'TEST');
                }
            } catch (e) {
                {
                    throw 'got' + e.toString();
                    TestLexer.passed++;
                    return;
                }
            };
            throw ('TestLexer test fail: `' + (input) + '` did not throw exception.');
        } };
    TestLexer.renderInvisibleChars = (input_1480) => { return input_1480.split('\r').join('\\r').split('\n').join('\\n').split('\t').join('\\t') };
    TestLexer.compare = (input_1481, expect, expectValue, expectColumn = null, expectLine = null) => { {
            expect.push(0);
            const output = Lexer.tokenize(Buffer.from(input_1481), 'TEST');
            let pos_1482 = 0;
            const incorrect = (text_1483) => {
                let got = Token.stringify(output.token[pos_1482], output.value[pos_1482]);
                got = TestLexer.renderInvisibleChars(got);
                console.log(('Incorrect token `' + (got) + '` in string `' + (TestLexer.renderInvisibleChars(input_1481)) + '` at index ' + (pos_1482) + ''));
                console.log(text_1483);
            };
            TestLexer.overall++;
            for (const ex of $toIterator(expect)) {
                if (ex == 0) { break };
                if (ex != output.token[pos_1482]) {
                    incorrect(('Expected `' + (TestLexer.renderInvisibleChars(Token.stringify(ex))) + '`'));
                    return;
                };
                const value_1484 = Token.stringify(output.token[pos_1482], output.value[pos_1482]);
                if (expectValue[pos_1482] != value_1484) {
                    incorrect(('Expected value `' + (TestLexer.renderInvisibleChars(expectValue[pos_1482])) + '` but got `' + (TestLexer.renderInvisibleChars(value_1484)) + '`'));
                    return;
                };
                pos_1482++;
            };
            TestLexer.passed++;
        } };
    var TestParser = class {
    }
    TestParser.passed = 0
    TestParser.overall = 0
    TestParser.test = () => { {
            console.log('TestParser begin');
            TestParser.shouldAllEqual(new Map([['', '<!--null-->'], ['  ', '<!--null-->'], ['   ', '<!--null-->'], ['       ', '<!--null-->'], ['\n', '<!--null-->'], ['\n\n', '<!--null-->'], ['\r\r\n\r\n\r\t', '<!--null-->'], ['{}', 'TBlock([])'], ['{{}}', 'TBlock([TBlock([])])'], ['{ 0 0 0 }', 'TBlock([TInt(0),TInt(0),TInt(0)])'], ['0', 'TInt(0)'], [' 0 ', 'TInt(0)'], ['123', 'TInt(123)'], ['12', 'TInt(12)'], ['0x1', 'TInt(0x1)'], ['0x0', 'TInt(0x0)'], ['0xF', 'TInt(0xF)'], ['0xFA', 'TInt(0xFA)'], ['0xFABCDEF', 'TInt(0xFABCDEF)'], ['0.0', 'TFloat(0.0)'], ['0.123', 'TFloat(0.123)'], ['\'s\'', 'TString(s)'], ['\"s\"', 'TString(s)']]));
            TestParser.shouldAllEqual(new Map([['1 2 3 trace("Hello!", "World!") + 5 * 6 / 3', 'TBlock([\n                  TInt(1),\n                  TInt(2),\n                  TInt(3),\n                  TBinop(\n                   TCall(TIdent(trace),[TString(Hello!),TString(World!)]),\n                   +,\n                    TBinop(TInt(5),*,TBinop(TInt(6),/,TInt(3))))])'], ['enum Test { Demo } hello World', 'TBlock([TEnum(Type(Test),[NodeTypeValue(Type(Demo))]),\n                  TIdent(hello),\n                    NodeTypeValue(Type(World))])']]));
            TestParser.shouldAllEqual(new Map([['a + b', 'TBinop(TIdent(a),+,TIdent(b))'], ['a += b', 'TAssignop(TIdent(a),+,TIdent(b))']]));
            TestParser.shouldAllEqual(new Map([['"\\\\(v)"', 'TString(\\\\(v))'], ['"\\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TString())))'], ['"\\(((v)))"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(TParenthesis(TParenthesis(TIdent(v)))),+,TString())))'], ['"\\( v )"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TString())))'], ['"\\(V)\\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))'], ['"\\(V)\\(v)s\\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TBinop(TString(s),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))))'], ['"\\(V)s\\(v)s\\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString(s),+,TBinop(TParenthesis(TIdent(v)),+,TBinop(TString(s),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))))']]));
            TestParser.shouldAllEqualWithoutTrim(new Map([['"\\( v )"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TString())))'], ['"\\(V)\r\n\\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString(\n),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))'], ['"\\(V) \\(v) \\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString( ),+,TBinop(TParenthesis(TIdent(v)),+,TBinop(TString( ),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))))']]));
            TestParser.shouldAllEqual(new Map([['using A', 'TUsing(A)'], ['using A, B, C', 'TUsing(A,B,C)']]));
            TestParser.shouldAllEqual(new Map([['module { }', 'TModule(, [])'], ['code module { } code', 'TBlock([TIdent(code),TModule(,[]),TIdent(code)])'], ['code module { } module { } code', 'TBlock([TIdent(code),TModule(,[]),TModule(,[]),TIdent(code)])'], ['module a { }', 'TModule(a, [])'], ['module a.b { }', 'TModule(a.b, [])'], ['module { class Inner {} }', 'TModule(,[TClass(Type(Inner),null,[],[],false)])'], ['module { private class Inner {} }', 'TModule(,[TPrivate(TClass(Type(Inner),null,[],[],false))])'], ['module a { module b { } }', 'TModule(a,[TModule(b,[])])']]));
            TestParser.shouldAllEqual(new Map([['var a = new Array<A>()', 'TVar(a,null,TNew([],ParametricType(Array,[Type(A)]),[],[],[],[]),false,false)'], ['a = Array<A>.staticField()', 'TBinop(TIdent(a),=,TCall(TDot(NodeTypeValue(ParametricType(Array,[Type(A)])),staticField),[]))'], ['a = EnumTest.EnumField', 'TBinop(TIdent(a),=,TDotUpper(NodeTypeValue(Type(EnumTest)),EnumField))'], ['a = EnumTest.EnumField(arg)', 'TBinop(TIdent(a),=,TCall(TDotUpper(NodeTypeValue(Type(EnumTest)),EnumField),[TIdent(arg)]))'], ['a = EnumTest.EnumField(argName: argValue, arg2, arg3: arg3)', 'TBinop(TIdent(a),=,TCall(TDotUpper(NodeTypeValue(Type(EnumTest)),EnumField),[argName:TIdent(argValue),TIdent(arg2),arg3:TIdent(arg3)]))'], ['a = EnumTest<A,B>.EnumField', 'TBinop(TIdent(a),=,TDotUpper(NodeTypeValue(ParametricType(EnumTest,[Type(A),Type(B)])),EnumField))'], ['var a = b as B, c = d as! B, e = f as? B', 'TVars([TVar(a,null,TAs(TIdent(b),<!--default-->,Type(B)),false,false),TVar(c,null,TAs(TIdent(d),!,Type(B)),false,false),TVar(e,null,TAs(TIdent(f),?,Type(B)),false,false)])'], ['var a = b is B, c = d is B, e = f is B', 'TVars([TVar(a,null,TAs(TIdent(b),Type(B)),false,false),TVar(c,null,TAs(TIdent(d),Type(B)),false,false),TVar(e,null,TAs(TIdent(f),Type(B)),false,false)])']]));
            TestParser.shouldAllEqual(new Map([['var x:[Array<T>]', 'TVar(x,ParametricType(Array,[ParametricType(Array,[Type(T)])]),null,false,false)'], ['var x:[Map<K,V> : Array<T>]', 'TVar(x,ParametricType(Map,[ParametricType(Map,[Type(K),Type(V)]),ParametricType(Array,[Type(T)])]),null,false,false)'], ['var x:{:}, y:[], z:[:], w:()=>{:}', 'TVars([TVar(x,Object([],[]),null,false,false),TVar(y,ParametricType(Array,[Object([],[])]),null,false,false),TVar(z,ParametricType(Map,[Object([],[]),Object([],[])]),null,false,false),TVar(w,Function([],Object([],[])),null,false,false)])'], ['let x:()=>()=>()=>()=>Void', 'TVar(x,Function([],Function([],Function([],Function([],Type(Void))))),null,true,false)']]));
            TestParser.shouldAllEqual(new Map([['enum A {}', 'TEnum(Type(A),[])'], ['enum A { A B C }', 'TEnum(Type(A),[NodeTypeValue(Type(A)),NodeTypeValue(Type(B)),NodeTypeValue(Type(C))])'], ['enum A { A(v:Int) B C(v:[K:V], a:Array<T>) }', 'TEnum(Type(A),[\n                   TCall(NodeTypeValue(Type(A)),[v:NodeTypeValue(Type(Int))]),\n                   NodeTypeValue(Type(B)),\n                   TCall(NodeTypeValue(Type(C)),[v:TMap([NodeTypeValue(Type(K))],[NodeTypeValue(Type(V))]),a:NodeTypeValue(ParametricType(Array,[Type(T)]))])\n                    ])'], ['enum A { E(v: T<T>?) }', 'TEnum(Type(A),[TCall(NodeTypeValue(Type(E)),[v:NodeTypeValue(Optional(ParametricType(T,[Type(T)])))])])'], ['enum A { E(v: T<T?>) }', 'TEnum(Type(A),[TCall(NodeTypeValue(Type(E)),[v:NodeTypeValue(ParametricType(T,[Optional(Type(T))]))])])'], ['enum A { E(v: T?) }', 'TEnum(Type(A),[TCall(NodeTypeValue(Type(E)),[v:NodeTypeValue(Optional(Type(T)))])])']]));
            TestParser.shouldAllEqual(new Map([['new A(a: 1, b: 2)', 'TNew([],Type(A),[TInt(1),TInt(2)],[],[],[a,b])'], ['class A {} var a = new A { } ()', 'TBlock([TClass(Type(A),null,[],[],false),TVar(a,null,TNew([],Type(A),[],[],[],[]),false,false)])'], ['class A { var field: String } var a = new A { field: "Value" } ()', 'TBlock([TClass(Type(A),null,[],[TVar(field,Type(String),null,false,false)],false),TVar(a,null,TNew([],Type(A),[],[field],[TString(Value)],[]),false,false)])'], ['class A { var field: String var otherfield: Int } var a = new A { field: "Value", otherfield: 25 } ()', 'TBlock([TClass(Type(A),null,[],[TVar(field,Type(String),null,false,false),TVar(otherfield,Type(Int),null,false,false)],false),TVar(a,null,TNew([],Type(A),[],[field,otherfield],[TString(Value),TInt(25)],[]),false,false)])']]));
            TestParser.shouldAllError(['class A { new(a b) {} }', 'class A { new(a, b,) {} }', 'class A { new(,) {} }', 'function f(a b c) {}', 'function f(a b) {}', 'function f(a, b,) {}', 'function f(a,) {}', 'function f(,) {}']);
            TestParser.shouldAllError(['class A { var i: Int { set (value) {} } }', 'class A { var i: Int { get {} set () {} } }', 'class A { var i: Int { get {} set {} } }', 'class A { let i: Int { get {} set (value) {} } }', 'class A { let i: Int { get {} set (value, val) {} } }', 'class A { var i: Int { get {} set (Value) {} } }', 'class A { var i: Int { get (value) {} set (value) {} } }', 'class A { var i: Int {} }']);
            TestParser.shouldAllError(['if(,) {}', 'if(a,) {}', 'switch (,) {}', 'switch (a,) {}', '@att(,) x', '@att(a,) x', '@att(a,b,) x', '@att(a b,) x', '@att(a b) x', 'new T(,)', 'new T(a b,)', 'new T(a,b,)', 'new T(a b)', 'call(1 2)', 'call(1 2,)', 'call(1,2,)', 'call(1,)', 'call(a:1,)', 'call(1:1,)', 'call(a:,)', 'call(a:)', 'call(,)', '[1 2]', '[,]', '[1,]', '[1,2,]', '[1:1 2:2]', '[1:1,2:2,]', '{a:1 b:2}', '{,}', '{a:1,}', '{a:1,b:2,}']);
            TestParser.shouldAllError(['=', '= 1']);
            TestParser.shouldAllEqual(new Map([['if (this) this', 'TIf([TThis],TThis,<!--null-->)'], ['if (this, this) this else break', 'TIf([TThis,TThis],TThis,TBreak)'], ['if (this, let a = this) this else break', 'TIf([TThis,TVar(a,null,TThis,true,false)],TThis,TBreak)'], ['if (let a = this, let b = this, this) this', 'TIf([TVar(a,null,TThis,true,false),TVar(b,null,TThis,true,false),TThis],TThis,<!--null-->)']]));
            TestParser.shouldAllEqual(new Map([['declare var a: T', 'TVar(a,Type(T),null,false,true)'], ['declare let a: T', 'TVar(a,Type(T),null,true,true)'], ['declare function name()', 'TFunction(name,null,[],null,true)'], ['declare function name() hi()', 'TBlock([TFunction(name,null,[],null,true),TCall(TIdent(hi),[])])'], ['declare function name() {}', 'TBlock([TFunction(name,null,[],null,true),TBlock([])])'], ['declare class A {}', 'TClass(Type(A),null,[],[],true)'], ['declare A = B', 'TTypeAlias(Type(A),Type(B))']]));
            TestParser.shouldAllError(['declare var a, b, c', 'declare anything']);
            TestParser.shouldAllEqual(new Map([['push([:])', 'TCall(TIdent(push),[TMap([],[])])'], ['push([])', 'TCall(TIdent(push),[TArray([])])'], ['[].length', 'TDot(TArray([]),length)'], ['[:].length', 'TDot(TMap([],[]),length)'], ['[[:]]', 'TArray([TMap([],[])])']]));
            console.log(('TestParser done ' + (Math.round((TestParser.passed / TestParser.overall) * 100)) + '% (' + (TestParser.passed) + '/' + (TestParser.overall) + ')'));
        } };
    TestParser.shouldEqual = (input_1485, test) => { {
            const test_1486 = TestParser.deepTrim(test);
            TestParser.shouldEqualWithoutTrim(input_1485, test_1486);
        } };
    TestParser.shouldEqualWithoutTrim = (input_1487, test_1488) => { {
            TestParser.overall++;
            let lexe_1489 = Lexer.tokenize(Buffer.from(input_1487), 'TEST');
            let parsed_1490 = Parser.toNode(Parser.parseNodes(lexe_1489));
            let res_1491 = TestParser.stringify(parsed_1490);
            if (test_1488 != res_1491) { throw ('TestParser test fail: `' + (input_1487) + '`\n!==: `' + (test_1488) + '`\nGot: `' + (res_1491) + '`\nParsed: `' + (parsed_1490) + '`') };
            TestParser.passed++;
        } };
    TestParser.shouldAllEqual = (map_1492) => { for (const input of $toIterator(map_1492.keys())) {
            let test_1493 = map_1492.get(input);
            TestParser.shouldEqual(input, test_1493);
        } };
    TestParser.shouldAllEqualWithoutTrim = (map_1494) => { for (const input of $toIterator(map_1494.keys())) {
            let test_1495 = map_1494.get(input);
            TestParser.shouldEqualWithoutTrim(input, test_1495);
        } };
    TestParser.shouldError = (input_1496) => { {
            TestParser.overall++;
            try {
                {
                    let lexe_1497 = Lexer.tokenize(Buffer.from(input_1496), 'TEST');
                    let parser_1498 = Parser.toNode(Parser.parseNodes(lexe_1497));
                }
            } catch (e) {
                {
                    TestParser.passed++;
                    return;
                }
            };
            throw ('TestParser test fail: `' + (input_1496) + '` did not throw exception.');
        } };
    TestParser.shouldAllError = (input_1499) => { for (const str of $toIterator(input_1499)) {
            TestParser.shouldError(str);
        } };
    TestParser.deepTrim = (s_1500) => { return s_1500.split('\n').join('').split('\r').join('').split('\t').join('').split(' ').join('') };
    TestParser.stringify = (node_1501) => { {
            const temp_1502 = node_1501;
            switch (temp_1502 && temp_1502[1]) {
            case null: case undefined: {
                return '<!--null-->'
            } break;

            case 0: {
                {
                    const s_1503 = temp_1502[2];
                    return ('TString(' + (s_1503) + ')');
                }
            } break;

            case 1: {
                {
                    const s_1504 = temp_1502[2];
                    return ('TIdent(' + (s_1504) + ')');
                }
            } break;

            case 2: {
                {
                    const b_1505 = temp_1502[2];
                    return ('TBool(' + (b_1505) + ')');
                }
            } break;

            case 3: {
                return 'TThis'
            } break;

            case 4: {
                return 'TSuper'
            } break;

            case 5: {
                {
                    const s_1506 = temp_1502[2];
                    return ('TInt(' + (s_1506) + ')');
                }
            } break;

            case 6: {
                {
                    const s_1507 = temp_1502[2];
                    return ('TFloat(' + (s_1507) + ')');
                }
            } break;

            case 7: {
                return 'TNull'
            } break;

            case 17: {
                return 'TBreak'
            } break;

            case 18: {
                return 'TContinue'
            } break;

            case 40: {
                {
                    const expr_1508 = temp_1502[2];
                    const type_1509 = temp_1502[3];
                    return 'TAs(' + TestParser.stringify(expr_1508) + ',' + TestParser.stringifyType(type_1509) + ')';
                }
            } break;

            case 41: {
                {
                    const expr_1510 = temp_1502[2];
                    const kind_1511 = temp_1502[3];
                    const type_1512 = temp_1502[4];
                    return 'TAs(' + TestParser.stringify(expr_1510) + ',' + Token.stringify(kind_1511) + ',' + TestParser.stringifyType(type_1512) + ')';
                }
            } break;

            case 9: {
                {
                    const a_1513 = temp_1502[2];
                    const op_1514 = temp_1502[3];
                    const b_1515 = temp_1502[4];
                    return 'TBinop(' + TestParser.stringify(a_1513) + ',' + Token.stringify(op_1514) + ',' + TestParser.stringify(b_1515) + ')';
                }
            } break;

            case 10: {
                {
                    const a_1516 = temp_1502[2];
                    const op_1517 = temp_1502[3];
                    const b_1518 = temp_1502[4];
                    return 'TAssignop(' + TestParser.stringify(a_1516) + ',' + Token.stringify(op_1517) + ',' + TestParser.stringify(b_1518) + ')';
                }
            } break;

            case 11: {
                {
                    const els_1519 = temp_1502[2];
                    return 'TBlock(' + TestParser.stringifyNodeArray(els_1519) + ')';
                }
            } break;

            case 23: {
                {
                    const name_1520 = temp_1502[2];
                    const t_1521 = temp_1502[3];
                    const expr_1522 = temp_1502[4];
                    const const_1523 = temp_1502[5];
                    const external_1524 = temp_1502[6];
                    return ('TVar(' + (name_1520) + ',') + (((t_1521 != null))? (TestParser.stringifyType(t_1521)) : 'null') + ',' + (((expr_1522 != null))? (TestParser.stringify(expr_1522)) : 'null') + (',' + (const_1523) + ',' + (external_1524) + ')');
                }
            } break;

            case 24: {
                {
                    const vars_1525 = temp_1502[2];
                    return 'TVars(' + TestParser.stringifyNodeArray(vars_1525) + ')';
                }
            } break;

            case 21: {
                {
                    const name_1526 = temp_1502[2];
                    const expr_1527 = temp_1502[3];
                    const vars_1528 = temp_1502[4];
                    const rettype_1529 = temp_1502[5];
                    const external_1530 = temp_1502[6];
                    return ('TFunction(' + (name_1526) + ',') + (expr_1527 == (null)? ('null') : TestParser.stringify(expr_1527)) + ',' + TestParser.stringifyNodeArray(vars_1528) + ',' + (((rettype_1529 != null))? (TestParser.stringifyType(rettype_1529)) : 'null') + (',' + (external_1530) + ')');
                }
            } break;

            case 22: {
                {
                    const expr_1531 = temp_1502[2];
                    const vars_1532 = temp_1502[3];
                    const rettype_1533 = temp_1502[4];
                    return 'TArrow(' + (expr_1531 == (null)? ('null') : TestParser.stringify(expr_1531)) + ',' + TestParser.stringifyNodeArray(vars_1532) + ',' + (((rettype_1533 != null))? (TestParser.stringifyType(rettype_1533)) : 'null') + ')';
                }
            } break;

            case 12: {
                {
                    const e_1534 = temp_1502[2];
                    const el_1535 = temp_1502[3];
                    const argNames_1536 = temp_1502[4];
                    {
                        let res_1537 = 'TCall(' + TestParser.stringify(e_1534) + ',[';
                        {
                            let i_1538 = 0;
                            let it_1539 = 0;
                            let at_1540 = el_1535.length;
                            while (it_1539 < at_1540) {
                                i_1538 = it_1539;
                                it_1539++;
                                {
                                    res_1537 += argNames_1536[i_1538] == (null)? ('') : argNames_1536[i_1538] + ':';
                                    res_1537 += TestParser.stringify(el_1535[i_1538]) + (((i_1538 != el_1535.length - 1))? (',') : '');
                                };
                            };
                        };
                        return res_1537 + '])';
                    };
                }
            } break;

            case 14: {
                {
                    const e_1541 = temp_1502[2];
                    return 'TParenthesis(' + TestParser.stringify(e_1541) + ')';
                }
            } break;

            case 15: {
                {
                    const e_1542 = temp_1502[2];
                    return 'TReturn(' + TestParser.stringify(e_1542) + ')';
                }
            } break;

            case 16: {
                {
                    const e_1543 = temp_1502[2];
                    return 'TThrow(' + TestParser.stringify(e_1543) + ')';
                }
            } break;

            case 37: {
                {
                    const t_1544 = temp_1502[2];
                    const els_1545 = temp_1502[3];
                    return 'TEnum(' + TestParser.stringifyType(t_1544) + ',' + TestParser.stringifyNodeArray(els_1545) + ')';
                }
            } break;

            case 39: {
                {
                    const a_1546 = temp_1502[2];
                    return 'TUsing(' + a_1546.join(',') + ')';
                }
            } break;

            case 35: {
                {
                    const paths = temp_1502[2];
                    const els_1547 = temp_1502[3];
                    return 'TModule(' + paths.join('.') + ',' + TestParser.stringifyNodeArray(els_1547) + ')';
                }
            } break;

            case 32: {
                {
                    const k_1548 = temp_1502[2];
                    const v_1549 = temp_1502[3];
                    return 'TMap([' + (() => {
                        const result_1550 = [];
                        const value_1551 = k_1548;
                        for (const p of $toIterator(value_1551)) result_1550.push(TestParser.stringify(p));
                        return result_1550;
                    })().join(',') + '],[' + (() => {
                        const result_1552 = [];
                        const value_1553 = v_1549;
                        for (const p of $toIterator(value_1553)) result_1552.push(TestParser.stringify(p));
                        return result_1552;
                    })().join(',') + '])';
                }
            } break;

            case 25: {
                {
                    const type_1554 = temp_1502[2];
                    const extend_1555 = temp_1502[3];
                    const implement_1556 = temp_1502[4];
                    const fields_1557 = temp_1502[5];
                    const external_1558 = temp_1502[6];
                    {
                        let res_1559 = 'TClass(' + TestParser.stringifyType(type_1554) + ',';
                        res_1559 += extend_1555 != (null)? (TestParser.stringifyType(extend_1555)) : 'null,';
                        res_1559 += TestParser.stringifyNodeTypeArray(implement_1556) + ',';
                        res_1559 += TestParser.stringifyNodeArray(fields_1557) + ',';
                        res_1559 += external_1558 + ')';
                        return res_1559;
                    };
                }
            } break;

            case 30: {
                {
                    const path_1560 = temp_1502[2];
                    const t_1561 = temp_1502[3];
                    const args_1562 = temp_1502[4];
                    const names_1563 = temp_1502[5];
                    const values_1564 = temp_1502[6];
                    const argNames_1565 = temp_1502[7];
                    return 'TNew([' + path_1560.join('.') + '],' + TestParser.stringifyType(t_1561) + ',' + TestParser.stringifyNodeArray(args_1562) + ',[' + names_1563.join(',') + '],' + TestParser.stringifyNodeArray(values_1564) + ',[' + argNames_1565.join(',') + '])';
                }
            } break;

            case 48: {
                {
                    const type_1566 = temp_1502[2];
                    return 'NodeTypeValue(' + TestParser.stringifyType(type_1566) + ')';
                }
            } break;

            case 8: {
                {
                    const alias_1567 = temp_1502[2];
                    const value_1568 = temp_1502[3];
                    return 'TTypeAlias(' + TestParser.stringifyType(alias_1567) + ',' + TestParser.stringifyType(value_1568) + ')';
                }
            } break;

            case 28: {
                {
                    const l = temp_1502[2];
                    const r = temp_1502[3];
                    return 'TDot(' + TestParser.stringify(l) + ',' + r + ')';
                }
            } break;

            case 29: {
                {
                    const l_1569 = temp_1502[2];
                    const r_1570 = temp_1502[3];
                    return 'TDotUpper(' + TestParser.stringify(l_1569) + ',' + r_1570 + ')';
                }
            } break;

            case 44: {
                {
                    const expr_1571 = temp_1502[2];
                    return 'TPrivate(' + TestParser.stringify(expr_1571) + ')';
                }
            } break;

            case 13: {
                {
                    const econd_1572 = temp_1502[2];
                    const eif_1573 = temp_1502[3];
                    const eelse_1574 = temp_1502[4];
                    return 'TIf(' + TestParser.stringifyNodeArray(econd_1572) + ',' + TestParser.stringify(eif_1573) + ',' + TestParser.stringify(eelse_1574) + ')';
                }
            } break;

            case 31: {
                {
                    const el_1575 = temp_1502[2];
                    return 'TArray(' + TestParser.stringifyNodeArray(el_1575) + ')';
                }
            } break;

            default:
            throw '<!--' + node_1501 + '-->'
            };
        } };
    TestParser.stringifyNodeArray = (arr) => { return '[' + (() => {
            const result_1576 = [];
            const value_1577 = arr;
            for (const e of $toIterator(value_1577)) result_1576.push(TestParser.stringify(e));
            return result_1576;
        })().join(',') + ']' };
    TestParser.stringifyNodeTypeArray = (arr_1578) => { return '[' + (() => {
            const result_1579 = [];
            const value_1580 = arr_1578;
            for (const e of $toIterator(value_1580)) result_1579.push(TestParser.stringifyType(e));
            return result_1579;
        })().join(',') + ']' };
    TestParser.stringifyType = (node_1581) => { {
            const temp_1582 = node_1581;
            switch (temp_1582 && temp_1582[1]) {
            case 1: {
                {
                    const s_1583 = temp_1582[2];
                    return ('Type(' + (s_1583) + ')');
                }
            } break;

            case 2: {
                {
                    const name_1584 = temp_1582[2];
                    const params_1585 = temp_1582[3];
                    return ('ParametricType(' + (name_1584) + ',[') + (() => {
                        const result_1586 = [];
                        const value_1587 = params_1585;
                        for (const p of $toIterator(value_1587)) result_1586.push(TestParser.stringifyType(p));
                        return result_1586;
                    })().join(',') + '])';
                }
            } break;

            case 3: {
                {
                    const args_1588 = temp_1582[2];
                    const rettype_1589 = temp_1582[3];
                    return 'Function([' + (() => {
                        const result_1590 = [];
                        const value_1591 = args_1588;
                        for (const e of $toIterator(value_1591)) result_1590.push(TestParser.stringifyType(e));
                        return result_1590;
                    })().join(',') + '],' + TestParser.stringifyType(rettype_1589) + ')';
                }
            } break;

            case 5: {
                {
                    const names_1592 = temp_1582[2];
                    const types_1593 = temp_1582[3];
                    return 'Object([' + names_1592.join(',') + '],[' + (() => {
                        const result_1594 = [];
                        const value_1595 = types_1593;
                        for (const e of $toIterator(value_1595)) result_1594.push(TestParser.stringifyType(e));
                        return result_1594;
                    })().join(',') + '])';
                }
            } break;

            case 0: {
                {
                    const type_1596 = temp_1582[2];
                    return 'Optional(' + TestParser.stringifyType(type_1596) + ')';
                }
            } break;

            default:
            throw '<!--' + node_1581 + '-->'
            };
        } };
    var TestTyper = class {
    }
    TestTyper.passed = 0
    TestTyper.overall = 0
    TestTyper.library = Fs.readFileSync(__dirname + '/library/js/js.hexa')
    TestTyper.test = () => { {
            console.log('TestTyper begin');
            TestTyper.shouldNotError('let a = 1');
            TestTyper.shouldError('let a');
            TestTyper.shouldError('let a = 1 a = 2');
            TestTyper.shouldNotError('var a = 1 var b = 1');
            TestTyper.shouldNotError('var a = 1 var b = a');
            TestTyper.shouldNotError('var a = 1 let b = a');
            TestTyper.shouldError('var a = var b = 1');
            TestTyper.shouldError('var a = var b');
            TestTyper.shouldError('var a = { var b }');
            TestTyper.shouldError('var a = { 1 2 3 var b }');
            TestTyper.shouldNotError('var a = { 1 2 var b 3 }');
            TestTyper.shouldError('var a = { }');
            TestTyper.shouldError('let a = var b');
            TestTyper.shouldNotError('var a = 1 a = 2');
            TestTyper.shouldNotError('let a = { 2 }');
            TestTyper.shouldNotError('let a = { 1 2 3 2 }');
            TestTyper.shouldError('let a = return 2');
            TestTyper.shouldError('let a = { return 2 }');
            TestTyper.shouldError('let a = { break }');
            TestTyper.shouldError('let a = break');
            TestTyper.shouldError('var a = 1, b = return 2');
            TestTyper.shouldError('!1');
            TestTyper.shouldNotError('!true');
            TestTyper.shouldNotError('!!!true');
            TestTyper.shouldNotError('let a = true !a');
            TestTyper.shouldNotError('let a: Any = true !a');
            TestTyper.shouldNotError('"s" + 1');
            TestTyper.shouldError('("s" + 1).x');
            TestTyper.shouldNotError('module{}("s" + 1)');
            TestTyper.shouldNotError('module{}("s" + 1).length');
            TestTyper.shouldNotError('{("s" + 1).length}');
            TestTyper.shouldNotError('("s" + 1).length');
            TestTyper.shouldNotError('[("s" + 1).length]');
            TestTyper.shouldError('enum E { A B A }');
            TestTyper.shouldError('enum E { A(value: Int) B A(value: Int) }');
            TestTyper.shouldError('enum E { B(value: Int) A = 1 }');
            TestTyper.shouldError('enum E { lowercase }');
            TestTyper.shouldNotError('class A { static function x() {} } A.x()');
            TestTyper.shouldError('class A { static function x() {} static function x() {} }');
            TestTyper.shouldError('class A { static function x() {} static var x = 1 }');
            TestTyper.shouldError('class A { static function x() {} var x = 1 }');
            TestTyper.shouldError('class A { static let x = 1 static var x = 1 }');
            TestTyper.shouldError('class A { static let x = 1 function x() {} }');
            TestTyper.shouldNotError('module { class A { static function x() {} } } A.x()');
            TestTyper.shouldError('class A { static function x() {} } B.y()');
            TestTyper.shouldError('class A { static function x() {} } A.y()');
            TestTyper.shouldError('module { class A { static function x() {} } } A.y()');
            TestTyper.shouldNotError('enum E : Int { static function x() {} } E.x()');
            TestTyper.shouldError('enum E : Int { static function x() {} } E.y()');
            TestTyper.shouldNotError('enum E { A } let a = E.A');
            TestTyper.shouldError('enum E { A } let a = E.B');
            TestTyper.shouldNotError('class A { static var x = 0 } A.x = 1');
            TestTyper.shouldError('class A { static var x = 0 } A.y = 1');
            TestTyper.shouldNotError('var x = 1 x = 2');
            TestTyper.shouldNotError('var x: Bool = true');
            TestTyper.shouldError('var x: Bool = 1');
            TestTyper.shouldNotError('var x: Bool? = null');
            TestTyper.shouldNotError('var x: Int = 1 x = 1');
            TestTyper.shouldError('var x: Int = 1 x = true');
            TestTyper.shouldError('var x = 1 x = true');
            TestTyper.shouldError('var x = (1) x = (true)');
            TestTyper.shouldNotError('var x = 1 var y = 2 x = y');
            TestTyper.shouldError('var x: Int = 1 var y: Bool = true x = y');
            TestTyper.shouldError('var x = 1 var y = true x = y');
            TestTyper.shouldNotError('var x = null x = null');
            TestTyper.shouldNotError('var x = null x = true');
            TestTyper.shouldError('var x = 1 var y = x y = true');
            TestTyper.shouldNotError('var x = null var y = true x = y');
            TestTyper.shouldNotError('function x() {} var y = x y = x');
            TestTyper.shouldNotError('function x() {} var y: ()=>Void = x y = x');
            TestTyper.shouldNotError('class A { new() {} } let a = new A()');
            TestTyper.shouldError('class A { } let a = new A()');
            TestTyper.shouldNotError('class A { new() {} var x = 0 } let a = new A() a.x = 1');
            TestTyper.shouldNotError('let a = { b: true } let c = a.b');
            TestTyper.shouldNotError('let a: { b: Bool } = { b: true } let c = a.b');
            TestTyper.shouldNotError('let a = { b: true } a.b = false');
            TestTyper.shouldNotError('let a: { b: Bool } = { b: true } let c: { b: Bool } = a');
            TestTyper.shouldNotError('let a = { b: true } let c: { b: Bool } = a');
            TestTyper.shouldError('let a = { b: true } let c = a.x');
            TestTyper.shouldError('let a = { b: true } let c: Int = a.b');
            TestTyper.shouldError('let a = { b: true } let c = a.b c = 123');
            TestTyper.shouldError('let a = {a: 1, b: 2, a: 3}');
            TestTyper.shouldNotError('var i: Float = 123');
            TestTyper.shouldError('var i: Int = 0.123');
            TestTyper.shouldNotError('if (true) {}');
            TestTyper.shouldNotError('if (true == false) {}');
            TestTyper.shouldNotError('if (1 == 2) {}');
            TestTyper.shouldNotError('if (1 != 2) {}');
            TestTyper.shouldNotError('if (1 >= 2) {}');
            TestTyper.shouldErrorTemplate('$d$ a = $a$', ['$b$', '{ $b$ }'], ['break', 'continue', 'return $c$'], ['1', 'abc'], ['let', '"var"']);
            TestTyper.shouldNotError('var x = function() {return 1} var x = 1');
            TestTyper.shouldError('let x = function() {return 1} x = 1');
            TestTyper.shouldError('function x() {return 1} x = 1');
            TestTyper.shouldError('function x() {return 1} x = function() {return 1}');
            TestTyper.shouldError('{ function x() {return 1} } x()');
            TestTyper.shouldError('{ function x() {return return 1} }');
            TestTyper.shouldError('{ function x(y: Int) { y = 1 } }');
            TestTyper.shouldError('return 1');
            TestTyper.shouldError('{ return }');
            TestTyper.shouldNotError('{ () => { return 1 } }');
            TestTyper.shouldNotError('var x = function () {} x = function () {}');
            TestTyper.shouldError('let x = function () {} x = function () {} ');
            TestTyper.shouldError('var a: Int? = null if (var b = a) {}');
            TestTyper.shouldNotError('var a: Int? = null if (let b = a) {} a = 5');
            TestTyper.shouldNotError('var a: Int? = null if (let a = a) {} a = 5');
            TestTyper.shouldNotError('var a: Int? = null if (let a = a, let b = a, let a = b) {} a = 5');
            TestTyper.shouldError('function x(y: Int): Void {} var z: Int = x(1)');
            TestTyper.shouldError('function x(y: Int) {} var z: Int = x(1)');
            TestTyper.shouldError('function x(y: Int) {} x(x(1))');
            TestTyper.shouldNotError('function x(y: Int) return 1 var z: Int = x(1)');
            TestTyper.shouldNotError('function x(y: Int): Int return 1 var z: Int = x(1)');
            TestTyper.shouldError('function x(): Int { return }');
            TestTyper.shouldError('function x() { {return} {return 1} }');
            TestTyper.shouldError('function x(y: Int): Bool return 1 var z: Int = x(1)');
            TestTyper.shouldError('function x(y: Int) return 1 var z: Bool = x(1)');
            TestTyper.shouldNotError('function x(y: Int): Void {} x(1)');
            TestTyper.shouldNotError('function x(y: Int, z: Int): Void {} x(1, 1)');
            TestTyper.shouldError('function x(y: Int, z: Int): Void {} x(1, true)');
            TestTyper.shouldError('function x(y: Int): Void {} x(true)');
            TestTyper.shouldError('function x(y: Void): Void {}');
            TestTyper.shouldError('function x(y: Int) { { return 1 } return true }');
            TestTyper.shouldNotError('function x(y: Int) { { return 1 } return 1 }');
            TestTyper.shouldNotError('enum E { V } function x() { return E.V }');
            TestTyper.shouldError('function x() { return Int }');
            TestTyper.shouldNotError('function x(y: Int, z: Int): Void {} x(1, 1, 1)');
            TestTyper.shouldNotError('function x(y: Int, z: Int): Void {} x(1)');
            TestTyper.shouldNotError('let a = [2, 4, 1, 2, 5]');
            TestTyper.shouldNotError('let a = [null, 2, 4, 1, 2]');
            TestTyper.shouldNotError('var a = [2, 4, 1, 2, 5] a = [2, 3, 4]');
            TestTyper.shouldError('let a = [2, 4, 1, 2, 5] a = [2, 3, 4]');
            TestTyper.shouldNotError('var a = 4, b = 2, c = 4 let arr = [a, b, c]');
            TestTyper.shouldError('var a = for (b in [1, 2, 3, 4]) b');
            TestTyper.shouldError('var a = (for (b in [1, 2, 3, 4]) b)');
            TestTyper.shouldNotError('var a = [for (b in [1, 2, 3, 4]) b]');
            TestTyper.shouldError('var a = [for (b in [1, 2, 3, 4]) a]');
            TestTyper.shouldNotError('var a = [ 1: "a", 2: "b", 3: "c" ]');
            TestTyper.shouldNotError('var a = [ "a": 1, "b": 2, "c": 3 ]');
            TestTyper.shouldNotError('var a = [ "a": 1, "b": 2, "c": 3 ] a = ["l": 11]');
            TestTyper.shouldNotError('var a = { a: "a" } a.a = "b"');
            TestTyper.shouldNotError('var a = [{ a: 1 }] a[0].a');
            TestTyper.shouldError('var a = [{ a: 1 }] a[0].b');
            TestTyper.shouldError('var a = [{ b: [{c : [1]}] }] a[0].b[0].d');
            TestTyper.shouldNotError('var a = [{ b: [{c : [1]}] }] a[0].b[0].c[0]');
            TestTyper.shouldError('var a = try { throw 1 } catch(e: Any) { throw 2 }');
            TestTyper.shouldError('var a = { try { throw 1 } catch(e: Any) { throw 2 } }');
            TestTyper.shouldNotError('var a = try { 1 } catch(e: Any) { 2 }');
            TestTyper.shouldNotError('try { var a = try { 1 } catch(e: Any) { throw 2 } } catch(e: Any) {}');
            TestTyper.shouldNotError('var a = try { throw 1 } catch(e: Any) { 2 }');
            TestTyper.shouldNotError('var a = { try { throw 1 } catch(e: Any) { 2 } }');
            TestTyper.shouldError('try { 1 } catch(e: Any) { throw 2 }');
            TestTyper.shouldNotError('try { throw 1 } catch(e: Any) { 2 }');
            TestTyper.shouldError('var a = throw 1');
            TestTyper.shouldError('var a = { throw 1 }');
            TestTyper.shouldError('{ throw 1 }');
            TestTyper.shouldError('throw 1');
            TestTyper.shouldNotError('function f() throw 123');
            TestTyper.shouldError('@noThrow(0) function f() {}');
            TestTyper.shouldNotError('@noThrow function f() {}');
            TestTyper.shouldError('@noThrow function f() throw 123');
            TestTyper.shouldError('@noThrow @throws(Int) function f() throw 123');
            TestTyper.shouldError('@noThrow @throws function f() {}');
            TestTyper.shouldNotError('@throws function f() throw 123');
            TestTyper.shouldNotError('let f = @throws function() throw 123');
            TestTyper.shouldError('let f = @noThrow function() throw 123');
            TestTyper.shouldError('let f = @noThrow @throws function() throw 123');
            TestTyper.shouldNotError('@throws(Int) function f() throw 123');
            TestTyper.shouldNotError('@throws(Int) function f() {}');
            TestTyper.shouldNotError('function f() try { throw 123 } catch(e: Int) {}');
            TestTyper.shouldError('{ break }');
            TestTyper.shouldError('function hi() { continue }');
            TestTyper.shouldNotError('while (true) { break }');
            TestTyper.shouldNotError('while (true) { continue }');
            TestTyper.shouldError('while ({ break }) { }');
            TestTyper.shouldNotError('do { continue } while (true)');
            TestTyper.shouldError('do { } while ({ continue })');
            TestTyper.shouldNotError('for (a in []) { continue }');
            TestTyper.shouldError('for (continue in []) { }');
            TestTyper.shouldError('for (a in continue) { }');
            TestTyper.shouldNotError('class A {}');
            TestTyper.shouldError('module { class A {} class A {} }');
            TestTyper.shouldError('module { let x = 1 } x = 1');
            TestTyper.shouldNotError('module { var x = 1 } var x = 1');
            TestTyper.shouldNotError('module { var x = 1 } x = 1');
            TestTyper.shouldError('module { class A {} } module { class A {} }');
            TestTyper.shouldNotError('class A {new() {} let a: A = new A()}');
            TestTyper.shouldError('function f() {} f(var a)');
            TestTyper.shouldError('function f(x) {} f(var a)');
            TestTyper.shouldError('function f() {} f(let a = 1)');
            TestTyper.shouldError('module hi { function hi() }');
            TestTyper.shouldError('module hi { function () {} }');
            TestTyper.shouldError('function hi() { static var x = 1 }');
            TestTyper.shouldError('function hi() { private var x = 1 }');
            TestTyper.shouldError('class A {} A = null');
            TestTyper.shouldError('class A {} A = A');
            TestTyper.shouldError('class A {new(){}} A = new A()');
            TestTyper.shouldError('module { class A {} } A = null');
            TestTyper.shouldError('module { class A {new(){}} } A = new A()');
            TestTyper.shouldError('class A { static function hi() { this } }');
            TestTyper.shouldError('function hi() { this }');
            TestTyper.shouldError('{ this }');
            TestTyper.shouldNotError('class A { function hi() { this } }');
            TestTyper.shouldNotError('class A { new() { this } }');
            TestTyper.shouldNotError('class A { function hi() { return this } }');
            TestTyper.shouldNotError('class A {\n               var a: [Int]\n              var b: String\n             new(a, b) { this.a = a this.b = b }\n           }');
            TestTyper.shouldError('static function hi() { }');
            TestTyper.shouldError('private function hi() { }');
            TestTyper.shouldError('class A {new () {}} let a = new A() a.b');
            TestTyper.shouldNotError('class A {new () {}let b = 1} let a = new A() a.b');
            TestTyper.shouldError('class A {new () {}let b = 1} let a = new A() a.c');
            TestTyper.shouldError('class A {new () {}let b = 1} let a = new A() a.b[0]');
            TestTyper.shouldNotError('class A { var v: Int }');
            TestTyper.shouldNotError('class A { static var v: Int }');
            TestTyper.shouldNotError('enum A { static var v: Int }');
            TestTyper.shouldNotError('enum A { A(x: Int) } switch (A.A(0)) { case A.A(x): {} }');
            TestTyper.shouldError('enum A { A(x: Int) } switch (A.A(0)) { case A.A(x, y): {} }');
            TestTyper.shouldError('class A { function hi() { super() } }');
            TestTyper.shouldError('function hi() { super() }');
            TestTyper.shouldError('{ super }');
            TestTyper.shouldError('{ super() }');
            TestTyper.shouldError('{ super.hello() }');
            TestTyper.shouldError('\n               class B { function hi() { } }\n             class A extends B { static function hi() { super() } }');
            TestTyper.shouldError('\n               class B { function hi() { } }\n             class A extends B { function hi() { (super).hi() } }');
            TestTyper.shouldNotError('\n                class B { function hi() { } }\n             class A extends B { function hi() { super() } }');
            TestTyper.shouldNotError('\n                class B { function hi() { } }\n             class A extends B { function hi() { super.hi() } }');
            TestTyper.shouldError('var a: Unknown = 1');
            TestTyper.shouldError('function a(): Unknown {}');
            TestTyper.shouldError('class A extends Unknown {}');
            TestTyper.shouldError('class A implements Unknown {}');
            TestTyper.shouldNotError('let t = 1 t is Int');
            TestTyper.shouldError('let t = 1 t is Any');
            TestTyper.shouldError('let t = 1 t is Void');
            TestTyper.shouldError('let t = 1 t as Unknown');
            TestTyper.shouldNotError('let t = 1 t as Int');
            TestTyper.shouldError('let t = 1 t as Void');
            TestTyper.shouldNotError('function int(): Int return 1 int() as Int');
            TestTyper.shouldError('function void(): Void {} void() as Int');
            TestTyper.shouldError('declare var a');
            TestTyper.shouldError('declare var a = value');
            TestTyper.shouldError('declare var a: Int = value');
            TestTyper.shouldNotError('declare var a: Int');
            TestTyper.shouldError('declare function()');
            TestTyper.shouldNotError('declare function(): Int');
            TestTyper.shouldError('var a = declare function(): Int');
            TestTyper.shouldNotError('@att("value") 123');
            TestTyper.shouldNotError('let known = 1 @att(known) 123');
            console.log(('TestTyper done ' + (Math.round((TestTyper.passed / TestTyper.overall) * 100)) + '% (' + (TestTyper.passed) + '/' + (TestTyper.overall) + ')'));
        } };
    TestTyper.shouldNotError = (input_1597) => { {
            TestTyper.overall++;
            let errorText = TestTyper.didError(input_1597);
            if (errorText != null) { throw ('TestTyper test fail: `' + (input_1597) + '` should NOT throw error, but it did.\r\n') + errorText };
            TestTyper.passed++;
        } };
    TestTyper.shouldError = (input_1598) => { {
            TestTyper.overall++;
            if (TestTyper.didError(input_1598) == null) { throw ('TestTyper test fail: `' + (input_1598) + '` should throw error, but it did not.') };
            TestTyper.passed++;
        } };
    TestTyper.template = (code_1599, a_1600, b_1601 = null, c_1602 = null, d = null) => { {
            const tests = [];
            for (const ta of $toIterator(a_1600)) {
                const ca_1603 = code_1599.split('$a$').join(ta);
                {
                    let step_1604 = 0;
                    const bs = b_1601;
                    if (step_1604 == 0 && bs != null) { step_1604 = 1 };
                    if (step_1604 == 1) { for (const tb of $toIterator(bs)) {
                        const cb = ca_1603.split('$b$').join(tb);
                        {
                            let step_1605 = 0;
                            const cs = c_1602;
                            if (step_1605 == 0 && cs != null) { step_1605 = 1 };
                            if (step_1605 == 1) { for (const tc of $toIterator(cs)) {
                                const cc_1606 = cb.split('$c$').join(tc);
                                {
                                    let step_1607 = 0;
                                    const ds = d;
                                    if (step_1607 == 0 && ds != null) { step_1607 = 1 };
                                    if (step_1607 == 1) { for (const td of $toIterator(ds)) {
                                        const cd = cc_1606.split('$d$').join(td);
                                        if (tests.indexOf(cd) == -1) { tests.push(cd) };
                                    } } else if (tests.indexOf(cc_1606) == -1) { tests.push(cc_1606) };
                                };
                            } } else if (tests.indexOf(cb) == -1) { tests.push(cb) };
                        };
                    } } else if (tests.indexOf(ca_1603) == -1) { tests.push(ca_1603) };
                };
            };
            return tests;
        } };
    TestTyper.shouldErrorTemplate = (code_1608, a_1609, b_1610 = null, c_1611 = null, d_1612 = null) => { {
            const t_1613 = TestTyper.template(code_1608, a_1609, b_1610, c_1611, d_1612);
            for (const test of $toIterator(t_1613)) TestTyper.shouldError(test);
        } };
    TestTyper.shouldNotErrorTemplate = (code_1614, a_1615, b_1616 = null, c_1617 = null, d_1618 = null) => { {
            const t_1619 = TestTyper.template(code_1614, a_1615, b_1616, c_1617, d_1618);
            for (const test of $toIterator(t_1619)) TestTyper.shouldNotError(test);
        } };
    TestTyper.didError = (input_1620) => { {
            const input_1621 = TestTyper.library + input_1620;
            let lexe_1622 = Lexer.tokenize(Buffer.from(input_1621), 'TEST');
            try {
                {
                    (new Typer()).fillFiles([Parser.parseNodes(lexe_1622)]);
                }
            } catch (e) {
                {
                    return '' + e;
                }
            };
            return null;
        } };
    var GenJs = class {
        constructor() {
            this.extension = '.js'
            this.nativeEnums = false
            this.tabs = '\t\t'
            this.globalAccessor = ''
            this.reserved = ['with', 'const', 'instanceof', 'typeof', 'delete', 'undefined', 'package', 'async', 'await', 'arguments']
        {
        } };
        perform(normalizer) { {
            this.project = normalizer;
            return this.stringify();
        } };
        stringify() { {
            const out_1623 = [('// Generated by Hexa ' + (version) + ' https://hexalang.github.io\n')];
            if (this.project.package.addLicenseNoticeToOutput) {
                out_1623.push(('// ' + (this.project.package.name) + '\n'));
                out_1623.push(('// ' + (this.project.package.name) + ' ' + (this.project.package.version) + '\n'));
                out_1623.push(('// LICENSE ' + (this.project.package.license) + '\n'));
            } else {
                out_1623.push('// The generated code is subject to the original license\n');
            };
            out_1623.push(';(function() {\n\t"use strict"\n\tconst $global = typeof(window) === "undefined"?global:window');
            out_1623.push('\n\tfunction $toIterator(v) { if (typeof(v) === "number") { v = Math.max(v, 0); const i = new Uint32Array(v); let n = 0; while (n < v) i[n] = n++; return i; } return v; };');
            const constantsIndex = out_1623.length;
            const constants = [];
            out_1623.push('');
            for (const e of $toIterator(this.project.enumsSimple)) {
                out_1623.push('\n\t' + 'var ' + e.name + ' = {}');
                for (const v of $toIterator(e.staticVars)) {
                    const temp_1624 = v;
                    switch (temp_1624 && temp_1624[1]) {
                    case 5: {
                        {
                            const name_1625 = temp_1624[2];
                            const expr_1626 = temp_1624[3];
                            {
                                out_1623.push('\n\t' + e.name + '.' + name_1625);
                                if (expr_1626 != null) { out_1623.push(' = ' + this.printExpression(expr_1626)) };
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_1627 = temp_1624[2];
                            const expr_1628 = temp_1624[3];
                            {
                                out_1623.push('\n\t' + e.name + '.' + name_1627);
                                out_1623.push(' = ' + this.printExpression(expr_1628));
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(e.staticMethods)) {
                    const temp_1629 = v;
                    switch (temp_1629 && temp_1629[1]) {
                    case 7: {
                        {
                            const name_1630 = temp_1629[2];
                            const expr_1631 = temp_1629[3];
                            const args_1632 = temp_1629[4];
                            const defaults_1633 = temp_1629[5];
                            {
                                out_1623.push('\n\t' + e.name + '.' + name_1630 + ' = ');
                                out_1623.push(this.printFunctionArguments(args_1632, defaults_1633) + ' => { ' + this.printStatement(expr_1631) + ' };');
                            };
                        }
                    } break;
                    };
                };
            };
            for (const e of $toIterator(this.project.enumsComplex)) {
                out_1623.push('\n\t' + 'var ' + e.name + ' = {}');
                let i_1634 = 0;
                for (const name of $toIterator(e.names)) {
                    if (e.constructors[i_1634] != null) {
                        out_1623.push('\n\t' + e.name + '.' + name + ' = ');
                        out_1623.push('(' + e.constructors[i_1634].join(',') + ')=>["');
                        out_1623.push(name + '",' + i_1634 + ',' + e.constructors[i_1634].join(','));
                        out_1623.push('];');
                    } else {
                        out_1623.push('\n\tObject.defineProperty(' + e.name + ', "' + name + '", { get: function() { return ["' + name + '",' + i_1634 + '] }})');
                    };
                    i_1634++;
                };
                for (const v of $toIterator(e.staticVars)) {
                    const temp_1635 = v;
                    switch (temp_1635 && temp_1635[1]) {
                    case 5: {
                        {
                            const name_1636 = temp_1635[2];
                            const expr_1637 = temp_1635[3];
                            {
                                out_1623.push('\n\t' + e.name + '.' + name_1636);
                                if (expr_1637 != null) { out_1623.push(' = ' + this.printExpression(expr_1637)) };
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_1638 = temp_1635[2];
                            const expr_1639 = temp_1635[3];
                            {
                                out_1623.push('\n\t' + e.name + '.' + name_1638);
                                out_1623.push(' = ' + this.printExpression(expr_1639));
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(e.staticMethods)) {
                    const temp_1640 = v;
                    switch (temp_1640 && temp_1640[1]) {
                    case 7: {
                        {
                            const name_1641 = temp_1640[2];
                            const expr_1642 = temp_1640[3];
                            const args_1643 = temp_1640[4];
                            const defaults_1644 = temp_1640[5];
                            {
                                out_1623.push('\n\t' + e.name + '.' + name_1641 + ' = ');
                                out_1623.push(this.printFunctionArguments(args_1643, defaults_1644) + ' => { ' + this.printStatement(expr_1642) + ' };');
                            };
                        }
                    } break;
                    };
                };
            };
            for (const i of $toIterator(this.project.interfaces)) {
                throw i;
            };
            for (const c of $toIterator(this.project.classes)) {
                if (c.external) {
                    if (c.jsRequire != null) {
                        constants.push('\n\t' + 'const ' + c.name + ' = require("' + c.jsRequire + '")');
                        continue;
                    };
                    out_1623.push('\n\t' + 'var ' + c.name + ' = $global.' + (((c.jsNative) || (c.name))));
                    continue;
                };
                out_1623.push('\n\t' + 'var ' + c.name + ' = class {');
                for (const v of $toIterator(c.methods)) {
                    const temp_1645 = v;
                    switch (temp_1645 && temp_1645[1]) {
                    case 7: {
                        {
                            const name_1646 = temp_1645[2];
                            const expr_1647 = temp_1645[3];
                            const args_1648 = temp_1645[4];
                            {
                                if (name_1646 == null || name_1646 == 'new') { out_1623.push('\n\t\tconstructor') } else out_1623.push('\n\t\t' + name_1646);
                                out_1623.push('(' + args_1648.join(', ') + ') { ');
                                if (name_1646 == null || name_1646 == 'new') {
                                    for (const v of $toIterator(c.vars)) {
                                        const temp_1649 = v;
                                        switch (temp_1649 && temp_1649[1]) {
                                        case 5: {
                                            {
                                                const name_1650 = temp_1649[2];
                                                const expr_1651 = temp_1649[3];
                                                if (expr_1651 != null) { out_1623.push('\n\t\t\tthis.' + name_1650 + ' = ' + this.printExpression(expr_1651) + '') };
                                            }
                                        } break;

                                        case 6: {
                                            {
                                                const name_1652 = temp_1649[2];
                                                const expr_1653 = temp_1649[3];
                                                if (expr_1653 != null) { out_1623.push('\n\t\t\tthis.' + name_1652 + ' = ' + this.printExpression(expr_1653) + '') };
                                            }
                                        } break;
                                        };
                                    };
                                    out_1623.push('\n\t\t');
                                };
                                out_1623.push(this.printStatement(expr_1647) + ' };');
                            };
                        }
                    } break;
                    };
                };
                for (const name of $toIterator(c.property)) {
                    out_1623.push('\n\t\tget ' + name + ('() { return this.get_' + (name) + '(); };'));
                    out_1623.push('\n\t\tset ' + name + ('(value) { return this.set_' + (name) + '(value); };'));
                };
                out_1623.push('\n\t}');
                for (const v of $toIterator(c.staticVars)) {
                    const temp_1654 = v;
                    switch (temp_1654 && temp_1654[1]) {
                    case 5: {
                        {
                            const name_1655 = temp_1654[2];
                            const expr_1656 = temp_1654[3];
                            {
                                out_1623.push('\n\t' + c.name + '.' + name_1655);
                                if (expr_1656 != null) { out_1623.push(' = ' + this.printExpression(expr_1656)) };
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_1657 = temp_1654[2];
                            const expr_1658 = temp_1654[3];
                            {
                                out_1623.push('\n\t' + c.name + '.' + name_1657);
                                out_1623.push(' = ' + this.printExpression(expr_1658));
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.staticMethods)) {
                    const temp_1659 = v;
                    switch (temp_1659 && temp_1659[1]) {
                    case 7: {
                        {
                            const name_1660 = temp_1659[2];
                            const expr_1661 = temp_1659[3];
                            const args_1662 = temp_1659[4];
                            const defaults_1663 = temp_1659[5];
                            {
                                out_1623.push('\n\t' + c.name + '.' + name_1660 + ' = ');
                                out_1623.push(this.printFunctionArguments(args_1662, defaults_1663) + ' => { ' + this.printStatement(expr_1661) + ' };');
                            };
                        }
                    } break;
                    };
                };
            };
            for (const g of $toIterator(this.project.globalFuncs)) {
                const temp_1664 = g;
                switch (temp_1664 && temp_1664[1]) {
                case 7: {
                    {
                        const name_1665 = temp_1664[2];
                        const expr_1666 = temp_1664[3];
                        const args_1667 = temp_1664[4];
                        const defaults_1668 = temp_1664[5];
                        {
                            out_1623.push('\n\tfunction ' + name_1665);
                            out_1623.push(this.printFunctionArguments(args_1667, defaults_1668) + ' { ' + this.printStatement(expr_1666) + ' };');
                        };
                    }
                } break;
                };
            };
            for (const g of $toIterator(this.project.globalVars)) {
                const temp_1669 = g;
                switch (temp_1669 && temp_1669[1]) {
                case 5: {
                    {
                        const name_1670 = temp_1669[2];
                        const expr_1671 = temp_1669[3];
                        {
                            out_1623.push('\n\tvar ' + name_1670);
                            if (expr_1671 != null) { out_1623.push(' = ' + this.printExpression(expr_1671)) } else out_1623.push(' = null');
                        };
                    }
                } break;

                case 6: {
                    {
                        const name_1672 = temp_1669[2];
                        const expr_1673 = temp_1669[3];
                        out_1623.push('\n\tvar ' + name_1672 + ' = ' + this.printExpression(expr_1673));
                    }
                } break;
                };
            };
            for (const init of $toIterator(this.project.init)) {
                out_1623.push('\n\t{\n\t\t');
                out_1623.push(this.printStatement(init));
                out_1623.push('\n\t}');
            };
            out_1623[constantsIndex] = constants.join('');
            out_1623.push('\n})();');
            return out_1623.join('');
        } };
        pushTab() { this.tabs += '\t' };
        popTab() { this.tabs = this.tabs.substring(0, this.tabs.length - 1) };
        printBlock(s_1674) { {
            const temp_1675 = s_1674;
            switch (temp_1675 && temp_1675[1]) {
            case 1: {
                {
                    const el_1676 = temp_1675[2];
                    {
                        if (el_1676.length == 1) { return '{ ' + this.printStatement(el_1676[0]) + ' }' };
                        if (el_1676.length == 0) { return '{}' };
                        return this.printStatement(s_1674);
                    };
                }
            } break;

            default:
            return '{ ' + this.printStatement(s_1674) + ' }'
            };
        } };
        printStatement(s_1677) { {
            {
                const temp_1678 = s_1677;
                switch (temp_1678 && temp_1678[1]) {
                case 0: {
                    {
                        const els_1679 = temp_1678[2];
                        {
                            let r_1680 = '';
                            for (const s of $toIterator(els_1679)) if (s != null) { r_1680 += '\n' + this.tabs + this.printStatement(s) + ';' };
                            return r_1680;
                        };
                    }
                } break;

                case 21: {
                    return 'break'
                } break;

                case 20: {
                    return 'continue'
                } break;

                case 1: {
                    {
                        const el_1681 = temp_1678[2];
                        {
                            this.pushTab();
                            let r_1682 = '{';
                            for (const e of $toIterator(el_1681)) {
                                const temp_1683 = e;
                                switch (temp_1683 && temp_1683[1]) {
                                case null: case undefined: {
                                    {
                                    }
                                } break;

                                case 0: {
                                    {
                                        const els_1684 = temp_1683[2];
                                        for (const s of $toIterator(els_1684)) if (s != null) { r_1682 += '\n' + this.tabs + this.printStatement(s) + ';' };
                                    }
                                } break;

                                default:
                                r_1682 += '\n' + this.tabs + this.printStatement(e) + ';'
                                };
                            };
                            this.popTab();
                            return r_1682 + '\n' + this.tabs + '}';
                        };
                    }
                } break;

                case 3: {
                    {
                        const e_1685 = temp_1678[2];
                        const args_1686 = temp_1678[3];
                        return 'new ' + this.printExpression(e_1685) + this.printCallArguments(args_1686);
                    }
                } break;

                case 6: {
                    {
                        const name_1687 = temp_1678[2];
                        const expr_1688 = temp_1678[3];
                        return 'const ' + name_1687 + (expr_1688 == (null)? ('') : ' = ' + this.printExpression(expr_1688));
                    }
                } break;

                case 5: {
                    {
                        const name_1689 = temp_1678[2];
                        const expr_1690 = temp_1678[3];
                        return 'let ' + name_1689 + (expr_1690 == (null)? ('') : ' = ' + this.printExpression(expr_1690));
                    }
                } break;

                case 7: {
                    {
                        const name_1691 = temp_1678[2];
                        const expr_1692 = temp_1678[3];
                        const args_1693 = temp_1678[4];
                        const defaults_1694 = temp_1678[5];
                        return 'const ' + name_1691 + ' = ' + this.printFunctionArguments(args_1693, defaults_1694) + ' => ' + this.printBlock(expr_1692);
                    }
                } break;

                case 8: {
                    {
                        const e_1695 = temp_1678[2];
                        {
                            if (e_1695 == null) { return 'return' };
                            return 'return ' + this.printExpression(e_1695);
                        };
                    }
                } break;

                case 9: {
                    {
                        const econd_1696 = temp_1678[2];
                        const eif_1697 = temp_1678[3];
                        const eelse_1698 = temp_1678[4];
                        {
                            let r_1699 = 'if (' + this.printExpression(econd_1696) + ') ' + this.printBlock(eif_1697);
                            if (eelse_1698 != null) { r_1699 += ' else ' + this.printStatement(eelse_1698) };
                            return r_1699;
                        };
                    }
                } break;

                case 2: {
                    {
                        const e_1700 = temp_1678[2];
                        const args_1701 = temp_1678[3];
                        return this.printExpression(e_1700) + this.printCallArguments(args_1701);
                    }
                } break;

                case 10: {
                    {
                        const expr_1702 = temp_1678[2];
                        const t_1703 = temp_1678[3];
                        const v_1704 = temp_1678[4];
                        const catches_1705 = temp_1678[5];
                        {
                            this.pushTab();
                            let r_1706 = 'try {\n' + this.tabs;
                            r_1706 += this.printStatement(expr_1702);
                            this.popTab();
                            r_1706 += '\n' + this.tabs + '} catch (' + v_1704[0] + ') {\n' + this.tabs + '\t';
                            this.pushTab();
                            r_1706 += this.printStatement(catches_1705[0]);
                            this.popTab();
                            return r_1706 + '\n' + this.tabs + '}';
                        };
                    }
                } break;

                case 12: {
                    {
                        const a_1707 = temp_1678[2];
                        const v_1708 = temp_1678[3];
                        return this.printExpression(a_1707) + ' = ' + this.printExpression(v_1708);
                    }
                } break;

                case 11: {
                    {
                        const e_1709 = temp_1678[2];
                        return 'throw ' + this.printExpression(e_1709);
                    }
                } break;

                case 15: {
                    {
                        const name_1710 = temp_1678[2];
                        const over_1711 = temp_1678[3];
                        const by_1712 = temp_1678[4];
                        return 'for (const ' + name_1710 + ' of $toIterator(' + this.printExpression(over_1711) + ')) ' + this.printStatement(by_1712);
                    }
                } break;

                case 17: {
                    {
                        const e_1713 = temp_1678[2];
                        return this.printExpression(e_1713) + '++';
                    }
                } break;

                case 18: {
                    {
                        const e_1714 = temp_1678[2];
                        return this.printExpression(e_1714) + '--';
                    }
                } break;

                case 16: {
                    {
                        const econd_1715 = temp_1678[2];
                        const e_1716 = temp_1678[3];
                        const pre_1717 = temp_1678[4];
                        {
                            if (pre_1717) { return 'while (' + this.printExpression(econd_1715) + ') ' + this.printStatement(e_1716) };
                            return 'do {' + this.printStatement(e_1716) + '} while (' + this.printExpression(econd_1715) + ')';
                        };
                    }
                } break;

                case 13: {
                    {
                        const a_1718 = temp_1678[2];
                        const op_1719 = temp_1678[3];
                        const value_1720 = temp_1678[4];
                        return this.printExpression(a_1718) + ' ' + Token.stringify(op_1719) + '= ' + this.printExpression(value_1720);
                    }
                } break;

                case 14: {
                    {
                        const expr_1721 = temp_1678[2];
                        const name_1722 = temp_1678[3];
                        return this.printExpression(expr_1721) + '.' + name_1722;
                    }
                } break;

                case 19: {
                    {
                        const expr_1723 = temp_1678[2];
                        const cases_1724 = temp_1678[3];
                        const statements = temp_1678[4];
                        {
                            let r_1725 = 'switch (' + this.printExpression(expr_1723) + ') {';
                            {
                                let i_1726 = 0;
                                let it_1727 = 0;
                                let at_1728 = cases_1724.length;
                                while (it_1727 < at_1728) {
                                    i_1726 = it_1727;
                                    it_1727++;
                                    if (cases_1724[i_1726].length > 0) {
                                        r_1725 += '\n' + this.tabs;
                                        for (const cc of $toIterator(cases_1724[i_1726])) {
                                            const temp_1729 = cc;
                                            switch (temp_1729 && temp_1729[1]) {
                                            case 6: {
                                                r_1725 += 'case null: case undefined: '
                                            } break;

                                            default:
                                            r_1725 += 'case ' + this.printExpression(cc) + ': '
                                            };
                                        };
                                        this.pushTab();
                                        r_1725 += '{\n' + this.tabs;
                                        r_1725 += this.printStatement(statements[i_1726]);
                                        this.popTab();
                                        r_1725 += '\n' + this.tabs + '} break;\n' + this.tabs;
                                    };
                                };
                            };
                            {
                                let i_1730 = 0;
                                let it_1731 = 0;
                                let at_1732 = cases_1724.length;
                                while (it_1731 < at_1732) {
                                    i_1730 = it_1731;
                                    it_1731++;
                                    if (cases_1724[i_1730].length == 0) {
                                        r_1725 += '\n' + this.tabs + 'default: ';
                                        r_1725 += '\n' + this.tabs;
                                        r_1725 += this.printStatement(statements[i_1730]);
                                        r_1725 += '\n' + this.tabs;
                                    };
                                };
                            };
                            return r_1725 + '}';
                        };
                    }
                } break;

                case null: case undefined: {
                    console.error('Got null statement kind in JavaScript generator, probably unsupported feature was used, ignoring')
                } break;

                default:
                console.error('Unknown statement kind:', (((s_1677) || ([])))[0])
                };
            };
            return '{/* undefined */}';
        } };
        printCallArguments(args_1733) { return '(' + (() => {
            const result_1734 = [];
            const value_1735 = args_1733;
            for (const a of $toIterator(value_1735)) result_1734.push(this.printExpression(a));
            return result_1734;
        })().join(', ') + ')' };
        printFunctionArguments(args_1736, defaults_1737) { return '(' + (() => {
            const result_1738 = [];
            const value_1739 = args_1736.length;
            for (const a of $toIterator(value_1739)) result_1738.push(args_1736[a] + (((defaults_1737 != null && defaults_1737[a] != null))? (' = ' + this.printExpression(defaults_1737[a])) : ''));
            return result_1738;
        })().join(', ') + ')' };
        printExpression(e_1740) { {
            {
                const temp_1741 = e_1740;
                switch (temp_1741 && temp_1741[1]) {
                case 6: {
                    return 'null'
                } break;

                case 7: {
                    return 'this'
                } break;

                case 5: {
                    {
                        const name_1742 = temp_1741[2];
                        return name_1742;
                    }
                } break;

                case 1: {
                    {
                        const v_1743 = temp_1741[2];
                        return '' + v_1743;
                    }
                } break;

                case 2: {
                    {
                        const v_1744 = temp_1741[2];
                        return '' + v_1744;
                    }
                } break;

                case 0: {
                    {
                        const s_1745 = temp_1741[2];
                        {
                            const s_1746 = s_1745.split('');
                            const charsOut = [];
                            while (s_1746.length > 0) {
                                {
                                    const temp_1747 = s_1746[0];
                                    switch (temp_1747) {
                                    case '\'': {
                                        {
                                            charsOut.push('\\');
                                            charsOut.push('\'');
                                            s_1746.shift();
                                        }
                                    } break;

                                    case '\n': {
                                        {
                                            charsOut.push('\\n');
                                            s_1746.shift();
                                        }
                                    } break;

                                    case '\r': {
                                        {
                                            charsOut.push('\\r');
                                            s_1746.shift();
                                        }
                                    } break;

                                    case '\\': {
                                        {
                                            s_1746.shift();
                                            if (s_1746[0] == '\'') {
                                                charsOut.push('\\\'');
                                                s_1746.shift();
                                            } else if (s_1746[0] == '"') {
                                                charsOut.push('\\"');
                                                s_1746.shift();
                                            } else if (s_1746[0] == '\\') {
                                                charsOut.push('\\\\');
                                                s_1746.shift();
                                            } else {
                                                charsOut.push('\\');
                                            };
                                        }
                                    } break;

                                    default:
                                    {
                                        charsOut.push(s_1746[0]);
                                        s_1746.shift();
                                    }
                                    };
                                };
                            };
                            return '\'' + charsOut.join('') + '\'';
                        };
                    }
                } break;

                case 3: {
                    return 'true'
                } break;

                case 4: {
                    return 'false'
                } break;

                case 8: {
                    {
                        const expr_1748 = temp_1741[2];
                        const name_1749 = temp_1741[3];
                        return this.printExpression(expr_1748) + '.' + name_1749;
                    }
                } break;

                case 9: {
                    {
                        const e_1750 = temp_1741[2];
                        const args_1751 = temp_1741[3];
                        return this.printExpression(e_1750) + this.printCallArguments(args_1751);
                    }
                } break;

                case 12: {
                    {
                        const name_1752 = temp_1741[2];
                        const expr_1753 = temp_1741[3];
                        const args_1754 = temp_1741[4];
                        const defaults_1755 = temp_1741[5];
                        {
                            if (name_1752 == null) { return this.printFunctionArguments(args_1754, defaults_1755) + ' => ' + this.printBlock(expr_1753) };
                            return '((() => { const ' + name_1752 + ' = ' + this.printFunctionArguments(args_1754, defaults_1755) + ' => ' + this.printBlock(expr_1753) + '; return ' + name_1752 + ' })())';
                        };
                    }
                } break;

                case 13: {
                    {
                        const expr_1756 = temp_1741[2];
                        const args_1757 = temp_1741[3];
                        const defaults_1758 = temp_1741[4];
                        return this.printFunctionArguments(args_1757, defaults_1758) + ' => (' + this.printExpression(expr_1756) + ')';
                    }
                } break;

                case 10: {
                    {
                        const e_1759 = temp_1741[2];
                        const args_1760 = temp_1741[3];
                        return 'new ' + this.printExpression(e_1759) + this.printCallArguments(args_1760);
                    }
                } break;

                case 16: {
                    {
                        const el_1761 = temp_1741[2];
                        return '[' + (() => {
                            const result_1762 = [];
                            const value_1763 = el_1761;
                            for (const a of $toIterator(value_1763)) result_1762.push(this.printExpression(a));
                            return result_1762;
                        })().join(', ') + ']';
                    }
                } break;

                case 18: {
                    {
                        const op_1764 = temp_1741[2];
                        const postfix_1765 = temp_1741[3];
                        const e_1766 = temp_1741[4];
                        {
                            if (postfix_1765) { return this.printExpression(e_1766) + Token.stringify(op_1764) };
                            return Token.stringify(op_1764) + this.printExpression(e_1766);
                        };
                    }
                } break;

                case 19: {
                    {
                        const nullable_1767 = temp_1741[2];
                        const othewise = temp_1741[3];
                        return '((' + this.printExpression(nullable_1767) + ') || (' + this.printExpression(othewise) + '))';
                    }
                } break;

                case 14: {
                    {
                        const e_1768 = temp_1741[2];
                        return '(' + this.printExpression(e_1768) + ')';
                    }
                } break;

                case 11: {
                    {
                        const a_1769 = temp_1741[2];
                        const op_1770 = temp_1741[3];
                        const b_1771 = temp_1741[4];
                        return this.printExpression(a_1769) + ' ' + Token.stringify(op_1770) + ' ' + this.printExpression(b_1771);
                    }
                } break;

                case 21: {
                    {
                        const expr_1772 = temp_1741[2];
                        const index_1773 = temp_1741[3];
                        return this.printExpression(expr_1772) + '[' + this.printExpression(index_1773) + ']';
                    }
                } break;

                case 20: {
                    {
                        const econd_1774 = temp_1741[2];
                        const eif_1775 = temp_1741[3];
                        const eelse_1776 = temp_1741[4];
                        {
                            let r_1777 = '';
                            try {
                                {
                                    r_1777 += '(' + this.printExpression(econd_1774) + ')?';
                                    r_1777 += ' (' + this.printExpression(eif_1775) + ')';
                                    r_1777 += ' : ' + this.printExpression(eelse_1776);
                                    return r_1777;
                                }
                            } catch (error) {
                                {
                                    console.log('If =>', e_1740, error);
                                    return r_1777 + '<!-- If => error -->';
                                }
                            };
                        };
                    }
                } break;

                case 15: {
                    {
                        const names_1778 = temp_1741[2];
                        const el_1779 = temp_1741[3];
                        return '{' + (() => {
                            const result_1780 = [];
                            const value_1781 = el_1779.length;
                            for (const i of $toIterator(value_1781)) result_1780.push(((names_1778[i]) + ':' + this.printExpression(el_1779[i])));
                            return result_1780;
                        })().join(', ') + '}';
                    }
                } break;

                case 17: {
                    {
                        const keys_1782 = temp_1741[2];
                        const values_1783 = temp_1741[3];
                        {
                            if (keys_1782.length == 0) { return 'new Map()' };
                            return 'new Map([' + (() => {
                                const result_1784 = [];
                                const value_1785 = keys_1782.length;
                                for (const i of $toIterator(value_1785)) result_1784.push('[' + this.printExpression(keys_1782[i]) + ', ' + this.printExpression(values_1783[i]) + ']');
                                return result_1784;
                            })().join(', ') + '])';
                        };
                    }
                } break;

                case 22: {
                    {
                        const a_1786 = temp_1741[2];
                        const op_1787 = temp_1741[3];
                        const value_1788 = temp_1741[4];
                        return this.printExpression(a_1786) + ' ' + Token.stringify(op_1787) + '= ' + this.printExpression(value_1788);
                    }
                } break;

                case 23: {
                    {
                        const kind_1789 = temp_1741[2];
                        const args_1790 = temp_1741[3];
                        const s_1791 = temp_1741[4];
                        {
                            const temp_1792 = kind_1789;
                            switch (temp_1792) {
                            case 0: {
                                return '((' + this.printExpression(args_1790[0]) + ') ' + s_1791 + ' (' + this.printExpression(args_1790[1]) + '))'
                            } break;

                            case 1: {
                                return s_1791 + this.printCallArguments(args_1790)
                            } break;

                            case 2: {
                                return '(' + s_1791 + '(' + this.printExpression(args_1790[0]) + '))'
                            } break;

                            case 3: {
                                return '((' + this.printExpression(args_1790[1]) + ')' + s_1791 + ')'
                            } break;
                            };
                        };
                    }
                } break;

                case 24: {
                    {
                        const type_1793 = temp_1741[2];
                        const tagName = temp_1741[3];
                        const tag_1794 = temp_1741[4];
                        const args_1795 = temp_1741[5];
                        return ('(["' + tagName + '",' + this.printExpression(tag_1794) + ',' + (() => {
                            const result_1796 = [];
                            const value_1797 = args_1795;
                            for (const a of $toIterator(value_1797)) result_1796.push(this.printExpression(a));
                            return result_1796;
                        })().join(',') + '])');
                    }
                } break;

                case null: case undefined: {
                    console.error('Got null expression kind in JavaScript generator, probably unsupported feature was used, ignoring')
                } break;

                default:
                console.error('Unknown expression kind:', (((e_1740) || ([])))[0], e_1740)
                };
            };
            return '{/* undefined */}';
        } };
    }
    GenJs.spawn = () => { return new GenJs() };
    var GenC = class {
        constructor() {
            this.globalAccessor = ''
            this.declarationsOfFunctions = []
            this.declarationsOfOpaqueTypes = []
            this.declarationsOfFullTypes = []
            this.declarationsOfStrings = []
            this.tabs = ''
            this.reserved = []
            this.last = ''
        {
        } };
        perform(normalizer_1798) { {
            this.project = normalizer_1798;
            return this.stringify();
        } };
        stringify() { {
            const header = [('// Generated by Hexa ' + (version) + ' https://hexalang.github.io')];
            if (this.project.package.addLicenseNoticeToOutput) {
                header.push(('// ' + (this.project.package.name) + ''));
                header.push(('// ' + (this.project.package.name) + ' ' + (this.project.package.version) + ''));
                header.push(('// LICENSE ' + (this.project.package.license) + ''));
            } else {
                header.push('// The generated code is subject to the original license');
            };
            header.push('#include <stdint.h>');
            header.push('#include <stdarg.h>');
            header.push('#include <stdio.h>');
            header.push('#include <stdlib.h>');
            header.push('#include "hexa.h"');
            header.push('#ifdef __cplusplus');
            header.push('extern "C" {');
            header.push('#endif');
            let out_1799 = '';
            for (const e of $toIterator(this.project.enumsSimple)) {
                this.declarationsOfOpaqueTypes.push('typedef uint16_t _x' + e.name);
                for (const v of $toIterator(e.staticVars)) {
                    const temp_1800 = v;
                    switch (temp_1800 && temp_1800[1]) {
                    case 5: {
                        {
                            const name_1801 = temp_1800[2];
                            const expr_1802 = temp_1800[3];
                            const type_1803 = temp_1800[4];
                            {
                                out_1799 += '\n' + this.printType(type_1803) + ' _x' + e.name + '_' + name_1801;
                                if (expr_1802 != null) { out_1799 += ' = ' + this.printExpression(expr_1802) + ';' };
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_1804 = temp_1800[2];
                            const expr_1805 = temp_1800[3];
                            const type_1806 = temp_1800[4];
                            {
                                out_1799 += '\n' + this.printType(type_1806) + ' _x' + e.name + '_' + name_1804;
                                out_1799 += ' = ' + this.printExpression(expr_1805) + ';';
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(e.staticMethods)) {
                    const temp_1807 = v;
                    switch (temp_1807 && temp_1807[1]) {
                    case 7: {
                        {
                            const name_1808 = temp_1807[2];
                            const expr_1809 = temp_1807[3];
                            const args_1810 = temp_1807[4];
                            const defaults_1811 = temp_1807[5];
                            const types_1812 = temp_1807[6];
                            const returns_1813 = temp_1807[7];
                            {
                                out_1799 += '\n' + this.printType(returns_1813) + ' _x' + e.name + '_' + name_1808;
                                out_1799 += this.printFunctionArguments(args_1810, defaults_1811, types_1812) + ' { ' + this.printStatement(expr_1809) + ' };';
                            };
                        }
                    } break;
                    };
                };
            };
            for (const e of $toIterator(this.project.enumsComplex)) {
                out_1799 += '\nstruct _x' + e.name + ' {\n uint16_t _xindex;\n';
                this.declarationsOfOpaqueTypes.push(('typedef struct _x' + (e.name) + '* _x' + (e.name) + ''));
                let i_1814 = 0;
                if (e.names.length > 0) {
                    out_1799 += '\n union {';
                    for (const name of $toIterator(e.names)) {
                        if (e.constructors[i_1814] != null) {
                            out_1799 += '\n  struct { ';
                            out_1799 += 'void* ' + e.constructors[i_1814].join('; void* ') + '; ';
                            out_1799 += '} _x' + name + ';';
                        };
                        i_1814++;
                    };
                    out_1799 += '\n };';
                };
                out_1799 += '\n};';
            };
            for (const i of $toIterator(this.project.interfaces)) {
                throw i;
            };
            for (const c of $toIterator(this.project.classes)) {
                if (c.external) {
                    if (c.jsRequire != null) {
                        out_1799 += '\n ' + '/*var ' + c.name + ' = require("' + c.jsRequire + '")*/';
                        continue;
                    };
                    header.push('typedef ' + (((c.jsNative) || (c.name))) + ' _x' + c.name + ';');
                    continue;
                };
                const renamed_1815 = '_x' + c.name;
                const t_1816 = ['struct ', renamed_1815, ' {'];
                this.declarationsOfOpaqueTypes.push(('typedef struct ' + (renamed_1815) + '* ' + (renamed_1815) + ''));
                t_1816.push('\n _xclass _xclass;');
                for (const v of $toIterator(c.vars)) {
                    const temp_1817 = v;
                    switch (temp_1817 && temp_1817[1]) {
                    case 5: {
                        {
                            const name_1818 = temp_1817[2];
                            const expr_1819 = temp_1817[3];
                            const type_1820 = temp_1817[4];
                            t_1816.push('\n ' + this.printType(type_1820) + ' _x' + name_1818 + ';');
                        }
                    } break;

                    case 6: {
                        {
                            const name_1821 = temp_1817[2];
                            const expr_1822 = temp_1817[3];
                            const type_1823 = temp_1817[4];
                            t_1816.push('\n ' + this.printType(type_1823) + ' _x' + name_1821 + ';');
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.methods)) {
                    const temp_1824 = v;
                    switch (temp_1824 && temp_1824[1]) {
                    case 7: {
                        {
                            const name_1825 = temp_1824[2];
                            const expr_1826 = temp_1824[3];
                            const args_1827 = temp_1824[4];
                            const defaults_1828 = temp_1824[5];
                            const types_1829 = temp_1824[6];
                            const returns_1830 = temp_1824[7];
                            {
                                let declaration = this.printType(returns_1830) + ' ';
                                const constructor = (name_1825 == null || name_1825 == 'new');
                                if (constructor) { declaration = renamed_1815 + ' ' };
                                declaration += renamed_1815 + '_' + name_1825;
                                if (constructor) { if (args_1827.length > 0) { declaration += '(void* _x' + args_1827.join(', void* _x') + ')' } else declaration += '()' } else {
                                    if (args_1827.length > 0) { declaration += ('(' + (renamed_1815) + ' _xthis, void* _x') + args_1827.join(', void* _x') + ')' } else declaration += ('(' + (renamed_1815) + ' _xthis)');
                                };
                                this.declarationsOfFunctions.push(declaration);
                                out_1799 += '\n' + declaration;
                                out_1799 += ' { ';
                                if (constructor) {
                                    out_1799 += ('\n ' + (renamed_1815) + ' _xthis = (' + (renamed_1815) + ')malloc(sizeof(struct ' + (renamed_1815) + '));');
                                    for (const v of $toIterator(c.vars)) {
                                        const temp_1831 = v;
                                        switch (temp_1831 && temp_1831[1]) {
                                        case 5: {
                                            {
                                                const name_1832 = temp_1831[2];
                                                const expr_1833 = temp_1831[3];
                                                const type_1834 = temp_1831[4];
                                                if (expr_1833 != null) { out_1799 += '\n _xthis->_x' + name_1832 + ' = ' + this.printExpression(expr_1833) + ';' };
                                            }
                                        } break;

                                        case 6: {
                                            {
                                                const name_1835 = temp_1831[2];
                                                const expr_1836 = temp_1831[3];
                                                const type_1837 = temp_1831[4];
                                                out_1799 += '\n _xthis->_x' + name_1835 + ' = ' + this.printExpression(expr_1836) + ';';
                                            }
                                        } break;
                                        };
                                    };
                                    out_1799 += '\n ';
                                    out_1799 += this.printStatement(expr_1826) + '\n return _xthis;\n};';
                                } else out_1799 += this.printStatement(expr_1826) + '\n};';
                            };
                        }
                    } break;
                    };
                };
                t_1816.push('\n}');
                this.declarationsOfFullTypes.push(t_1816.join(''));
                for (const v of $toIterator(c.staticVars)) {
                    const temp_1838 = v;
                    switch (temp_1838 && temp_1838[1]) {
                    case 5: {
                        {
                            const name_1839 = temp_1838[2];
                            const expr_1840 = temp_1838[3];
                            const type_1841 = temp_1838[4];
                            {
                                out_1799 += '\n ' + this.printType(type_1841) + ' ' + renamed_1815 + '_' + name_1839;
                                out_1799 += ';';
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_1842 = temp_1838[2];
                            const expr_1843 = temp_1838[3];
                            const type_1844 = temp_1838[4];
                            {
                                out_1799 += '\n ' + this.printType(type_1844) + ' ' + renamed_1815 + '_' + name_1842;
                                out_1799 += ';';
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.staticMethods)) {
                    const temp_1845 = v;
                    switch (temp_1845 && temp_1845[1]) {
                    case 7: {
                        {
                            const name_1846 = temp_1845[2];
                            const expr_1847 = temp_1845[3];
                            const args_1848 = temp_1845[4];
                            const defaults_1849 = temp_1845[5];
                            const types_1850 = temp_1845[6];
                            const returns_1851 = temp_1845[7];
                            {
                                out_1799 += '\n ' + this.printType(returns_1851) + ' ' + renamed_1815 + '_' + name_1846;
                                out_1799 += this.printFunctionArguments(args_1848, defaults_1849, types_1850) + ' ' + this.printBlock(expr_1847);
                            };
                        }
                    } break;
                    };
                };
            };
            for (const g of $toIterator(this.project.globalFuncs)) {
                console.log('ooops g');
            };
            for (const g of $toIterator(this.project.globalVars)) {
                console.log('ooops gg');
            };
            for (const init of $toIterator(this.project.init)) {
                out_1799 += '\nint main(int argc, char **argv) {\n ';
                out_1799 += this.printStatement(init);
                out_1799 += '\n return 0;\n}';
            };
            out_1799 += '\n#ifdef __cplusplus';
            out_1799 += '\n}';
            out_1799 += '\n#endif\n';
            if (this.declarationsOfOpaqueTypes.length > 0) { this.declarationsOfOpaqueTypes.push('\n') };
            if (this.declarationsOfFunctions.length > 0) { this.declarationsOfFunctions.push('\n') };
            if (this.declarationsOfFullTypes.length > 0) { this.declarationsOfFullTypes.push('\n') };
            if (this.declarationsOfStrings.length > 0) { this.declarationsOfStrings.push('\n') };
            return header.join('\n') + '\n' + this.declarationsOfOpaqueTypes.join(';\n') + this.declarationsOfFunctions.join(';\n') + this.declarationsOfFullTypes.join(';\n') + this.declarationsOfStrings.join(';\n') + out_1799;
        } };
        pushTab() { this.tabs += ' ' };
        popTab() { this.tabs = this.tabs.substring(0, this.tabs.length - 1) };
        printBlock(s_1852) { {
            const temp_1853 = s_1852;
            switch (temp_1853 && temp_1853[1]) {
            case 1: {
                {
                    const el_1854 = temp_1853[2];
                    {
                        if (el_1854.length == 1) {
                            const temp_1855 = el_1854[0];
                            switch (temp_1855 && temp_1855[1]) {
                            case 1: {
                                return this.printBlock(el_1854[0])
                            } break;

                            default:
                            return '{ ' + this.printStatement(el_1854[0]) + '; }'
                            };
                        };
                        if (el_1854.length == 0) { return '{}' };
                        return this.printStatement(s_1852);
                    };
                }
            } break;

            default:
            return '{ ' + this.printStatement(s_1852) + '; }'
            };
        } };
        printStatement(s_1856) { {
            this.last = ((s_1856) || (this.last));
            {
                const temp_1857 = s_1856;
                switch (temp_1857 && temp_1857[1]) {
                case 0: {
                    {
                        const els_1858 = temp_1857[2];
                        {
                            let r_1859 = '';
                            for (const s of $toIterator(els_1858)) if (s != null) { r_1859 += '\n' + this.tabs + this.printStatement(s) + ';' };
                            return r_1859;
                        };
                    }
                } break;

                case 21: {
                    return 'break'
                } break;

                case 20: {
                    return 'continue'
                } break;

                case 1: {
                    {
                        const el_1860 = temp_1857[2];
                        {
                            this.pushTab();
                            let r_1861 = '{';
                            for (const e of $toIterator(el_1860)) {
                                const temp_1862 = e;
                                switch (temp_1862 && temp_1862[1]) {
                                case null: case undefined: {
                                    {
                                    }
                                } break;

                                case 0: {
                                    {
                                        const els_1863 = temp_1862[2];
                                        for (const s of $toIterator(els_1863)) if (s != null) { r_1861 += '\n' + this.tabs + this.printStatement(s) + ';' };
                                    }
                                } break;

                                default:
                                r_1861 += '\n' + this.tabs + this.printStatement(e) + ';'
                                };
                            };
                            this.popTab();
                            return r_1861 + '\n' + this.tabs + '}';
                        };
                    }
                } break;

                case 3: {
                    {
                        const e_1864 = temp_1857[2];
                        const args_1865 = temp_1857[3];
                        return '' + this.printExpression(e_1864) + '_new' + this.printCallArguments(args_1865);
                    }
                } break;

                case 6: {
                    {
                        const name_1866 = temp_1857[2];
                        const expr_1867 = temp_1857[3];
                        const type_1868 = temp_1857[4];
                        return this.printType(type_1868) + ' _x' + name_1866 + (expr_1867 == (null)? ('') : ' = ' + this.printExpression(expr_1867));
                    }
                } break;

                case 5: {
                    {
                        const name_1869 = temp_1857[2];
                        const expr_1870 = temp_1857[3];
                        const type_1871 = temp_1857[4];
                        return this.printType(type_1871) + ' _x' + name_1869 + (expr_1870 == (null)? ('') : ' = ' + this.printExpression(expr_1870));
                    }
                } break;

                case 7: {
                    {
                        const name_1872 = temp_1857[2];
                        const expr_1873 = temp_1857[3];
                        const args_1874 = temp_1857[4];
                        const defaults_1875 = temp_1857[5];
                        const types_1876 = temp_1857[6];
                        const returns_1877 = temp_1857[7];
                        return this.printType(returns_1877) + ' _x' + name_1872 + this.printFunctionArguments(args_1874, defaults_1875, types_1876) + ' ' + this.printBlock(expr_1873);
                    }
                } break;

                case 8: {
                    {
                        const e_1878 = temp_1857[2];
                        {
                            if (e_1878 == null) { return 'return' };
                            return 'return ' + this.printExpression(e_1878);
                        };
                    }
                } break;

                case 9: {
                    {
                        const econd_1879 = temp_1857[2];
                        const eif_1880 = temp_1857[3];
                        const eelse_1881 = temp_1857[4];
                        {
                            let r_1882 = 'if (' + this.printExpression(econd_1879) + ') ' + this.printBlock(eif_1880);
                            if (eelse_1881 != null) { r_1882 += ' else ' + this.printStatement(eelse_1881) };
                            return r_1882;
                        };
                    }
                } break;

                case 2: {
                    {
                        const e_1883 = temp_1857[2];
                        const args_1884 = temp_1857[3];
                        return this.printExpression(e_1883) + this.printCallArguments(args_1884);
                    }
                } break;

                case 10: {
                    {
                        const expr_1885 = temp_1857[2];
                        const t_1886 = temp_1857[3];
                        const v_1887 = temp_1857[4];
                        const catches_1888 = temp_1857[5];
                        {
                            this.pushTab();
                            let r_1889 = 'try {\n' + this.tabs;
                            r_1889 += this.printStatement(expr_1885);
                            this.popTab();
                            r_1889 += '\n' + this.tabs + '} catch(' + this.printType(t_1886[0]) + ' _x' + v_1887[0] + ') {\n' + this.tabs + ' ';
                            this.pushTab();
                            r_1889 += this.printStatement(catches_1888[0]);
                            this.popTab();
                            return r_1889 + '\n' + this.tabs + '}';
                        };
                    }
                } break;

                case 12: {
                    {
                        const a_1890 = temp_1857[2];
                        const v_1891 = temp_1857[3];
                        return this.printExpression(a_1890) + ' = ' + this.printExpression(v_1891);
                    }
                } break;

                case 11: {
                    {
                        const e_1892 = temp_1857[2];
                        return '_xthrow(' + this.printExpression(e_1892) + ')';
                    }
                } break;

                case 15: {
                    {
                        const name_1893 = temp_1857[2];
                        const over_1894 = temp_1857[3];
                        const by_1895 = temp_1857[4];
                        return 'for (void* _x' + name_1893 + '; ' + this.printExpression(over_1894) + ';) ' + this.printStatement(by_1895);
                    }
                } break;

                case 17: {
                    {
                        const e_1896 = temp_1857[2];
                        return this.printExpression(e_1896) + '++';
                    }
                } break;

                case 18: {
                    {
                        const e_1897 = temp_1857[2];
                        return this.printExpression(e_1897) + '--';
                    }
                } break;

                case 16: {
                    {
                        const econd_1898 = temp_1857[2];
                        const e_1899 = temp_1857[3];
                        const pre_1900 = temp_1857[4];
                        {
                            if (pre_1900) { return 'while (' + this.printExpression(econd_1898) + ') ' + this.printStatement(e_1899) };
                            return 'do {' + this.printStatement(e_1899) + '} while (' + this.printExpression(econd_1898) + ')';
                        };
                    }
                } break;

                case 13: {
                    {
                        const a_1901 = temp_1857[2];
                        const op_1902 = temp_1857[3];
                        const value_1903 = temp_1857[4];
                        return this.printExpression(a_1901) + ' ' + Token.stringify(op_1902) + '= ' + this.printExpression(value_1903);
                    }
                } break;

                case 14: {
                    {
                        const expr_1904 = temp_1857[2];
                        const name_1905 = temp_1857[3];
                        return this.printExpression(expr_1904) + '.' + name_1905;
                    }
                } break;

                case 19: {
                    {
                        const expr_1906 = temp_1857[2];
                        const cases_1907 = temp_1857[3];
                        const statements_1908 = temp_1857[4];
                        {
                            let r_1909 = 'switch (' + this.printExpression(expr_1906) + ') {';
                            {
                                let i_1910 = 0;
                                let it_1911 = 0;
                                let at_1912 = cases_1907.length;
                                while (it_1911 < at_1912) {
                                    i_1910 = it_1911;
                                    it_1911++;
                                    if (cases_1907[i_1910].length > 0) {
                                        r_1909 += '\n' + this.tabs;
                                        for (const cc of $toIterator(cases_1907[i_1910])) r_1909 += 'case ' + this.printExpression(cc) + ': ';
                                        this.pushTab();
                                        r_1909 += this.printBlock(statements_1908[i_1910]);
                                        this.popTab();
                                        r_1909 += ' break;';
                                    };
                                };
                            };
                            {
                                let i_1913 = 0;
                                let it_1914 = 0;
                                let at_1915 = cases_1907.length;
                                while (it_1914 < at_1915) {
                                    i_1913 = it_1914;
                                    it_1914++;
                                    if (cases_1907[i_1913].length == 0) {
                                        r_1909 += '\n' + this.tabs + 'default:';
                                        r_1909 += '\n' + this.tabs;
                                        r_1909 += this.printBlock(statements_1908[i_1913]);
                                    };
                                };
                            };
                            r_1909 += '\n' + this.tabs;
                            return r_1909 + '}';
                        };
                    }
                } break;

                default:
                console.error('Unknown statement kind:', (((s_1856) || ([])))[0])
                };
            };
        } };
        printCallArguments(args_1916) { return '(' + (() => {
            const result_1917 = [];
            const value_1918 = args_1916;
            for (const a of $toIterator(value_1918)) result_1917.push(this.printExpression(a));
            return result_1917;
        })().join(', ') + ')' };
        printFunctionArguments(args_1919, defaults_1920, types_1921) { {
            if (args_1919.length == 0) { return '(void)' };
            return '(' + (() => {
                const result_1922 = [];
                const value_1923 = args_1919.length;
                for (const a of $toIterator(value_1923)) result_1922.push(this.printType(types_1921[a]) + ' _x' + args_1919[a]);
                return result_1922;
            })().join(', ') + ')';
        } };
        stringType(t_1924, prefix_1925) { {
            if (t_1924 == null) { return 'void*' };
            {
                const temp_1926 = t_1924;
                switch (temp_1926 && temp_1926[1]) {
                case 2: {
                    {
                        const name_1927 = temp_1926[2];
                        const params_1928 = temp_1926[3];
                        return '_x' + name_1927;
                    }
                } break;

                case 1: {
                    {
                        const name_1929 = temp_1926[2];
                        return '_x' + name_1929;
                    }
                } break;

                case 5: {
                    {
                    }
                } break;

                case 0: {
                    {
                        const t_1930 = temp_1926[2];
                        return this.stringType(t_1930, '');
                    }
                } break;
                };
            };
            return prefix_1925 + 'void*';
        } };
        printType(t_1931) { {
            const type_1932 = this.stringType(t_1931, '');
            return type_1932;
        } };
        printExpression(e_1933) { {
            this.last = ((e_1933) || (this.last));
            {
                const temp_1934 = e_1933;
                switch (temp_1934 && temp_1934[1]) {
                case 7: {
                    return '_xthis'
                } break;

                case 5: {
                    {
                        const name_1935 = temp_1934[2];
                        return '_x' + name_1935;
                    }
                } break;

                case 6: {
                    return '((void*)0)'
                } break;

                case 1: {
                    {
                        const v_1936 = temp_1934[2];
                        return '' + v_1936;
                    }
                } break;

                case 2: {
                    {
                        const v_1937 = temp_1934[2];
                        return '' + v_1937;
                    }
                } break;

                case 0: {
                    {
                        const s_1938 = temp_1934[2];
                        {
                            const s_1939 = s_1938.split('');
                            const charsOut_1940 = [];
                            while (s_1939.length > 0) {
                                {
                                    const temp_1941 = s_1939[0];
                                    switch (temp_1941) {
                                    case '\'': {
                                        {
                                            charsOut_1940.push('\\\'');
                                            s_1939.shift();
                                        }
                                    } break;

                                    case '"': {
                                        {
                                            charsOut_1940.push('\\"');
                                            s_1939.shift();
                                        }
                                    } break;

                                    case '\n': {
                                        {
                                            charsOut_1940.push('\\n');
                                            s_1939.shift();
                                        }
                                    } break;

                                    case '\r': {
                                        {
                                            charsOut_1940.push('\\r');
                                            s_1939.shift();
                                        }
                                    } break;

                                    case '\\': {
                                        {
                                            s_1939.shift();
                                            if (s_1939[0] == '\'') {
                                                charsOut_1940.push('\\\'');
                                                s_1939.shift();
                                            } else if (s_1939[0] == '"') {
                                                charsOut_1940.push('\\"');
                                                s_1939.shift();
                                            } else if (s_1939[0] == '\\') {
                                                charsOut_1940.push('\\\\');
                                                s_1939.shift();
                                            } else {
                                                charsOut_1940.push('\\');
                                            };
                                        }
                                    } break;

                                    default:
                                    {
                                        charsOut_1940.push(s_1939[0]);
                                        s_1939.shift();
                                    }
                                    };
                                };
                            };
                            return '_xString_fromUTF8z("' + charsOut_1940.join('') + '")';
                        };
                    }
                } break;

                case 3: {
                    return '1'
                } break;

                case 4: {
                    return '0'
                } break;

                case 8: {
                    {
                        const expr_1942 = temp_1934[2];
                        const name_1943 = temp_1934[3];
                        {
                            const temp_1944 = expr_1942;
                            switch (temp_1944) {
                            case 7: {
                                return '_xthis->_x' + name_1943
                            } break;

                            default:
                            return this.printExpression(expr_1942) + '->_x' + name_1943
                            };
                        };
                    }
                } break;

                case 9: {
                    {
                        const e_1945 = temp_1934[2];
                        const args_1946 = temp_1934[3];
                        return this.printExpression(e_1945) + this.printCallArguments(args_1946);
                    }
                } break;

                case 12: {
                    {
                        const name_1947 = temp_1934[2];
                        const expr_1948 = temp_1934[3];
                        const args_1949 = temp_1934[4];
                        const defaults_1950 = temp_1934[5];
                        const types_1951 = temp_1934[6];
                        const returns_1952 = temp_1934[7];
                        {
                            if (name_1947 == null) { return this.printType(returns_1952) + ' __function' + this.printFunctionArguments(args_1949, defaults_1950, types_1951) + ' ' + this.printBlock(expr_1948) };
                            return '((() => { void* _x' + name_1947 + ' = ' + this.printFunctionArguments(args_1949, defaults_1950, types_1951) + ' => ' + this.printBlock(expr_1948) + ';return _x' + name_1947 + ';})())';
                        };
                    }
                } break;

                case 13: {
                    {
                        const expr_1953 = temp_1934[2];
                        const args_1954 = temp_1934[3];
                        const defaults_1955 = temp_1934[4];
                        const types_1956 = temp_1934[5];
                        const returns_1957 = temp_1934[6];
                        return this.printType(returns_1957) + ' __arrow' + this.printFunctionArguments(args_1954, defaults_1955, types_1956) + ' { return (' + this.printExpression(expr_1953) + '); }';
                    }
                } break;

                case 10: {
                    {
                        const e_1958 = temp_1934[2];
                        const args_1959 = temp_1934[3];
                        return '' + this.printExpression(e_1958) + '_new' + this.printCallArguments(args_1959);
                    }
                } break;

                case 16: {
                    {
                        const el_1960 = temp_1934[2];
                        return '_xArray_new(' + (() => {
                            const result_1961 = [];
                            const value_1962 = el_1960;
                            for (const a of $toIterator(value_1962)) result_1961.push(this.printExpression(a));
                            return result_1961;
                        })().join(', ') + ')';
                    }
                } break;

                case 18: {
                    {
                        const op_1963 = temp_1934[2];
                        const postfix_1964 = temp_1934[3];
                        const e_1965 = temp_1934[4];
                        {
                            if (postfix_1964) { return this.printExpression(e_1965) + Token.stringify(op_1963) };
                            return Token.stringify(op_1963) + this.printExpression(e_1965);
                        };
                    }
                } break;

                case 19: {
                    {
                        const nullable_1966 = temp_1934[2];
                        const othewise_1967 = temp_1934[3];
                        return '((' + this.printExpression(nullable_1966) + ')||(' + this.printExpression(othewise_1967) + '))';
                    }
                } break;

                case 14: {
                    {
                        const e_1968 = temp_1934[2];
                        return '(' + this.printExpression(e_1968) + ')';
                    }
                } break;

                case 11: {
                    {
                        const a_1969 = temp_1934[2];
                        const op_1970 = temp_1934[3];
                        const b_1971 = temp_1934[4];
                        return this.printExpression(a_1969) + ' ' + Token.stringify(op_1970) + ' ' + this.printExpression(b_1971);
                    }
                } break;

                case 21: {
                    {
                        const expr_1972 = temp_1934[2];
                        const index_1973 = temp_1934[3];
                        return '_xArray_get(' + this.printExpression(expr_1972) + ', ' + this.printExpression(index_1973) + ')';
                    }
                } break;

                case 20: {
                    {
                        const econd_1974 = temp_1934[2];
                        const eif_1975 = temp_1934[3];
                        const eelse_1976 = temp_1934[4];
                        {
                            let r_1977 = '';
                            try {
                                {
                                    r_1977 += '(' + this.printExpression(econd_1974) + ')?';
                                    r_1977 += '(' + this.printExpression(eif_1975) + ')';
                                    r_1977 += ':' + this.printExpression(eelse_1976);
                                    return r_1977;
                                }
                            } catch (error) {
                                {
                                    console.log('If =>', e_1933, error);
                                    return r_1977 + '<!-- If => error -->';
                                }
                            };
                        };
                    }
                } break;

                case 15: {
                    {
                        const names_1978 = temp_1934[2];
                        const el_1979 = temp_1934[3];
                        return '{' + (() => {
                            const result_1980 = [];
                            const value_1981 = el_1979.length;
                            for (const i of $toIterator(value_1981)) result_1980.push(((names_1978[i]) + ':' + this.printExpression(el_1979[i])));
                            return result_1980;
                        })().join(', ') + '}';
                    }
                } break;

                case 17: {
                    {
                        const keys_1982 = temp_1934[2];
                        const values_1983 = temp_1934[3];
                        {
                            if (keys_1982.length == 0) { return '_xMap_new()' };
                            return '_xMap_new([' + (() => {
                                const result_1984 = [];
                                const value_1985 = keys_1982.length;
                                for (const i of $toIterator(value_1985)) result_1984.push('[' + this.printExpression(keys_1982[i]) + ', ' + this.printExpression(values_1983[i]) + ']');
                                return result_1984;
                            })().join(', ') + '])';
                        };
                    }
                } break;

                case 22: {
                    {
                        const a_1986 = temp_1934[2];
                        const op_1987 = temp_1934[3];
                        const value_1988 = temp_1934[4];
                        return this.printExpression(a_1986) + ' ' + Token.stringify(op_1987) + '= ' + this.printExpression(value_1988);
                    }
                } break;

                case 23: {
                    {
                        const kind_1989 = temp_1934[2];
                        const args_1990 = temp_1934[3];
                        const s_1991 = temp_1934[4];
                        {
                            const temp_1992 = kind_1989;
                            switch (temp_1992) {
                            case 0: {
                                return '((' + this.printExpression(args_1990[0]) + ')' + s_1991 + '(' + this.printExpression(args_1990[1]) + '))'
                            } break;

                            case 1: {
                                return s_1991 + this.printCallArguments(args_1990)
                            } break;

                            case 2: {
                                return '(' + s_1991 + '(' + this.printExpression(args_1990[0]) + '))'
                            } break;

                            case 3: {
                                return '((' + this.printExpression(args_1990[1]) + ')' + s_1991 + ')'
                            } break;
                            };
                        };
                    }
                } break;

                case 24: {
                    {
                        const typeName = temp_1934[2];
                        const tagName_1993 = temp_1934[3];
                        const tag_1994 = temp_1934[4];
                        const args_1995 = temp_1934[5];
                        return '_x' + typeName + '_' + tagName_1993 + '(' + (() => {
                            const result_1996 = [];
                            const value_1997 = args_1995;
                            for (const a of $toIterator(value_1997)) result_1996.push(this.printExpression(a));
                            return result_1996;
                        })().join(', ') + ')';
                    }
                } break;

                default:
                {
                    console.error('Unknown expression kind:', (((e_1933) || ([])))[0], e_1933, this.last);
                    return '<!-- ' + (((e_1933) || ([])))[0] + ' -->';
                }
                };
            };
        } };
    }
    GenC.spawn = () => { return new GenC() };
    var GenCSharp = class {
        constructor(project_1998) {
            this.dictionaryName = 'global::System.Collections.Generic.Dictionary'
            this.listName = 'global::System.Collections.Generic.List'
            this.tabs = ''
        this.project = project_1998 };
        stringify() { {
            let out_1999 = '';
            for (const e of $toIterator(this.project.enumsSimple)) {
                out_1999 += '\n' + 'public enum ' + e.name + ' {';
                {
                    let v_2000 = 0;
                    let it_2001 = 0;
                    let at_2002 = e.names.length;
                    while (it_2001 < at_2002) {
                        v_2000 = it_2001;
                        it_2001++;
                        {
                            out_1999 += '\n\t' + e.names[v_2000] + ' = ' + this.printExpression(e.values[v_2000]);
                        };
                    };
                };
                for (const v of $toIterator(e.staticVars)) {
                    const temp_2003 = v;
                    switch (temp_2003 && temp_2003[1]) {
                    case 5: {
                        {
                            const name_2004 = temp_2003[2];
                            const expr_2005 = temp_2003[3];
                            {
                                out_1999 += '\n\t' + e.name + '.' + name_2004;
                                if (expr_2005 != null) { out_1999 += ' = ' + this.printExpression(expr_2005) };
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2006 = temp_2003[2];
                            const expr_2007 = temp_2003[3];
                            {
                                out_1999 += '\n\t' + e.name + '.' + name_2006;
                                out_1999 += ' = ' + this.printExpression(expr_2007);
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(e.staticMethods)) {
                    const temp_2008 = v;
                    switch (temp_2008 && temp_2008[1]) {
                    case 7: {
                        {
                            const name_2009 = temp_2008[2];
                            const expr_2010 = temp_2008[3];
                            const args_2011 = temp_2008[4];
                            const defaults_2012 = temp_2008[5];
                            {
                                out_1999 += '\n\tstatic function ' + name_2009;
                                out_1999 += this.printFunctionArguments(args_2011, defaults_2012) + ' ' + this.printStatement(expr_2010);
                            };
                        }
                    } break;
                    };
                };
                out_1999 += '\n\t}';
            };
            for (const e of $toIterator(this.project.enumsComplex)) {
                out_1999 += '\n' + 'public class ' + e.name + ' {\n';
                out_1999 += '\tpublic int @index;\n';
                out_1999 += '\tpublic dynamic[] @params;\n';
                out_1999 += '\t' + 'public ' + e.name + '(int index, object[] params) { this.@index = index; this.@params = params; }';
                let i_2013 = 0;
                for (const name of $toIterator(e.names)) {
                    out_1999 += '\n\t' + name;
                    if (e.constructors[i_2013] != null) {
                        out_1999 += '(';
                        out_1999 += (() => {
                            const result_2014 = [];
                            const value_2015 = e.constructors[i_2013].length;
                            for (const k of $toIterator(value_2015)) result_2014.push((() => { return e.constructors[i_2013][k] + this.printType(e.types[i_2013][k]) })());
                            return result_2014;
                        })().join(', ');
                        out_1999 += ')';
                    };
                    i_2013++;
                };
                out_1999 += '\n}';
            };
            for (const i of $toIterator(this.project.interfaces)) {
                throw i;
            };
            for (const c of $toIterator(this.project.classes)) {
                if (c.external) {
                    if (c.jsRequire != null) {
                        out_1999 += '\n\t' + '// @require("' + c.jsRequire + '") declare class ' + c.name + ' {}';
                        continue;
                    };
                    {
                        let step_2016 = 0;
                        const jsNative = c.jsNative;
                        if (step_2016 == 0 && jsNative != null) { step_2016 = 1 };
                        if (step_2016 == 1) {
                            out_1999 += ('using ' + (c.name) + ' = ') + jsNative + ';';
                            if (jsNative == 'global::System.Collections.Generic.Dictionary') { this.dictionaryName = 'Dictionary' } else if (jsNative == 'global::System.Collections.Generic.List') { this.listName = 'List' };
                        };
                    };
                    continue;
                };
                this.tabs = '';
                out_1999 += '\n' + 'public class ' + c.name + ' {';
                this.pushTab();
                for (const v of $toIterator(c.vars)) {
                    const temp_2017 = v;
                    switch (temp_2017 && temp_2017[1]) {
                    case 5: {
                        {
                            const name_2018 = temp_2017[2];
                            const expr_2019 = temp_2017[3];
                            {
                                out_1999 += '\n\t' + 'dynamic ' + name_2018;
                                if (expr_2019 != null) { out_1999 += ' = ' + this.printExpression(expr_2019) };
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2020 = temp_2017[2];
                            const expr_2021 = temp_2017[3];
                            out_1999 += '\n\tconst ' + name_2020 + ' = ' + this.printExpression(expr_2021);
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.methods)) {
                    const temp_2022 = v;
                    switch (temp_2022 && temp_2022[1]) {
                    case 7: {
                        {
                            const name_2023 = temp_2022[2];
                            const expr_2024 = temp_2022[3];
                            const args_2025 = temp_2022[4];
                            {
                                if (name_2023 == null || name_2023 == 'new') { out_1999 += ('\n\t' + (c.name) + ' ') } else out_1999 += '\n\tdynamic ' + name_2023;
                                out_1999 += '(' + args_2025.join(', ') + ') ';
                                out_1999 += this.printStatement(expr_2024);
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.staticVars)) {
                    const temp_2026 = v;
                    switch (temp_2026 && temp_2026[1]) {
                    case 5: {
                        {
                            const name_2027 = temp_2026[2];
                            const expr_2028 = temp_2026[3];
                            {
                                out_1999 += '\n\tpublic static dynamic ' + name_2027;
                                if (expr_2028 != null) { out_1999 += ' = ' + this.printExpression(expr_2028) };
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2029 = temp_2026[2];
                            const expr_2030 = temp_2026[3];
                            {
                                out_1999 += '\n\tpublic static const  dynamic ' + name_2029;
                                out_1999 += ' = ' + this.printExpression(expr_2030);
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.staticMethods)) {
                    const temp_2031 = v;
                    switch (temp_2031 && temp_2031[1]) {
                    case 7: {
                        {
                            const name_2032 = temp_2031[2];
                            const expr_2033 = temp_2031[3];
                            const args_2034 = temp_2031[4];
                            const defaults_2035 = temp_2031[5];
                            {
                                out_1999 += '\n\tpublic static dynamic ' + name_2032;
                                out_1999 += this.printFunctionArguments(args_2034, defaults_2035) + ' ' + this.printStatement(expr_2033);
                            };
                        }
                    } break;
                    };
                };
                this.popTab();
                out_1999 += '\n}';
            };
            for (const g of $toIterator(this.project.globalFuncs)) {
                throw g;
            };
            for (const g of $toIterator(this.project.globalVars)) {
                throw g;
            };
            out_1999 += '\n';
            out_1999 += 'public class Program {\n';
            this.tabs = '\t';
            out_1999 += this.tabs + 'public static void Main(string[] args) {\n';
            this.pushTab();
            for (const init of $toIterator(this.project.init)) {
                out_1999 += this.tabs + this.printStatement(init);
                out_1999 += '\n';
            };
            this.popTab();
            out_1999 += this.tabs + '}';
            this.popTab();
            out_1999 += '\n}';
            return out_1999 + '\n';
        } };
        pushTab() { this.tabs += '\t' };
        popTab() { this.tabs = this.tabs.substring(0, this.tabs.length - 1) };
        printBlock(s_2036) { {
            const temp_2037 = s_2036;
            switch (temp_2037 && temp_2037[1]) {
            case 1: {
                {
                    const el_2038 = temp_2037[2];
                    {
                        if (el_2038.length == 1) { return '{ ' + this.printStatement(el_2038[0]) + ' }' };
                        if (el_2038.length == 0) { return '{}' };
                        return this.printStatement(s_2036);
                    };
                }
            } break;

            default:
            return '{ ' + this.printStatement(s_2036) + ' }'
            };
        } };
        printStatement(s_2039) { {
            {
                const temp_2040 = s_2039;
                switch (temp_2040 && temp_2040[1]) {
                case 0: {
                    {
                        const els_2041 = temp_2040[2];
                        {
                            let r_2042 = '';
                            for (const s of $toIterator(els_2041)) if (s != null) { r_2042 += '\n' + this.tabs + this.printStatement(s) };
                            return r_2042;
                        };
                    }
                } break;

                case 21: {
                    return 'break;'
                } break;

                case 20: {
                    return 'continue;'
                } break;

                case 1: {
                    {
                        const el_2043 = temp_2040[2];
                        {
                            this.pushTab();
                            let r_2044 = '{';
                            for (const e of $toIterator(el_2043)) {
                                const temp_2045 = e;
                                switch (temp_2045 && temp_2045[1]) {
                                case null: case undefined: {
                                    {
                                    }
                                } break;

                                case 0: {
                                    {
                                        const els_2046 = temp_2045[2];
                                        for (const s of $toIterator(els_2046)) if (s != null) { r_2044 += '\n' + this.tabs + this.printStatement(s) };
                                    }
                                } break;

                                default:
                                r_2044 += '\n' + this.tabs + this.printStatement(e)
                                };
                            };
                            this.popTab();
                            return r_2044 + '\n' + this.tabs + '}';
                        };
                    }
                } break;

                case 3: {
                    {
                        const e_2047 = temp_2040[2];
                        const args_2048 = temp_2040[3];
                        return 'new ' + this.printExpression(e_2047) + this.printCallArguments(args_2048) + ';';
                    }
                } break;

                case 6: {
                    {
                        const name_2049 = temp_2040[2];
                        const expr_2050 = temp_2040[3];
                        return 'var ' + name_2049 + (expr_2050 == (null)? ('') : ' = ' + this.printExpression(expr_2050)) + ';';
                    }
                } break;

                case 5: {
                    {
                        const name_2051 = temp_2040[2];
                        const expr_2052 = temp_2040[3];
                        return 'var ' + name_2051 + (expr_2052 == (null)? ('') : ' = ' + this.printExpression(expr_2052)) + ';';
                    }
                } break;

                case 7: {
                    {
                        const name_2053 = temp_2040[2];
                        const expr_2054 = temp_2040[3];
                        const args_2055 = temp_2040[4];
                        const defaults_2056 = temp_2040[5];
                        return 'function ' + name_2053 + this.printFunctionArguments(args_2055, defaults_2056) + ' ' + this.printBlock(expr_2054);
                    }
                } break;

                case 8: {
                    {
                        const e_2057 = temp_2040[2];
                        {
                            if (e_2057 == null) { return 'return;' };
                            return 'return ' + this.printExpression(e_2057) + ';';
                        };
                    }
                } break;

                case 9: {
                    {
                        const econd_2058 = temp_2040[2];
                        const eif_2059 = temp_2040[3];
                        const eelse_2060 = temp_2040[4];
                        {
                            let r_2061 = 'if (' + this.printExpression(econd_2058) + ') ' + this.printBlock(eif_2059);
                            if (eelse_2060 != null) { r_2061 += ' else ' + this.printStatement(eelse_2060) };
                            return r_2061;
                        };
                    }
                } break;

                case 2: {
                    {
                        const e_2062 = temp_2040[2];
                        const args_2063 = temp_2040[3];
                        return this.printExpression(e_2062) + this.printCallArguments(args_2063) + ';';
                    }
                } break;

                case 10: {
                    {
                        const expr_2064 = temp_2040[2];
                        const t_2065 = temp_2040[3];
                        const v_2066 = temp_2040[4];
                        const catches_2067 = temp_2040[5];
                        {
                            let r_2068 = 'try ';
                            r_2068 += this.printStatement(expr_2064);
                            r_2068 += ' catch (' + v_2066[0] + ': dynamic) ';
                            r_2068 += this.printStatement(catches_2067[0]);
                            return r_2068;
                        };
                    }
                } break;

                case 12: {
                    {
                        const a_2069 = temp_2040[2];
                        const v_2070 = temp_2040[3];
                        return this.printExpression(a_2069) + ' = ' + this.printExpression(v_2070);
                    }
                } break;

                case 11: {
                    {
                        const e_2071 = temp_2040[2];
                        return 'throw ' + this.printExpression(e_2071);
                    }
                } break;

                case 15: {
                    {
                        const name_2072 = temp_2040[2];
                        const over_2073 = temp_2040[3];
                        const by_2074 = temp_2040[4];
                        return 'for (' + name_2072 + ' in ' + this.printExpression(over_2073) + ') ' + this.printStatement(by_2074);
                    }
                } break;

                case 17: {
                    {
                        const e_2075 = temp_2040[2];
                        return this.printExpression(e_2075) + '++';
                    }
                } break;

                case 18: {
                    {
                        const e_2076 = temp_2040[2];
                        return this.printExpression(e_2076) + '--';
                    }
                } break;

                case 16: {
                    {
                        const econd_2077 = temp_2040[2];
                        const e_2078 = temp_2040[3];
                        const pre_2079 = temp_2040[4];
                        {
                            if (pre_2079) { return 'while (' + this.printExpression(econd_2077) + ') ' + this.printStatement(e_2078) };
                            return 'do {' + this.printStatement(e_2078) + '} while (' + this.printExpression(econd_2077) + ')';
                        };
                    }
                } break;

                case 13: {
                    {
                        const a_2080 = temp_2040[2];
                        const op_2081 = temp_2040[3];
                        const value_2082 = temp_2040[4];
                        return this.printExpression(a_2080) + ' ' + Token.stringify(op_2081) + '= ' + this.printExpression(value_2082);
                    }
                } break;

                case 14: {
                    {
                        const expr_2083 = temp_2040[2];
                        const name_2084 = temp_2040[3];
                        return this.printExpression(expr_2083) + '.' + name_2084;
                    }
                } break;

                case 19: {
                    {
                        const expr_2085 = temp_2040[2];
                        const cases_2086 = temp_2040[3];
                        const statements_2087 = temp_2040[4];
                        {
                            let r_2088 = 'switch (' + this.printExpression(expr_2085) + ') {';
                            {
                                let i_2089 = 0;
                                let it_2090 = 0;
                                let at_2091 = cases_2086.length;
                                while (it_2090 < at_2091) {
                                    i_2089 = it_2090;
                                    it_2090++;
                                    if (cases_2086[i_2089].length > 0) {
                                        r_2088 += '\n' + this.tabs;
                                        for (const cc of $toIterator(cases_2086[i_2089])) r_2088 += 'case ' + this.printExpression(cc) + ': ';
                                        this.pushTab();
                                        r_2088 += this.printStatement(statements_2087[i_2089]);
                                        this.popTab();
                                        r_2088 += '\n' + this.tabs + 'break;\n' + this.tabs;
                                    };
                                };
                            };
                            {
                                let i_2092 = 0;
                                let it_2093 = 0;
                                let at_2094 = cases_2086.length;
                                while (it_2093 < at_2094) {
                                    i_2092 = it_2093;
                                    it_2093++;
                                    if (cases_2086[i_2092].length == 0) {
                                        r_2088 += '\n' + this.tabs + 'default: ';
                                        r_2088 += '\n' + this.tabs;
                                        r_2088 += this.printStatement(statements_2087[i_2092]);
                                        r_2088 += '\n' + this.tabs;
                                    };
                                };
                            };
                            return r_2088 + '}';
                        };
                    }
                } break;

                default:
                console.error('Unknown statement kind:', (((s_2039) || ([])))[0])
                };
            };
            return '<!-- undefined -->';
        } };
        printCallArguments(args_2095) { return '(' + (() => {
            const result_2096 = [];
            const value_2097 = args_2095;
            for (const a of $toIterator(value_2097)) result_2096.push(this.printExpression(a));
            return result_2096;
        })().join(', ') + ')' };
        printFunctionArguments(args_2098, defaults_2099) { return '(' + (() => {
            const result_2100 = [];
            const value_2101 = args_2098.length;
            for (const a of $toIterator(value_2101)) result_2100.push('dynamic ' + args_2098[a] + (((defaults_2099 != null && defaults_2099[a] != null))? (': ' + this.printExpression(defaults_2099[a])) : ''));
            return result_2100;
        })().join(', ') + ')' };
        printType(t_2102) { {
            if (t_2102 == null) { return '' };
            {
                const temp_2103 = t_2102;
                switch (temp_2103 && temp_2103[1]) {
                case 2: {
                    {
                        const name_2104 = temp_2103[2];
                        const params_2105 = temp_2103[3];
                        return name_2104 + '<' + (() => {
                            const result_2106 = [];
                            const value_2107 = params_2105;
                            for (const param of $toIterator(value_2107)) result_2106.push(this.printType(param));
                            return result_2106;
                        })().join(', ') + '>';
                    }
                } break;

                case 1: {
                    {
                        const name_2108 = temp_2103[2];
                        return name_2108;
                    }
                } break;

                case 5: {
                    return 'dynamic'
                } break;

                case 0: {
                    {
                        const t_2109 = temp_2103[2];
                        return this.printType(t_2109) + '?';
                    }
                } break;

                default:
                {
                }
                };
            };
            return 'dynamic';
        } };
        printExpression(e_2110) { {
            {
                const temp_2111 = e_2110;
                switch (temp_2111 && temp_2111[1]) {
                case 6: {
                    return 'null'
                } break;

                case 7: {
                    return 'this'
                } break;

                case 5: {
                    {
                        const name_2112 = temp_2111[2];
                        return name_2112;
                    }
                } break;

                case 1: {
                    {
                        const v_2113 = temp_2111[2];
                        return '' + v_2113;
                    }
                } break;

                case 2: {
                    {
                        const v_2114 = temp_2111[2];
                        return '' + v_2114;
                    }
                } break;

                case 0: {
                    {
                        const s_2115 = temp_2111[2];
                        {
                            const s_2116 = s_2115.split('');
                            const charsOut_2117 = [];
                            while (s_2116.length > 0) {
                                {
                                    const temp_2118 = s_2116[0];
                                    switch (temp_2118) {
                                    case '\'': {
                                        {
                                            charsOut_2117.push('\\');
                                            charsOut_2117.push('\'');
                                            s_2116.shift();
                                        }
                                    } break;

                                    case '\n': {
                                        {
                                            charsOut_2117.push('\\n');
                                            s_2116.shift();
                                        }
                                    } break;

                                    case '\r': {
                                        {
                                            charsOut_2117.push('\\r');
                                            s_2116.shift();
                                        }
                                    } break;

                                    case '\\': {
                                        {
                                            s_2116.shift();
                                            if (s_2116[0] == '\'') {
                                                charsOut_2117.push('\\');
                                                charsOut_2117.push('\'');
                                                s_2116.shift();
                                            } else {
                                                charsOut_2117.push('\\');
                                            };
                                        }
                                    } break;

                                    default:
                                    {
                                        charsOut_2117.push(s_2116[0]);
                                        s_2116.shift();
                                    }
                                    };
                                };
                            };
                            return '"' + charsOut_2117.join('') + '"';
                        };
                    }
                } break;

                case 3: {
                    return 'true'
                } break;

                case 4: {
                    return 'false'
                } break;

                case 8: {
                    {
                        const expr_2119 = temp_2111[2];
                        const name_2120 = temp_2111[3];
                        return this.printExpression(expr_2119) + '.' + name_2120;
                    }
                } break;

                case 9: {
                    {
                        const e_2121 = temp_2111[2];
                        const args_2122 = temp_2111[3];
                        return this.printExpression(e_2121) + this.printCallArguments(args_2122);
                    }
                } break;

                case 12: {
                    {
                        const name_2123 = temp_2111[2];
                        const expr_2124 = temp_2111[3];
                        const args_2125 = temp_2111[4];
                        const defaults_2126 = temp_2111[5];
                        {
                            if (name_2123 == null) { return 'function' + this.printFunctionArguments(args_2125, defaults_2126) + ' ' + this.printBlock(expr_2124) };
                            return 'function ' + name_2123 + this.printFunctionArguments(args_2125, defaults_2126) + ' ' + this.printBlock(expr_2124);
                        };
                    }
                } break;

                case 13: {
                    {
                        const expr_2127 = temp_2111[2];
                        const args_2128 = temp_2111[3];
                        const defaults_2129 = temp_2111[4];
                        return this.printFunctionArguments(args_2128, defaults_2129) + ' => ' + this.printExpression(expr_2127);
                    }
                } break;

                case 10: {
                    {
                        const e_2130 = temp_2111[2];
                        const args_2131 = temp_2111[3];
                        return 'new ' + this.printExpression(e_2130) + this.printCallArguments(args_2131);
                    }
                } break;

                case 16: {
                    {
                        const el_2132 = temp_2111[2];
                        return ('new ' + (this.listName) + '<dynamic>() {') + (() => {
                            const result_2133 = [];
                            const value_2134 = el_2132;
                            for (const a of $toIterator(value_2134)) result_2133.push(this.printExpression(a));
                            return result_2133;
                        })().join(', ') + '}';
                    }
                } break;

                case 18: {
                    {
                        const op_2135 = temp_2111[2];
                        const postfix_2136 = temp_2111[3];
                        const e_2137 = temp_2111[4];
                        {
                            if (postfix_2136) { return this.printExpression(e_2137) + Token.stringify(op_2135) };
                            return Token.stringify(op_2135) + this.printExpression(e_2137);
                        };
                    }
                } break;

                case 19: {
                    {
                        const nullable_2138 = temp_2111[2];
                        const othewise_2139 = temp_2111[3];
                        return '((' + this.printExpression(nullable_2138) + ') ?? (' + this.printExpression(othewise_2139) + '))';
                    }
                } break;

                case 14: {
                    {
                        const e_2140 = temp_2111[2];
                        return '(' + this.printExpression(e_2140) + ')';
                    }
                } break;

                case 11: {
                    {
                        const a_2141 = temp_2111[2];
                        const op_2142 = temp_2111[3];
                        const b_2143 = temp_2111[4];
                        return this.printExpression(a_2141) + ' ' + Token.stringify(op_2142) + ' ' + this.printExpression(b_2143);
                    }
                } break;

                case 21: {
                    {
                        const expr_2144 = temp_2111[2];
                        const index_2145 = temp_2111[3];
                        return this.printExpression(expr_2144) + '[' + this.printExpression(index_2145) + ']';
                    }
                } break;

                case 20: {
                    {
                        const econd_2146 = temp_2111[2];
                        const eif_2147 = temp_2111[3];
                        const eelse_2148 = temp_2111[4];
                        {
                            let r_2149 = '';
                            try {
                                {
                                    r_2149 += '(' + this.printExpression(econd_2146) + ')?';
                                    r_2149 += ' (' + this.printExpression(eif_2147) + ')';
                                    r_2149 += ' : ' + this.printExpression(eelse_2148);
                                    return r_2149;
                                }
                            } catch (error) {
                                {
                                    console.log('If =>', e_2110, error);
                                    return r_2149 + '<!-- If => error -->';
                                }
                            };
                        };
                    }
                } break;

                case 15: {
                    {
                        const names_2150 = temp_2111[2];
                        const el_2151 = temp_2111[3];
                        return '{' + (() => {
                            const result_2152 = [];
                            const value_2153 = el_2151.length;
                            for (const i of $toIterator(value_2153)) result_2152.push(((names_2150[i]) + ':' + this.printExpression(el_2151[i])));
                            return result_2152;
                        })().join(', ') + '}';
                    }
                } break;

                case 17: {
                    {
                        const keys_2154 = temp_2111[2];
                        const values_2155 = temp_2111[3];
                        {
                            let r_2156 = ('new ' + (this.dictionaryName) + '<dynamic, dynamic>()');
                            if (keys_2154.length == 0) { return r_2156 };
                            r_2156 += ' {\n';
                            r_2156 += (() => {
                                const result_2157 = [];
                                const value_2158 = keys_2154.length;
                                for (const i of $toIterator(value_2158)) result_2157.push(this.tabs + '\t{ ' + this.printExpression(keys_2154[i]) + ', ' + this.printExpression(values_2155[i]) + ' }');
                                return result_2157;
                            })().join(',\n');
                            r_2156 += '\n' + this.tabs + '}';
                            return r_2156;
                        };
                    }
                } break;

                case 22: {
                    {
                        const a_2159 = temp_2111[2];
                        const op_2160 = temp_2111[3];
                        const value_2161 = temp_2111[4];
                        return this.printExpression(a_2159) + ' ' + Token.stringify(op_2160) + '= ' + this.printExpression(value_2161);
                    }
                } break;

                case 23: {
                    {
                        const kind_2162 = temp_2111[2];
                        const args_2163 = temp_2111[3];
                        const s_2164 = temp_2111[4];
                        {
                            const temp_2165 = kind_2162;
                            switch (temp_2165) {
                            case 0: {
                                return '((' + this.printExpression(args_2163[0]) + ') ' + s_2164 + ' (' + this.printExpression(args_2163[1]) + '))'
                            } break;

                            case 1: {
                                return s_2164 + this.printCallArguments(args_2163)
                            } break;

                            case 2: {
                                return '(' + s_2164 + '(' + this.printExpression(args_2163[0]) + '))'
                            } break;

                            case 3: {
                                return '((' + this.printExpression(args_2163[1]) + ')' + s_2164 + ')'
                            } break;
                            };
                        };
                    }
                } break;

                case 25: {
                    return '_'
                } break;

                default:
                console.error('Unknown expression kind:', (((e_2110) || ([])))[0], e_2110)
                };
            };
            return '<!-- undefined -->';
        } };
    }
    GenCSharp.reserved = ['namespace']
    GenCSharp.stringifyProject = (project) => { return new GenCSharp(project).stringify() };
    var GenHaxe = class {
        constructor() {
            this.extension = '.hx'
            this.nativeEnums = true
            this.tabs = '\t'
            this.reserved = ['with', 'var', 'instanceof', 'typeof', 'delete', 'undefined', 'package']
            this.reservedGlobals = ['HexaHaxe']
            this.globalAccessor = 'HexaHaxe.'
        {
        } };
        perform(normalizer_2166) { {
            this.project = normalizer_2166;
            return this.stringify();
        } };
        stringify() { {
            let out_2167 = 'package hexa;\n\nusing StringTools;\n';
            for (const e of $toIterator(this.project.enumsSimple)) {
                out_2167 += '\n' + '@:enum abstract ' + e.name + '(Dynamic) {';
                {
                    let v_2168 = 0;
                    let it_2169 = 0;
                    let at_2170 = e.names.length;
                    while (it_2169 < at_2170) {
                        v_2168 = it_2169;
                        it_2169++;
                        {
                            out_2167 += '\n\t\tvar ' + e.names[v_2168] + ' = ' + this.printExpression(e.values[v_2168]) + ';';
                        };
                    };
                };
                for (const v of $toIterator(e.staticVars)) {
                    const temp_2171 = v;
                    switch (temp_2171 && temp_2171[1]) {
                    case 5: {
                        {
                            const name_2172 = temp_2171[2];
                            const expr_2173 = temp_2171[3];
                            const type_2174 = temp_2171[4];
                            {
                                out_2167 += '\n\t' + e.name + '.' + name_2172;
                                if (expr_2173 != null) { out_2167 += ' = ' + this.printExpression(expr_2173) };
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2175 = temp_2171[2];
                            const expr_2176 = temp_2171[3];
                            const type_2177 = temp_2171[4];
                            {
                                out_2167 += '\n\t' + e.name + '.' + name_2175;
                                out_2167 += ' = ' + this.printExpression(expr_2176);
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(e.staticMethods)) {
                    const temp_2178 = v;
                    switch (temp_2178 && temp_2178[1]) {
                    case 7: {
                        {
                            const name_2179 = temp_2178[2];
                            const expr_2180 = temp_2178[3];
                            const args_2181 = temp_2178[4];
                            const defaults_2182 = temp_2178[5];
                            const types_2183 = temp_2178[6];
                            const returns_2184 = temp_2178[7];
                            {
                                out_2167 += '\n\tpublic static function ' + name_2179;
                                out_2167 += this.printFunctionArguments(args_2181, defaults_2182, types_2183) + this.printType(returns_2184);
                                out_2167 += ' ' + this.printBlock(expr_2180) + ';';
                            };
                        }
                    } break;
                    };
                };
                out_2167 += '\n}\n';
            };
            for (const e of $toIterator(this.project.enumsComplex)) {
                out_2167 += '\n' + 'enum ' + e.name + ' {';
                let i_2185 = 0;
                for (const name of $toIterator(e.names)) {
                    out_2167 += '\n\t' + name;
                    if (e.constructors[i_2185] != null) {
                        out_2167 += '(';
                        out_2167 += (() => {
                            const result_2186 = [];
                            const value_2187 = e.constructors[i_2185].length;
                            for (const k of $toIterator(value_2187)) result_2186.push((() => { return e.constructors[i_2185][k] + this.printNodeAsType(e.types[i_2185][k], ': ') })());
                            return result_2186;
                        })().join(', ');
                        out_2167 += ');';
                    } else out_2167 += ';';
                    i_2185++;
                };
                out_2167 += '\n}\n';
            };
            for (const i of $toIterator(this.project.interfaces)) {
                throw i;
            };
            for (const c of $toIterator(this.project.classes)) {
                if (c.external) {
                    if (c.jsRequire != null) { continue };
                    continue;
                };
                out_2167 += '\n' + 'class ' + c.name;
                {
                    let step_2188 = 0;
                    const params_2189 = c.genericParams;
                    if (step_2188 == 0 && params_2189 != null) { step_2188 = 1 };
                    if (step_2188 == 1) { out_2167 += '<' + params_2189.join(', ') + '>' };
                };
                {
                    let step_2190 = 0;
                    const implement_2191 = c.implement;
                    if (step_2190 == 0 && implement_2191 != null) { step_2190 = 1 };
                    if (step_2190 == 1) { out_2167 += ' implements ' + implement_2191 };
                };
                {
                    let step_2192 = 0;
                    const params_2193 = c.implementParams;
                    if (step_2192 == 0 && params_2193 != null) { step_2192 = 1 };
                    if (step_2192 == 1) { out_2167 += '<' + params_2193.join(', ') + '>' };
                };
                out_2167 += ' {';
                for (const v of $toIterator(c.vars)) {
                    const temp_2194 = v;
                    switch (temp_2194 && temp_2194[1]) {
                    case 5: {
                        {
                            const name_2195 = temp_2194[2];
                            const expr_2196 = temp_2194[3];
                            const type_2197 = temp_2194[4];
                            {
                                out_2167 += '\n\tpublic var ' + name_2195 + this.printType(type_2197);
                                if (expr_2196 != null) { out_2167 += ' = ' + this.printExpression(expr_2196) };
                                out_2167 += ';';
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2198 = temp_2194[2];
                            const expr_2199 = temp_2194[3];
                            const type_2200 = temp_2194[4];
                            out_2167 += '\n\tpublic var ' + name_2198 + this.printType(type_2200) + ' = ' + this.printExpression(expr_2199) + ';';
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.methods)) {
                    const temp_2201 = v;
                    switch (temp_2201 && temp_2201[1]) {
                    case 7: {
                        {
                            const name_2202 = temp_2201[2];
                            const expr_2203 = temp_2201[3];
                            const args_2204 = temp_2201[4];
                            const defaults_2205 = temp_2201[5];
                            const types_2206 = temp_2201[6];
                            const returns_2207 = temp_2201[7];
                            {
                                if (name_2202 == null || name_2202 == 'new') { out_2167 += '\n\tpublic function new' } else out_2167 += '\n\tpublic function ' + name_2202;
                                out_2167 += this.printFunctionArguments(args_2204, defaults_2205, types_2206);
                                if (name_2202 != null && name_2202 != 'new') { out_2167 += this.printType(returns_2207) };
                                out_2167 += ' ' + this.printBlock(expr_2203) + ';';
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.staticVars)) {
                    const temp_2208 = v;
                    switch (temp_2208 && temp_2208[1]) {
                    case 5: {
                        {
                            const name_2209 = temp_2208[2];
                            const expr_2210 = temp_2208[3];
                            const type_2211 = temp_2208[4];
                            {
                                out_2167 += '\n\tpublic static var ' + name_2209 + this.printType(type_2211);
                                if (expr_2210 != null) { out_2167 += ' = ' + this.printExpression(expr_2210) };
                                out_2167 += ';';
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2212 = temp_2208[2];
                            const expr_2213 = temp_2208[3];
                            const type_2214 = temp_2208[4];
                            {
                                out_2167 += '\n\tpublic static var ' + name_2212 + this.printType(type_2214);
                                out_2167 += ' = ' + this.printExpression(expr_2213) + ';';
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.staticMethods)) {
                    const temp_2215 = v;
                    switch (temp_2215 && temp_2215[1]) {
                    case 7: {
                        {
                            const name_2216 = temp_2215[2];
                            const expr_2217 = temp_2215[3];
                            const args_2218 = temp_2215[4];
                            const defaults_2219 = temp_2215[5];
                            const types_2220 = temp_2215[6];
                            const returns_2221 = temp_2215[7];
                            {
                                out_2167 += '\n\tpublic static function ' + name_2216;
                                out_2167 += this.printFunctionArguments(args_2218, defaults_2219, types_2220) + this.printType(returns_2221);
                                out_2167 += ' ' + this.printBlock(expr_2217) + ';';
                            };
                        }
                    } break;
                    };
                };
                out_2167 += '\n}\n';
            };
            const globals = [];
            for (const g of $toIterator(this.project.globalFuncs)) {
                const temp_2222 = g;
                switch (temp_2222 && temp_2222[1]) {
                case 7: {
                    {
                        const name_2223 = temp_2222[2];
                        const expr_2224 = temp_2222[3];
                        const args_2225 = temp_2222[4];
                        const defaults_2226 = temp_2222[5];
                        const types_2227 = temp_2222[6];
                        const returns_2228 = temp_2222[7];
                        {
                            globals.push('\n\tpublic static function ' + name_2223);
                            globals.push(this.printFunctionArguments(args_2225, defaults_2226, types_2227) + this.printType(returns_2228));
                            globals.push(' ' + this.printBlock(expr_2224) + ';');
                        };
                    }
                } break;
                };
            };
            for (const g of $toIterator(this.project.globalVars)) {
                const temp_2229 = g;
                switch (temp_2229 && temp_2229[1]) {
                case 5: {
                    {
                        const name_2230 = temp_2229[2];
                        const expr_2231 = temp_2229[3];
                        const type_2232 = temp_2229[4];
                        {
                            globals.push('\n\tpublic static var ' + name_2230 + this.printType(type_2232));
                            if (expr_2231 != null) { globals.push(' = ' + this.printExpression(expr_2231)) };
                            globals.push(';');
                        };
                    }
                } break;

                case 6: {
                    {
                        const name_2233 = temp_2229[2];
                        const expr_2234 = temp_2229[3];
                        const type_2235 = temp_2229[4];
                        {
                            globals.push('\n\tpublic static var ' + name_2233 + this.printType(type_2235));
                            globals.push(' = ' + this.printExpression(expr_2234) + ';');
                        };
                    }
                } break;
                };
            };
            out_2167 += 'class HexaHaxe {\n\tpublic static function main() {';
            this.tabs = '\t\t\t';
            for (const init of $toIterator(this.project.init)) {
                out_2167 += '\n\t\t{\n\t\t\t';
                out_2167 += this.printStatement(init);
                out_2167 += '\n\t\t}';
            };
            out_2167 += '\n\t}';
            for (const g of $toIterator(globals)) {
                out_2167 += g;
            };
            return out_2167 + '\n}';
        } };
        pushTab() { this.tabs += '\t' };
        popTab() { this.tabs = this.tabs.substring(0, this.tabs.length - 1) };
        printBlock(s_2236) { {
            const temp_2237 = s_2236;
            switch (temp_2237 && temp_2237[1]) {
            case 1: {
                {
                    const el_2238 = temp_2237[2];
                    {
                        if (el_2238.length == 1) { return '{ ' + this.printStatement(el_2238[0]) + '; }' };
                        if (el_2238.length == 0) { return '{}' };
                        return this.printStatement(s_2236);
                    };
                }
            } break;

            default:
            return '{ ' + this.printStatement(s_2236) + '; }'
            };
        } };
        printStatement(s_2239) { {
            {
                const temp_2240 = s_2239;
                switch (temp_2240 && temp_2240[1]) {
                case 0: {
                    {
                        const els_2241 = temp_2240[2];
                        {
                            let r_2242 = '';
                            for (const s of $toIterator(els_2241)) if (s != null) { r_2242 += '\n' + this.tabs + this.printStatement(s) + ';' };
                            return r_2242;
                        };
                    }
                } break;

                case 21: {
                    return 'break'
                } break;

                case 20: {
                    return 'continue'
                } break;

                case 1: {
                    {
                        const el_2243 = temp_2240[2];
                        {
                            this.pushTab();
                            let r_2244 = '{';
                            for (const e of $toIterator(el_2243)) {
                                const temp_2245 = e;
                                switch (temp_2245 && temp_2245[1]) {
                                case null: case undefined: {
                                    {
                                    }
                                } break;

                                case 0: {
                                    {
                                        const els_2246 = temp_2245[2];
                                        for (const s of $toIterator(els_2246)) if (s != null) { r_2244 += '\n' + this.tabs + this.printStatement(s) + ';' };
                                    }
                                } break;

                                default:
                                r_2244 += '\n' + this.tabs + this.printStatement(e) + ';'
                                };
                            };
                            this.popTab();
                            return r_2244 + '\n' + this.tabs + '}';
                        };
                    }
                } break;

                case 3: {
                    {
                        const e_2247 = temp_2240[2];
                        const args_2248 = temp_2240[3];
                        return 'new ' + this.printExpression(e_2247) + this.printCallArguments(args_2248);
                    }
                } break;

                case 6: {
                    {
                        const name_2249 = temp_2240[2];
                        const expr_2250 = temp_2240[3];
                        const type_2251 = temp_2240[4];
                        return 'var ' + name_2249 + this.printType(type_2251) + (expr_2250 == (null)? ('') : ' = ' + this.printExpression(expr_2250));
                    }
                } break;

                case 5: {
                    {
                        const name_2252 = temp_2240[2];
                        const expr_2253 = temp_2240[3];
                        const type_2254 = temp_2240[4];
                        return 'var ' + name_2252 + this.printType(type_2254) + (expr_2253 == (null)? ('') : ' = ' + this.printExpression(expr_2253));
                    }
                } break;

                case 7: {
                    {
                        const name_2255 = temp_2240[2];
                        const expr_2256 = temp_2240[3];
                        const args_2257 = temp_2240[4];
                        const defaults_2258 = temp_2240[5];
                        const types_2259 = temp_2240[6];
                        const returns_2260 = temp_2240[7];
                        return 'function ' + name_2255 + this.printFunctionArguments(args_2257, defaults_2258, types_2259) + this.printType(returns_2260) + ' ' + this.printBlock(expr_2256);
                    }
                } break;

                case 8: {
                    {
                        const e_2261 = temp_2240[2];
                        {
                            if (e_2261 == null) { return 'return' };
                            return 'return ' + this.printExpression(e_2261);
                        };
                    }
                } break;

                case 9: {
                    {
                        const econd_2262 = temp_2240[2];
                        const eif_2263 = temp_2240[3];
                        const eelse_2264 = temp_2240[4];
                        {
                            let r_2265 = 'if (' + this.printExpression(econd_2262) + ') ' + this.printBlock(eif_2263);
                            if (eelse_2264 != null) { r_2265 += ' else ' + this.printStatement(eelse_2264) };
                            return r_2265;
                        };
                    }
                } break;

                case 2: {
                    {
                        const e_2266 = temp_2240[2];
                        const args_2267 = temp_2240[3];
                        return this.printExpression(e_2266) + this.printCallArguments(args_2267);
                    }
                } break;

                case 10: {
                    {
                        const expr_2268 = temp_2240[2];
                        const t_2269 = temp_2240[3];
                        const v_2270 = temp_2240[4];
                        const catches_2271 = temp_2240[5];
                        {
                            let r_2272 = 'try ';
                            r_2272 += this.printStatement(expr_2268);
                            r_2272 += ' catch (' + v_2270[0] + (this.printType(t_2269[0]) || ': Dynamic') + ') ';
                            r_2272 += this.printStatement(catches_2271[0]);
                            return r_2272;
                        };
                    }
                } break;

                case 12: {
                    {
                        const a_2273 = temp_2240[2];
                        const v_2274 = temp_2240[3];
                        return this.printExpression(a_2273) + ' = ' + this.printExpression(v_2274);
                    }
                } break;

                case 11: {
                    {
                        const e_2275 = temp_2240[2];
                        return 'throw ' + this.printExpression(e_2275);
                    }
                } break;

                case 15: {
                    {
                        const name_2276 = temp_2240[2];
                        const over_2277 = temp_2240[3];
                        const by_2278 = temp_2240[4];
                        return 'for (' + name_2276 + ' in ' + this.printExpression(over_2277) + ') ' + this.printStatement(by_2278);
                    }
                } break;

                case 17: {
                    {
                        const e_2279 = temp_2240[2];
                        return this.printExpression(e_2279) + '++';
                    }
                } break;

                case 18: {
                    {
                        const e_2280 = temp_2240[2];
                        return this.printExpression(e_2280) + '--';
                    }
                } break;

                case 16: {
                    {
                        const econd_2281 = temp_2240[2];
                        const e_2282 = temp_2240[3];
                        const pre_2283 = temp_2240[4];
                        {
                            if (pre_2283) { return 'while (' + this.printExpression(econd_2281) + ') ' + this.printStatement(e_2282) };
                            return 'do ' + this.printStatement(e_2282) + ' while (' + this.printExpression(econd_2281) + ')';
                        };
                    }
                } break;

                case 13: {
                    {
                        const a_2284 = temp_2240[2];
                        const op_2285 = temp_2240[3];
                        const value_2286 = temp_2240[4];
                        return this.printExpression(a_2284) + ' ' + Token.stringify(op_2285) + '= ' + this.printExpression(value_2286);
                    }
                } break;

                case 14: {
                    {
                        const expr_2287 = temp_2240[2];
                        const name_2288 = temp_2240[3];
                        return this.printExpression(expr_2287) + '.' + name_2288;
                    }
                } break;

                case 19: {
                    {
                        const expr_2289 = temp_2240[2];
                        const cases_2290 = temp_2240[3];
                        const statements_2291 = temp_2240[4];
                        {
                            let r_2292 = 'switch (' + this.printExpression(expr_2289) + ') {';
                            let hasDefault = false;
                            {
                                let i_2293 = 0;
                                let it_2294 = 0;
                                let at_2295 = cases_2290.length;
                                while (it_2294 < at_2295) {
                                    i_2293 = it_2294;
                                    it_2294++;
                                    if (cases_2290[i_2293].length > 0) {
                                        r_2292 += '\n' + this.tabs + 'case ';
                                        r_2292 += (() => {
                                            const result_2296 = [];
                                            const value_2297 = cases_2290[i_2293];
                                            for (const cc of $toIterator(value_2297)) result_2296.push(this.printExpression(cc));
                                            return result_2296;
                                        })().join(', ');
                                        r_2292 += ': ' + this.printStatement(statements_2291[i_2293]) + ';\n' + this.tabs;
                                    };
                                };
                            };
                            {
                                let i_2298 = 0;
                                let it_2299 = 0;
                                let at_2300 = cases_2290.length;
                                while (it_2299 < at_2300) {
                                    i_2298 = it_2299;
                                    it_2299++;
                                    for (const cc of $toIterator(cases_2290[i_2298])) {
                                        const temp_2301 = cc;
                                        switch (temp_2301 && temp_2301[1]) {
                                        case 25: {
                                            hasDefault = true
                                        } break;
                                        };
                                    };
                                };
                            };
                            if (!hasDefault) {
                                let i_2302 = 0;
                                let it_2303 = 0;
                                let at_2304 = cases_2290.length;
                                while (it_2303 < at_2304) {
                                    i_2302 = it_2303;
                                    it_2303++;
                                    if (cases_2290[i_2302].length == 0) {
                                        r_2292 += '\n' + this.tabs + 'default: ' + this.printStatement(statements_2291[i_2302]) + ';';
                                        r_2292 += '\n' + this.tabs;
                                        hasDefault = true;
                                    };
                                };
                            };
                            if (!hasDefault) {
                                r_2292 += '\n' + this.tabs + 'default: {};';
                                r_2292 += '\n' + this.tabs;
                            };
                            return r_2292 + '}';
                        };
                    }
                } break;

                default:
                console.error('Unknown statement kind:', (((s_2239) || ([])))[0])
                };
            };
            return '<!-- undefined -->';
        } };
        printCallArguments(args_2305) { return '(' + (() => {
            const result_2306 = [];
            const value_2307 = args_2305;
            for (const a of $toIterator(value_2307)) result_2306.push(this.printExpression(a));
            return result_2306;
        })().join(', ') + ')' };
        printFunctionArguments(args_2308, defaults_2309, types_2310) { return '(' + (() => {
            const result_2311 = [];
            const value_2312 = args_2308.length;
            for (const a of $toIterator(value_2312)) result_2311.push(args_2308[a] + this.printType(types_2310[a]) + (((defaults_2309 != null && defaults_2309[a] != null))? (' = ' + this.printExpression(defaults_2309[a])) : ''));
            return result_2311;
        })().join(', ') + ')' };
        stringType(t_2313, prefix_2314) { {
            const prefix_2315 = (prefix_2314)? (': ') : '';
            if (t_2313 == null) { return '' };
            if (t_2313 == null) { return prefix_2315 + 'Dynamic' };
            {
                const temp_2316 = t_2313;
                switch (temp_2316 && temp_2316[1]) {
                case 2: {
                    {
                        const name_2317 = temp_2316[2];
                        const params_2318 = temp_2316[3];
                        {
                            if (name_2317 == 'Buffer') { return prefix_2315 + name_2317 };
                            return prefix_2315 + name_2317 + '<' + (() => {
                                const result_2319 = [];
                                const value_2320 = params_2318;
                                for (const param of $toIterator(value_2320)) result_2319.push(this.stringType(param, false));
                                return result_2319;
                            })().join(', ') + '>';
                        };
                    }
                } break;

                case 1: {
                    {
                        const name_2321 = temp_2316[2];
                        {
                            if (name_2321 == 'Any') { return prefix_2315 + 'Dynamic' };
                            return prefix_2315 + name_2321;
                        };
                    }
                } break;

                case 5: {
                    return prefix_2315 + '{}'
                } break;

                case 0: {
                    {
                        const t_2322 = temp_2316[2];
                        return prefix_2315 + 'Null<' + this.stringType(t_2322, false) + '>';
                    }
                } break;
                };
            };
            return prefix_2315 + 'Dynamic';
        } };
        printType(t_2323) { {
            const type_2324 = this.stringType(t_2323, true);
            if (type_2324 == ': Array<Dynamic>') { return '' };
            return type_2324;
        } };
        printNodeAsType(t_2325, prefix_2326) { {
            const temp_2327 = t_2325;
            switch (temp_2327 && temp_2327[1]) {
            case 1: {
                {
                    const name_2328 = temp_2327[2];
                    return prefix_2326 + name_2328;
                }
            } break;

            case 31: {
                {
                    const el_2329 = temp_2327[2];
                    return prefix_2326 + 'Array<' + this.printNodeAsType(el_2329[0], '') + '>';
                }
            } break;

            case null: case undefined: {
                return prefix_2326 + 'Dynamic'
            } break;

            default:
            return prefix_2326 + 'Dynamic'
            };
        } };
        printExpression(e_2330) { {
            {
                const temp_2331 = e_2330;
                switch (temp_2331 && temp_2331[1]) {
                case 6: {
                    return 'null'
                } break;

                case 7: {
                    return 'this'
                } break;

                case 5: {
                    {
                        const name_2332 = temp_2331[2];
                        return name_2332;
                    }
                } break;

                case 1: {
                    {
                        const v_2333 = temp_2331[2];
                        return '' + v_2333;
                    }
                } break;

                case 2: {
                    {
                        const v_2334 = temp_2331[2];
                        return '' + v_2334;
                    }
                } break;

                case 0: {
                    {
                        const s_2335 = temp_2331[2];
                        {
                            const s_2336 = s_2335.split('');
                            const charsOut_2337 = [];
                            while (s_2336.length > 0) {
                                {
                                    const temp_2338 = s_2336[0];
                                    switch (temp_2338) {
                                    case '$': {
                                        {
                                            charsOut_2337.push('$');
                                            charsOut_2337.push('$');
                                            s_2336.shift();
                                        }
                                    } break;

                                    case '\'': {
                                        {
                                            charsOut_2337.push('\\');
                                            charsOut_2337.push('\'');
                                            s_2336.shift();
                                        }
                                    } break;

                                    case '\n': {
                                        {
                                            charsOut_2337.push('\\n');
                                            s_2336.shift();
                                        }
                                    } break;

                                    case '\r': {
                                        {
                                            charsOut_2337.push('\\r');
                                            s_2336.shift();
                                        }
                                    } break;

                                    case '\\': {
                                        {
                                            s_2336.shift();
                                            if (s_2336[0] == '\'') {
                                                charsOut_2337.push('\\');
                                                charsOut_2337.push('\'');
                                                s_2336.shift();
                                            } else {
                                                charsOut_2337.push('\\');
                                            };
                                        }
                                    } break;

                                    default:
                                    {
                                        charsOut_2337.push(s_2336[0]);
                                        s_2336.shift();
                                    }
                                    };
                                };
                            };
                            return '\'' + charsOut_2337.join('') + '\'';
                        };
                    }
                } break;

                case 3: {
                    return 'true'
                } break;

                case 4: {
                    return 'false'
                } break;

                case 8: {
                    {
                        const expr_2339 = temp_2331[2];
                        const name_2340 = temp_2331[3];
                        return this.printExpression(expr_2339) + '.' + name_2340;
                    }
                } break;

                case 9: {
                    {
                        const e_2341 = temp_2331[2];
                        const args_2342 = temp_2331[3];
                        return this.printExpression(e_2341) + this.printCallArguments(args_2342);
                    }
                } break;

                case 12: {
                    {
                        const name_2343 = temp_2331[2];
                        const expr_2344 = temp_2331[3];
                        const args_2345 = temp_2331[4];
                        const defaults_2346 = temp_2331[5];
                        const types_2347 = temp_2331[6];
                        const returns_2348 = temp_2331[7];
                        {
                            const name_2349 = ((name_2343) || (''));
                            return 'function ' + name_2349 + this.printFunctionArguments(args_2345, defaults_2346, types_2347) + this.printType(returns_2348) + ' ' + this.printBlock(expr_2344);
                        };
                    }
                } break;

                case 13: {
                    {
                        const expr_2350 = temp_2331[2];
                        const args_2351 = temp_2331[3];
                        const defaults_2352 = temp_2331[4];
                        const types_2353 = temp_2331[5];
                        const returns_2354 = temp_2331[6];
                        return 'function ' + this.printFunctionArguments(args_2351, defaults_2352, types_2353) + this.printType(returns_2354) + ' return ' + this.printExpression(expr_2350);
                    }
                } break;

                case 10: {
                    {
                        const e_2355 = temp_2331[2];
                        const args_2356 = temp_2331[3];
                        return 'new ' + this.printExpression(e_2355) + this.printCallArguments(args_2356);
                    }
                } break;

                case 16: {
                    {
                        const el_2357 = temp_2331[2];
                        return '[' + (() => {
                            const result_2358 = [];
                            const value_2359 = el_2357;
                            for (const a of $toIterator(value_2359)) result_2358.push(this.printExpression(a));
                            return result_2358;
                        })().join(', ') + ']';
                    }
                } break;

                case 18: {
                    {
                        const op_2360 = temp_2331[2];
                        const postfix_2361 = temp_2331[3];
                        const e_2362 = temp_2331[4];
                        {
                            if (postfix_2361) { return this.printExpression(e_2362) + Token.stringify(op_2360) };
                            return Token.stringify(op_2360) + this.printExpression(e_2362);
                        };
                    }
                } break;

                case 19: {
                    {
                        const nullable_2363 = temp_2331[2];
                        const othewise_2364 = temp_2331[3];
                        return '(function(){var _ = ' + this.printExpression(nullable_2363) + '; if (_ != null) return _; return ' + this.printExpression(othewise_2364) + ';}())';
                    }
                } break;

                case 14: {
                    {
                        const e_2365 = temp_2331[2];
                        return '(' + this.printExpression(e_2365) + ')';
                    }
                } break;

                case 11: {
                    {
                        const a_2366 = temp_2331[2];
                        const op_2367 = temp_2331[3];
                        const b_2368 = temp_2331[4];
                        return this.printExpression(a_2366) + ' ' + Token.stringify(op_2367) + ' ' + this.printExpression(b_2368);
                    }
                } break;

                case 21: {
                    {
                        const expr_2369 = temp_2331[2];
                        const index_2370 = temp_2331[3];
                        return this.printExpression(expr_2369) + '[' + this.printExpression(index_2370) + ']';
                    }
                } break;

                case 20: {
                    {
                        const econd_2371 = temp_2331[2];
                        const eif_2372 = temp_2331[3];
                        const eelse_2373 = temp_2331[4];
                        {
                            let r_2374 = '';
                            r_2374 += '(' + this.printExpression(econd_2371) + ')?';
                            r_2374 += ' (' + this.printExpression(eif_2372) + ')';
                            r_2374 += ' : ' + this.printExpression(eelse_2373);
                            return r_2374;
                        };
                    }
                } break;

                case 15: {
                    {
                        const names_2375 = temp_2331[2];
                        const el_2376 = temp_2331[3];
                        return '{' + (() => {
                            const result_2377 = [];
                            const value_2378 = el_2376.length;
                            for (const i of $toIterator(value_2378)) result_2377.push(((names_2375[i]) + ':' + this.printExpression(el_2376[i])));
                            return result_2377;
                        })().join(', ') + '}';
                    }
                } break;

                case 17: {
                    {
                        const keys_2379 = temp_2331[2];
                        const values_2380 = temp_2331[3];
                        {
                            if (keys_2379.length == 0) { return 'new Map()' };
                            return '[' + (() => {
                                const result_2381 = [];
                                const value_2382 = keys_2379.length;
                                for (const i of $toIterator(value_2382)) result_2381.push(this.printExpression(keys_2379[i]) + ' => ' + this.printExpression(values_2380[i]));
                                return result_2381;
                            })().join(', ') + ']';
                        };
                    }
                } break;

                case 22: {
                    {
                        const a_2383 = temp_2331[2];
                        const op_2384 = temp_2331[3];
                        const value_2385 = temp_2331[4];
                        return this.printExpression(a_2383) + ' ' + Token.stringify(op_2384) + '= ' + this.printExpression(value_2385);
                    }
                } break;

                case 23: {
                    {
                        const kind_2386 = temp_2331[2];
                        const args_2387 = temp_2331[3];
                        const s_2388 = temp_2331[4];
                        {
                            const temp_2389 = kind_2386;
                            switch (temp_2389) {
                            case 0: {
                                return '((' + this.printExpression(args_2387[0]) + ') ' + s_2388 + ' (' + this.printExpression(args_2387[1]) + '))'
                            } break;

                            case 1: {
                                return s_2388 + this.printCallArguments(args_2387)
                            } break;

                            case 2: {
                                return '(' + s_2388 + '(' + this.printExpression(args_2387[0]) + '))'
                            } break;

                            case 3: {
                                return '((' + this.printExpression(args_2387[1]) + ')' + s_2388 + ')'
                            } break;
                            };
                        };
                    }
                } break;

                case 25: {
                    return '_'
                } break;

                default:
                console.error('Unknown expression kind:', (((e_2330) || ([])))[0], e_2330)
                };
            };
            return '<!-- undefined -->';
        } };
    }
    GenHaxe.spawn = () => { return new GenHaxe() };
    var GenHexa = class {
        constructor() {
            this.extension = '.hexa'
            this.nativeEnums = true
            this.tabs = '\t'
            this.reserved = []
            this.globalAccessor = ''
        {
        } };
        perform(normalizer_2390) { {
            this.project = normalizer_2390;
            return this.stringify();
        } };
        stringify() { {
            let out_2391 = 'module {';
            for (const e of $toIterator(this.project.enumsSimple)) {
                out_2391 += '\n\t' + 'enum ' + e.name + ' : Any {';
                {
                    let v_2392 = 0;
                    let it_2393 = 0;
                    let at_2394 = e.names.length;
                    while (it_2393 < at_2394) {
                        v_2392 = it_2393;
                        it_2393++;
                        {
                            out_2391 += '\n\t\t' + e.names[v_2392] + ' = ' + this.printExpression(e.values[v_2392]);
                        };
                    };
                };
                for (const v of $toIterator(e.staticVars)) {
                    const temp_2395 = v;
                    switch (temp_2395 && temp_2395[1]) {
                    case 5: {
                        {
                            const name_2396 = temp_2395[2];
                            const expr_2397 = temp_2395[3];
                            {
                                out_2391 += '\n\t' + e.name + '.' + name_2396;
                                if (expr_2397 != null) { out_2391 += ' = ' + this.printExpression(expr_2397) };
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2398 = temp_2395[2];
                            const expr_2399 = temp_2395[3];
                            {
                                out_2391 += '\n\t' + e.name + '.' + name_2398;
                                out_2391 += ' = ' + this.printExpression(expr_2399);
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(e.staticMethods)) {
                    const temp_2400 = v;
                    switch (temp_2400 && temp_2400[1]) {
                    case 7: {
                        {
                            const name_2401 = temp_2400[2];
                            const expr_2402 = temp_2400[3];
                            const args_2403 = temp_2400[4];
                            const defaults_2404 = temp_2400[5];
                            {
                                out_2391 += '\n\tstatic function ' + name_2401;
                                out_2391 += this.printFunctionArguments(args_2403, defaults_2404) + ' ' + this.printStatement(expr_2402);
                            };
                        }
                    } break;
                    };
                };
                out_2391 += '\n\t}';
            };
            for (const e of $toIterator(this.project.enumsComplex)) {
                out_2391 += '\n\t' + 'enum ' + e.name + ' {';
                let i_2405 = 0;
                for (const name of $toIterator(e.names)) {
                    out_2391 += '\n\t\t' + name;
                    if (e.constructors[i_2405] != null) {
                        out_2391 += '(';
                        out_2391 += (() => {
                            const result_2406 = [];
                            const value_2407 = e.constructors[i_2405].length;
                            for (const k of $toIterator(value_2407)) result_2406.push((() => { return e.constructors[i_2405][k] + this.printNodeAsType(e.types[i_2405][k], ': ') })());
                            return result_2406;
                        })().join(', ');
                        out_2391 += ')';
                    };
                    i_2405++;
                };
                out_2391 += '\n\t}';
            };
            for (const i of $toIterator(this.project.interfaces)) {
                throw i;
            };
            for (const c of $toIterator(this.project.classes)) {
                if (c.external) {
                    if (c.jsRequire != null) {
                        out_2391 += '\n\t' + '// @require("' + c.jsRequire + '") declare class ' + c.name + ' {}';
                        continue;
                    };
                    out_2391 += '\n\t// ';
                    {
                        let step_2408 = 0;
                        const jsNative_2409 = c.jsNative;
                        if (step_2408 == 0 && jsNative_2409 != null) { step_2408 = 1 };
                        if (step_2408 == 1) { out_2391 += '@require("' + jsNative_2409 + '") ' };
                    };
                    out_2391 += 'declare class ' + c.name + ' {}';
                    continue;
                };
                out_2391 += '\n\t' + 'class ' + c.name + ' {';
                this.pushTab();
                for (const v of $toIterator(c.vars)) {
                    const temp_2410 = v;
                    switch (temp_2410 && temp_2410[1]) {
                    case 5: {
                        {
                            const name_2411 = temp_2410[2];
                            const expr_2412 = temp_2410[3];
                            const type_2413 = temp_2410[4];
                            {
                                out_2391 += '\n\t\tvar ' + name_2411 + this.printType(type_2413, ': ');
                                if (expr_2412 != null) { out_2391 += ' = ' + this.printExpression(expr_2412) };
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2414 = temp_2410[2];
                            const expr_2415 = temp_2410[3];
                            out_2391 += '\n\t\tlet ' + name_2414 + ' = ' + this.printExpression(expr_2415);
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.methods)) {
                    const temp_2416 = v;
                    switch (temp_2416 && temp_2416[1]) {
                    case 7: {
                        {
                            const name_2417 = temp_2416[2];
                            const expr_2418 = temp_2416[3];
                            const args_2419 = temp_2416[4];
                            {
                                if (name_2417 == null || name_2417 == 'new') { out_2391 += '\n\t\tnew ' } else out_2391 += '\n\t\tfunction ' + name_2417;
                                out_2391 += '(' + args_2419.join(', ') + ') ';
                                out_2391 += this.printStatement(expr_2418);
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.staticVars)) {
                    const temp_2420 = v;
                    switch (temp_2420 && temp_2420[1]) {
                    case 5: {
                        {
                            const name_2421 = temp_2420[2];
                            const expr_2422 = temp_2420[3];
                            {
                                out_2391 += '\n\t\tstatic var ' + name_2421;
                                if (expr_2422 != null) { out_2391 += ' = ' + this.printExpression(expr_2422) };
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2423 = temp_2420[2];
                            const expr_2424 = temp_2420[3];
                            {
                                out_2391 += '\n\t\tstatic let ' + name_2423;
                                out_2391 += ' = ' + this.printExpression(expr_2424);
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.staticMethods)) {
                    const temp_2425 = v;
                    switch (temp_2425 && temp_2425[1]) {
                    case 7: {
                        {
                            const name_2426 = temp_2425[2];
                            const expr_2427 = temp_2425[3];
                            const args_2428 = temp_2425[4];
                            const defaults_2429 = temp_2425[5];
                            {
                                out_2391 += '\n\t\tstatic function ' + name_2426;
                                out_2391 += this.printFunctionArguments(args_2428, defaults_2429) + ' ' + this.printStatement(expr_2427);
                            };
                        }
                    } break;
                    };
                };
                this.popTab();
                out_2391 += '\n\t}';
            };
            for (const g of $toIterator(this.project.globalFuncs)) {
                throw g;
            };
            for (const g of $toIterator(this.project.globalVars)) {
                throw g;
            };
            out_2391 += '\n}\n';
            for (const init of $toIterator(this.project.init)) {
                out_2391 += '\n{\n\t';
                out_2391 += this.printStatement(init);
                out_2391 += '\n}';
            };
            return out_2391 + '\n';
        } };
        pushTab() { this.tabs += '\t' };
        popTab() { this.tabs = this.tabs.substring(0, this.tabs.length - 1) };
        printBlock(s_2430) { return this.printStatement(s_2430) };
        printStatement(s_2431) { {
            {
                const temp_2432 = s_2431;
                switch (temp_2432 && temp_2432[1]) {
                case 0: {
                    {
                        const els_2433 = temp_2432[2];
                        {
                            let r_2434 = '';
                            for (const s of $toIterator(els_2433)) if (s != null) { r_2434 += '\n' + this.tabs + this.printStatement(s) };
                            return r_2434;
                        };
                    }
                } break;

                case 21: {
                    return 'break'
                } break;

                case 20: {
                    return 'continue'
                } break;

                case 1: {
                    {
                        const el_2435 = temp_2432[2];
                        {
                            this.pushTab();
                            let r_2436 = '{';
                            for (const e of $toIterator(el_2435)) {
                                const temp_2437 = e;
                                switch (temp_2437 && temp_2437[1]) {
                                case null: case undefined: {
                                    {
                                    }
                                } break;

                                case 0: {
                                    {
                                        const els_2438 = temp_2437[2];
                                        for (const s of $toIterator(els_2438)) if (s != null) { r_2436 += '\n' + this.tabs + this.printStatement(s) };
                                    }
                                } break;

                                default:
                                r_2436 += '\n' + this.tabs + this.printStatement(e)
                                };
                            };
                            this.popTab();
                            return r_2436 + '\n' + this.tabs + '}';
                        };
                    }
                } break;

                case 3: {
                    {
                        const e_2439 = temp_2432[2];
                        const args_2440 = temp_2432[3];
                        return 'new ' + this.printExpression(e_2439) + this.printCallArguments(args_2440);
                    }
                } break;

                case 6: {
                    {
                        const name_2441 = temp_2432[2];
                        const expr_2442 = temp_2432[3];
                        return 'let ' + name_2441 + (expr_2442 == (null)? ('') : ' = ' + this.printExpression(expr_2442));
                    }
                } break;

                case 5: {
                    {
                        const name_2443 = temp_2432[2];
                        const expr_2444 = temp_2432[3];
                        return 'var ' + name_2443 + (expr_2444 == (null)? ('') : ' = ' + this.printExpression(expr_2444));
                    }
                } break;

                case 7: {
                    {
                        const name_2445 = temp_2432[2];
                        const expr_2446 = temp_2432[3];
                        const args_2447 = temp_2432[4];
                        const defaults_2448 = temp_2432[5];
                        return 'function ' + name_2445 + this.printFunctionArguments(args_2447, defaults_2448) + ' ' + this.printBlock(expr_2446);
                    }
                } break;

                case 8: {
                    {
                        const e_2449 = temp_2432[2];
                        {
                            if (e_2449 == null) { return 'return' };
                            return 'return ' + this.printExpression(e_2449);
                        };
                    }
                } break;

                case 9: {
                    {
                        const econd_2450 = temp_2432[2];
                        const eif_2451 = temp_2432[3];
                        const eelse_2452 = temp_2432[4];
                        {
                            let r_2453 = 'if (' + this.printExpression(econd_2450) + ') ' + this.printBlock(eif_2451);
                            if (eelse_2452 != null) { r_2453 += ' else ' + this.printStatement(eelse_2452) };
                            return r_2453;
                        };
                    }
                } break;

                case 2: {
                    {
                        const e_2454 = temp_2432[2];
                        const args_2455 = temp_2432[3];
                        return this.printExpression(e_2454) + this.printCallArguments(args_2455);
                    }
                } break;

                case 10: {
                    {
                        const expr_2456 = temp_2432[2];
                        const t_2457 = temp_2432[3];
                        const v_2458 = temp_2432[4];
                        const catches_2459 = temp_2432[5];
                        {
                            let r_2460 = 'try ';
                            r_2460 += this.printStatement(expr_2456);
                            r_2460 += ' catch (' + v_2458[0] + ': Any) ';
                            r_2460 += this.printStatement(catches_2459[0]);
                            return r_2460;
                        };
                    }
                } break;

                case 12: {
                    {
                        const a_2461 = temp_2432[2];
                        const v_2462 = temp_2432[3];
                        return this.printExpression(a_2461) + ' = ' + this.printExpression(v_2462);
                    }
                } break;

                case 11: {
                    {
                        const e_2463 = temp_2432[2];
                        return 'throw ' + this.printExpression(e_2463);
                    }
                } break;

                case 15: {
                    {
                        const name_2464 = temp_2432[2];
                        const over_2465 = temp_2432[3];
                        const by_2466 = temp_2432[4];
                        return 'for (' + name_2464 + ' in ' + this.printExpression(over_2465) + ') ' + this.printStatement(by_2466);
                    }
                } break;

                case 17: {
                    {
                        const e_2467 = temp_2432[2];
                        return this.printExpression(e_2467) + '++';
                    }
                } break;

                case 18: {
                    {
                        const e_2468 = temp_2432[2];
                        return this.printExpression(e_2468) + '--';
                    }
                } break;

                case 16: {
                    {
                        const econd_2469 = temp_2432[2];
                        const e_2470 = temp_2432[3];
                        const pre_2471 = temp_2432[4];
                        {
                            if (pre_2471) { return 'while (' + this.printExpression(econd_2469) + ') ' + this.printStatement(e_2470) };
                            return 'do {' + this.printStatement(e_2470) + '} while (' + this.printExpression(econd_2469) + ')';
                        };
                    }
                } break;

                case 13: {
                    {
                        const a_2472 = temp_2432[2];
                        const op_2473 = temp_2432[3];
                        const value_2474 = temp_2432[4];
                        return this.printExpression(a_2472) + ' ' + Token.stringify(op_2473) + '= ' + this.printExpression(value_2474);
                    }
                } break;

                case 14: {
                    {
                        const expr_2475 = temp_2432[2];
                        const name_2476 = temp_2432[3];
                        return this.printExpression(expr_2475) + '.' + name_2476;
                    }
                } break;

                case 19: {
                    {
                        const expr_2477 = temp_2432[2];
                        const cases_2478 = temp_2432[3];
                        const statements_2479 = temp_2432[4];
                        {
                            let r_2480 = 'switch (' + this.printExpression(expr_2477) + ') {';
                            {
                                let i_2481 = 0;
                                let it_2482 = 0;
                                let at_2483 = cases_2478.length;
                                while (it_2482 < at_2483) {
                                    i_2481 = it_2482;
                                    it_2482++;
                                    if (cases_2478[i_2481].length > 0) {
                                        r_2480 += '\n' + this.tabs;
                                        for (const cc of $toIterator(cases_2478[i_2481])) r_2480 += 'case ' + this.printExpression(cc) + ': ';
                                        this.pushTab();
                                        r_2480 += this.printStatement(statements_2479[i_2481]);
                                        this.popTab();
                                        r_2480 += '\n' + this.tabs;
                                    };
                                };
                            };
                            {
                                let i_2484 = 0;
                                let it_2485 = 0;
                                let at_2486 = cases_2478.length;
                                while (it_2485 < at_2486) {
                                    i_2484 = it_2485;
                                    it_2485++;
                                    if (cases_2478[i_2484].length == 0) {
                                        r_2480 += '\n' + this.tabs + 'case _: ';
                                        r_2480 += '\n' + this.tabs;
                                        r_2480 += this.printStatement(statements_2479[i_2484]);
                                        r_2480 += '\n' + this.tabs;
                                    };
                                };
                            };
                            return r_2480 + '}';
                        };
                    }
                } break;

                default:
                console.error('Unknown statement kind:', (((s_2431) || ([])))[0])
                };
            };
            return '<!-- undefined -->';
        } };
        printCallArguments(args_2487) { return '(' + (() => {
            const result_2488 = [];
            const value_2489 = args_2487;
            for (const a of $toIterator(value_2489)) result_2488.push(this.printExpression(a));
            return result_2488;
        })().join(', ') + ')' };
        printFunctionArguments(args_2490, defaults_2491) { return '(' + (() => {
            const result_2492 = [];
            const value_2493 = args_2490.length;
            for (const a of $toIterator(value_2493)) result_2492.push(args_2490[a] + (((defaults_2491 != null && defaults_2491[a] != null))? (' = ' + this.printExpression(defaults_2491[a])) : ''));
            return result_2492;
        })().join(', ') + ')' };
        printType(t_2494, prefix_2495) { {
            const prefix_2496 = (prefix_2495)? (': ') : '';
            if (t_2494 == null) { return '' };
            {
                const temp_2497 = t_2494;
                switch (temp_2497 && temp_2497[1]) {
                case 2: {
                    {
                        const name_2498 = temp_2497[2];
                        const params_2499 = temp_2497[3];
                        return prefix_2496 + name_2498 + '<' + (() => {
                            const result_2500 = [];
                            const value_2501 = params_2499;
                            for (const param of $toIterator(value_2501)) result_2500.push(this.printType(param, false));
                            return result_2500;
                        })().join(', ') + '>';
                    }
                } break;

                case 1: {
                    {
                        const name_2502 = temp_2497[2];
                        return prefix_2496 + name_2502;
                    }
                } break;

                case 5: {
                    return prefix_2496 + '{:}'
                } break;

                case 0: {
                    {
                        const t_2503 = temp_2497[2];
                        return prefix_2496 + this.printType(t_2503, false) + '?';
                    }
                } break;
                };
            };
            return prefix_2496 + 'Any';
        } };
        printNodeAsType(t_2504, prefix_2505) { {
            const temp_2506 = t_2504;
            switch (temp_2506 && temp_2506[1]) {
            case 1: {
                {
                    const name_2507 = temp_2506[2];
                    return prefix_2505 + name_2507;
                }
            } break;

            case 31: {
                {
                    const el_2508 = temp_2506[2];
                    return prefix_2505 + '[' + this.printNodeAsType(el_2508[0], '') + ']';
                }
            } break;

            case null: case undefined: {
                return prefix_2505 + 'Any'
            } break;

            default:
            return prefix_2505 + 'Any'
            };
        } };
        printExpression(e_2509) { {
            {
                const temp_2510 = e_2509;
                switch (temp_2510 && temp_2510[1]) {
                case 6: {
                    return 'null'
                } break;

                case 7: {
                    return 'this'
                } break;

                case 5: {
                    {
                        const name_2511 = temp_2510[2];
                        return name_2511;
                    }
                } break;

                case 1: {
                    {
                        const v_2512 = temp_2510[2];
                        return '' + v_2512;
                    }
                } break;

                case 2: {
                    {
                        const v_2513 = temp_2510[2];
                        return '' + v_2513;
                    }
                } break;

                case 0: {
                    {
                        const s_2514 = temp_2510[2];
                        {
                            const s_2515 = s_2514.split('');
                            const charsOut_2516 = [];
                            while (s_2515.length > 0) {
                                {
                                    const temp_2517 = s_2515[0];
                                    switch (temp_2517) {
                                    case '\'': {
                                        {
                                            charsOut_2516.push('\\');
                                            charsOut_2516.push('\'');
                                            s_2515.shift();
                                        }
                                    } break;

                                    case '\n': {
                                        {
                                            charsOut_2516.push('\\n');
                                            s_2515.shift();
                                        }
                                    } break;

                                    case '\r': {
                                        {
                                            charsOut_2516.push('\\r');
                                            s_2515.shift();
                                        }
                                    } break;

                                    case '\\': {
                                        {
                                            s_2515.shift();
                                            if (s_2515[0] == '\'') {
                                                charsOut_2516.push('\\');
                                                charsOut_2516.push('\'');
                                                s_2515.shift();
                                            } else {
                                                charsOut_2516.push('\\');
                                            };
                                        }
                                    } break;

                                    default:
                                    {
                                        charsOut_2516.push(s_2515[0]);
                                        s_2515.shift();
                                    }
                                    };
                                };
                            };
                            return '\'' + charsOut_2516.join('') + '\'';
                        };
                    }
                } break;

                case 3: {
                    return 'true'
                } break;

                case 4: {
                    return 'false'
                } break;

                case 8: {
                    {
                        const expr_2518 = temp_2510[2];
                        const name_2519 = temp_2510[3];
                        return this.printExpression(expr_2518) + '.' + name_2519;
                    }
                } break;

                case 9: {
                    {
                        const e_2520 = temp_2510[2];
                        const args_2521 = temp_2510[3];
                        return this.printExpression(e_2520) + this.printCallArguments(args_2521);
                    }
                } break;

                case 12: {
                    {
                        const name_2522 = temp_2510[2];
                        const expr_2523 = temp_2510[3];
                        const args_2524 = temp_2510[4];
                        const defaults_2525 = temp_2510[5];
                        {
                            if (name_2522 == null) { return 'function' + this.printFunctionArguments(args_2524, defaults_2525) + ' ' + this.printBlock(expr_2523) };
                            return 'function ' + name_2522 + this.printFunctionArguments(args_2524, defaults_2525) + ' ' + this.printBlock(expr_2523);
                        };
                    }
                } break;

                case 13: {
                    {
                        const expr_2526 = temp_2510[2];
                        const args_2527 = temp_2510[3];
                        const defaults_2528 = temp_2510[4];
                        return this.printFunctionArguments(args_2527, defaults_2528) + ' => ' + this.printExpression(expr_2526);
                    }
                } break;

                case 10: {
                    {
                        const e_2529 = temp_2510[2];
                        const args_2530 = temp_2510[3];
                        return 'new ' + this.printExpression(e_2529) + this.printCallArguments(args_2530);
                    }
                } break;

                case 16: {
                    {
                        const el_2531 = temp_2510[2];
                        return '[' + (() => {
                            const result_2532 = [];
                            const value_2533 = el_2531;
                            for (const a of $toIterator(value_2533)) result_2532.push(this.printExpression(a));
                            return result_2532;
                        })().join(', ') + ']';
                    }
                } break;

                case 18: {
                    {
                        const op_2534 = temp_2510[2];
                        const postfix_2535 = temp_2510[3];
                        const e_2536 = temp_2510[4];
                        {
                            if (postfix_2535) { return this.printExpression(e_2536) + Token.stringify(op_2534) };
                            return Token.stringify(op_2534) + this.printExpression(e_2536);
                        };
                    }
                } break;

                case 19: {
                    {
                        const nullable_2537 = temp_2510[2];
                        const othewise_2538 = temp_2510[3];
                        return '((' + this.printExpression(nullable_2537) + ') ?? (' + this.printExpression(othewise_2538) + '))';
                    }
                } break;

                case 14: {
                    {
                        const e_2539 = temp_2510[2];
                        return '(' + this.printExpression(e_2539) + ')';
                    }
                } break;

                case 11: {
                    {
                        const a_2540 = temp_2510[2];
                        const op_2541 = temp_2510[3];
                        const b_2542 = temp_2510[4];
                        return this.printExpression(a_2540) + ' ' + Token.stringify(op_2541) + ' ' + this.printExpression(b_2542);
                    }
                } break;

                case 21: {
                    {
                        const expr_2543 = temp_2510[2];
                        const index_2544 = temp_2510[3];
                        return this.printExpression(expr_2543) + '[' + this.printExpression(index_2544) + ']';
                    }
                } break;

                case 20: {
                    {
                        const econd_2545 = temp_2510[2];
                        const eif_2546 = temp_2510[3];
                        const eelse_2547 = temp_2510[4];
                        {
                            let r_2548 = '';
                            try {
                                {
                                    r_2548 += '(' + this.printExpression(econd_2545) + ')?';
                                    r_2548 += ' (' + this.printExpression(eif_2546) + ')';
                                    r_2548 += ' : ' + this.printExpression(eelse_2547);
                                    return r_2548;
                                }
                            } catch (error) {
                                {
                                    console.log('If =>', e_2509, error);
                                    return r_2548 + '<!-- If => error -->';
                                }
                            };
                        };
                    }
                } break;

                case 15: {
                    {
                        const names_2549 = temp_2510[2];
                        const el_2550 = temp_2510[3];
                        {
                            if (el_2550.length == 0) { return '{:}' };
                            return '{' + (() => {
                                const result_2551 = [];
                                const value_2552 = el_2550.length;
                                for (const i of $toIterator(value_2552)) result_2551.push(((names_2549[i]) + ':' + this.printExpression(el_2550[i])));
                                return result_2551;
                            })().join(', ') + '}';
                        };
                    }
                } break;

                case 17: {
                    {
                        const keys_2553 = temp_2510[2];
                        const values_2554 = temp_2510[3];
                        {
                            if (keys_2553.length == 0) { return '[:]' };
                            return '[' + (() => {
                                const result_2555 = [];
                                const value_2556 = keys_2553.length;
                                for (const i of $toIterator(value_2556)) result_2555.push(this.printExpression(keys_2553[i]) + ' : ' + this.printExpression(values_2554[i]));
                                return result_2555;
                            })().join(', ') + ']';
                        };
                    }
                } break;

                case 22: {
                    {
                        const a_2557 = temp_2510[2];
                        const op_2558 = temp_2510[3];
                        const value_2559 = temp_2510[4];
                        return this.printExpression(a_2557) + ' ' + Token.stringify(op_2558) + '= ' + this.printExpression(value_2559);
                    }
                } break;

                case 23: {
                    {
                        const kind_2560 = temp_2510[2];
                        const args_2561 = temp_2510[3];
                        const s_2562 = temp_2510[4];
                        {
                            const temp_2563 = kind_2560;
                            switch (temp_2563) {
                            case 0: {
                                return '((' + this.printExpression(args_2561[0]) + ') ' + s_2562 + ' (' + this.printExpression(args_2561[1]) + '))'
                            } break;

                            case 1: {
                                return s_2562 + this.printCallArguments(args_2561)
                            } break;

                            case 2: {
                                return '(' + s_2562 + '(' + this.printExpression(args_2561[0]) + '))'
                            } break;

                            case 3: {
                                return '((' + this.printExpression(args_2561[1]) + ')' + s_2562 + ')'
                            } break;
                            };
                        };
                    }
                } break;

                case 25: {
                    return '_'
                } break;

                default:
                console.error('Unknown expression kind:', (((e_2509) || ([])))[0], e_2509)
                };
            };
            return '<!-- undefined -->';
        } };
    }
    GenHexa.spawn = () => { return new GenHexa() };
    var DataHelper = class {
    }
    DataHelper.varName = (v_2674) => { {
            const temp_2675 = v_2674;
            switch (temp_2675 && temp_2675[1]) {
            case 23: {
                {
                    const name_2676 = temp_2675[2];
                    return name_2676;
                }
            } break;

            default:
            throw ('varName got not a TVar, but `' + (v_2674) + '`')
            };
        } };
    DataHelper.nameOf = (v_2677) => { {
            const temp_2678 = v_2677;
            switch (temp_2678 && temp_2678[1]) {
            case 44: {
                {
                    const node_2679 = temp_2678[2];
                    return DataHelper.nameOf(node_2679);
                }
            } break;

            case 26: {
                {
                    const node_2680 = temp_2678[2];
                    return DataHelper.nameOf(node_2680);
                }
            } break;

            case 23: {
                {
                    const name_2681 = temp_2678[2];
                    return name_2681;
                }
            } break;

            case 37: {
                {
                    const t_2682 = temp_2678[2];
                    {
                        {
                            const temp_2683 = t_2682;
                            switch (temp_2683 && temp_2683[1]) {
                            case 1: {
                                {
                                    const name_2684 = temp_2683[2];
                                    return name_2684;
                                }
                            } break;

                            case 2: {
                                {
                                    const name_2685 = temp_2683[2];
                                    return name_2685;
                                }
                            } break;
                            };
                        };
                        throw 'unreachable';
                    };
                }
            } break;

            case 21: {
                {
                    const name_2686 = temp_2678[2];
                    return name_2686;
                }
            } break;

            case 25: {
                {
                    const t_2687 = temp_2678[2];
                    {
                        {
                            const temp_2688 = t_2687;
                            switch (temp_2688 && temp_2688[1]) {
                            case 1: {
                                {
                                    const name_2689 = temp_2688[2];
                                    return name_2689;
                                }
                            } break;

                            case 2: {
                                {
                                    const name_2690 = temp_2688[2];
                                    return name_2690;
                                }
                            } break;
                            };
                        };
                        throw 'unreachable';
                    };
                }
            } break;

            case 8: {
                {
                    const t_2691 = temp_2678[2];
                    {
                        const temp_2692 = t_2691;
                        switch (temp_2692 && temp_2692[1]) {
                        case 1: {
                            {
                                const name_2693 = temp_2692[2];
                                return name_2693;
                            }
                        } break;

                        case 2: {
                            {
                                const name_2694 = temp_2692[2];
                                return name_2694;
                            }
                        } break;
                        };
                    };
                }
            } break;

            case 43: {
                {
                    const field_2695 = temp_2678[2];
                    return DataHelper.nameOf(field_2695);
                }
            } break;

            default:
            throw ('nameOf expected named node, but got `' + (v_2677) + '`')
            };
        } };
    DataHelper.asStringAttValue = (a_2696, index_2697) => { {
            const temp_2698 = a_2696.values[index_2697];
            switch (temp_2698 && temp_2698[1]) {
            case null: case undefined: {
                throw 'Got null, not a string'
            } break;

            case 0: {
                {
                    const s_2699 = temp_2698[2];
                    return s_2699;
                }
            } break;

            default:
            throw ('Got `' + (a_2696.values[index_2697]) + '`, not a string')
            };
        } };
    DataHelper.getLastOfBlock = (block_2700) => { {
            const temp_2701 = block_2700;
            switch (temp_2701 && temp_2701[1]) {
            case null: case undefined: {
                throw 'Got null, not a block'
            } break;

            case 11: {
                {
                    const el_2702 = temp_2701[2];
                    return el_2702[el_2702.length - 1];
                }
            } break;

            default:
            throw ('Got `' + (block_2700) + '`, not a block')
            };
        } };
    DataHelper.isVoidValue = (block_2703) => { {
            {
                const temp_2704 = block_2703;
                switch (temp_2704 && temp_2704[1]) {
                case null: case undefined: {
                    return true
                } break;

                case 15: {
                    return true
                } break;

                case 17: {
                    return true
                } break;

                case 18: {
                    return true
                } break;

                case 23: {
                    return true
                } break;

                case 13: {
                    {
                        const eelse_2705 = temp_2704[4];
                        if (eelse_2705 == null) { return true };
                    }
                } break;

                case 37: {
                    return true
                } break;

                case 25: {
                    return true
                } break;

                case 34: {
                    return true
                } break;

                case 11: {
                    {
                        const el_2706 = temp_2704[2];
                        {
                            if (el_2706.length == 0) { return true };
                            return DataHelper.isVoidValue(el_2706[el_2706.length - 1]);
                        };
                    }
                } break;

                default:
                return false
                };
            };
            return false;
        } };
    DataHelper.extractTypeName = (t_2707) => { {
            const temp_2708 = t_2707;
            switch (temp_2708 && temp_2708[1]) {
            case 1: {
                {
                    const name_2709 = temp_2708[2];
                    return name_2709;
                }
            } break;

            case 2: {
                {
                    const name_2710 = temp_2708[2];
                    return name_2710;
                }
            } break;

            case null: case undefined: {
                return null
            } break;

            default:
            throw 'Type has no name: ' + t_2707
            };
        } };
    DataHelper.getAttribute = (atts_2711, name_2712) => { {
            if (atts_2711 != null && atts_2711.length > 0) { for (const att of $toIterator(atts_2711)) {
                if (att.name == name_2712) { return att };
            } };
            return null;
        } };
    var NodeData = class {
        constructor(atLine, atColumn, atFile) {
        {
            this.line = atLine;
            this.column = atColumn;
            this.fileName = atFile;
        } };
    }
    var Project = class {
    }
    Project.mapAttributes = new Map()
    Project.mapNames = new Map()
    Project.data = new Map()
    Project.hints = []
    Project.defines = {}
    var Attribute = class {
        constructor(name_2855, values_2856) {
        {
            this.name = name_2855;
            this.values = values_2856;
        } };
    }
    var CompilerError = class {
        constructor(except, details, line_2857, column_2858, filename_2859) {
        {
            this.exception = except;
            this.details = details == (null)? ('') : details;
            this.line = line_2857 == (null)? (0) : line_2857;
            this.column = column_2858 == (null)? (0) : column_2858;
            this.fileName = filename_2859 == (null)? ('') : filename_2859;
        } };
        toString() { return '[' + this.fileName + ':' + this.line + ':' + this.column + ']: ' + this.details };
    }
    var Hint = class {
        constructor(code_2860, details_2861, position_2862) {
        {
            this.code = code_2860;
            this.details = details_2861;
            this.at = position_2862;
        } };
        toString() { return '[' + this.at.fileName + ':' + this.at.line + ':' + this.at.column + ']: Hint N' + this.code + ': ' + this.details };
    }
    var Target = $global.Target
    var Package = $global.Package
    var Main = class {
        init() { {
            if (Fs.existsSync('hexa.json')) {
                Process.stdout.write('Hexa package \'hexa.json\' already exists here. Create new? (no)');
                Process.exit(1);
            };
            let currentDirTmp = process.cwd().split(Path.sep);
            let packageFileName = currentDirTmp.splice(0, -1).join(Path.sep) + Path.sep + 'hexa.json';
            let currentDir = currentDirTmp[currentDirTmp.length - 1];
            let name = Main.question(('Enter package name (' + (currentDir) + '): '));
            if (name == '') { name = currentDir };
            let version_2863 = Main.question('Enter package version (1.0.0): ');
            if (version_2863 == '') { version_2863 = '1.0.0' };
            let description = Main.question('Enter package description: ');
            let main = Main.question('Enter main file (main.hexa): ');
            if (main == '') { main = 'main.hexa' };
            const target = {generator:'JavaScript', instance:{generatePackageJson:false}};
            let output = name;
            const generatorstr = Main.question('Enter generator type (JavaScript):\n1. JavaScript\n2. C\n3. Haxe\n');
            if (generatorstr.toUpperCase() == 'C' || generatorstr == '2') { target.generator = 'C' } else if (generatorstr.toUpperCase() == 'HAXE' || generatorstr == '3') { target.generator = 'Haxe' } else output += '.js';
            while (!(main.endsWith('.hexa'))) {
                Process.stdout.write('Wrong file name. Must end with \'.hexa\'.\n');
                main = Main.question('Enter main file (main.hexa): ');
            };
            const author = Main.question('Enter package author name: ');
            const license = Main.question('Enter license: ');
            const pack = {name:name, version:version_2863, description:description, output:output, author:author, license:license, target:target, files:[main]};
            const extras = [];
            let addGit = false;
            if (Fs.existsSync('.git')) { if (!Fs.existsSync('.gitignore') || !Fs.existsSync('.gitattributes')) { if (['y', 'yes', ''].includes(Main.question('Create additional git files? (.gitignore, .gitattributes)').toLowerCase().trim())) {
                if (!Fs.existsSync('.gitignore')) { extras.push('.gitignore') };
                if (!Fs.existsSync('.gitattributes')) { extras.push('.gitattributes') };
                addGit = true;
                console.log('addGit = true!');
            } } };
            const addMain = Fs.existsSync(main) == false;
            if (addMain) { extras.push(main) };
            const packageStr = JSON.stringify(pack, null, '\t').split('\r\n').join('\n').split('\n').join('\r\n');
            const extrasStr = extras.length > (0)? ('\nAnd \'' + extras.join('\', \'') + '\'') : '';
            const answ = Main.question(('About to write to: ' + (packageFileName) + ':\n' + (packageStr) + '' + (extrasStr) + '\nIs this ok? (yes)'));
            if (answ != '') { Process.exit(1) };
            Fs.writeFileSync('hexa.json', packageStr);
            if ((addMain) && (!Fs.existsSync(main))) { Fs.writeFileSync(main, 'console.log("Thank you for choosing Hexa")') };
            if ((addGit) && (!Fs.existsSync('.gitattributes'))) { Fs.writeFileSync('.gitattributes', ['# Auto detect text files and perform LF normalization', '* text=auto', ''].join('\r\n')) };
            if ((addGit) && (!Fs.existsSync('.gitignore'))) { Fs.writeFileSync('.gitignore', ['# Mac & Win', '*~', '._*', '*DS_Store*', '.DS_Store', '.DS_Store?', '.Spotlight-V100', '.Trashes', 'ehthumbs.db', 'Thumbs.db', '*Thumbs.db', '__MACOSX', '', '# Custom', '*.map', output, 'node_modules', ''].join('\r\n')) };
            Process.stdout.write('Hexa package initialized!');
        } };
        processFile(target_2864) { {
            const content = Fs.readFileSync(target_2864);
            const tokens = Lexer.tokenize(content, target_2864);
            this.lines += tokens.line[tokens.length - 1];
            const parsed = Parser.parseNodes(tokens);
            return parsed;
        } };
        repl() { {
            const js = this.processFile(__dirname + '/library/js/js.hexa');
            const nodejs = this.processFile(__dirname + '/library/nodejs/nodejs.hexa');
            const lines = [];
            let lines_2865 = [];
            while (true) {
                let line = Main.question('> ');
                if (line.length == 0) { continue };
                lines_2865.push(line);
                lines_2865 = [line];
                try {
                    {
                        let code = '"use strict"\r\n';
                        try {
                            {
                                const content_2866 = lines_2865.join('\n');
                                const tokens_2867 = Lexer.tokenize(Buffer.from(content_2866), 'REPL');
                                const parser = Parser.toNode(Parser.parseNodes(tokens_2867));
                                let collected = (["TBlock",11,[js, nodejs, parser]]);
                                if (parser == null) { continue };
                            }
                        } catch (e) {
                            {
                                lines_2865.pop();
                                console.error('\x1b[31mCompilation Error: ' + e, '\x1b[0m');
                                continue;
                            }
                        };
                        const result = eval(code);
                        if (result == null) { console.log('\x1b[90m' + result, '\x1b[0m') } else if (result == true) { console.log('\x1b[33m' + result, '\x1b[0m') } else if (result == false) { console.log('\x1b[33m' + result, '\x1b[0m') } else console.log(result);
                    }
                } catch (e) {
                    {
                        console.error('Error: ' + e);
                    }
                };
            };
        } };
        processFiles(targets) { {
            let res = [];
            if (false) {
                let targets_2868;
                for (const target of $toIterator(targets_2868)) {
                };
                targets_2868.pop();
            };
            for (const target of $toIterator(targets)) {
                if (!Fs.existsSync(target)) {
                    console.log(('No such source file on disk `' + (target) + '`'));
                    continue;
                };
                try {
                    {
                        res.push(this.processFile(target));
                    }
                } catch (e) {
                    {
                        console.log(e.toString());
                    }
                };
            };
            if (targets.length != res.length) {
                console.log('[Stopped on errors]');
                Process.exit(1);
            };
            return res;
        } };
        loadPackage(filename) { {
            const pack_2869 = JSON.parse(Fs.readFileSync(Path.resolve(filename)).toString('utf8'));
            const incorrect = (what) => {
                Process.stdout.write(('Incorrect package file! Field `' + (what) + '` does not exists\n'));
                Process.exit(1);
            };
            if (pack_2869.target == null) { incorrect('target') };
            if (pack_2869.output == null) { incorrect('output') };
            if (pack_2869.name == null) { incorrect('name') };
            Project.defines = ((pack_2869.define) || ({}));
            if (pack_2869.files == null) { pack_2869.files = [] };
            if (pack_2869.addLicenseNoticeToOutput == null) { pack_2869.addLicenseNoticeToOutput = true };
            {
                const temp = pack_2869.target.generator;
                switch (temp) {
                case 'JavaScript': {
                    {
                        Project.defines.js = ((Project.defines.js) || (true));
                        if (pack_2869.noLib == true) {} else {
                            pack_2869.files.unshift(Path.resolve(__dirname + '/library/js/js.hexa'));
                            pack_2869.files.unshift(Path.resolve(__dirname + '/library/nodejs/nodejs.hexa'));
                        };
                    }
                } break;

                case 'C': {
                    {
                        Project.defines.c = ((Project.defines.c) || (true));
                        Project.defines.native = ((Project.defines.native) || (true));
                        if (pack_2869.noLib == true) {} else {
                            pack_2869.files.unshift(Path.resolve(__dirname + '/library/c/c.hexa'));
                        };
                    }
                } break;

                case 'Haxe': {
                    Project.defines.haxe = ((Project.defines.haxe) || (true))
                } break;

                case 'Hexa': {
                    {
                        Project.defines.hexa = ((Project.defines.hexa) || (true));
                        if (pack_2869.noLib == true) {} else {
                            pack_2869.files.unshift(Path.resolve(__dirname + '/library/js/js.hexa'));
                            pack_2869.files.unshift(Path.resolve(__dirname + '/library/nodejs/nodejs.hexa'));
                        };
                    }
                } break;

                case 'C#': {
                    {
                        Project.defines.cs = ((Project.defines.cs) || (true));
                        pack_2869.files.unshift(Path.resolve(__dirname + '/library/cs/cs.hexa'));
                    }
                } break;
                };
            };
            return pack_2869;
        } };
        constructor() {
            this.lines = 0
        {
            const begin = Date.now();
            Lexer.init();
            if (Process.argv[2] == '--syntax-linter') {
                if (Process.argv.length < 4) { console.log('Usage: `hexa --syntax-linter file.hexa`') } else {
                    const file = Process.argv[3];
                    try {
                        {
                            const content_2870 = Fs.readFileSync(file);
                            try {
                                {
                                    const tokens_2871 = Lexer.tokenize(content_2870, file);
                                    try {
                                        {
                                            const parser_2872 = Parser.parseNodes(tokens_2871);
                                        }
                                    } catch (e) {
                                        console.log(('' + (e) + ''))
                                    };
                                }
                            } catch (e) {
                                console.log(('' + (e) + ''))
                            };
                        }
                    } catch (e) {
                        console.log(('ERROR: Unable to open file ' + (file) + ''))
                    };
                };
                Process.exit(0);
            };
            const beginTests = Date.now();
            TestLexer.test();
            TestParser.test();
            TestTyper.test();
            console.log(('[Tests finished in ' + (Date.now() - beginTests) + ' ms]'));
            const ignoreArguments = (from) => {
                if (from == Process.argv.length) { return };
                const args = [];
                const count = Process.argv.length - from;
                let i = 0;
                while (i < count) args.push(Process.argv[i++ + from]);
                console.log(('Arguments `' + (args) + '` ignored'));
            };
            if (Process.argv[2] == '--version') {
                console.log(('Hexa ' + (version) + ' on node.js ') + Process.versions.node);
                ignoreArguments(3);
                Process.exit(0);
            } else if (Process.argv[2] == '--help') {
                console.log('Usage: `hexa project.json` or `hexa init`');
                ignoreArguments(3);
                Process.exit(0);
            } else if (Process.argv[2] == null) {
                this.repl();
                Process.exit(0);
            } else if (Process.argv[2] == 'init') {
                this.init();
                ignoreArguments(3);
                Process.exit(0);
            };
            let currentFile = Path.resolve(Process.argv[2]);
            let currentParsedFile = Path.parse(currentFile);
            let input = null;
            let packageFolder = currentParsedFile.dir;
            if (currentParsedFile.ext == '.json') {
                input = this.loadPackage(currentFile);
                ignoreArguments(3);
                console.log(('[Building ' + (input.name) + ']'));
            } else if ((Fs.existsSync(currentFile)) && (Fs.lstatSync(currentFile).isDirectory())) {
                ignoreArguments(3);
                input = this.loadPackage(currentFile + Path.sep + 'hexa.json');
                packageFolder = currentFile;
            } else if (currentParsedFile.ext == '.hexa') { return } else {
                console.error(('Unknown command: ' + (Process.argv[2]) + ''));
                console.error('Try --help');
                Process.exit(1);
                return;
            };
            const beginParsing = Date.now();
            let files = [];
            if (input.files != null) {
                const fileList = input.files.map((file_2873) => {
                    if (file_2873.startsWith('/') || file_2873.charAt(1) == ':') { return Path.resolve(file_2873) };
                    return Path.resolve(packageFolder + Path.sep + file_2873);
                });
                files = this.processFiles(fileList);
            };
            console.log(('[Parsing finished in ' + (Date.now() - beginParsing) + ' ms]'));
            const beginTyper = Date.now();
            const typer = new Typer();
            try {
                {
                    typer.fillFiles(files);
                }
            } catch (e) {
                {
                    console.log(e.toString());
                    Process.exit(1);
                }
            };
            console.log(('[Typer finished in ' + (Date.now() - beginTyper) + ' ms]'));
            const normalizer = new Normalizer();
            const generators = new Map();
            const registerTarget = (name_2874, generator) => {
                {
                    let step = 0;
                    const generator_2875 = generators.get(name_2874);
                    if (step == 0 && generator_2875 != null) { step = 1 };
                    if (step == 1) { console.log(('Note: generator `' + (name_2874) + '` was overridden')) };
                };
                generators.set(name_2874, generator);
            };
            registerTarget('JavaScript', GenJs.spawn);
            registerTarget('Haxe', GenHaxe.spawn);
            registerTarget('Hexa', GenHexa.spawn);
            registerTarget('C', GenC.spawn);
            {
                let step_2876 = 0;
                const generatorName = input.target.generator;
                if (step_2876 == 0 && generatorName != null) { step_2876 = 1 };
                if (step_2876 == 1) { {
                    let step_2877 = 0;
                    const generatorSpawner = generators.get(generatorName);
                    if (step_2877 == 0 && generatorSpawner != null) { step_2877 = 1 };
                    if (step_2877 == 1) {
                        const generator_2878 = generatorSpawner();
                        const target_2879 = packageFolder + Path.sep + Path.parse(input.output).name + generator_2878.extension;
                        const target_2880 = Path.join(packageFolder, input.output);
                        normalizer.keywords = generator_2878.reserved;
                        normalizer.collected = files;
                        normalizer.nativeEnums = generator_2878.nativeEnums;
                        normalizer.reservedGlobals = ((generator_2878.reservedGlobals) || (normalizer.reservedGlobals));
                        normalizer.package = input;
                        {
                            let step_2881 = 0;
                            const randomSeed = input.randomSeed;
                            if (step_2881 == 0 && randomSeed != null) { step_2881 = 1 };
                            if (step_2881 == 1) { normalizer.id = randomSeed };
                        };
                        {
                            let step_2882 = 0;
                            const globalAccessor = generator_2878.globalAccessor;
                            if (step_2882 == 0 && globalAccessor != null) { step_2882 = 1 };
                            if (step_2882 == 1) { normalizer.globalAccessor = globalAccessor };
                        };
                        normalizer.typer = typer;
                        const beginNormalizer = Date.now();
                        const normal = normalizer.normalize();
                        console.log(('[Normalizer finished in ' + (Date.now() - beginNormalizer) + ' ms]'));
                        const beginGenerator = Date.now();
                        for (const hint of $toIterator(Project.hints)) {
                            console.log(hint.toString());
                        };
                        const outs = generator_2878.perform(normal);
                        console.log(('[Generator finished in ' + (Date.now() - beginGenerator) + ' ms]'));
                        Fs.writeFileSync(target_2880, outs);
                    } else {
                        console.log(('Generator for `' + (generatorName) + '` is not registered.'));
                        Process.exit(1);
                    };
                } } else {
                    console.log('Generator is not defined or unknown. Is there `target.generator` field in `hexa.json`?');
                    Process.exit(1);
                };
            };
            const delta = Date.now() - begin;
            const lps = Math.round(this.lines / (delta / 1000));
            console.log(('[Finished in ' + (delta) + ' ms, ' + (this.lines) + ' lines, ' + (lps) + ' lines per second]'));
            Process.stdout.once('drain', () => { Process.exit(0) });
            Process.stdout.write('');
        } };
    }
    Main.question = (query) => { {
            Process.stdout.write(query);
            let bufsize = 256;
            let buf = new Buffer(bufsize);
            let bytesRead = 0;
            try {
                {
                    bytesRead = Fs.readSync(Process.stdin.fd, buf, 0, bufsize);
                }
            } catch (e) {
                {
                    {
                        if (e.code == 'EAGAIN') { return 'ERROR: interactive stdin input not supported.' };
                        if (e.code == 'EOF') { return '' };
                        throw e;
                    };
                }
            };
            if (bytesRead == 0) { return '' };
            const answer = buf.toString('utf8', 0, bytesRead).trim();
            return answer;
        } };
    function btoa(text_26) { return new Buffer(text_26, 'binary').toString('base64') };
    function atob(base64) { return new Buffer(base64, 'base64').toString('binary') };
    function hasOwnProperty(object, name_77) { return object.hasOwnProperty(name_77) };
    var version = '0.0.1'
    {
        {
            {
                new Main();
            };
        }
    }
})();
