// Generated by Hexa https://hexalang.github.io
// The Hexa Compiler
// LICENSE LGPL-2.1-or-later
;(function() {
    "use strict"
    const $global = typeof(window) === "undefined"? global : window
    if (typeof($global.require) === "undefined") { $global.require = function () {} };
    function $toIterator(v) { if (typeof(v) === "number") { v = Math.max(v, 0); const i = new Uint32Array(v); let n = 0; while (n < v) i[n] = n++; return i; } return v; };
    const Fs = require("fs")
    const path = require("path")
    const process_21 = require("process")
    var Token = {
        stringify: (token_2361, param = null) => { {
            const temp_2362 = token_2361;
            switch (temp_2362) {
            case 70: {
                return '@'
            } break;

            case 83: {
                return '$'
            } break;

            case 78: {
                return '#'
            } break;

            case 71: {
                return ']'
            } break;

            case 72: {
                return '['
            } break;

            case 73: {
                return '}'
            } break;

            case 74: {
                return '{'
            } break;

            case 75: {
                return ','
            } break;

            case 76: {
                return ':'
            } break;

            case 123: {
                return '<!--default-->'
            } break;

            case 77: {
                return '.'
            } break;

            case 0: {
                return '<!--eof-->'
            } break;

            case 98: {
                return '...'
            } break;

            case 58: {
                return 'as'
            } break;

            case 3: {
                return 'break'
            } break;

            case 4: {
                return 'case'
            } break;

            case 6: {
                return 'catch'
            } break;

            case 7: {
                return 'class'
            } break;

            case 8: {
                return 'continue'
            } break;

            case 9: {
                return 'do'
            } break;

            case 10: {
                return 'else'
            } break;

            case 11: {
                return 'enum'
            } break;

            case 12: {
                return 'extends'
            } break;

            case 13: {
                return 'declare'
            } break;

            case 14: {
                return 'false'
            } break;

            case 15: {
                return 'for'
            } break;

            case 16: {
                return 'function'
            } break;

            case 17: {
                return 'if'
            } break;

            case 18: {
                return 'implements'
            } break;

            case 20: {
                return 'in'
            } break;

            case 22: {
                return 'interface'
            } break;

            case 23: {
                return 'let'
            } break;

            case 25: {
                return 'new'
            } break;

            case 26: {
                return 'null'
            } break;

            case 28: {
                return 'module'
            } break;

            case 29: {
                return 'private'
            } break;

            case 31: {
                return 'return'
            } break;

            case 32: {
                return 'static'
            } break;

            case 59: {
                return 'super'
            } break;

            case 33: {
                return 'switch'
            } break;

            case 34: {
                return 'this'
            } break;

            case 35: {
                return 'throw'
            } break;

            case 36: {
                return 'true'
            } break;

            case 37: {
                return 'try'
            } break;

            case 39: {
                return 'using'
            } break;

            case 40: {
                return 'var'
            } break;

            case 41: {
                return 'while'
            } break;

            case 111: {
                return '+'
            } break;

            case 112: {
                return '&'
            } break;

            case 90: {
                return '=>'
            } break;

            case 91: {
                return '='
            } break;

            case 92: {
                return '&&'
            } break;

            case 93: {
                return '||'
            } break;

            case 86: {
                return '--'
            } break;

            case 94: {
                return '/'
            } break;

            case 95: {
                return '=='
            } break;

            case 96: {
                return '>'
            } break;

            case 97: {
                return '>='
            } break;

            case 87: {
                return '++'
            } break;

            case 110: {
                return '\\'
            } break;

            case 99: {
                return '<'
            } break;

            case 100: {
                return '<='
            } break;

            case 101: {
                return '%'
            } break;

            case 102: {
                return '*'
            } break;

            case 88: {
                return '~'
            } break;

            case 89: {
                return '!'
            } break;

            case 103: {
                return '!='
            } break;

            case 104: {
                return '|'
            } break;

            case 105: {
                return '<<'
            } break;

            case 106: {
                return '>>'
            } break;

            case 107: {
                return '-'
            } break;

            case 108: {
                return '>>>'
            } break;

            case 109: {
                return '^'
            } break;

            case 113: {
                return '?.'
            } break;

            case 79: {
                return ')'
            } break;

            case 80: {
                return '('
            } break;

            case 81: {
                return '?'
            } break;

            case 82: {
                return ';'
            } break;

            case 1: {
                return '_'
            } break;

            case 61: {
                return ((param == null))? ('<UpperCase>') : param
            } break;

            case 64: {
                return ((param == null))? ('<string>') : ('\'' + (param) + '\'')
            } break;

            case 66: {
                return ((param == null))? ('<backtick>') : ('`' + (param) + '`')
            } break;

            case 62: {
                return ((param == null))? ('identifier') : param
            } break;

            case 63: {
                return ((param == null))? ('<integer>') : param
            } break;

            case 60: {
                return ((param == null))? ('<float>') : param
            } break;

            case 65: {
                return ('///' + (param) + '')
            } break;

            case 57: {
                return 'is'
            } break;
            };
        } },
    }
    var NiceExpression = {
        IndentClass: (type_2364)=>[0,type_2364],
        String: (s_2365)=>[2,s_2365],
        Int: (s_2366)=>[3,s_2366],
        Float: (s_2367)=>[4,s_2367],
        Ident: (s_2368,type_2369)=>[7,s_2368,type_2369],
        Dot: (expr_2370,name_2371,result_2372)=>[10,expr_2370,name_2371,result_2372],
        Call: (e_2373,args_2374,result_2375)=>[11,e_2373,args_2374,result_2375],
        New: (e_2376,args_2377)=>[12,e_2376,args_2377],
        Binop: (a_2378,op_2379,b_2380,result_2381)=>[13,a_2378,op_2379,b_2380,result_2381],
        Function: (name_2382,expr_2383,args_2384,defaults_2385,funcType_2386)=>[14,name_2382,expr_2383,args_2384,defaults_2385,funcType_2386],
        Arrow: (expr_2387,args_2388,defaults_2389,types_2390,returns_2391)=>[15,expr_2387,args_2388,defaults_2389,types_2390,returns_2391],
        Parenthesis: (inner_2392)=>[16,inner_2392],
        Object: (names_2393,el_2394,types_2395)=>[17,names_2393,el_2394,types_2395],
        Array: (values_2396,valueType)=>[18,values_2396,valueType],
        Map: (keys_2397,values_2398,keyType,valueType_2399)=>[19,keys_2397,values_2398,keyType,valueType_2399],
        Unop: (op_2400,postfix_2401,e_2402)=>[20,op_2400,postfix_2401,e_2402],
        Elvis: (nullable_2403,othewise_2404)=>[21,nullable_2403,othewise_2404],
        If: (econd_2405,eif_2406,eelse_2407)=>[22,econd_2405,eif_2406,eelse_2407],
        Index: (expr_2408,index_2409)=>[23,expr_2408,index_2409],
        UnsafeBitCast: (expr_2410,to_2411)=>[24,expr_2410,to_2411],
        CastForceUnsafeBit: (expr_2412,to_2413)=>[25,expr_2412,to_2413],
        CastToString: (value_2414)=>[29,value_2414],
        Is: (expr_2415,of)=>[30,expr_2415,of],
        Assignop: (name_2416,op_2417,value_2418)=>[31,name_2416,op_2417,value_2418],
        NativeOperator: (kind_2419,args_2420,name_2421)=>[32,kind_2419,args_2420,name_2421],
        EnumTag: (expr_2422)=>[33,expr_2422],
        Enum: (type_2423,tagName_2424,tag_2425,args_2426)=>[34,type_2423,tagName_2424,tag_2425,args_2426],
        EnumParameter: (expr_2427,index_2428)=>[35,expr_2427,index_2428],
    }
    Object.defineProperty(NiceExpression, "IdentVar", { get: function() { return [1] }})
    Object.defineProperty(NiceExpression, "True", { get: function() { return [5] }})
    Object.defineProperty(NiceExpression, "False", { get: function() { return [6] }})
    Object.defineProperty(NiceExpression, "Null", { get: function() { return [8] }})
    Object.defineProperty(NiceExpression, "This", { get: function() { return [9] }})
    Object.defineProperty(NiceExpression, "CastOrNull", { get: function() { return [26] }})
    Object.defineProperty(NiceExpression, "CastOrThrow", { get: function() { return [27] }})
    Object.defineProperty(NiceExpression, "CastNatively", { get: function() { return [28] }})
    Object.defineProperty(NiceExpression, "Underscore", { get: function() { return [36] }})
    var NiceStatement = {
        Statements: (el_2429)=>[0,el_2429],
        Block: (el_2430)=>[1,el_2430],
        Call: (e_2431,args_2432,expects_2433)=>[2,e_2431,args_2432,expects_2433],
        New: (e_2434,args_2435)=>[3,e_2434,args_2435],
        UnusedExpression: (e_2436)=>[4,e_2436],
        Var: (name_2437,expr_2438,type_2439)=>[5,name_2437,expr_2438,type_2439],
        Const: (name_2440,expr_2441,type_2442)=>[6,name_2440,expr_2441,type_2442],
        Function: (name_2443,expr_2444,args_2445,defaults_2446,funcType_2447)=>[7,name_2443,expr_2444,args_2445,defaults_2446,funcType_2447],
        Return: (e_2448)=>[8,e_2448],
        If: (econd_2449,eif_2450,eelse_2451)=>[9,econd_2449,eif_2450,eelse_2451],
        If_: (econd_2452,eif_2453)=>[10,econd_2452,eif_2453],
        IfElse: (econd_2454,eif_2455,eelse_2456)=>[11,econd_2454,eif_2455,eelse_2456],
        Try: (expr_2457,t_2458,v_2459,catches_2460,temp_2461)=>[12,expr_2457,t_2458,v_2459,catches_2460,temp_2461],
        Throw: (value_2462)=>[13,value_2462],
        Assign: (name_2463,value_2464,to_2465)=>[14,name_2463,value_2464,to_2465],
        Assignop: (name_2466,op_2467,value_2468)=>[15,name_2466,op_2467,value_2468],
        Dot: (expr_2469,name_2470)=>[16,expr_2469,name_2470],
        DotStatic: (expr_2471,fieldIndex)=>[17,expr_2471,fieldIndex],
        For: (name_2472,over_2473,by_2474)=>[20,name_2472,over_2473,by_2474],
        While: (econd_2475,e_2476,pre_2477)=>[21,econd_2475,e_2476,pre_2477],
        Increment: (e_2478)=>[22,e_2478],
        Decrement: (e_2479)=>[23,e_2479],
        Switch: (expr_2480,cases_2481,statements_2482)=>[24,expr_2480,cases_2481,statements_2482],
        SuperConstructor: (args_2483)=>[27,args_2483],
    }
    Object.defineProperty(NiceStatement, "DotReflectSet", { get: function() { return [18] }})
    Object.defineProperty(NiceStatement, "DotReflectGet", { get: function() { return [19] }})
    Object.defineProperty(NiceStatement, "Continue", { get: function() { return [25] }})
    Object.defineProperty(NiceStatement, "Break", { get: function() { return [26] }})
    var NodeType = {
        stringify: (nodeType_2494) => { return DataHelper.extractTypeName(nodeType_2494) },
        Optional: (type_2484)=>[0,type_2484],
        Type: (name_2485)=>[1,name_2485],
        ParametricType: (name_2486,params_2487)=>[2,name_2486,params_2487],
        Function: (args_2488,ret_2489)=>[3,args_2488,ret_2489],
        FunctionArg: (name_2490,type_2491,defaultValue)=>[4,name_2490,type_2491,defaultValue],
        Object: (names_2492,types_2493)=>[5,names_2492,types_2493],
    }
    var Node = {
        stringify: (node_2633) => { {
            let x_2634 = /*TString*/[0,'s'];
            {
                const temp_2635 = node_2633;
                switch (temp_2635&&temp_2635[0]) {
                case 0: {
                    {
                        const s_2636 = temp_2635[1];
                        return ('\'' + (s_2636) + '\'');
                    }
                } break;

                case 1: {
                    {
                        const name_2637 = temp_2635[1];
                        return name_2637;
                    }
                } break;

                case 2: {
                    {
                        const b_2638 = temp_2635[1];
                        return (b_2638)? ('true') : 'false';
                    }
                } break;

                case 5: {
                    {
                        const s_2639 = temp_2635[1];
                        return s_2639;
                    }
                } break;

                case 6: {
                    {
                        const s_2640 = temp_2635[1];
                        return s_2640;
                    }
                } break;

                case 7: {
                    return 'null'
                } break;

                case 3: {
                    return 'this'
                } break;

                case 33: {
                    {
                        const expr_2641 = temp_2635[1];
                        const index_2642 = temp_2635[2];
                        return Node.stringify(expr_2641) + '[' + Node.stringify(index_2642) + ']';
                    }
                } break;

                case 28: {
                    {
                        const expr_2643 = temp_2635[1];
                        const name_2644 = temp_2635[2];
                        return Node.stringify(expr_2643) + '.' + name_2644;
                    }
                } break;

                case 29: {
                    {
                        const expr_2645 = temp_2635[1];
                        const name_2646 = temp_2635[2];
                        return Node.stringify(expr_2645) + '.' + name_2646;
                    }
                } break;

                case 12: {
                    {
                        const e_2647 = temp_2635[1];
                        const args_2648 = temp_2635[2];
                        const argNames_2649 = temp_2635[3];
                        {
                            const arg_2650 = [];
                            {
                                let i_2651 = 0;
                                let it_2652 = 0;
                                let at_2653 = args_2648.length;
                                while (it_2652 < at_2653) {
                                    i_2651 = it_2652;
                                    it_2652++;
                                    {
                                        let step_2654 = 0;
                                        const name_2655 = argNames_2649[i_2651];
                                        if (step_2654 == 0 && name_2655 != null) { step_2654 = 1 };
                                        if (step_2654 == 1) { arg_2650.push(name_2655 + ': ' + Node.stringify(args_2648[i_2651])) } else arg_2650.push(Node.stringify(args_2648[i_2651]));
                                    };
                                };
                            };
                            return Node.stringify(e_2647) + '(' + arg_2650.join(', ') + ')';
                        };
                    }
                } break;

                case 31: {
                    {
                        const elements_2656 = temp_2635[1];
                        return '[' + (() => {
                            const result_2657 = [];
                            const value_2658 = elements_2656;
                            for (const el of $toIterator(value_2658)) result_2657.push(Node.stringify(el));
                            return result_2657;
                        })().join(', ') + ']';
                    }
                } break;

                case 9: {
                    {
                        const a_2659 = temp_2635[1];
                        const op_2660 = temp_2635[2];
                        const b_2661 = temp_2635[3];
                        return Node.stringify(a_2659) + ' ' + Token.stringify(op_2660) + ' ' + Node.stringify(b_2661);
                    }
                } break;

                case 36: {
                    {
                        const names_2662 = temp_2635[1];
                        const el_2663 = temp_2635[2];
                        return '{' + (() => {
                            const result_2664 = [];
                            const value_2665 = el_2663.length;
                            for (const i of $toIterator(value_2665)) result_2664.push(names_2662[i] + ': ' + Node.stringify(el_2663[i]));
                            return result_2664;
                        })().join(', ') + '}';
                    }
                } break;

                case 48: {
                    {
                        const t_2666 = temp_2635[1];
                        {
                            if (false) { DataHelper.extractTypeName(t_2666) };
                            return DataHelper.extractTypeName(t_2666);
                        };
                    }
                } break;

                case 23: {
                    {
                        const name_2667 = temp_2635[1];
                        const t_2668 = temp_2635[2];
                        const expr_2669 = temp_2635[3];
                        const const_2670 = temp_2635[4];
                        const external_2671 = temp_2635[5];
                        return ((external_2671)? ('declare ') : '') + ((const_2670)? ('let ') : 'var ') + name_2667;
                    }
                } break;

                case 21: {
                    {
                        const name_2672 = temp_2635[1];
                        return 'function ' + name_2672 + '() {...}';
                    }
                } break;

                case 43: {
                    {
                        const f_2673 = temp_2635[1];
                        return 'static ' + Node.stringify(f_2673);
                    }
                } break;

                case 46: {
                    {
                        const name_2674 = temp_2635[1];
                        const over_2675 = temp_2635[2];
                        const by_2676 = temp_2635[3];
                        const range_2677 = temp_2635[4];
                        return ('for (' + (name_2674) + ' in ') + Node.stringify(over_2675) + ') {...}';
                    }
                } break;

                default:
                return '...' + node_2633
                };
            };
        } },
        TString: (s_2534)=>[0,s_2534],
        TIdent: (name_2535)=>[1,name_2535],
        TBool: (b_2536)=>[2,b_2536],
        TInt: (s_2537)=>[5,s_2537],
        TFloat: (s_2538)=>[6,s_2538],
        TTypeAlias: (alias_2539,value_2540)=>[8,alias_2539,value_2540],
        TBinop: (a_2541,op_2542,b_2543)=>[9,a_2541,op_2542,b_2543],
        TAssignop: (a_2544,op_2545,b_2546)=>[10,a_2544,op_2545,b_2546],
        TBlock: (el_2547)=>[11,el_2547],
        TCall: (e_2548,args_2549,argNames_2550)=>[12,e_2548,args_2549,argNames_2550],
        TIf: (econd_2551,eif_2552,eelse_2553)=>[13,econd_2551,eif_2552,eelse_2553],
        TParenthesis: (inner_2554)=>[14,inner_2554],
        TReturn: (e_2555)=>[15,e_2555],
        TThrow: (e_2556)=>[16,e_2556],
        TUnop: (op_2557,postfix_2558,e_2559)=>[19,op_2557,postfix_2558,e_2559],
        TWhile: (econd_2560,e_2561,pre_2562)=>[20,econd_2560,e_2561,pre_2562],
        TFunction: (name_2563,expr_2564,vars_2565,retType,external_2566)=>[21,name_2563,expr_2564,vars_2565,retType,external_2566],
        TArrow: (expr_2567,vars_2568,retType_2569)=>[22,expr_2567,vars_2568,retType_2569],
        TVar: (name_2570,t_2571,expr_2572,const_2573,external_2574)=>[23,name_2570,t_2571,expr_2572,const_2573,external_2574],
        TVars: (vars_2575)=>[24,vars_2575],
        TClass: (t_2576,extend_2577,implement_2578,fields_2579,external_2580,kind_2581)=>[25,t_2576,extend_2577,implement_2578,fields_2579,external_2580,kind_2581],
        TProperty: (v_2582,g,s_2583)=>[26,v_2582,g,s_2583],
        TTry: (expr_2584,t_2585,v_2586,catches_2587)=>[27,expr_2584,t_2585,v_2586,catches_2587],
        TDot: (expr_2588,name_2589)=>[28,expr_2588,name_2589],
        TDotUpper: (expr_2590,name_2591)=>[29,expr_2590,name_2591],
        TNew: (path_2592,t_2593,args_2594,fields_2595,el_2596,argNames_2597)=>[30,path_2592,t_2593,args_2594,fields_2595,el_2596,argNames_2597],
        TArray: (elements)=>[31,elements],
        TMap: (keys_2598,values_2599)=>[32,keys_2598,values_2599],
        TIndex: (expr_2600,index_2601)=>[33,expr_2600,index_2601],
        TSwitch: (exprs_2602,conds_2603,guards_2604,cases_2605)=>[34,exprs_2602,conds_2603,guards_2604,cases_2605],
        TModule: (path_2606,el_2607)=>[35,path_2606,el_2607],
        TObject: (names_2608,el_2609)=>[36,names_2608,el_2609],
        TEnum: (t_2610,fields_2611,valuesType_2612,extend_2613)=>[37,t_2610,fields_2611,valuesType_2612,extend_2613],
        TEnumExtract: (path_2614,bind_2615,expr_2616)=>[38,path_2614,bind_2615,expr_2616],
        TUsing: (path_2617)=>[39,path_2617],
        TIs: (expr_2618,t_2619)=>[40,expr_2618,t_2619],
        TAs: (expr_2620,kind_2621,t_2622)=>[41,expr_2620,kind_2621,t_2622],
        TStatic: (field_2623)=>[43,field_2623],
        TPrivate: (field_2624)=>[44,field_2624],
        TExport: (field_2625)=>[45,field_2625],
        TFor: (name_2626,over_2627,by_2628,range_2629)=>[46,name_2626,over_2627,by_2628,range_2629],
        TElvis: (nullable_2630,othewise_2631)=>[47,nullable_2630,othewise_2631],
        NodeTypeValue: (type_2632)=>[48,type_2632],
    }
    Object.defineProperty(Node, "TThis", { get: function() { return [3] }})
    Object.defineProperty(Node, "TSuper", { get: function() { return [4] }})
    Object.defineProperty(Node, "TNull", { get: function() { return [7] }})
    Object.defineProperty(Node, "TBreak", { get: function() { return [17] }})
    Object.defineProperty(Node, "TContinue", { get: function() { return [18] }})
    Object.defineProperty(Node, "TUnderscore", { get: function() { return [42] }})
    var Type = {
        stringify: (type_2712) => { {
            const temp_2713 = type_2712;
            switch (temp_2713&&temp_2713[0]) {
            case 4: {
                {
                    const type_2714 = temp_2713[1];
                    const generic_2715 = temp_2713[2];
                    {
                        {
                            let step_2716 = 0;
                            const gen = generic_2715;
                            if (step_2716 == 0 && gen != null) { step_2716 = 1 };
                            if (step_2716 == 1) { return DataHelper.nameOf(type_2714.parent) + '<' + (() => {
                                const result_2717 = [];
                                const value_2718 = gen;
                                for (const g of $toIterator(value_2718)) result_2717.push(Type.stringify(g));
                                return result_2717;
                            })().join(', ') + '>' };
                        };
                        return DataHelper.nameOf(type_2714.parent);
                    };
                }
            } break;

            case 3: {
                {
                    const type_2719 = temp_2713[1];
                    return DataHelper.nameOf(type_2719.parent);
                }
            } break;

            case 12: {
                {
                    const args_2720 = temp_2713[1];
                    const returns_2721 = temp_2713[2];
                    return '(' + (() => {
                        const result_2722 = [];
                        const value_2723 = args_2720;
                        for (const arg of $toIterator(value_2723)) result_2722.push(Type.stringify(arg));
                        return result_2722;
                    })().join(', ') + ') => ' + Type.stringify(returns_2721);
                }
            } break;

            case 1: {
                {
                    const handle_2724 = temp_2713[1];
                    {
                        {
                            let step_2725 = 0;
                            const value_2726 = handle_2724.value;
                            if (step_2725 == 0 && value_2726 != null) { step_2725 = 1 };
                            if (step_2725 == 1) { return Type.stringify(value_2726) + '?' };
                        };
                        return 'Unknown?';
                    };
                }
            } break;

            case 2: {
                {
                    const type_2727 = temp_2713[1];
                    return Type.stringify(type_2727) + '?';
                }
            } break;

            case 6: {
                {
                    const type_2728 = temp_2713[1];
                    return DataHelper.nameOf(type_2728.parent);
                }
            } break;

            case 0: {
                {
                    const handle_2729 = temp_2713[1];
                    {
                        {
                            let step_2730 = 0;
                            const value_2731 = handle_2729.value;
                            if (step_2730 == 0 && value_2731 != null) { step_2730 = 1 };
                            if (step_2730 == 1) { return Type.stringify(value_2731) };
                        };
                        return 'Unknown';
                    };
                }
            } break;

            case 7: {
                {
                    const type_2732 = temp_2713[1];
                    const tag_2733 = temp_2713[2];
                    return type_2732.name;
                }
            } break;

            default:
            return '~?' + type_2712 + '?~'
            };
        } },
        Unknown: (handle_2692)=>[0,handle_2692],
        UnknownNullable: (handle_2693)=>[1,handle_2693],
        Nullable: (type_2694)=>[2,type_2694],
        Class: (type_2695)=>[3,type_2695],
        ClassInstance: (type_2696,generic_2697)=>[4,type_2696,generic_2697],
        SuperOf: (type_2698)=>[5,type_2698],
        Enum: (type_2699)=>[6,type_2699],
        EnumInstance: (type_2700,tag_2701)=>[7,type_2700,tag_2701],
        EnumConstructor: (type_2702,tag_2703)=>[8,type_2702,tag_2703],
        Alias: (value_2704)=>[9,value_2704],
        Function: (args_2705,returns_2706,lazyTypeCheck)=>[12,args_2705,returns_2706,lazyTypeCheck],
        FunctionType: (type_2707)=>[13,type_2707],
        FunctionInstance: (type_2708)=>[14,type_2708],
        VarLocal: (v_2709)=>[15,v_2709],
        Struct: (names_2710,types_2711)=>[19,names_2710,types_2711],
    }
    Object.defineProperty(Type, "Module", { get: function() { return [10] }})
    Object.defineProperty(Type, "Package", { get: function() { return [11] }})
    Object.defineProperty(Type, "VarClass", { get: function() { return [16] }})
    Object.defineProperty(Type, "VarFor", { get: function() { return [17] }})
    Object.defineProperty(Type, "VarArgument", { get: function() { return [18] }})
    Object.defineProperty(Type, "Halt", { get: function() { return [20] }})
    var Fail = {
    }
    Object.defineProperty(Fail, "ParserError", { get: function() { return [0] }})
    Object.defineProperty(Fail, "ParserInternalError", { get: function() { return [1] }})
    Object.defineProperty(Fail, "LexerError", { get: function() { return [2] }})
    Object.defineProperty(Fail, "TyperError", { get: function() { return [3] }})
    Object.defineProperty(Fail, "InfererError", { get: function() { return [4] }})
    var console_65 = $global.console
    var process_20 = $global.process
    var Typer = class {
        constructor() {
            this.scopes = [new Map()]
            this.parents = new Map()
            this.types = new Map()
            this.typeString = null
            this.typeInt = null
            this.typeFloat = null
            this.typeBool = null
            this.typeArray = null
            this.typeMap = (null)
            this.typeAny = null
            this.typeVoid = null
            this.namespaces = new Map()
            this.functionAllowedToThrow = false
            this.functionThrows = false
            this.insideTry = false
            this.insideFunction = false
            this.insideArrow = false
            this.allowBreakAndContinue = false
            this.functionReturnsAType = null
            this.functionActuallyReturns = false
            this.insideClassMethod = false
            this.allowSuper = false
            this.thisType = (null)
        {
        } };
        fillFiles(collected) {
            const fillModuleNamespace = (m) => {
                let el_740 = (null);
                let root = null;
                {
                    const temp_741 = m;
                    switch (temp_741&&temp_741[0]) {
                    case 35: {
                        {
                            const path_742 = temp_741[1];
                            const els_743 = temp_741[2];
                            {
                                el_740 = els_743;
                                root = path_742.join('.');
                            };
                        }
                    } break;

                    default:
                    throw 'Unreachable #2'
                    };
                };
                if (this.namespaces.get(root) == null) { this.namespaces.set(root, m) } else {
                    let els_744 = (null);
                    {
                        const temp_745 = this.namespaces.get(root);
                        switch (temp_745&&temp_745[0]) {
                        case 35: {
                            {
                                const el_746 = temp_745[2];
                                els_744 = el_746;
                            }
                        } break;

                        default:
                        throw 'Unreachable #1'
                        };
                    };
                    while (el_740.length > 0) els_744.push(el_740.pop());
                };
                {
                    let els_747 = (null);
                    {
                        const temp_748 = this.namespaces.get(root);
                        switch (temp_748&&temp_748[0]) {
                        case 35: {
                            {
                                const el_749 = temp_748[2];
                                els_747 = el_749;
                            }
                        } break;

                        default:
                        throw 'Unreachable #4'
                        };
                    };
                    for (const e of $toIterator(els_747)) {
                        let name_750 = this.nameOfModuleItem(e);
                        let found = false;
                        for (const el of $toIterator(els_747)) {
                            if (this.nameOfModuleItem(el) == name_750) {
                                if (found) { Typer.fail(('The `' + (name_750) + '` already exists in module\n') + Typer.positionOf(el) + ('`' + (name_750) + '` is defined here'), e) };
                                if (!found) { found = true };
                            };
                        };
                    };
                };
            };
            for (const file of $toIterator(collected)) {
                let didInit = false;
                let lastOne = file[0];
                for (const e of $toIterator(file)) {
                    const temp_751 = e;
                    switch (temp_751&&temp_751[0]) {
                    case 35: {
                        {
                            const path_752 = temp_751[1];
                            const el_753 = temp_751[2];
                            {
                                if (didInit) { Typer.fail('Modules should follow before expressions\n' + Typer.positionOf(lastOne) + 'Expression is here', e) };
                                fillModuleNamespace(e);
                            };
                        }
                    } break;

                    default:
                    {
                        lastOne = e;
                        didInit = true;
                    }
                    };
                };
            };
            let intermediate = [];
            {
                let intermediateSubs = [];
                for (const ns of $toIterator(this.namespaces.keys())) {
                    let path_754 = ns.split('.');
                    let namespace = path_754.shift();
                    const check = (namespace_755) => { if (this.namespaces.get(namespace_755) == null && intermediate.indexOf(namespace_755) == -1) { intermediate.push(namespace_755) } };
                    check(namespace);
                    while (path_754.length > 0) {
                        namespace += '.' + path_754.shift();
                        check(namespace);
                    };
                };
                for (const path of $toIterator(intermediate)) {
                    let m_756 = /*TModule*/[35,path.split('.'),[]];
                    this.namespaces.set(path, m_756);
                };
            };
            const findBasicType = (name_757, callback_758) => {
                const subj = this.findInNamespaceRoots(name_757);
                if (subj == null) { console.log('', collected, '\n\n', JSON.stringify(collected), '\n\n\n\n') };
                if (subj == null) { Typer.fail(('Cannot find basic type `' + (name_757) + '`. This type should be a part of standard library of the compilation target.')) };
                return this.registerClassType(subj, callback_758);
            };
            findBasicType('Int', (type_759) => { this.typeInt = type_759.instantiate() });
            findBasicType('Bool', (type_760) => { this.typeBool = type_760.instantiate() });
            findBasicType('Float', (type_761) => { this.typeFloat = type_761.instantiate() });
            findBasicType('String', (type_762) => { this.typeString = type_762.instantiate() });
            findBasicType('Array', (type_763) => { this.typeArray = type_763 });
            findBasicType('Map', (type_764) => { this.typeMap = type_764 });
            findBasicType('Any', (type_765) => { this.typeAny = type_765.instantiate() });
            findBasicType('Void', (type_766) => { this.typeVoid = type_766.instantiate() });
            this.pushScope();
            for (const file of $toIterator(collected)) for (const e of $toIterator(file)) {
                const temp_767 = e;
                switch (temp_767&&temp_767[0]) {
                case 35: {
                    {
                        const path_768 = temp_767[1];
                        const el_769 = temp_767[2];
                        {
                            for (const node of $toIterator(el_769)) {
                                const temp_770 = node;
                                switch (temp_770&&temp_770[0]) {
                                case 25: {
                                    {
                                        this.parents.set(node, e);
                                        this.fill(node);
                                    }
                                } break;

                                case 37: {
                                    {
                                        this.parents.set(node, e);
                                        this.fill(node);
                                    }
                                } break;

                                default:
                                {
                                }
                                };
                            };
                            for (const node of $toIterator(el_769)) {
                                const temp_771 = node;
                                switch (temp_771&&temp_771[0]) {
                                case 25: {
                                    {
                                    }
                                } break;

                                case 37: {
                                    {
                                    }
                                } break;

                                case 21: {
                                    {
                                        this.parents.set(node, e);
                                        this.fill(node);
                                    }
                                } break;

                                default:
                                {
                                    this.parents.set(node, e);
                                    this.fill(node);
                                }
                                };
                            };
                        };
                    }
                } break;

                default:
                {
                }
                };
            };
            this.popScope();
            for (const file of $toIterator(collected)) {
                this.pushScope();
                for (const e of $toIterator(file)) {
                    const temp_772 = e;
                    switch (temp_772&&temp_772[0]) {
                    case 35: {
                        {
                            const path_773 = temp_772[1];
                            const el_774 = temp_772[2];
                            {
                            };
                        }
                    } break;

                    default:
                    this.fill(e)
                    };
                };
                this.popScope();
            };
        };
        find(name_775) {
            {
                let i_776 = 0;
                let it_777 = 0;
                let at_778 = this.scopes.length;
                while (it_777 < at_778) {
                    i_776 = it_777;
                    it_777++;
                    {
                        let step_779 = 0;
                        const subj_780 = this.scopes[this.scopes.length - i_776 - 1].get(name_775);
                        if (step_779 == 0 && subj_780 != null) { step_779 = 1 };
                        if (step_779 == 1) { return subj_780 };
                    };
                };
            };
            return this.findInNamespaceRoots(name_775);
        };
        registerClassType(node_781, callback_782) {
            let step_783 = 0;
            const type_784 = this.types.get(node_781);
            if (step_783 == 0 && type_784 != null) { step_783 = 1 };
            if (step_783 == 1) {
                const temp_785 = type_784;
                switch (temp_785&&temp_785[0]) {
                case 3: {
                    {
                        const t_786 = temp_785[1];
                        {
                            {
                                let step_787 = 0;
                                const setup = callback_782;
                                if (step_787 == 0 && setup != null) { step_787 = 1 };
                                if (step_787 == 1) { setup(t_786) };
                            };
                            return t_786;
                        };
                    }
                } break;

                default:
                Typer.fail('registerClassType called again for? ' + DataHelper.nameOf(node_781), node_781)
                };
            } else {
                const type_788 = new ClassType();
                const _thisType = this.thisType;
                this.thisType = /*ClassInstance*/[4,type_788];
                type_788.parent = node_781;
                type_788.name = DataHelper.nameOf(node_781);
                this.types.set(node_781, /*Class*/[3,type_788]);
                {
                    let step_789 = 0;
                    const setup_790 = callback_782;
                    if (step_789 == 0 && setup_790 != null) { step_789 = 1 };
                    if (step_789 == 1) { setup_790(type_788) };
                };
                {
                    const temp_791 = type_788.name;
                    switch (temp_791) {
                    case 'Int': {
                        this.typeInt = type_788.instantiate()
                    } break;

                    case 'Bool': {
                        this.typeBool = type_788.instantiate()
                    } break;

                    case 'Float': {
                        this.typeFloat = type_788.instantiate()
                    } break;

                    case 'String': {
                        this.typeString = type_788.instantiate()
                    } break;

                    case 'Array': {
                        this.typeArray = type_788
                    } break;

                    case 'Map': {
                        this.typeMap = type_788
                    } break;

                    case 'Any': {
                        this.typeAny = type_788.instantiate()
                    } break;

                    case 'Void': {
                        this.typeVoid = type_788.instantiate()
                    } break;
                    };
                };
                const getRename = (f_792) => {
                    const atts_793 = Project.mapAttributes.get(f_792);
                    {
                        let step_794 = 0;
                        const native_795 = DataHelper.getAttribute(atts_793, 'native');
                        if (step_794 == 0 && native_795 != null) { step_794 = 1 };
                        if (step_794 == 1) {
                            if (native_795.values.length != 1) { throw '@native takes one string argument' };
                            if (native_795 != null) {
                                const temp_796 = native_795.values[0];
                                switch (temp_796&&temp_796[0]) {
                                case 0: {
                                    {
                                        const s_797 = temp_796[1];
                                        return s_797;
                                    }
                                } break;

                                default:
                                throw '@native takes string as argument'
                                };
                            };
                        };
                    };
                    return null;
                };
                {
                    const temp_798 = node_781;
                    switch (temp_798&&temp_798[0]) {
                    case 25: {
                        {
                            const t_799 = temp_798[1];
                            const extend_800 = temp_798[2];
                            const implement = temp_798[3];
                            const f_801 = temp_798[4];
                            const external_802 = temp_798[5];
                            const kind_803 = temp_798[6];
                            {
                                {
                                    const temp_804 = t_799;
                                    switch (temp_804&&temp_804[0]) {
                                    case 2: {
                                        {
                                            const name_805 = temp_804[1];
                                            const params_806 = temp_804[2];
                                            {
                                                const names_807 = [DataHelper.extractTypeName(params_806[0])];
                                                {
                                                    let i_808 = 0;
                                                    let it_809 = 1;
                                                    let at_810 = params_806.length;
                                                    while (it_809 < at_810) {
                                                        i_808 = it_809;
                                                        it_809++;
                                                        {
                                                            const name_811 = DataHelper.extractTypeName(params_806[i_808]);
                                                            if (names_807.includes(name_811)) { Typer.fail(('Parametric type `' + (name_811) + '` already exists in `<T, ...>`'), node_781) };
                                                            names_807.push(name_811);
                                                        };
                                                    };
                                                };
                                            };
                                        }
                                    } break;
                                    };
                                };
                                {
                                    const temp_812 = kind_803;
                                    switch (temp_812) {
                                    case 1: {
                                        type_788.isInterface = true
                                    } break;

                                    case 0: {
                                        {
                                        }
                                    } break;
                                    };
                                };
                                {
                                    let step_813 = 0;
                                    const ext_814 = extend_800;
                                    if (step_813 == 0 && ext_814 != null) { step_813 = 1 };
                                    if (step_813 == 1) { type_788.extend = this.toType(ext_814, node_781) };
                                };
                                for (const impl of $toIterator(implement)) type_788.implement.push(this.toType(impl, node_781));
                                this.pushScope();
                                for (const field of $toIterator(f_801)) {
                                    {
                                        const temp_815 = field;
                                        switch (temp_815&&temp_815[0]) {
                                        case 21: {
                                            {
                                                const name_816 = temp_815[1];
                                                {
                                                    if (type_788.fieldNames.includes(name_816)) { Typer.fail(('Field `' + (name_816) + '` already exists'), field) };
                                                    type_788.fieldNames.push(name_816);
                                                    if (name_816 == 'new') { type_788.constructor = type_788.fieldNames.length - 1 } else type_788.fieldRenames[type_788.fieldNames.length - 1] = getRename(field);
                                                    this.addScope(name_816, field);
                                                };
                                            }
                                        } break;

                                        case 23: {
                                            {
                                                const name_817 = temp_815[1];
                                                const t_818 = temp_815[2];
                                                const e_819 = temp_815[3];
                                                {
                                                    if (type_788.fieldNames.includes(name_817)) { Typer.fail(('Field `' + (name_817) + '` already exists'), field) };
                                                    type_788.fieldNames.push(name_817);
                                                    type_788.fieldInitialized[type_788.fieldNames.length - 1] = false;
                                                    type_788.lateAssignRequired[type_788.fieldNames.length - 1] = e_819 == null && type_788.isInterface == false;
                                                    type_788.fieldRenames[type_788.fieldNames.length - 1] = getRename(field);
                                                    this.addScope(name_817, field);
                                                };
                                            }
                                        } break;

                                        case 26: {
                                            {
                                                const field_820 = temp_815[1];
                                                {
                                                    const temp_821 = field_820;
                                                    switch (temp_821&&temp_821[0]) {
                                                    case 23: {
                                                        {
                                                            const name_822 = temp_821[1];
                                                            {
                                                                if (type_788.fieldNames.includes(name_822)) { Typer.fail(('Field `' + (name_822) + '` already exists'), field_820) };
                                                                type_788.fieldNames.push(name_822);
                                                                this.addScope(name_822, field_820);
                                                            };
                                                        }
                                                    } break;
                                                    };
                                                };
                                            }
                                        } break;

                                        case 43: {
                                            {
                                                const f_823 = temp_815[1];
                                                {
                                                    const temp_824 = f_823;
                                                    switch (temp_824&&temp_824[0]) {
                                                    case 21: {
                                                        {
                                                            const name_825 = temp_824[1];
                                                            {
                                                                if (type_788.fieldNames.includes(name_825)) { Typer.fail(('Field `' + (name_825) + '` already exists'), field) };
                                                                type_788.fieldNames.push(name_825);
                                                                type_788.fieldStatic[type_788.fieldNames.length - 1] = true;
                                                                this.addScope(name_825, field);
                                                            };
                                                        }
                                                    } break;

                                                    case 23: {
                                                        {
                                                            const name_826 = temp_824[1];
                                                            {
                                                                if (type_788.fieldNames.includes(name_826)) { Typer.fail(('Field `' + (name_826) + '` already exists'), field) };
                                                                type_788.fieldNames.push(name_826);
                                                                type_788.fieldStatic[type_788.fieldNames.length - 1] = true;
                                                                this.addScope(name_826, field);
                                                            };
                                                        }
                                                    } break;
                                                    };
                                                };
                                            }
                                        } break;

                                        default:
                                        Typer.fail('Wrong class field format', field)
                                        };
                                    };
                                    this.parents.set(field, node_781);
                                };
                                for (const field of $toIterator(f_801)) {
                                    const temp_827 = field;
                                    switch (temp_827&&temp_827[0]) {
                                    case 23: {
                                        {
                                            const name_828 = temp_827[1];
                                            const t_829 = temp_827[2];
                                            const e_830 = temp_827[3];
                                            const const_831 = temp_827[4];
                                            {
                                                let step_832 = 0;
                                                const t_833 = t_829;
                                                if (step_832 == 0 && t_833 != null) { step_832 = 1 };
                                                if (step_832 == 1) { this.types.set(field, this.toType(t_833, field)) };
                                            };
                                        }
                                    } break;

                                    case 21: {
                                        {
                                            const name_834 = temp_827[1];
                                            const expr_835 = temp_827[2];
                                            const vars_836 = temp_827[3];
                                            const rettype_837 = temp_827[4];
                                            {
                                                let step_838 = 0;
                                                const rettype_839 = rettype_837;
                                                let temp_840 = null;
                                                if (step_838 == 0 && rettype_839 != null) {
                                                    temp_840 = vars_836.length == 0;
                                                    step_838 = 1;
                                                };
                                                if (step_838 == 1 && temp_840 != false) { step_838 = 2 };
                                                if (step_838 == 2) { this.types.set(field, /*Function*/[12,[],this.toType(rettype_839, field)]) } else {
                                                    let step_841 = 0;
                                                    const rettype_842 = rettype_837;
                                                    if (step_841 == 0 && rettype_842 != null) { step_841 = 1 };
                                                    if (step_841 == 1) {
                                                        let typed_843 = true;
                                                        const typez = [];
                                                        for (const v of $toIterator(vars_836)) {
                                                            const temp_844 = v;
                                                            switch (temp_844&&temp_844[0]) {
                                                            case 23: {
                                                                {
                                                                    const name_845 = temp_844[1];
                                                                    const t_846 = temp_844[2];
                                                                    const e_847 = temp_844[3];
                                                                    const const_848 = temp_844[4];
                                                                    {
                                                                        let step_849 = 0;
                                                                        const type_850 = t_846;
                                                                        if (step_849 == 0 && type_850 != null) { step_849 = 1 };
                                                                        if (step_849 == 1) { typez.push(this.toType(type_850, v)) } else typed_843 = false;
                                                                    };
                                                                }
                                                            } break;
                                                            };
                                                        };
                                                        if (typed_843) { this.types.set(field, /*Function*/[12,typez,this.toType(rettype_842, field)]) };
                                                    };
                                                };
                                            };
                                        }
                                    } break;
                                    };
                                };
                                for (const field of $toIterator(f_801)) {
                                    const temp_851 = field;
                                    switch (temp_851&&temp_851[0]) {
                                    case 21: {
                                        {
                                            const name_852 = temp_851[1];
                                            const expr_853 = temp_851[2];
                                            const vars_854 = temp_851[3];
                                            const rettype_855 = temp_851[4];
                                            {
                                                if (name_852 == 'new') { type_788.constructor = type_788.fieldNames.length - 1 };
                                                if ((external_802) && (expr_853 != null)) { if (name_852 == 'new') { Typer.fail('External class constructor `new()` cannot have a body `{}`', field) } else Typer.fail(('External class method `function ' + (name_852) + '` cannot have a body `{}`'), field) };
                                                if ((!external_802) && (expr_853 == null)) { if (name_852 == 'new') { Typer.fail('Non-external class constructor `new()` should have a body `{}`', field) } else Typer.fail(('Non-external class method `function ' + (name_852) + '` should have a body `{}`'), field) };
                                                const _insideClassMethod = this.insideClassMethod;
                                                const _allowSuper = this.allowSuper;
                                                this.insideClassMethod = true;
                                                this.allowSuper = (extend_800 != null);
                                                if (!external_802) { this.fillFunction(field, expr_853, vars_854, rettype_855) };
                                                if ((external_802) && (this.types.get(field) == null)) { this.types.set(field, /*Function*/[12,[],rettype_855 != (null)? (this.toType(rettype_855, field)) : this.typeVoid]) };
                                                this.insideClassMethod = _insideClassMethod;
                                                this.allowSuper = _allowSuper;
                                            };
                                        }
                                    } break;

                                    case 23: {
                                        {
                                            const name_856 = temp_851[1];
                                            const t_857 = temp_851[2];
                                            const e_858 = temp_851[3];
                                            const const_859 = temp_851[4];
                                            {
                                                if ((external_802) && (e_858 != null)) { Typer.fail(('External class field `var ' + (name_856) + '` cannot have `= value`'), field) };
                                                const _insideClassMethod_860 = this.insideClassMethod;
                                                this.insideClassMethod = true;
                                                if (e_858 != null) { this.fillExpression(e_858) };
                                                this.insideClassMethod = _insideClassMethod_860;
                                                this.mixVarTypes(t_857, e_858, field);
                                                type_788.fieldInitialized[type_788.fieldNames.indexOf(name_856)] = true;
                                                if (this.types.get(field) == null) { Typer.fail(('Field `var ' + (name_856) + '` initialized, but got no type ') + e_858, field) };
                                            };
                                        }
                                    } break;

                                    case 26: {
                                        {
                                            const f_861 = temp_851[1];
                                            {
                                                const temp_862 = f_861;
                                                switch (temp_862&&temp_862[0]) {
                                                case 23: {
                                                    {
                                                        const name_863 = temp_862[1];
                                                        const t_864 = temp_862[2];
                                                        const e_865 = temp_862[3];
                                                        const const_866 = temp_862[4];
                                                        {
                                                            if ((external_802) && (e_865 != null)) { Typer.fail(('External class field `var ' + (name_863) + '` cannot have expression'), field) };
                                                            const _insideClassMethod_867 = this.insideClassMethod;
                                                            this.insideClassMethod = true;
                                                            if (e_865 != null) { this.fillExpression(e_865) };
                                                            this.insideClassMethod = _insideClassMethod_867;
                                                            this.mixVarTypes(t_864, e_865, f_861);
                                                            type_788.fieldInitialized[type_788.fieldNames.indexOf(name_863)] = true;
                                                            if (this.types.get(f_861) == null) { Typer.fail(('Property `' + (name_863) + '` initialized, but got no type ') + e_865, field) };
                                                            this.types.set(field, this.types.get(f_861));
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                        }
                                    } break;

                                    case 43: {
                                        {
                                            const f_868 = temp_851[1];
                                            {
                                                const temp_869 = f_868;
                                                switch (temp_869&&temp_869[0]) {
                                                case 21: {
                                                    {
                                                        const name_870 = temp_869[1];
                                                        const expr_871 = temp_869[2];
                                                        const vars_872 = temp_869[3];
                                                        const rettype_873 = temp_869[4];
                                                        {
                                                            if ((external_802) && (expr_871 != null)) { Typer.fail(('External class field `static function ' + (name_870) + '` cannot have a body'), field) };
                                                            const _insideClassMethod_874 = this.insideClassMethod;
                                                            this.insideClassMethod = false;
                                                            if (!external_802) { this.fillFunction(f_868, expr_871, vars_872, rettype_873) };
                                                            if (external_802) { this.types.set(f_868, /*Function*/[12,[],rettype_873 != (null)? (this.toType(rettype_873, f_868)) : this.typeVoid]) };
                                                            this.insideClassMethod = _insideClassMethod_874;
                                                            if (this.types.get(f_868) == null) { Typer.fail('Function get no type: class ' + DataHelper.nameOf(node_781) + ' static ' + name_870, f_868) };
                                                            this.types.set(field, this.types.get(f_868));
                                                        };
                                                    }
                                                } break;

                                                case 23: {
                                                    {
                                                        const name_875 = temp_869[1];
                                                        const t_876 = temp_869[2];
                                                        const e_877 = temp_869[3];
                                                        const const_878 = temp_869[4];
                                                        {
                                                            if ((external_802) && (e_877 != null)) { Typer.fail(('External class field `static var ' + (name_875) + '` cannot have expression'), field) };
                                                            if (e_877 != null) { this.fillExpression(e_877) };
                                                            this.mixVarTypes(t_876, e_877, f_868);
                                                            this.types.set(field, this.types.get(f_868));
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                        }
                                    } break;

                                    default:
                                    Typer.fail('Wrong class field format', node_781)
                                    };
                                };
                                this.popScope();
                                if (!external_802) {
                                    let id = 0;
                                    let it_879 = 0;
                                    let at_880 = type_788.lateAssignRequired.length;
                                    while (it_879 < at_880) {
                                        id = it_879;
                                        it_879++;
                                        if (type_788.lateAssignRequired[id]) {};
                                    };
                                };
                            };
                        }
                    } break;

                    default:
                    Typer.fail('ClassType expects (declare) class node, but got ' + node_781, node_781)
                    };
                };
                this.thisType = _thisType;
                return type_788;
            };
        };
        registerEnumType(node_881) {
            let step_882 = 0;
            const type_883 = this.types.get(node_881);
            if (step_882 == 0 && type_883 != null) { step_882 = 1 };
            if (step_882 == 1) {
                const temp_884 = type_883;
                switch (temp_884&&temp_884[0]) {
                case 6: {
                    {
                        const t_885 = temp_884[1];
                        return t_885;
                    }
                } break;
                };
            } else {
                const type_886 = new EnumType();
                type_886.parent = node_881;
                type_886.name = DataHelper.nameOf(node_881);
                this.types.set(node_881, /*Enum*/[6,type_886]);
                let tag_887 = 0;
                {
                    const temp_888 = node_881;
                    switch (temp_888&&temp_888[0]) {
                    case 37: {
                        {
                            const t_889 = temp_888[1];
                            const f_890 = temp_888[2];
                            const valuesType_891 = temp_888[3];
                            const extend_892 = temp_888[4];
                            {
                                let valuesType_893 = valuesType_891;
                                {
                                    let step_894 = 0;
                                    const ext_895 = extend_892;
                                    if (step_894 == 0 && ext_895 != null) { step_894 = 1 };
                                    if (step_894 == 1) {
                                        const parent_896 = this.toType(ext_895, node_881);
                                        if (valuesType_893 != null) { Typer.fail(('Simple enums which extend other enums should not have `: ' + (NodeType.stringify(valuesType_893)) + '`'), node_881) };
                                        {
                                            const temp_897 = parent_896;
                                            switch (temp_897&&temp_897[0]) {
                                            case 6: {
                                                {
                                                    const etype = temp_897[1];
                                                    {
                                                        let step_898 = 0;
                                                        const vts = etype.fieldsTypeSimple;
                                                        if (step_898 == 0 && vts != null) { step_898 = 1 };
                                                        if (step_898 == 1) {
                                                            const temp_899 = etype.parent;
                                                            switch (temp_899&&temp_899[0]) {
                                                            case 37: {
                                                                {
                                                                    const t_900 = temp_899[1];
                                                                    const f_901 = temp_899[2];
                                                                    const v_902 = temp_899[3];
                                                                    const extend_903 = temp_899[4];
                                                                    {
                                                                        valuesType_893 = v_902;
                                                                        type_886.extend = etype;
                                                                        if (etype.extend != null) { Typer.fail('Extending enum which extends other enum is not yet supported', node_881) };
                                                                    };
                                                                }
                                                            } break;
                                                            };
                                                        } else Typer.fail(('Simple enum extends `' + (NodeType.stringify(extend_892)) + '` which is *not* simple enum and has no `: T` value type'), node_881);
                                                    };
                                                }
                                            } break;

                                            default:
                                            Typer.fail(('Simple enum extends `' + (NodeType.stringify(extend_892)) + '` which is *not* enum'), node_881)
                                            };
                                        };
                                    };
                                };
                                this.pushScope();
                                {
                                    let step_904 = 0;
                                    const valuesType_905 = valuesType_893;
                                    if (step_904 == 0 && valuesType_905 != null) { step_904 = 1 };
                                    if (step_904 == 1) { type_886.fieldsTypeSimple = this.toType(valuesType_905, node_881) };
                                };
                                if ((type_886.fieldsTypeSimple != null) && (type_886.fieldsTypeSimple != this.typeInt) && (type_886.fieldsTypeSimple != this.typeString)) { Typer.fail('Simple enums may be only of types `Int` and `String`', node_881) };
                                for (const field of $toIterator(f_890)) {
                                    {
                                        const temp_906 = field;
                                        switch (temp_906&&temp_906[0]) {
                                        case 48: {
                                            {
                                                const t_907 = temp_906[1];
                                                {
                                                    const temp_908 = t_907;
                                                    switch (temp_908&&temp_908[0]) {
                                                    case 1: {
                                                        {
                                                            const name_909 = temp_908[1];
                                                            {
                                                                if (type_886.fieldNames.includes(name_909)) { throw Typer.fail(('Field `' + (name_909) + '` already exists'), node_881) };
                                                                {
                                                                    let step_910 = 0;
                                                                    const extend_911 = type_886.extend;
                                                                    let temp_912 = null;
                                                                    if (step_910 == 0 && extend_911 != null) {
                                                                        temp_912 = extend_911.fieldNames.includes(name_909);
                                                                        step_910 = 1;
                                                                    };
                                                                    if (step_910 == 1 && temp_912 != false) { step_910 = 2 };
                                                                    if (step_910 == 2) { throw Typer.fail(('Field `' + (name_909) + '` already exists in parent type'), node_881) };
                                                                };
                                                                type_886.fieldNames.push(name_909);
                                                                type_886.fieldEnumConstructor[type_886.fieldNames.length - 1] = true;
                                                                type_886.tagBindVars[type_886.fieldNames.length - 1] = [];
                                                                type_886.tagBindVarsNames[type_886.fieldNames.length - 1] = [];
                                                                type_886.fieldType[type_886.fieldNames.length - 1] = /*EnumInstance*/[7,type_886,tag_887++];
                                                            };
                                                        }
                                                    } break;

                                                    default:
                                                    Typer.fail('Wrong enum constructor format, should be `Name`', node_881)
                                                    };
                                                };
                                            }
                                        } break;

                                        case 12: {
                                            {
                                                const e_913 = temp_906[1];
                                                const args_914 = temp_906[2];
                                                const argNames_915 = temp_906[3];
                                                {
                                                    if (valuesType_893 != null) { throw Typer.fail('Cannot use `Value(args)` format for simple enum', node_881) };
                                                    {
                                                        const temp_916 = e_913;
                                                        switch (temp_916&&temp_916[0]) {
                                                        case 48: {
                                                            {
                                                                const t_917 = temp_916[1];
                                                                {
                                                                    const temp_918 = t_917;
                                                                    switch (temp_918&&temp_918[0]) {
                                                                    case 1: {
                                                                        {
                                                                            const name_919 = temp_918[1];
                                                                            {
                                                                                if (type_886.fieldNames.includes(name_919)) { throw Typer.fail(('Field `' + (name_919) + '` already exists'), node_881) };
                                                                                type_886.fieldNames.push(name_919);
                                                                                type_886.fieldEnumConstructor[type_886.fieldNames.length - 1] = true;
                                                                                type_886.fieldType[type_886.fieldNames.length - 1] = /*EnumConstructor*/[8,type_886,tag_887++];
                                                                                const tagBindVars = [];
                                                                                const tagBindVarsNames = [];
                                                                                type_886.tagBindVars[type_886.fieldNames.length - 1] = tagBindVars;
                                                                                type_886.tagBindVarsNames[type_886.fieldNames.length - 1] = tagBindVarsNames;
                                                                                if (args_914.length == 0) { Typer.fail('Enum constructor expects more than zero arguments `(value: Type)`', e_913) };
                                                                                {
                                                                                    let i_920 = 0;
                                                                                    let it_921 = 0;
                                                                                    let at_922 = args_914.length;
                                                                                    while (it_921 < at_922) {
                                                                                        i_920 = it_921;
                                                                                        it_921++;
                                                                                        {
                                                                                            if (argNames_915[i_920] == null) { Typer.fail('Enum constructor arguments should have names `E(name1: T, name2: T)', args_914[i_920]) };
                                                                                            tagBindVars[i_920] = Typer.nodeToNodeType(args_914[i_920]);
                                                                                            tagBindVarsNames[i_920] = argNames_915[i_920];
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        }
                                                                    } break;

                                                                    default:
                                                                    Typer.fail('Wrong enum constructor format, should be `Name(value: T)`', e_913)
                                                                    };
                                                                };
                                                            }
                                                        } break;
                                                        };
                                                    };
                                                };
                                            }
                                        } break;

                                        case 9: {
                                            {
                                                const a_923 = temp_906[1];
                                                const op_924 = temp_906[2];
                                                const b_925 = temp_906[3];
                                                {
                                                    if (op_924 != 91) { Typer.fail(('Should use `Value = value` not `Value ' + (Token.stringify(op_924)) + ' value` format for enum tag value'), node_881) };
                                                    if (valuesType_893 == null) { Typer.fail('Cannot use `Value = value` format for complex enum', node_881) };
                                                    {
                                                        const temp_926 = a_923;
                                                        switch (temp_926&&temp_926[0]) {
                                                        case 48: {
                                                            {
                                                                const t_927 = temp_926[1];
                                                                {
                                                                    const temp_928 = t_927;
                                                                    switch (temp_928&&temp_928[0]) {
                                                                    case 1: {
                                                                        {
                                                                            const name_929 = temp_928[1];
                                                                            {
                                                                                if (type_886.fieldNames.includes(name_929)) { Typer.fail(('Field `' + (name_929) + '` already exists'), node_881) };
                                                                                type_886.fieldNames.push(name_929);
                                                                                type_886.fieldEnumConstructor[type_886.fieldNames.length - 1] = true;
                                                                                {
                                                                                    const temp_930 = b_925;
                                                                                    switch (temp_930&&temp_930[0]) {
                                                                                    case 5: {
                                                                                        if (this.followAlias(type_886.fieldsTypeSimple) != this.typeInt) { Typer.fail(('`' + (name_929) + ' = value` expects constant value of type `' + (Type.stringify(type_886.fieldsTypeSimple)) + '`'), b_925) }
                                                                                    } break;

                                                                                    case 0: {
                                                                                        if (this.followAlias(type_886.fieldsTypeSimple) != this.typeString) { Typer.fail(('`' + (name_929) + ' = value` expects constant value of type `' + (Type.stringify(type_886.fieldsTypeSimple)) + '`'), b_925) }
                                                                                    } break;
                                                                                    };
                                                                                };
                                                                                this.fillExpression(b_925);
                                                                                type_886.fieldType[type_886.fieldNames.length - 1] = this.types.get(b_925);
                                                                            };
                                                                        }
                                                                    } break;
                                                                    };
                                                                };
                                                            }
                                                        } break;
                                                        };
                                                    };
                                                };
                                            }
                                        } break;

                                        case 1: {
                                            {
                                                const name_931 = temp_906[1];
                                                Typer.fail(('Cannot use lowercase `' + (name_931) + '` format for enum values'), node_881);
                                            }
                                        } break;

                                        case 43: {
                                            {
                                                const f_932 = temp_906[1];
                                                {
                                                    const temp_933 = f_932;
                                                    switch (temp_933&&temp_933[0]) {
                                                    case 21: {
                                                        {
                                                            const name_934 = temp_933[1];
                                                            {
                                                                if (type_886.fieldNames.includes(name_934)) { Typer.fail(('Field `' + (name_934) + '` already exists'), node_881) };
                                                                type_886.fieldNames.push(name_934);
                                                                type_886.fieldStatic[type_886.fieldNames.length - 1] = true;
                                                                this.addScope(name_934, field);
                                                            };
                                                        }
                                                    } break;

                                                    case 23: {
                                                        {
                                                            const name_935 = temp_933[1];
                                                            {
                                                                if (type_886.fieldNames.includes(name_935)) { Typer.fail(('Field `' + (name_935) + '` already exists'), node_881) };
                                                                type_886.fieldNames.push(name_935);
                                                                type_886.fieldStatic[type_886.fieldNames.length - 1] = true;
                                                                this.addScope(name_935, field);
                                                            };
                                                        }
                                                    } break;
                                                    };
                                                };
                                            }
                                        } break;

                                        default:
                                        Typer.fail('Wrong enum field format', field)
                                        };
                                    };
                                    this.parents.set(field, node_881);
                                };
                                for (const field of $toIterator(f_890)) {
                                    const temp_936 = field;
                                    switch (temp_936&&temp_936[0]) {
                                    case 21: {
                                        {
                                            const name_937 = temp_936[1];
                                            const expr_938 = temp_936[2];
                                            const vars_939 = temp_936[3];
                                            const rettype_940 = temp_936[4];
                                            this.fillFunction(field, expr_938, vars_939, rettype_940);
                                        }
                                    } break;

                                    case 23: {
                                        {
                                            const name_941 = temp_936[1];
                                            {
                                            };
                                        }
                                    } break;

                                    case 43: {
                                        {
                                            const f_942 = temp_936[1];
                                            {
                                                const temp_943 = f_942;
                                                switch (temp_943&&temp_943[0]) {
                                                case 21: {
                                                    {
                                                        const name_944 = temp_943[1];
                                                        const expr_945 = temp_943[2];
                                                        const vars_946 = temp_943[3];
                                                        const rettype_947 = temp_943[4];
                                                        {
                                                            const _insideClassMethod_948 = this.insideClassMethod;
                                                            this.insideClassMethod = false;
                                                            if (rettype_947 != null) { this.types.set(f_942, /*Function*/[12,[],this.toType(rettype_947, f_942)]) } else this.types.set(f_942, /*Function*/[12,[],this.typeVoid]);
                                                            this.types.set(field, this.types.get(f_942));
                                                            this.fillFunction(f_942, expr_945, vars_946, rettype_947);
                                                            this.insideClassMethod = _insideClassMethod_948;
                                                            if (this.types.get(f_942) == null) { Typer.fail('Function get no type: enum ' + DataHelper.nameOf(node_881) + ' static ' + name_944, f_942) };
                                                            this.types.set(field, this.types.get(f_942));
                                                        };
                                                    }
                                                } break;

                                                case 23: {
                                                    {
                                                        const name_949 = temp_943[1];
                                                        const t_950 = temp_943[2];
                                                        const e_951 = temp_943[3];
                                                        const const_952 = temp_943[4];
                                                        {
                                                            if (e_951 != null) { this.fillExpression(e_951) };
                                                            this.mixVarTypes(t_950, e_951, f_942);
                                                            this.types.set(field, this.types.get(f_942));
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                        }
                                    } break;

                                    case 48: {
                                        {
                                        }
                                    } break;

                                    case 12: {
                                        {
                                        }
                                    } break;

                                    case 9: {
                                        {
                                        }
                                    } break;

                                    default:
                                    {
                                        Typer.fail('Unknown enum field format ' + field, field);
                                        Typer.fail('Unknown enum field format', field);
                                    }
                                    };
                                };
                                this.popScope();
                            };
                        }
                    } break;

                    default:
                    Typer.fail('EnumType expects (declare) enum node, but got ' + node_881, node_881)
                    };
                };
                return type_886;
            };
        };
        nameOfModuleItem(node_966) {
            const temp_967 = node_966;
            switch (temp_967&&temp_967[0]) {
            case 23: {
                {
                    const name_968 = temp_967[1];
                    return name_968;
                }
            } break;

            case 21: {
                {
                    const name_969 = temp_967[1];
                    {
                        let step_970 = 0;
                        const named = name_969;
                        if (step_970 == 0 && named != null) { step_970 = 1 };
                        if (step_970 == 1) { return named } else throw 'Module function should have a name';
                    };
                }
            } break;

            case 44: {
                {
                    const node_971 = temp_967[1];
                    {
                        const temp_972 = node_971;
                        switch (temp_972&&temp_972[0]) {
                        case 25: {
                            {
                                const t_973 = temp_972[1];
                                {
                                    const temp_974 = t_973;
                                    switch (temp_974&&temp_974[0]) {
                                    case 1: {
                                        {
                                            const name_975 = temp_974[1];
                                            return name_975;
                                        }
                                    } break;

                                    case 2: {
                                        {
                                            const name_976 = temp_974[1];
                                            return name_976;
                                        }
                                    } break;
                                    };
                                };
                            }
                        } break;
                        };
                    };
                }
            } break;

            case 25: {
                {
                    const t_977 = temp_967[1];
                    {
                        const temp_978 = t_977;
                        switch (temp_978&&temp_978[0]) {
                        case 1: {
                            {
                                const name_979 = temp_978[1];
                                return name_979;
                            }
                        } break;

                        case 2: {
                            {
                                const name_980 = temp_978[1];
                                return name_980;
                            }
                        } break;
                        };
                    };
                }
            } break;

            case 37: {
                {
                    const t_981 = temp_967[1];
                    {
                        const temp_982 = t_981;
                        switch (temp_982&&temp_982[0]) {
                        case 1: {
                            {
                                const name_983 = temp_982[1];
                                return name_983;
                            }
                        } break;

                        case 2: {
                            {
                                const name_984 = temp_982[1];
                                return name_984;
                            }
                        } break;
                        };
                    };
                }
            } break;

            case 8: {
                {
                    const t_985 = temp_967[1];
                    {
                        const temp_986 = t_985;
                        switch (temp_986&&temp_986[0]) {
                        case 1: {
                            {
                                const name_987 = temp_986[1];
                                return name_987;
                            }
                        } break;

                        case 2: {
                            {
                                const name_988 = temp_986[1];
                                return name_988;
                            }
                        } break;
                        };
                    };
                }
            } break;

            default:
            Typer.fail('Improper module item format', node_966)
            };
        };
        findInNamespaceRoots(name_989) {
            if (this.namespaces.get(name_989) != null) { return this.namespaces.get(name_989) };
            let m_990 = this.namespaces.get('');
            let el_991 = (null);
            {
                const temp_992 = m_990;
                switch (temp_992&&temp_992[0]) {
                case 35: {
                    {
                        const els_993 = temp_992[2];
                        el_991 = els_993;
                    }
                } break;

                default:
                return null
                };
            };
            for (const e of $toIterator(el_991)) if (name_989 == this.nameOfModuleItem(e)) { return e };
            return null;
        };
        pushScope() { this.scopes.push((new Map())) };
        popScope() { this.scopes.pop() };
        addScope(name_994, node_995) { this.scopes[this.scopes.length - 1].set(name_994, node_995) };
        unify(to, from, node_996) {
            if (to == from) { return to };
            if (to == this.typeAny) { return to };
            if (from == this.typeVoid) { Typer.fail(('Incompatible types `' + (Type.stringify(to)) + '` and non-value type `Void`') + this.typeVoid, node_996) };
            if ((to == this.typeFloat) && (from == this.typeInt)) { return this.typeFloat };
            const isNullable = (t_997) => {
                {
                    const temp_998 = t_997;
                    switch (temp_998&&temp_998[0]) {
                    case 1: {
                        return true
                    } break;

                    case 2: {
                        return true
                    } break;
                    };
                };
                return false;
            };
            const unwrapNullable = (t_999) => {
                {
                    const temp_1000 = t_999;
                    switch (temp_1000&&temp_1000[0]) {
                    case 1: {
                        {
                            const handle = temp_1000[1];
                            return handle.value;
                        }
                    } break;

                    case 2: {
                        {
                            const t_1001 = temp_1000[1];
                            return t_1001;
                        }
                    } break;
                    };
                };
                return t_999;
            };
            const instanceOfClass = (t_1002) => {
                {
                    const temp_1003 = unwrapNullable(t_1002);
                    switch (temp_1003&&temp_1003[0]) {
                    case 4: {
                        {
                            const t_1004 = temp_1003[1];
                            return t_1004;
                        }
                    } break;

                    case 3: {
                        {
                            const t_1005 = temp_1003[1];
                            Typer.fail(('Cannot take classes `class ' + (t_1005.name) + '` as values'), node_996);
                        }
                    } break;
                    };
                };
                return null;
            };
            let toNullable = isNullable(to);
            let fromNullable = isNullable(from);
            if ((fromNullable) && (!toNullable)) {
                const temp_1006 = from;
                switch (temp_1006&&temp_1006[0]) {
                case 1: {
                    {
                        const handle_1007 = temp_1006[1];
                        if (handle_1007.value == null) { Typer.fail(('Cannot assign `null` to non-nullable `' + (Type.stringify(to)) + '`'), node_996) };
                    }
                } break;
                };
            };
            let toInstance = instanceOfClass(to);
            let fromInstance = instanceOfClass(from);
            if (toInstance == null || fromInstance == null) { return (() => {
                const result_1008 = to;
                if (result_1008 != null) { return result_1008 };
                return from;
            })() };
            if ((toInstance != fromInstance) && (to != this.typeAny) && (from != this.typeAny)) { Typer.fail(('Incompatible types `' + (Type.stringify(to)) + '` and value of `' + (Type.stringify(from)) + '`'), node_996) };
            return (() => {
                const result_1009 = to;
                if (result_1009 != null) { return result_1009 };
                return from;
            })();
        };
        findType(name_1010) {
            {
                let i_1011 = 0;
                let it_1012 = 0;
                let at_1013 = this.scopes.length;
                while (it_1012 < at_1013) {
                    i_1011 = it_1012;
                    it_1012++;
                    {
                        let step_1014 = 0;
                        const subj_1015 = this.scopes[this.scopes.length - i_1011 - 1].get(name_1010);
                        if (step_1014 == 0 && subj_1015 != null) { step_1014 = 1 };
                        if (step_1014 == 1) { return subj_1015 };
                    };
                };
            };
            return this.findInNamespaceRoots(name_1010);
        };
        toType(t_1016, node_1017) {
            const temp_1018 = t_1016;
            switch (temp_1018&&temp_1018[0]) {
            case 1: {
                {
                    const name_1019 = temp_1018[1];
                    {
                        const nodeType = this.findType(name_1019);
                        if (this.types.get(nodeType) == null) {
                            const temp_1020 = nodeType;
                            switch (temp_1020&&temp_1020[0]) {
                            case 25: {
                                this.registerClassType(nodeType)
                            } break;

                            case 37: {
                                this.registerEnumType(nodeType)
                            } break;
                            };
                        };
                        {
                            const temp_1021 = this.types.get(nodeType);
                            switch (temp_1021&&temp_1021[0]) {
                            case 3: {
                                {
                                    const type_1022 = temp_1021[1];
                                    return type_1022.instantiate();
                                }
                            } break;

                            case 6: {
                                {
                                    const type_1023 = temp_1021[1];
                                    return this.types.get(nodeType);
                                }
                            } break;

                            case null: case undefined: {
                                {
                                    if (this.typeAny == null) { this.typeAny = this.registerClassType(this.findInNamespaceRoots('Any')).instantiate() };
                                    if (this.typeAny == null) { Typer.fail('still, typeAny == null', node_1017) };
                                    if (name_1019 == 'T') { return this.typeAny };
                                    if (name_1019 == 'V') { return this.typeAny };
                                    if (name_1019 == 'K') { return this.typeAny };
                                    Typer.fail(('Cannot find type `' + (name_1019) + '`'), node_1017);
                                }
                            } break;

                            default:
                            Typer.fail(('Unsupported type `' + (name_1019) + '`'), node_1017)
                            };
                        };
                    };
                }
            } break;

            case 2: {
                {
                    const name_1024 = temp_1018[1];
                    const params_1025 = temp_1018[2];
                    {
                        const nodeType_1026 = this.findType(name_1024);
                        if (this.types.get(nodeType_1026) == null) {
                            const temp_1027 = nodeType_1026;
                            switch (temp_1027&&temp_1027[0]) {
                            case 25: {
                                this.registerClassType(nodeType_1026)
                            } break;

                            case 37: {
                                this.registerEnumType(nodeType_1026)
                            } break;
                            };
                        };
                        {
                            const temp_1028 = this.types.get(nodeType_1026);
                            switch (temp_1028&&temp_1028[0]) {
                            case 3: {
                                {
                                    const type_1029 = temp_1028[1];
                                    return type_1029.instantiateGeneric((() => {
                                        const result_1030 = [];
                                        const value_1031 = params_1025;
                                        for (const p of $toIterator(value_1031)) result_1030.push(this.toType(p, node_1017));
                                        return result_1030;
                                    })());
                                }
                            } break;

                            case null: case undefined: {
                                Typer.fail(('Cannot find type `' + (name_1024) + '`'), node_1017)
                            } break;

                            default:
                            Typer.fail(('Unsupported type `' + (name_1024) + '`'), node_1017)
                            };
                        };
                    };
                }
            } break;

            case 0: {
                {
                    const t_1032 = temp_1018[1];
                    return /*Nullable*/[2,this.toType(t_1032, node_1017)];
                }
            } break;

            case 3: {
                {
                    const args_1033 = temp_1018[1];
                    const ret = temp_1018[2];
                    return /*Function*/[12,(() => {
                        const result_1034 = [];
                        const value_1035 = args_1033;
                        for (const arg of $toIterator(value_1035)) result_1034.push(this.toType(arg, node_1017));
                        return result_1034;
                    })(),this.toType(ret, node_1017)];
                }
            } break;

            case 5: {
                {
                    const names_1036 = temp_1018[1];
                    const el_1037 = temp_1018[2];
                    {
                        const els_1038 = (() => {
                            const result_1039 = [];
                            const value_1040 = el_1037;
                            for (const e of $toIterator(value_1040)) result_1039.push(this.toType(e, node_1017));
                            return result_1039;
                        })();
                        return /*Struct*/[19,names_1036,els_1038];
                    };
                }
            } break;

            default:
            Typer.fail('Unsupported node type ' + t_1016 + Typer.never, node_1017)
            };
        };
        mixVarTypes(t_1041, e_1042, node_1043) {
            if ((t_1041 != null) && (e_1042 != null)) { this.types.set(node_1043, this.unify(this.toType(t_1041, node_1043), this.types.get(e_1042), e_1042)) };
            if ((t_1041 == null) && (e_1042 != null)) { this.types.set(node_1043, this.types.get(e_1042)) };
            if ((t_1041 == null) && (e_1042 == null)) { this.types.set(node_1043, /*UnknownNullable*/[1,{value:null}]) };
            if ((t_1041 != null) && (e_1042 == null)) { this.types.set(node_1043, this.toType(t_1041, node_1043)) };
        };
        followAlias(type_1044) { return type_1044 };
        fillFunction(node_1045, expr_1046, vars_1047, rettype_1048, arrow) {
            this.pushScope();
            const _insideFunction = this.insideFunction;
            const _functionAllowedToThrow = this.functionAllowedToThrow;
            const _functionThrows = this.functionThrows;
            const _functionReturnsAType = this.functionReturnsAType;
            const _functionActuallyReturns = this.functionActuallyReturns;
            const _insideTry = this.insideTry;
            {
                let i_1049 = 0;
                let it_1050 = 0;
                let at_1051 = vars_1047.length;
                while (it_1050 < at_1051) {
                    i_1049 = it_1050;
                    it_1050++;
                    {
                        const v_1052 = vars_1047[i_1049];
                        {
                            const temp_1053 = v_1052;
                            switch (temp_1053&&temp_1053[0]) {
                            case 23: {
                                {
                                    const vname_1054 = temp_1053[1];
                                    const t_1055 = temp_1053[2];
                                    const e_1056 = temp_1053[3];
                                    const const_1057 = temp_1053[4];
                                    {
                                        if ((t_1055 != null) && (this.toType(t_1055, v_1052) == this.typeVoid)) { Typer.fail('Argument cannot be of type `Void`', v_1052) };
                                        if (e_1056 != null) { this.fillExpression(e_1056) };
                                        if (t_1055 != null) { this.types.set(v_1052, this.toType(t_1055, v_1052)) };
                                        this.addScope(vname_1054, v_1052);
                                    };
                                }
                            } break;
                            };
                        };
                    };
                };
            };
            let ret_1058 = null;
            {
                let step_1059 = 0;
                const rt = rettype_1048;
                if (step_1059 == 0 && rt != null) { step_1059 = 1 };
                if (step_1059 == 1) { ret_1058 = this.toType(rt, node_1045) };
            };
            this.functionReturnsAType = ret_1058;
            this.functionActuallyReturns = false;
            const atts_1060 = Project.mapAttributes.get(node_1045);
            {
                let step_1061 = 0;
                const noThrow = DataHelper.getAttribute(atts_1060, 'noThrow');
                if (step_1061 == 0 && noThrow != null) { step_1061 = 1 };
                if (step_1061 == 1) {
                    if (noThrow.values.length > 0) { Typer.fail('Attribute `@noThrow` should have no parameters', node_1045) };
                    this.functionAllowedToThrow = false;
                } else this.functionAllowedToThrow = true;
            };
            {
                let step_1062 = 0;
                const throws = DataHelper.getAttribute(atts_1060, 'throws');
                if (step_1062 == 0 && throws != null) { step_1062 = 1 };
                if (step_1062 == 1) {
                    if (this.functionAllowedToThrow == false) { Typer.fail('Attribute `@noThrow` cannot be used with `@throws`', node_1045) };
                    this.functionThrows = true;
                } else this.functionThrows = false;
            };
            this.insideFunction = true;
            this.insideTry = false;
            if ((arrow) && (expr_1046 != null)) {
                const _insideArrow = this.insideArrow;
                this.insideArrow = true;
                this.fillExpression(expr_1046);
                this.insideArrow = _insideArrow;
            };
            if ((!arrow) && (expr_1046 != null)) { this.fill(expr_1046) };
            this.popScope();
            ret_1058 = this.functionReturnsAType;
            if (ret_1058 == null) { ret_1058 = this.typeVoid };
            if ((ret_1058 != this.typeVoid) && (expr_1046 != null) && (this.functionActuallyReturns == false)) { Typer.fail(('Function expects result of `' + (Type.stringify(ret_1058)) + '` but never does `return value`'), node_1045) };
            this.insideFunction = _insideFunction;
            this.functionReturnsAType = _functionReturnsAType;
            this.functionActuallyReturns = _functionActuallyReturns;
            this.types.set(node_1045, /*Function*/[12,(() => {
                const result_1063 = [];
                const value_1064 = vars_1047;
                for (const v of $toIterator(value_1064)) result_1063.push(this.types.get(v));
                return result_1063;
            })(),ret_1058,node_1045]);
        };
        fill(node_1065) {
            const temp_1066 = node_1065;
            switch (temp_1066&&temp_1066[0]) {
            case 25: {
                {
                    const t_1067 = temp_1066[1];
                    const extend_1068 = temp_1066[2];
                    const implement_1069 = temp_1066[3];
                    const f_1070 = temp_1066[4];
                    const external_1071 = temp_1066[5];
                    {
                        this.addScope(DataHelper.extractTypeName(t_1067), node_1065);
                        this.registerClassType(node_1065);
                    };
                }
            } break;

            case 37: {
                {
                    const t_1072 = temp_1066[1];
                    const f_1073 = temp_1066[2];
                    const valuesType_1074 = temp_1066[3];
                    {
                        this.addScope(DataHelper.extractTypeName(t_1072), node_1065);
                        this.registerEnumType(node_1065);
                    };
                }
            } break;

            case 8: {
                {
                    const alias = temp_1066[1];
                    const value_1075 = temp_1066[2];
                    {
                        this.types.set(node_1065, /*Alias*/[9,null]);
                        this.addScope(this.nameOfModuleItem(node_1065), node_1065);
                    };
                }
            } break;

            case 24: {
                {
                    const e_1076 = temp_1066[1];
                    for (const ee of $toIterator(e_1076)) this.fill(ee);
                }
            } break;

            case 11: {
                {
                    const el_1077 = temp_1066[1];
                    {
                        this.pushScope();
                        for (const e of $toIterator(el_1077)) this.fill(e);
                        this.popScope();
                    };
                }
            } break;

            case 23: {
                {
                    const name_1078 = temp_1066[1];
                    const t_1079 = temp_1066[2];
                    const e_1080 = temp_1066[3];
                    const const_1081 = temp_1066[4];
                    const external_1082 = temp_1066[5];
                    {
                        if ((e_1080 == null) && (const_1081) && (!external_1082)) { Typer.fail(('Constant should have a value `let ' + (name_1078) + ' = value`'), node_1065) };
                        if ((e_1080 != null) && (external_1082)) { Typer.fail(('External variable should not have a value `declare let ' + (name_1078) + '`'), node_1065) };
                        if ((t_1079 == null) && (external_1082)) { Typer.fail(('External variable should have a type `declare let ' + (name_1078) + ': T`'), node_1065) };
                        if (e_1080 != null) {
                            this.pushScope();
                            this.fillExpression(e_1080);
                            this.popScope();
                        };
                        this.mixVarTypes(t_1079, e_1080, node_1065);
                        this.addScope(name_1078, node_1065);
                    };
                }
            } break;

            case 9: {
                {
                    const a_1083 = temp_1066[1];
                    const op_1084 = temp_1066[2];
                    const b_1085 = temp_1066[3];
                    {
                        this.fillExpression(a_1083);
                        this.fillExpression(b_1085);
                        let parent_1086 = this.parents.get(a_1083);
                        if (op_1084 == 91) {
                            const temp_1087 = parent_1086;
                            switch (temp_1087&&temp_1087[0]) {
                            case null: case undefined: {
                                {
                                }
                            } break;

                            case 23: {
                                {
                                    const name_1088 = temp_1087[1];
                                    const const_1089 = temp_1087[4];
                                    {
                                        if (const_1089) { Typer.fail(('Cannot reassign a constant `let ' + (name_1088) + '`, redefine it as `var ' + (name_1088) + '` to allow reassignment\n') + Typer.positionOf(parent_1086) + ('`let ' + (name_1088) + '` is defined here'), node_1065) };
                                        this.types.set(node_1065, this.unify(this.types.get(a_1083), this.types.get(b_1085), b_1085));
                                        {
                                            let step_1090 = 0;
                                            const pp = this.parents.get(parent_1086);
                                            let type_1091 = null;
                                            if (step_1090 == 0 && pp != null) {
                                                type_1091 = this.types.get(pp);
                                                step_1090 = 1;
                                            };
                                            if (step_1090 == 1 && type_1091 != null) { step_1090 = 2 };
                                            if (step_1090 == 2) {
                                                const temp_1092 = type_1091;
                                                switch (temp_1092&&temp_1092[0]) {
                                                case 3: {
                                                    {
                                                        const type_1093 = temp_1092[1];
                                                        type_1093.lateAssignRequired[type_1093.fieldNames.indexOf(name_1088)] = false;
                                                    }
                                                } break;
                                                };
                                            };
                                        };
                                    };
                                }
                            } break;

                            case 1: {
                                {
                                    const name_1094 = temp_1087[1];
                                    Typer.fail(('Cannot reassign case parameter `' + (name_1094) + '`'), node_1065);
                                }
                            } break;

                            case 21: {
                                {
                                    const name_1095 = temp_1087[1];
                                    Typer.fail(('Cannot reassign a function `' + (name_1095) + '`'), node_1065);
                                }
                            } break;

                            case 25: {
                                Typer.fail('Cannot reassign class', node_1065)
                            } break;

                            case 37: {
                                Typer.fail('Cannot reassign enum', node_1065)
                            } break;

                            case 46: {
                                {
                                    const name_1096 = temp_1087[1];
                                    Typer.fail(('Cannot reassign iterator value `' + (name_1096) + '` of for loop\n') + Typer.positionOf(parent_1086) + ('`for (' + (name_1096) + ' in ...)` is defined here'), node_1065);
                                }
                            } break;

                            case 43: {
                                {
                                }
                            } break;

                            case 4: {
                                Typer.fail('Cannot reassign `super`', node_1065)
                            } break;

                            default:
                            Typer.fail('`=` not implemented for: ' + parent_1086, node_1065)
                            };
                        };
                    };
                }
            } break;

            case 17: {
                if (!this.allowBreakAndContinue) { Typer.fail('Cannot use `break` outside of loop', node_1065) }
            } break;

            case 46: {
                {
                    const name_1097 = temp_1066[1];
                    const over_1098 = temp_1066[2];
                    const by_1099 = temp_1066[3];
                    const range_1100 = temp_1066[4];
                    {
                        this.pushScope();
                        this.fillExpression(over_1098);
                        {
                            const temp_1101 = this.types.get(over_1098);
                            switch (temp_1101&&temp_1101[0]) {
                            case 4: {
                                {
                                    const type_1102 = temp_1101[1];
                                    const generic_1103 = temp_1101[2];
                                    if ((generic_1103 != null) && (generic_1103.length == 1)) { this.types.set(node_1065, generic_1103[0]) } else if (generic_1103 == null) { this.types.set(node_1065, this.types.get(over_1098)) } else {
                                        Typer.fail('Type of iterable is neither Int nor Array ' + Type.stringify(this.types.get(over_1098)), over_1098);
                                    };
                                }
                            } break;

                            case 1: {
                                {
                                }
                            } break;

                            case null: case undefined: {
                                {
                                }
                            } break;

                            default:
                            {
                                console.log('' + this.types.get(over_1098), over_1098);
                                Typer.fail('Type of iterable is neiter Int nor Array', over_1098);
                            }
                            };
                        };
                        {
                            let step_1104 = 0;
                            const range_1105 = range_1100;
                            if (step_1104 == 0 && range_1105 != null) { step_1104 = 1 };
                            if (step_1104 == 1) {
                                this.fillExpression(range_1105);
                                this.types.set(node_1065, this.toType(/*Type*/[1,'Int'], node_1065));
                            };
                        };
                        this.addScope(name_1097, node_1065);
                        const _allowBreakAndContinue = this.allowBreakAndContinue;
                        this.allowBreakAndContinue = true;
                        this.fill(by_1099);
                        this.allowBreakAndContinue = _allowBreakAndContinue;
                        this.popScope();
                    };
                }
            } break;

            case 21: {
                {
                    const name_1106 = temp_1066[1];
                    const expr_1107 = temp_1066[2];
                    const vars_1108 = temp_1066[3];
                    const rettype_1109 = temp_1066[4];
                    const external_1110 = temp_1066[5];
                    {
                        if ((!external_1110) && (expr_1107 == null)) { Typer.fail(('Non-external function `' + (name_1106) + '` should have a body'), node_1065) };
                        if ((external_1110) && (rettype_1109 == null)) { Typer.fail(('External function `' + (name_1106) + '` should have a returning type'), node_1065) };
                        this.addScope(name_1106, node_1065);
                        this.fillFunction(node_1065, expr_1107, vars_1108, rettype_1109);
                        if (false) {
                            const _insideFunction_1111 = this.insideFunction;
                            this.insideFunction = true;
                            this.pushScope();
                            if (expr_1107 != null) { this.fill(expr_1107) };
                            this.popScope();
                            this.insideFunction = _insideFunction_1111;
                        };
                    };
                }
            } break;

            case 13: {
                {
                    const econd_1112 = temp_1066[1];
                    const eif_1113 = temp_1066[2];
                    const eelse_1114 = temp_1066[3];
                    {
                        let depth = 0;
                        for (const e of $toIterator(econd_1112)) {
                            const temp_1115 = e;
                            switch (temp_1115&&temp_1115[0]) {
                            case 23: {
                                {
                                    const name_1116 = temp_1115[1];
                                    const t_1117 = temp_1115[2];
                                    const expr_1118 = temp_1115[3];
                                    const const_1119 = temp_1115[4];
                                    {
                                        if (!const_1119) { Typer.fail('Only if-let bindings supported, not if-var', node_1065) };
                                        if (t_1117 != null) { Typer.fail('Do not specify a type `: T` in if-let bindings', node_1065) };
                                        if (expr_1118 == null) { Typer.fail(('if-let binding should have a value `' + (name_1116) + ' = value'), node_1065) };
                                        depth++;
                                        this.pushScope();
                                        this.pushScope();
                                        this.fillExpression(expr_1118);
                                        this.popScope();
                                        {
                                            const temp_1120 = this.types.get(expr_1118);
                                            switch (temp_1120&&temp_1120[0]) {
                                            case 2: {
                                                {
                                                    const t_1121 = temp_1120[1];
                                                    this.types.set(e, t_1121);
                                                }
                                            } break;

                                            default:
                                            this.types.set(e, this.types.get(expr_1118))
                                            };
                                        };
                                        this.addScope(name_1116, e);
                                    };
                                }
                            } break;

                            default:
                            {
                                this.fillExpression(e);
                                const type_1122 = this.types.get(e);
                                if ((type_1122 != this.typeBool) && (type_1122 != this.typeAny) && (type_1122 != null)) { Typer.fail('`if (value)` expects `value` only of type `Bool`, but got `' + Type.stringify(this.types.get(e)) + '`', e) };
                            }
                            };
                        };
                        this.fill(eif_1113);
                        while (depth > 0) {
                            depth--;
                            this.popScope();
                        };
                        if (eelse_1114 != null) { this.fill(eelse_1114) };
                    };
                }
            } break;

            case 34: {
                {
                    const exprs_1123 = temp_1066[1];
                    const conds_1124 = temp_1066[2];
                    const guards_1125 = temp_1066[3];
                    const cases_1126 = temp_1066[4];
                    {
                        for (const e of $toIterator(exprs_1123)) {
                            this.pushScope();
                            this.fill(e);
                            this.popScope();
                        };
                        let i_1127 = 0;
                        while (i_1127 < cases_1126.length) {
                            this.pushScope();
                            let e_1128 = conds_1124[i_1127];
                            let currentType = null;
                            let currentTag = null;
                            let currentTagBind = 0;
                            const follow = (e_1129) => {
                                const temp_1130 = e_1129;
                                switch (temp_1130&&temp_1130[0]) {
                                case 28: {
                                    {
                                        const ex = temp_1130[1];
                                        const name_1131 = temp_1130[2];
                                        this.fillExpression(e_1129);
                                    }
                                } break;

                                case 29: {
                                    {
                                        const ex_1132 = temp_1130[1];
                                        const name_1133 = temp_1130[2];
                                        {
                                            this.fillExpression(e_1129);
                                            {
                                                const temp_1134 = this.types.get(ex_1132);
                                                switch (temp_1134&&temp_1134[0]) {
                                                case 6: {
                                                    {
                                                        const type_1135 = temp_1134[1];
                                                        {
                                                            currentType = type_1135;
                                                            currentTag = name_1133;
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                        };
                                    }
                                } break;

                                case 14: {
                                    {
                                        const e_1136 = temp_1130[1];
                                        this.fill(e_1136);
                                    }
                                } break;

                                case 42: {
                                    {
                                    }
                                } break;

                                case 7: {
                                    {
                                    }
                                } break;

                                case 2: {
                                    {
                                    }
                                } break;

                                case 5: {
                                    {
                                    }
                                } break;

                                case 0: {
                                    {
                                    }
                                } break;

                                case 12: {
                                    {
                                        const ex_1137 = temp_1130[1];
                                        const args_1138 = temp_1130[2];
                                        const argNames_1139 = temp_1130[3];
                                        {
                                            follow(ex_1137);
                                            currentTagBind = 0;
                                            for (const ee of $toIterator(args_1138)) {
                                                follow(ee);
                                                currentTagBind++;
                                            };
                                        };
                                    }
                                } break;

                                case 1: {
                                    {
                                        const name_1140 = temp_1130[1];
                                        if (name_1140.charAt(0) == name_1140.charAt(0).toUpperCase()) { this.fill(e_1129) } else {
                                            this.addScope(name_1140, e_1129);
                                            {
                                                let step_1141 = 0;
                                                const currentType_1142 = currentType;
                                                if (step_1141 == 0 && currentType_1142 != null) { step_1141 = 1 };
                                                if (step_1141 == 1) {
                                                    const indexOf = currentType_1142.fieldNames.indexOf(currentTag);
                                                    if (indexOf == -1) { Typer.fail('lblblb', e_1129) };
                                                    const type_1143 = currentType_1142.tagBindVars[indexOf][currentTagBind];
                                                    const name_1144 = currentType_1142.tagBindVarsNames[indexOf][currentTagBind];
                                                    if (name_1144 == null) { Typer.fail('Too many bindings requested, available are: ' + currentType_1142.tagBindVarsNames[indexOf].join(', '), e_1129) };
                                                    if (type_1143 != null) { this.types.set(e_1129, this.toType(type_1143, e_1129)) } else Typer.fail('tagBindVars no type for ' + name_1144, e_1129);
                                                } else {
                                                    Typer.fail('No currentType for ' + name_1140, e_1129);
                                                };
                                            };
                                        };
                                    }
                                } break;

                                case 9: {
                                    {
                                        const a_1145 = temp_1130[1];
                                        const op_1146 = temp_1130[2];
                                        const b_1147 = temp_1130[3];
                                        if (op_1146 == 104) {
                                            follow(a_1145);
                                            follow(b_1147);
                                        } else Typer.fail('' + e_1129, e_1129);
                                    }
                                } break;

                                case 13: {
                                    {
                                        const econd_1148 = temp_1130[1];
                                        {
                                            this.pushScope();
                                            this.fill(econd_1148[0]);
                                            this.popScope();
                                        };
                                    }
                                } break;

                                default:
                                Typer.fail('' + e_1129, e_1129)
                                };
                            };
                            follow(e_1128);
                            let e_1149 = cases_1126[i_1127];
                            this.pushScope();
                            this.fill(e_1149);
                            this.popScope();
                            this.popScope();
                            i_1127++;
                        };
                    };
                }
            } break;

            case 27: {
                {
                    const e_1150 = temp_1066[1];
                    const t_1151 = temp_1066[2];
                    const v_1152 = temp_1066[3];
                    const ca = temp_1066[4];
                    {
                        const _insideTry_1153 = this.insideTry;
                        this.insideTry = true;
                        this.fill(e_1150);
                        this.insideTry = _insideTry_1153;
                        {
                            let i_1154 = 0;
                            let it_1155 = 0;
                            let at_1156 = ca.length;
                            while (it_1155 < at_1156) {
                                i_1154 = it_1155;
                                it_1155++;
                                {
                                    const type_1157 = this.toType(t_1151[i_1154], ca[i_1154]);
                                    {
                                        const temp_1158 = type_1157;
                                        switch (temp_1158&&temp_1158[0]) {
                                        case 19: {
                                            Typer.fail('Catch type must be a specific class, not {:}', ca[i_1154])
                                        } break;

                                        case 12: {
                                            Typer.fail('Catch type must be a specific class, not function', ca[i_1154])
                                        } break;
                                        };
                                    };
                                    this.types.set(t_1151[i_1154], type_1157);
                                    this.pushScope();
                                    this.scopes[this.scopes.length - 1].set(DataHelper.varName(v_1152[i_1154]), v_1152[i_1154]);
                                    this.fill(ca[i_1154]);
                                    this.popScope();
                                };
                            };
                        };
                        this.types.set(node_1065, this.typeVoid);
                    };
                }
            } break;

            case 20: {
                {
                    const econd_1159 = temp_1066[1];
                    const e_1160 = temp_1066[2];
                    const pre_1161 = temp_1066[3];
                    {
                        if (pre_1161 == true) { this.fillExpression(econd_1159) };
                        const _allowBreakAndContinue_1162 = this.allowBreakAndContinue;
                        this.allowBreakAndContinue = true;
                        this.fill(e_1160);
                        this.allowBreakAndContinue = _allowBreakAndContinue_1162;
                        if (pre_1161 == false) { this.fillExpression(econd_1159) };
                        this.types.set(node_1065, this.typeVoid);
                    };
                }
            } break;

            case 18: {
                {
                    this.types.set(node_1065, this.typeVoid);
                    if (!this.allowBreakAndContinue) { Typer.fail('Cannot use `continue` outside of loop', node_1065) };
                }
            } break;

            default:
            this.fillExpression(node_1065)
            };
        };
        fillExpression(node_1163) {
            const temp_1164 = node_1163;
            switch (temp_1164&&temp_1164[0]) {
            case 1: {
                {
                    const name_1165 = temp_1164[1];
                    {
                        let subj_1166 = null;
                        {
                            let i_1167 = 0;
                            let it_1168 = 0;
                            let at_1169 = this.scopes.length;
                            while (it_1168 < at_1169) {
                                i_1167 = it_1168;
                                it_1168++;
                                {
                                    subj_1166 = this.scopes[this.scopes.length - i_1167 - 1].get(name_1165);
                                    if (subj_1166 != null) { break };
                                };
                            };
                        };
                        if (subj_1166 == null) { subj_1166 = this.findInNamespaceRoots(name_1165) };
                        if ((subj_1166 == null) && (name_1165 == 'const')) { Typer.fail('No variable named `const` found. Are you trying to use `const` as a keyword? Use `let varname` syntax instead.', node_1163) };
                        if (subj_1166 == null) { Typer.fail(('Cannot find variable with name `' + (name_1165) + '`'), node_1163) };
                        if ((this.parents.get(node_1163) != null) && (this.parents.get(node_1163) != subj_1166)) { Typer.fail(('Parent overwitten from ' + (this.parents.get(node_1163)) + ' to ' + (subj_1166) + ' for node ' + (node_1163) + '') + Typer.never, node_1163) };
                        this.parents.set(node_1163, subj_1166);
                        {
                            let step_1170 = 0;
                            const type_1171 = this.types.get(subj_1166);
                            if (step_1170 == 0 && type_1171 != null) { step_1170 = 1 };
                            if (step_1170 == 1) { this.types.set(node_1163, type_1171) } else {
                                const v_1172 = '' + subj_1166;
                                {
                                };
                            };
                        };
                    };
                }
            } break;

            case 22: {
                {
                    const expr_1173 = temp_1164[1];
                    const vars_1174 = temp_1164[2];
                    const rettype_1175 = temp_1164[3];
                    this.fillFunction(node_1163, expr_1173, vars_1174, rettype_1175, true);
                }
            } break;

            case 21: {
                {
                    const name_1176 = temp_1164[1];
                    const expr_1177 = temp_1164[2];
                    const vars_1178 = temp_1164[3];
                    const rettype_1179 = temp_1164[4];
                    const external_1180 = temp_1164[5];
                    {
                        if (external_1180) { Typer.fail(('External function `declare function ' + (name_1176) + '` cannot be taken as a value'), node_1163) };
                        this.fillFunction(node_1163, expr_1177, vars_1178, rettype_1179);
                        if (false) {
                            this.pushScope();
                            this.addScope(name_1176, node_1163);
                            const _insideFunction_1181 = this.insideFunction;
                            this.insideFunction = true;
                            if (expr_1177 != null) { this.fill(expr_1177) };
                            this.popScope();
                            this.insideFunction = _insideFunction_1181;
                        };
                    };
                }
            } break;

            case 31: {
                {
                    const el_1182 = temp_1164[1];
                    {
                        const temp_1183 = el_1182[0];
                        switch (temp_1183&&temp_1183[0]) {
                        case 46: {
                            {
                                const name_1184 = temp_1183[1];
                                const over_1185 = temp_1183[2];
                                const by_1186 = temp_1183[3];
                                const range_1187 = temp_1183[4];
                                {
                                    if (el_1182.length > 1) { Typer.fail('Cannot use loop `for` within array of more than one element `[for(), ...]`', el_1182[1]) };
                                    if (range_1187 != null) { Typer.fail('Ranges `...range` are not supported here yet', range_1187) };
                                    this.pushScope();
                                    this.fillExpression(over_1185);
                                    this.types.set(el_1182[0], this.types.get(over_1185));
                                    this.addScope(name_1184, el_1182[0]);
                                    const _allowBreakAndContinue_1188 = this.allowBreakAndContinue;
                                    this.allowBreakAndContinue = false;
                                    this.fillExpression(by_1186);
                                    this.allowBreakAndContinue = _allowBreakAndContinue_1188;
                                    this.popScope();
                                    this.types.set(node_1163, this.typeArray.instantiateGeneric([this.types.get(by_1186)]));
                                };
                            }
                        } break;

                        default:
                        {
                            for (const e of $toIterator(el_1182)) this.fillExpression(e);
                            if (this.typeArray == null) { Typer.fail('typeArray instantiateGeneric is null <<<<<<<<<<<<<<<', node_1163) };
                            this.types.set(node_1163, this.typeArray.instantiateGeneric([this.types.get(el_1182[0])]));
                        }
                        };
                    };
                }
            } break;

            case 32: {
                {
                    const keys_1189 = temp_1164[1];
                    const values_1190 = temp_1164[2];
                    {
                        if (keys_1189.length == 0) {
                            this.types.set(node_1163, this.typeMap.instantiateGeneric([/*Unknown*/[0,{value:null}], /*Unknown*/[0,{value:null}]]));
                            return;
                        };
                        {
                            let i_1191 = 0;
                            let it_1192 = 0;
                            let at_1193 = keys_1189.length;
                            while (it_1192 < at_1193) {
                                i_1191 = it_1192;
                                it_1192++;
                                {
                                    this.fillExpression(keys_1189[i_1191]);
                                    this.fillExpression(values_1190[i_1191]);
                                };
                            };
                        };
                        this.types.set(node_1163, this.typeMap.instantiateGeneric([this.types.get(keys_1189[0]), this.types.get(values_1190[0])]));
                    };
                }
            } break;

            case 41: {
                {
                    const e_1194 = temp_1164[1];
                    const kind_1195 = temp_1164[2];
                    const t_1196 = temp_1164[3];
                    {
                        const type_1197 = this.toType(t_1196, node_1163);
                        if (type_1197 == this.typeVoid) { Typer.fail('Conversion `as Void` makes no sense', e_1194) };
                        this.fillExpression(e_1194);
                        if (this.types.get(e_1194) == this.typeVoid) { Typer.fail(('Conversion of `value as ' + (Type.stringify(t_1196)) + '` where `value` is of type `Void` makes no sense'), e_1194) };
                        this.types.set(t_1196, type_1197);
                        this.types.set(node_1163, type_1197);
                    };
                }
            } break;

            case 40: {
                {
                    const e_1198 = temp_1164[1];
                    const t_1199 = temp_1164[2];
                    {
                        const type_1200 = this.toType(t_1199, node_1163);
                        if (type_1200 == this.typeAny) { Typer.fail('Comparing `is Any` makes no sense, always true', e_1198) };
                        if (type_1200 == this.typeVoid) { Typer.fail('Comparing `is Void` makes no sense', e_1198) };
                        if (this.typeAny == null) { Typer.fail('typeAny == null', e_1198) };
                        if (this.typeVoid == null) { Typer.fail('typeVoid == null', e_1198) };
                        if (this.typeBool == null) { Typer.fail('typeBool == null', e_1198) };
                        this.fillExpression(e_1198);
                        this.types.set(t_1199, type_1200);
                        this.types.set(node_1163, this.typeBool);
                    };
                }
            } break;

            case 11: {
                {
                    const el_1201 = temp_1164[1];
                    {
                        if (el_1201.length == 0) { Typer.fail('Cannot use empty block `{}` as a value, use `{:}` syntax to create empty object', node_1163) };
                        this.pushScope();
                        {
                            let i_1202 = 0;
                            let it_1203 = 0;
                            let at_1204 = el_1201.length;
                            while (it_1203 < at_1204) {
                                i_1202 = it_1203;
                                it_1203++;
                                if (i_1202 < el_1201.length - 1) { this.fill(el_1201[i_1202]) };
                            };
                        };
                        const latest = el_1201[el_1201.length - 1];
                        this.fillExpression(latest);
                        this.types.set(node_1163, this.types.get(latest));
                        this.popScope();
                    };
                }
            } break;

            case 28: {
                {
                    const e_1205 = temp_1164[1];
                    const n_1206 = temp_1164[2];
                    {
                        {
                            const temp_1207 = e_1205;
                            switch (temp_1207&&temp_1207[0]) {
                            case 4: {
                                {
                                    if (!this.allowSuper) { Typer.fail('Cannot access `super` here', node_1163) };
                                    {
                                        const temp_1208 = this.thisType;
                                        switch (temp_1208&&temp_1208[0]) {
                                        case 4: {
                                            {
                                                const type_1209 = temp_1208[1];
                                                {
                                                    {
                                                        let step_1210 = 0;
                                                        const extend_1211 = type_1209.extend;
                                                        if (step_1210 == 0 && extend_1211 != null) { step_1210 = 1 };
                                                        if (step_1210 == 1) {} else Typer.fail('Cannot access `super` from class which does not extend anything', node_1163);
                                                    };
                                                    return;
                                                };
                                            }
                                        } break;
                                        };
                                    };
                                    Typer.fail('Cannot access `super` not from class', node_1163);
                                }
                            } break;

                            default:
                            this.fillExpression(e_1205)
                            };
                        };
                        const etype_1212 = this.types.get(e_1205);
                        {
                            const temp_1213 = etype_1212;
                            switch (temp_1213&&temp_1213[0]) {
                            case 4: {
                                {
                                    const type_1214 = temp_1213[1];
                                    {
                                        type_1214.useless = false;
                                        if (etype_1212 == this.typeAny) {
                                            this.types.set(node_1163, this.typeAny);
                                            return;
                                        };
                                        const index_1215 = type_1214.fieldNames.indexOf(n_1206);
                                        if (index_1215 < 0) { Typer.fail(('Class `' + (this.nameOfModuleItem(type_1214.parent)) + '` has no field `.' + (n_1206) + '`\nAvailable fields are: ') + type_1214.fieldNames.join(', '), (() => {
                                            const result_1216 = e_1205;
                                            if (result_1216 != null) { return result_1216 };
                                            return node_1163;
                                        })()) };
                                        if (type_1214.fieldStatic[index_1215] == true) { Typer.fail(('Class `' + (this.nameOfModuleItem(type_1214.parent)) + '` field `.' + (n_1206) + '` is static'), node_1163) };
                                        {
                                            const temp_1217 = type_1214.parent;
                                            switch (temp_1217&&temp_1217[0]) {
                                            case 25: {
                                                {
                                                    const t_1218 = temp_1217[1];
                                                    const extend_1219 = temp_1217[2];
                                                    const implement_1220 = temp_1217[3];
                                                    const fields_1221 = temp_1217[4];
                                                    const external_1222 = temp_1217[5];
                                                    {
                                                        this.registerClassType(type_1214.parent);
                                                        for (const field of $toIterator(fields_1221)) if (DataHelper.nameOf(field) == n_1206) {
                                                            this.types.set(node_1163, this.types.get(field));
                                                            this.parents.set(node_1163, field);
                                                            if (this.types.get(field) == null) {
                                                                console.log(Typer.positionOf(node_1163) + ('Note: field fieldInitialized[' + (n_1206) + '] ='), type_1214.fieldInitialized[type_1214.fieldNames.indexOf(n_1206)]);
                                                                Typer.fail('Type for this field is null: ' + n_1206, field);
                                                            };
                                                        };
                                                    };
                                                }
                                            } break;

                                            default:
                                            Typer.fail(type_1214.parent, type_1214.parent)
                                            };
                                        };
                                    };
                                }
                            } break;

                            case 3: {
                                {
                                    const type_1223 = temp_1213[1];
                                    {
                                        type_1223.useless = false;
                                        const index_1224 = type_1223.fieldNames.indexOf(n_1206);
                                        if (index_1224 < 0) { Typer.fail(('Class `' + (this.nameOfModuleItem(type_1223.parent)) + '` has no static field `.' + (n_1206) + '`\nAvailable fields are: ') + type_1223.fieldNames.join(', '), node_1163) };
                                        if (type_1223.fieldStatic[index_1224] != true) { Typer.fail(('Class `' + (this.nameOfModuleItem(type_1223.parent)) + '` field `.' + (n_1206) + '` is not static'), node_1163) };
                                        {
                                            const temp_1225 = type_1223.parent;
                                            switch (temp_1225&&temp_1225[0]) {
                                            case 25: {
                                                {
                                                    const t_1226 = temp_1225[1];
                                                    const extend_1227 = temp_1225[2];
                                                    const implement_1228 = temp_1225[3];
                                                    const fields_1229 = temp_1225[4];
                                                    const external_1230 = temp_1225[5];
                                                    for (const field of $toIterator(fields_1229)) if (DataHelper.nameOf(field) == n_1206) {
                                                        this.types.set(node_1163, this.types.get(field));
                                                        this.parents.set(node_1163, field);
                                                    };
                                                }
                                            } break;

                                            default:
                                            Typer.fail(type_1223.parent, type_1223.parent)
                                            };
                                        };
                                    };
                                }
                            } break;

                            case 6: {
                                {
                                    const type_1231 = temp_1213[1];
                                    {
                                        const index_1232 = type_1231.fieldNames.indexOf(n_1206);
                                        if (index_1232 < 0) { Typer.fail(('Enum `' + (type_1231.name) + '` has no field `.' + (n_1206) + '`'), node_1163) };
                                        if (type_1231.fieldStatic[index_1232] != true) { Typer.fail(('Enum field `.' + (n_1206) + '` is not static'), node_1163) };
                                        {
                                            const temp_1233 = type_1231.parent;
                                            switch (temp_1233&&temp_1233[0]) {
                                            case 37: {
                                                {
                                                    const t_1234 = temp_1233[1];
                                                    const fields_1235 = temp_1233[2];
                                                    const valuesType_1236 = temp_1233[3];
                                                    for (const field of $toIterator(fields_1235)) {
                                                        const temp_1237 = field;
                                                        switch (temp_1237&&temp_1237[0]) {
                                                        case 12: {
                                                            {
                                                            }
                                                        } break;

                                                        case 48: {
                                                            {
                                                            }
                                                        } break;

                                                        case 9: {
                                                            {
                                                            }
                                                        } break;

                                                        default:
                                                        if (DataHelper.nameOf(field) == n_1206) {
                                                            this.types.set(node_1163, this.types.get(field));
                                                            this.parents.set(node_1163, field);
                                                        }
                                                        };
                                                    };
                                                }
                                            } break;

                                            default:
                                            Typer.fail(type_1231.parent, type_1231.parent)
                                            };
                                        };
                                    };
                                }
                            } break;

                            case 19: {
                                {
                                    const names_1238 = temp_1213[1];
                                    const els_1239 = temp_1213[2];
                                    {
                                        const index_1240 = names_1238.indexOf(n_1206);
                                        if (index_1240 < 0) {
                                            let object_1241 = '';
                                            {
                                                const temp_1242 = e_1205;
                                                switch (temp_1242&&temp_1242[0]) {
                                                case 1: {
                                                    {
                                                        const name_1243 = temp_1242[1];
                                                        object_1241 = (' `' + (name_1243) + '`');
                                                    }
                                                } break;

                                                default:
                                                {
                                                }
                                                };
                                            };
                                            if (names_1238.length == 0) { Typer.fail(('Object' + (object_1241) + ' is empty `{:}` and has no fields. Create object with all fields defined upfront, like this: `obj = { ' + (n_1206) + ': value }`'), node_1163) };
                                            if (names_1238.length != 0) { Typer.fail(('Object' + (object_1241) + ' has no field `.' + (n_1206) + '`\nAvailable fields are: ') + names_1238.join(', '), node_1163) };
                                        };
                                        this.types.set(node_1163, els_1239[index_1240]);
                                    };
                                }
                            } break;

                            case null: case undefined: {
                                {
                                }
                            } break;

                            default:
                            {
                            }
                            };
                        };
                    };
                }
            } break;

            case 29: {
                {
                    const e_1244 = temp_1164[1];
                    const n_1245 = temp_1164[2];
                    {
                        {
                            const temp_1246 = e_1244;
                            switch (temp_1246&&temp_1246[0]) {
                            case 4: {
                                Typer.fail('Cannot access `super` here', node_1163)
                            } break;
                            };
                        };
                        this.fillExpression(e_1244);
                        {
                            const temp_1247 = this.types.get(e_1244);
                            switch (temp_1247&&temp_1247[0]) {
                            case 3: {
                                {
                                    const type_1248 = temp_1247[1];
                                    {
                                        const index_1249 = type_1248.fieldNames.indexOf(n_1245);
                                        if (index_1249 < 0) { Typer.fail(('Class has no field `.' + (n_1245) + '`'), node_1163) };
                                        if (type_1248.fieldStatic[index_1249] != true) { Typer.fail(('Class field `.' + (n_1245) + '` is not static'), node_1163) };
                                        Typer.fail('class.Upper', node_1163);
                                    };
                                }
                            } break;

                            case 6: {
                                {
                                    const type_1250 = temp_1247[1];
                                    {
                                        const index_1251 = type_1250.fieldNames.indexOf(n_1245);
                                        if (index_1251 < 0) { Typer.fail(('Enum has no value constructor `.' + (n_1245) + '`'), node_1163) };
                                        if (type_1250.fieldEnumConstructor[index_1251] != true) { Typer.fail(('Enum field `.' + (n_1245) + '` is not a value constructor'), node_1163) };
                                        {
                                            let step_1252 = 0;
                                            const fieldType = type_1250.fieldType[index_1251];
                                            if (step_1252 == 0 && fieldType != null) { step_1252 = 1 };
                                            if (step_1252 == 1) { this.types.set(node_1163, fieldType) } else Typer.fail(('Enum field type is null for `' + (Node.stringify(node_1163)) + '`'), node_1163);
                                        };
                                    };
                                }
                            } break;

                            case null: case undefined: {
                                Typer.fail(('Doing .Upper `' + (Node.stringify(node_1163)) + '` over `' + (Node.stringify(e_1244)) + '` (' + (e_1244) + ') of type null'), node_1163)
                            } break;

                            default:
                            Typer.fail('?.Upper', node_1163)
                            };
                        };
                    };
                }
            } break;

            case 48: {
                {
                    const t_1253 = temp_1164[1];
                    {
                        const temp_1254 = t_1253;
                        switch (temp_1254&&temp_1254[0]) {
                        case 1: {
                            {
                                const name_1255 = temp_1254[1];
                                {
                                    const subj_1256 = this.find(name_1255);
                                    if (subj_1256 == null) { Typer.fail(('Cannot find type with name `' + (name_1255) + '`'), node_1163) };
                                    if ((this.parents.get(node_1163) != null) && (this.parents.get(node_1163) != subj_1256)) { Typer.fail(('Parent overwitten from ' + (this.parents.get(node_1163)) + ' to ' + (subj_1256) + ' for node ' + (node_1163) + '') + Typer.never, node_1163) };
                                    this.parents.set(node_1163, subj_1256);
                                    {
                                        let step_1257 = 0;
                                        const type_1258 = this.types.get(subj_1256);
                                        if (step_1257 == 0 && type_1258 != null) { step_1257 = 1 };
                                        if (step_1257 == 1) { this.types.set(node_1163, type_1258) } else {
                                            {
                                                const temp_1259 = subj_1256;
                                                switch (temp_1259&&temp_1259[0]) {
                                                case 25: {
                                                    this.registerClassType(subj_1256)
                                                } break;

                                                case 37: {
                                                    this.registerEnumType(subj_1256)
                                                } break;
                                                };
                                            };
                                            {
                                                let step_1260 = 0;
                                                const type_1261 = this.types.get(subj_1256);
                                                if (step_1260 == 0 && type_1261 != null) { step_1260 = 1 };
                                                if (step_1260 == 1) { this.types.set(node_1163, type_1261) } else {
                                                    console.log(Typer.positionOf(subj_1256) + ('' + (name_1255) + ' is here'));
                                                    Typer.fail(('Cannot find type for `' + (name_1255) + '` even after late build') + Typer.never, node_1163);
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                        } break;

                        case 2: {
                            {
                                const name_1262 = temp_1254[1];
                                Typer.fail(('Cannot use generic type `' + (name_1262) + '` as a value'), node_1163);
                            }
                        } break;

                        default:
                        Typer.fail('Cannot use this type as a value', node_1163)
                        };
                    };
                }
            } break;

            case 30: {
                {
                    const path_1263 = temp_1164[1];
                    const t_1264 = temp_1164[2];
                    const el_1265 = temp_1164[3];
                    const names_1266 = temp_1164[4];
                    const values_1267 = temp_1164[5];
                    {
                        const type_1268 = this.toType(t_1264, node_1163);
                        const subj_1269 = this.find(DataHelper.extractTypeName(t_1264));
                        this.parents.set(node_1163, subj_1269);
                        for (const e of $toIterator(el_1265)) this.fillExpression(e);
                        {
                            const temp_1270 = type_1268;
                            switch (temp_1270&&temp_1270[0]) {
                            case 4: {
                                {
                                    const type_1271 = temp_1270[1];
                                    {
                                        if (type_1271.constructor == -1) { Typer.fail('Cannot construct class without `new () {}` constructor', node_1163) };
                                        type_1271.useless = false;
                                    };
                                }
                            } break;

                            default:
                            Typer.fail('Constructor `new` may instantiate only classes', node_1163)
                            };
                        };
                        this.types.set(node_1163, type_1268);
                    };
                }
            } break;

            case 36: {
                {
                    const names_1272 = temp_1164[1];
                    const el_1273 = temp_1164[2];
                    {
                        {
                            let name_1274 = 0;
                            let it_1275 = 0;
                            let at_1276 = names_1272.length;
                            while (it_1275 < at_1276) {
                                name_1274 = it_1275;
                                it_1275++;
                                if (names_1272.indexOf(names_1272[name_1274]) != name_1274) { Typer.fail(('Field `' + (names_1272[name_1274]) + '` already exists'), node_1163) };
                            };
                        };
                        for (const e of $toIterator(el_1273)) this.fillExpression(e);
                        const els_1277 = (() => {
                            const result_1278 = [];
                            const value_1279 = el_1273;
                            for (const e of $toIterator(value_1279)) result_1278.push(this.types.get(e));
                            return result_1278;
                        })();
                        this.types.set(node_1163, /*Struct*/[19,names_1272,els_1277]);
                    };
                }
            } break;

            case 27: {
                {
                    const e_1280 = temp_1164[1];
                    const t_1281 = temp_1164[2];
                    const v_1282 = temp_1164[3];
                    const ca_1283 = temp_1164[4];
                    {
                        const _insideTry_1284 = this.insideTry;
                        this.insideTry = true;
                        this.fillExpression(e_1280);
                        this.insideTry = _insideTry_1284;
                        {
                            let i_1285 = 0;
                            let it_1286 = 0;
                            let at_1287 = ca_1283.length;
                            while (it_1286 < at_1287) {
                                i_1285 = it_1286;
                                it_1286++;
                                {
                                    this.pushScope();
                                    this.scopes[this.scopes.length - 1].set(DataHelper.varName(v_1282[i_1285]), v_1282[i_1285]);
                                    this.fill(ca_1283[i_1285]);
                                    this.popScope();
                                };
                            };
                        };
                        this.types.set(node_1163, this.types.get(e_1280));
                    };
                }
            } break;

            case 13: {
                {
                    const econd_1288 = temp_1164[1];
                    const eif_1289 = temp_1164[2];
                    const eelse_1290 = temp_1164[3];
                    {
                        if (econd_1288.length > 1) { Typer.fail('More than one condition is not yet supported', econd_1288[1]) };
                        {
                            const temp_1291 = econd_1288[0];
                            switch (temp_1291&&temp_1291[0]) {
                            case 23: {
                                Typer.fail('Variable bindings in ternary conditions are not yet supported', econd_1288[0])
                            } break;
                            };
                        };
                        if (eelse_1290 == null) { Typer.fail('Expression `if` should have an `else` clause', eif_1289) };
                        this.fillExpression(econd_1288[0]);
                        this.fillExpression(eif_1289);
                        this.fillExpression(eelse_1290);
                        this.types.set(node_1163, this.unify(this.types.get(eif_1289), this.types.get(eelse_1290), eelse_1290));
                    };
                }
            } break;

            case 7: {
                this.types.set(node_1163, /*UnknownNullable*/[1,{value:null}])
            } break;

            case 0: {
                this.types.set(node_1163, this.typeString)
            } break;

            case 2: {
                this.types.set(node_1163, this.typeBool)
            } break;

            case 5: {
                this.types.set(node_1163, this.typeInt)
            } break;

            case 6: {
                this.types.set(node_1163, this.typeFloat)
            } break;

            case 14: {
                {
                    const e_1292 = temp_1164[1];
                    {
                        this.fillExpression(e_1292);
                        this.types.set(node_1163, this.types.get(e_1292));
                    };
                }
            } break;

            case 47: {
                {
                    const a_1293 = temp_1164[1];
                    const b_1294 = temp_1164[2];
                    {
                        this.fillExpression(a_1293);
                        this.fillExpression(b_1294);
                        this.unify(this.types.get(a_1293), this.types.get(b_1294), b_1294);
                        this.types.set(node_1163, this.types.get(b_1294));
                    };
                }
            } break;

            case 12: {
                {
                    const e_1295 = temp_1164[1];
                    const el_1296 = temp_1164[2];
                    const elNames = temp_1164[3];
                    {
                        {
                            const temp_1297 = e_1295;
                            switch (temp_1297&&temp_1297[0]) {
                            case 4: {
                                if (!this.allowSuper) { Typer.fail('Cannot access `super` here', node_1163) }
                            } break;

                            default:
                            this.fillExpression(e_1295)
                            };
                        };
                        for (const e of $toIterator(el_1296)) this.fillExpression(e);
                        {
                            const temp_1298 = this.types.get(e_1295);
                            switch (temp_1298&&temp_1298[0]) {
                            case 12: {
                                {
                                    const args_1299 = temp_1298[1];
                                    const returns = temp_1298[2];
                                    {
                                        {
                                            let i_1300 = 0;
                                            let it_1301 = 0;
                                            let at_1302 = el_1296.length;
                                            while (it_1301 < at_1302) {
                                                i_1300 = it_1301;
                                                it_1301++;
                                                {
                                                    let step_1303 = 0;
                                                    const arg_1304 = args_1299[i_1300];
                                                    if (step_1303 == 0 && arg_1304 != null) { step_1303 = 1 };
                                                    if (step_1303 == 1) { this.unify(arg_1304, this.types.get(el_1296[i_1300]), el_1296[i_1300]) };
                                                };
                                            };
                                        };
                                        this.types.set(node_1163, returns);
                                    };
                                }
                            } break;

                            case 8: {
                                {
                                    const type_1305 = temp_1298[1];
                                    const tag_1306 = temp_1298[2];
                                    this.types.set(node_1163, /*EnumInstance*/[7,type_1305,tag_1306]);
                                }
                            } break;

                            case null: case undefined: {
                                {
                                }
                            } break;

                            default:
                            if (this.types.get(e_1295) == this.typeAny) { this.types.set(node_1163, this.typeAny) } else Typer.fail('Calling *not* a function, type is `' + Type.stringify(this.types.get(e_1295)) + '`', e_1295)
                            };
                        };
                    };
                }
            } break;

            case 9: {
                {
                    const a_1307 = temp_1164[1];
                    const op_1308 = temp_1164[2];
                    const b_1309 = temp_1164[3];
                    {
                        this.fill(a_1307);
                        this.fillExpression(b_1309);
                        if ((op_1308 == 111) && (this.types.get(a_1307) == this.typeString)) { this.types.set(node_1163, this.types.get(a_1307)) } else if (op_1308 == 97 || op_1308 == 96 || op_1308 == 100 || op_1308 == 99 || op_1308 == 92 || op_1308 == 93 || op_1308 == 95 || op_1308 == 103) { this.types.set(node_1163, this.typeBool) } else this.types.set(node_1163, (() => {
                            const result_1310 = this.types.get(b_1309);
                            if (result_1310 != null) { return result_1310 };
                            return this.types.get(a_1307);
                        })());
                    };
                }
            } break;

            case 19: {
                {
                    const op_1311 = temp_1164[1];
                    const postfix_1312 = temp_1164[2];
                    const e_1313 = temp_1164[3];
                    {
                        {
                            const temp_1314 = e_1313;
                            switch (temp_1314&&temp_1314[0]) {
                            case 19: {
                                {
                                    const ops = temp_1314[1];
                                    if (op_1311 == 87 || op_1311 == 86) { Typer.fail(('Cannot do `' + (Token.stringify(op_1311)) + 'value' + (Token.stringify(ops)) + '`'), e_1313) };
                                }
                            } break;
                            };
                        };
                        this.fillExpression(e_1313);
                        if ((op_1311 == 89) && (!postfix_1312)) {
                            const type_1315 = this.types.get(e_1313);
                            if ((type_1315 != this.typeBool) && (type_1315 != this.typeAny) && (type_1315 != null)) { Typer.fail(('Operator `!value` takes `value` of type `Bool` only, but got `' + (Type.stringify(this.types.get(e_1313))) + '`'), e_1313) };
                            this.types.set(node_1163, this.toType(/*Type*/[1,'Bool'], node_1163));
                            return;
                        };
                        this.types.set(node_1163, this.types.get(e_1313));
                        const mutates = op_1311 == 87 || op_1311 == 86;
                        if (!mutates) { return };
                        let parent_1316 = this.parents.get(e_1313);
                        {
                            const temp_1317 = parent_1316;
                            switch (temp_1317&&temp_1317[0]) {
                            case 23: {
                                {
                                    const name_1318 = temp_1317[1];
                                    const const_1319 = temp_1317[4];
                                    if (const_1319) { Typer.fail(('Cannot change a constant `let ' + (name_1318) + '`, redefine it as `var ' + (name_1318) + '` to allow value changes\n') + Typer.positionOf(parent_1316) + ('`let ' + (name_1318) + '` is defined here'), node_1163) };
                                }
                            } break;

                            case 21: {
                                {
                                    const name_1320 = temp_1317[1];
                                    Typer.fail(('Cannot `' + (Token.stringify(op_1311)) + '` a function `' + (name_1320) + '`'), node_1163);
                                }
                            } break;

                            case 46: {
                                {
                                    const name_1321 = temp_1317[1];
                                    Typer.fail(('Cannot change iterator value `' + (name_1321) + '` of for loop\n') + Typer.positionOf(parent_1316) + ('`for (' + (name_1321) + ' in ...)` is defined here'), node_1163);
                                }
                            } break;

                            default:
                            {
                            }
                            };
                        };
                    };
                }
            } break;

            case 33: {
                {
                    const e_1322 = temp_1164[1];
                    const i_1323 = temp_1164[2];
                    {
                        this.fillExpression(e_1322);
                        this.fillExpression(i_1323);
                        let indexableIsAny = false;
                        {
                            const temp_1324 = this.types.get(e_1322);
                            switch (temp_1324&&temp_1324[0]) {
                            case 4: {
                                {
                                    const type_1325 = temp_1324[1];
                                    const generic_1326 = temp_1324[2];
                                    if (type_1325.name == 'Any') { indexableIsAny = true };
                                }
                            } break;
                            };
                        };
                        if (!indexableIsAny) {
                            const temp_1327 = this.types.get(i_1323);
                            switch (temp_1327&&temp_1327[0]) {
                            case 4: {
                                {
                                    const type_1328 = temp_1327[1];
                                    if ((type_1328.name != 'Int') && (type_1328.name != 'Any')) { Typer.fail('`value[i]` expects `i` only of type `Int`, but got `' + Type.stringify(this.types.get(i_1323)) + '`', e_1322) };
                                }
                            } break;

                            case null: case undefined: {
                                {
                                }
                            } break;

                            default:
                            Typer.fail('`value[i]`????? expects `i` only of type `Int`, but got `' + Type.stringify(this.types.get(i_1323)) + '`', e_1322)
                            };
                        };
                        {
                            const temp_1329 = this.types.get(e_1322);
                            switch (temp_1329&&temp_1329[0]) {
                            case 4: {
                                {
                                    const type_1330 = temp_1329[1];
                                    const generic_1331 = temp_1329[2];
                                    if ((generic_1331 != null) && (generic_1331.length == 1)) { this.types.set(node_1163, generic_1331[0]) } else if (['Array', 'Buffer', 'Uint8Array', 'Uint32Array'].includes(type_1330.name)) { this.types.set(node_1163, this.toType(/*Type*/[1,'Int'], node_1163)) } else if (['Any'].includes(type_1330.name)) { this.types.set(node_1163, this.toType(/*Type*/[1,'Any'], node_1163)) } else Typer.fail('value[i] generic is null or >1', e_1322);
                                }
                            } break;

                            case null: case undefined: {
                                {
                                }
                            } break;

                            default:
                            {
                            }
                            };
                        };
                    };
                }
            } break;

            case 10: {
                {
                    const a_1332 = temp_1164[1];
                    const op_1333 = temp_1164[2];
                    const b_1334 = temp_1164[3];
                    {
                        if (op_1333 == 95) { Typer.fail('`===` not supported, use `strictEqual`', node_1163) };
                        if (op_1333 == 95) { Typer.fail('`!==` not supported, use `strictNotEqual`', node_1163) };
                        this.fillExpression(a_1332);
                        let parent_1335 = this.parents.get(a_1332);
                        {
                            const temp_1336 = parent_1335;
                            switch (temp_1336&&temp_1336[0]) {
                            case 23: {
                                {
                                    const name_1337 = temp_1336[1];
                                    const const_1338 = temp_1336[4];
                                    if (const_1338) { Typer.fail(('Cannot change a constant `let ' + (name_1337) + '`, redefine it as `var ' + (name_1337) + '` to allow value changes\n') + Typer.positionOf(parent_1335) + ('`let ' + (name_1337) + '` is defined here'), node_1163) };
                                }
                            } break;

                            case 21: {
                                {
                                    const name_1339 = temp_1336[1];
                                    Typer.fail(('Cannot reassign a function `' + (name_1339) + '`'), node_1163);
                                }
                            } break;

                            case 46: {
                                {
                                    const name_1340 = temp_1336[1];
                                    Typer.fail(('Cannot change iterator value `' + (name_1340) + '` of for loop\n') + Typer.positionOf(parent_1335) + ('`for (' + (name_1340) + ' in ...)` is defined here'), node_1163);
                                }
                            } break;

                            default:
                            {
                            }
                            };
                        };
                        this.fillExpression(b_1334);
                        this.types.set(node_1163, this.unify(this.types.get(a_1332), this.types.get(b_1334), b_1334));
                    };
                }
            } break;

            case 16: {
                {
                    const e_1341 = temp_1164[1];
                    {
                        if (!this.insideFunction && !this.insideTry) { Typer.fail('Cannot throw outside of `function` or `try`', node_1163) };
                        if (this.insideFunction && !this.functionAllowedToThrow) { Typer.fail('Cannot throw in a @noThrow function', node_1163) };
                        if (this.insideFunction) { this.functionThrows = true };
                        this.fillExpression(e_1341);
                    };
                }
            } break;

            case 3: {
                {
                    if (!this.insideClassMethod) { Typer.fail('Cannot access `this` outside of class method', node_1163) };
                    this.types.set(node_1163, this.thisType);
                }
            } break;

            case 4: {
                Typer.fail('Cannot use `super` as value', node_1163)
            } break;

            case 15: {
                {
                    const e_1342 = temp_1164[1];
                    {
                        {
                            const temp_1343 = e_1342;
                            switch (temp_1343&&temp_1343[0]) {
                            case 23: {
                                {
                                    const name_1344 = temp_1343[1];
                                    const const_1345 = temp_1343[4];
                                    {
                                        const prefix = (const_1345)? ('let') : 'var';
                                        Typer.fail(('This `return` tries to return a variable `' + (prefix) + ' ' + (name_1344) + '`. Try to wrap it into braces like this `{ return } ' + (prefix) + ' ' + (name_1344) + '`'), node_1163);
                                    };
                                }
                            } break;

                            case 15: {
                                Typer.fail('Cannot return another return. Try to wrap first `{ return } return 2` into braces', node_1163)
                            } break;
                            };
                        };
                        if (!this.insideFunction) { Typer.fail('Cannot use `return` outside of function', node_1163) };
                        if (this.insideArrow) { Typer.fail('Cannot use `return` inside `=>` arrow, use `function` instead of arrow, or wrap expression into =>{block}', node_1163) };
                        if (e_1342 != null) {
                            if (this.functionReturnsAType == this.typeVoid) { Typer.fail('Function returns `Void`, cannot return a value here', e_1342) };
                            this.fillExpression(e_1342);
                            const ret_1346 = this.types.get(e_1342);
                            if (ret_1346 == this.typeVoid) { Typer.fail('Cannot `return` a `Void` non-value', node_1163) };
                            this.functionReturnsAType = this.unify(this.functionReturnsAType, ret_1346, e_1342);
                            this.functionActuallyReturns = true;
                        } else {
                            let step_1347 = 0;
                            const ret_1348 = this.functionReturnsAType;
                            if (step_1347 == 0 && ret_1348 != null) { step_1347 = 1 };
                            if (step_1347 == 1) { if (ret_1348 != this.typeVoid) { Typer.fail(('Expected `return value` of type `' + (Type.stringify(ret_1348)) + '`'), node_1163) } } else this.functionReturnsAType = this.typeVoid;
                        };
                    };
                }
            } break;

            case 42: {
                Typer.fail('Cannot use underscore `_` outside of case pattern', node_1163)
            } break;

            case 45: {
                Typer.fail('Cannot use `export` here: only applicable to module declarations', node_1163)
            } break;

            case 43: {
                Typer.fail('Cannot use `static` here: only applicable to class fields', node_1163)
            } break;

            case 44: {
                Typer.fail('Cannot use `private` here: only applicable to class fields and module declarations', node_1163)
            } break;

            case 35: {
                Typer.fail('Modules should be at a file\' upper scope', node_1163)
            } break;

            case 17: {
                Typer.fail('Cannot use `break` as a value', node_1163)
            } break;

            case 18: {
                Typer.fail('Cannot use `continue` as a value', node_1163)
            } break;

            case 25: {
                Typer.fail('Cannot use `class` as a value', node_1163)
            } break;

            case 37: {
                Typer.fail('Cannot use `enum` as a value', node_1163)
            } break;

            case 8: {
                Typer.fail('Cannot use `declare` as a value', node_1163)
            } break;

            case 23: {
                {
                    const name_1349 = temp_1164[1];
                    const const_1350 = temp_1164[4];
                    {
                        const prefix_1351 = (const_1350)? ('let') : 'var';
                        Typer.fail(('Cannot use `' + (prefix_1351) + ' ' + (name_1349) + '` as a value'), node_1163);
                    };
                }
            } break;

            case 34: {
                Typer.fail('Cannot use `switch` as a value', node_1163)
            } break;

            case 20: {
                Typer.fail('Cannot use `while` as a value', node_1163)
            } break;

            case 46: {
                Typer.fail('Cannot use `for` as a value. To build array from loop, surround with `[for()]` brackets.', node_1163)
            } break;

            case null: case undefined: {
                Typer.fail('Got null node' + Typer.never, node_1163)
            } break;

            default:
            Typer.fail('Unknown node expression kind to type ' + node_1163 + Typer.never, node_1163)
            };
        };
    }
    Typer.never = '. This should never happen. Probably incomplete feature was used. Ping a compiler developer with a code sample.'
    Typer.fail = (msg, node_953 = null) => {
            const data_954 = Project.data.get(node_953);
            if (data_954 == null) { throw new CompilerError(/*TyperError*/[3], msg, 0, 0, '') };
            throw new CompilerError(/*TyperError*/[3], msg, data_954.line, data_954.column, data_954.fileName);
        };
    Typer.positionOf = (node_955) => {
            const data_956 = Project.data.get(node_955);
            if (data_956 == null) { return '[Unknown]: ' };
            return '[' + data_956.fileName + ':' + data_956.line + ':' + data_956.column + ']: ';
        };
    Typer.nodeToNodeType = (node_957) => {
            const temp_958 = node_957;
            switch (temp_958&&temp_958[0]) {
            case 31: {
                {
                    const el_959 = temp_958[1];
                    {
                        if (el_959.length > 1) { Typer.fail('Array type `[T]` cannot have more than 1 parameter `T`', el_959[1]) };
                        return /*ParametricType*/[2,'Array',[Typer.nodeToNodeType(el_959[0])]];
                    };
                }
            } break;

            case 48: {
                {
                    const t_960 = temp_958[1];
                    return t_960;
                }
            } break;

            case 36: {
                {
                    const names_961 = temp_958[1];
                    const el_962 = temp_958[2];
                    {
                        const types_963 = (() => {
                            const result_964 = [];
                            const value_965 = el_962;
                            for (const e of $toIterator(value_965)) result_964.push(Typer.nodeToNodeType(e));
                            return result_964;
                        })();
                        return /*Object*/[5,names_961,types_963];
                    };
                }
            } break;

            default:
            Typer.fail('Cannot nodeToNodeType of ' + Node.stringify(node_957), node_957)
            };
        };
    Typer.internal = () => {};
    var Lexer = class {
    }
    Lexer.isident
    Lexer.isUpper
    Lexer.isLower
    Lexer.ops8a
    Lexer.op16token
    Lexer.kwd
    Lexer.tokenize = (bytes, fileName) => {
            let position_1352 = 0;
            const len_1353 = bytes.length;
            let to_1354 = 0;
            let s_1355 = '';
            let p = 0;
            let line = 1;
            let columnBase = 0;
            const params_1356 = [];
            const tokens = Buffer.alloc(len_1353 + 1);
            let lines = [];
            let columns = [];
            const add = (t_1357) => {
                tokens[to_1354++] = t_1357;
                lines.push(line);
                columns.push(position_1352 - columnBase - 1);
            };
            const addn = (t_1358, p_1359) => {
                params_1356[to_1354] = p_1359;
                add(t_1358);
            };
            const curPos = () => { return position_1352 - columnBase - 1 };
            const get_8 = (pos_1360) => { return bytes[pos_1360] };
            const not_eof = () => { return (position_1352 < len_1353) };
            const new_line = () => {
                line++;
                columnBase = position_1352;
            };
            const fail = (message_1361, erline = null, column = null, filename = null) => {
                let erline_1362 = erline != (null)? (erline) : line;
                let column_1363 = column != (null)? (column) : curPos();
                let filename_1364 = filename != (null)? (filename) : fileName;
                return new CompilerError(/*LexerError*/[2], message_1361, erline_1362, column_1363, filename_1364);
            };
            if ((len_1353 > 2) && (get_8(0) == 239) && (get_8(1) == 187) && (get_8(2) == 191)) { position_1352 += 3 };
            if ((len_1353 > 2) && (get_8(0) == 35) && (get_8(1) == 33)) { while (position_1352 < len_1353 && get_8(position_1352) != 10) {
                position_1352++;
            } };
            while (position_1352 < len_1353) {
                let _8 = 0;
                do {{
                    _8 = get_8(position_1352);
                    if (_8 == 10) { new_line() };
                }} while (_8 <= 32 && (++position_1352 < len_1353));
                if (!not_eof()) { break };
                let _16 = (len_1353 - position_1352) > (1)? (_8 | (get_8(position_1352 + 1) << 8)) : _8;
                if (_8 == 47) {
                    if (_16 == 0x2f2f) {
                        let pos_1365 = position_1352 + 2;
                        while (get_8(position_1352) != 10 && not_eof()) {
                            position_1352++;
                        };
                        continue;
                    };
                    if (_16 == 10799 && get_8(position_1352 + 2) == 42) {
                        position_1352 += 3;
                        p = position_1352;
                        while (not_eof()) {
                            let _32 = (len_1353 - position_1352) > (3)? (bytes.readUInt32LE(position_1352)) : get_8(position_1352);
                            if ((_32 & 0xFF) == 10) { new_line() } else if ((_32 & 0xFFFFFF) == 3090986) { break };
                            position_1352++;
                        };
                        if (!not_eof()) { throw fail('Unclosed doc-comment') };
                        addn(65, bytes.toString('utf8', p, position_1352));
                        position_1352 += 3;
                        continue;
                    };
                    if (_16 == 10799) {
                        let pos_1366 = position_1352 + 2;
                        p = 0;
                        position_1352 += 2;
                        while (not_eof()) {
                            _16 = (len_1353 - position_1352) > (1)? (bytes.readUInt16LE(position_1352)) : get_8(position_1352);
                            if ((_16 & 0xFF) == 10) { new_line() } else if (_16 == 12074 && p > 0) { p-- } else if (_16 == 10799) { p++ } else if (_16 == 12074 && p == 0) { break };
                            position_1352++;
                        };
                        position_1352 += 2;
                        continue;
                    };
                };
                if (((_8 & 95) >= 65 && (_8 & 95) <= 90) || (_8 == 95)) {
                    const titlechar = _8;
                    p = position_1352 + 1;
                    _8 = get_8(p);
                    while (p < len_1353 && Lexer.isident[_8] != 0) _8 = get_8(++p);
                    s_1355 = bytes.toString('ascii', position_1352, p);
                    const t_1367 = (((_16 & 0xFF) <= 90))? (null) : Lexer.kwd.get(s_1355);
                    {
                        let step_1368 = 0;
                        const t_1369 = t_1367;
                        if (step_1368 == 0 && t_1369 != null) { step_1368 = 1 };
                        if (step_1368 == 1) { add(t_1369) } else {
                            if (titlechar >= 65 && titlechar <= 90) { addn(61, s_1355) } else {
                                addn(62, s_1355);
                            };
                        };
                    };
                    position_1352 = p;
                    continue;
                };
                if (_8 == 96) {
                    position_1352++;
                    const pos_1370 = position_1352;
                    while (not_eof()) {
                        if ((get_8(position_1352) == 96) && (get_8(position_1352 + 1) == 96)) {
                            position_1352++;
                            position_1352++;
                            continue;
                        };
                        if (get_8(position_1352) == 96) { break };
                        if (get_8(position_1352) == 10) { new_line() };
                        position_1352++;
                    };
                    let result_1371 = bytes.toString('utf8', pos_1370, position_1352);
                    if (result_1371.indexOf('``') != -1) { result_1371 = result_1371.split('``').join('') };
                    addn(66, result_1371);
                    position_1352++;
                    continue;
                };
                if (_16 == 11822 && (get_8(position_1352 + 2) == 46)) {
                    add(98);
                    position_1352 += 3;
                    continue;
                };
                if (_16 == 15934 && (get_8(position_1352 + 2) == 62)) {
                    add(108);
                    position_1352 += 3;
                    continue;
                };
                const hash = Lexer.simplehash(_16);
                if (_16 == Lexer.op16token.readUInt16LE(hash * 2)) {
                    add(Lexer.op16token[hash + 512]);
                    position_1352 += 2;
                    continue;
                };
                const found_1372 = Lexer.ops8a[_8];
                if (found_1372 != 0) {
                    add(found_1372);
                    position_1352++;
                    continue;
                };
                if (_8 < 40) {
                    p = _8;
                    position_1352++;
                    const pos_1373 = position_1352;
                    while (get_8(position_1352) != p && not_eof()) {
                        if (get_8(position_1352) == 10) { new_line() };
                        if (get_8(position_1352) == '\\'.charCodeAt(0)) {
                            position_1352 += 2;
                            continue;
                        };
                        _16 = (len_1353 - position_1352) > (1)? (bytes.readUInt16LE(position_1352)) : get_8(position_1352);
                        position_1352++;
                    };
                    let result_1374 = bytes.toString('utf8', pos_1373, position_1352);
                    if (result_1374.indexOf('\r\n') != -1) { result_1374 = result_1374.split('\r\n').join('\n') };
                    addn(64, result_1374);
                    position_1352++;
                    continue;
                };
                if (_16 == 30768) {
                    p = position_1352;
                    p += 2;
                    _8 = get_8(position_1352);
                    while ((_8 >= 65 && _8 <= 70) || (_8 >= 48 && _8 <= 57) || (_8 >= 97 && _8 <= 102)) {
                        _8 = get_8(++p);
                    };
                    if (p - position_1352 == 2) { throw fail('Integer `0x` not allowed!') };
                    addn(63, bytes.toString('ascii', position_1352, p));
                    position_1352 = p;
                    continue;
                };
                if (_8 < 58) {
                    p = position_1352;
                    _8 = get_8(p);
                    let found_1375 = 63;
                    while (_8 >= 48 && _8 <= 57) {
                        _8 = get_8(++p);
                    };
                    if (_8 == 46 && get_8(p + 1) != 46) {
                        _8 = get_8(++p);
                        while (_8 >= 48 && _8 <= 57) {
                            _8 = get_8(++p);
                        };
                        found_1375 = 60;
                    };
                    if (_8 == 101 || _8 == 69) {
                        _8 = get_8(++p);
                        if (_8 == 43 || _8 == 45) { _8 = get_8(++p) };
                        while (_8 >= 48 && _8 <= 57) {
                            _8 = get_8(++p);
                        };
                        found_1375 = 60;
                    };
                    addn(found_1375, bytes.toString('ascii', position_1352, p));
                    position_1352 = p;
                    continue;
                };
                if (position_1352 >= len_1353) { break };
                throw fail('Unexpected character ' + String.fromCharCode(_8));
                break;
            };
            return new Tokens(tokens, to_1354, params_1356, lines, columns, fileName);
        };
    Lexer.init = () => {
            Lexer.isident = Buffer.alloc(256);
            {
                let _8_1376 = 0;
                let it_1377 = 0;
                while (it_1377 < 256) {
                    _8_1376 = it_1377;
                    it_1377++;
                    Lexer.isident[_8_1376] = (((_8_1376 >= 65 && _8_1376 <= 90) || (_8_1376 >= 48 && _8_1376 <= 57) || (_8_1376 >= 97 && _8_1376 <= 122) || _8_1376 == 95))? (128) : 0;
                };
            };
            Lexer.isUpper = Buffer.alloc(256);
            {
                let _8_1378 = 0;
                let it_1379 = 0;
                while (it_1379 < 256) {
                    _8_1378 = it_1379;
                    it_1379++;
                    Lexer.isident[_8_1378] = (((_8_1378 >= 65 && _8_1378 <= 90) || (_8_1378 >= 48 && _8_1378 <= 57) || (_8_1378 >= 97 && _8_1378 <= 122) || _8_1378 == 95))? (128) : 0;
                };
            };
            Lexer.kwd = new Map([['_', 1], ['as', 58], ['break', 3], ['case', 4], ['catch', 6], ['class', 7], ['continue', 8], ['do', 9], ['else', 10], ['enum', 11], ['extends', 12], ['declare', 13], ['false', 14], ['for', 15], ['function', 16], ['if', 17], ['implements', 18], ['in', 20], ['interface', 22], ['let', 23], ['new', 25], ['null', 26], ['module', 28], ['private', 29], ['return', 31], ['static', 32], ['super', 59], ['switch', 33], ['this', 34], ['throw', 35], ['true', 36], ['try', 37], ['using', 39], ['var', 40], ['while', 41], ['is', 57]]);
            const ops8 = new Map([[64, 70], [36, 83], [35, 78], [33, 89], [37, 101], [38, 112], [40, 80], [41, 79], [42, 102], [43, 111], [44, 75], [45, 107], [46, 77], [47, 94], [58, 76], [59, 82], [60, 99], [61, 91], [62, 96], [63, 81], [91, 72], ['\\'.charCodeAt(0), 110], [93, 71], [94, 109], [123, 74], [124, 104], [125, 73], [126, 88]]);
            Lexer.ops8a = Buffer.alloc(256);
            for (const key of $toIterator(ops8.keys())) Lexer.ops8a[key] = ops8.get(key);
            const ops16 = new Map([[11051, 87], [11565, 86], [15420, 105], [15649, 103], [15676, 100], [15677, 95], [15678, 97], [15934, 106], [31868, 93], [9766, 92], [15933, 90], [11839, 113]]);
            for (const key1 of $toIterator(ops16.keys())) {
                for (const key2 of $toIterator(ops16.keys())) {
                    if (key1 != key2 && Lexer.simplehash(key1) == Lexer.simplehash(key2)) { throw new CompilerError(/*LexerError*/[2], '2-byte op hash collision: ' + key1 + ' ' + key2, 0, 0, 'INTERNAL') };
                };
            };
            Lexer.op16token = Buffer.alloc(768);
            for (const key of $toIterator(ops16.keys())) {
                const hash_1380 = Lexer.simplehash(key);
                Lexer.op16token.writeUInt16LE(key, hash_1380 * 2);
                Lexer.op16token[hash_1380 + 512] = ops16.get(key);
            };
            return;
        };
    Lexer.simplehash = (val) => { return ((val & 0xff) + (((val >> (8 * 1)) & 0xff) << 3)) & 0xEF };
    var Tokens = class {
        constructor(tokens_1381, length_1382, values_1383, lines_1384, columns_1385, fileName_1386) {
        {
            this.token = tokens_1381;
            this.length = length_1382;
            this.value = values_1383;
            this.line = lines_1384;
            this.column = columns_1385;
            this.fileName = fileName_1386;
        } };
    }
    var Parser = class {
        constructor(lexe_1387) {
            this.i = 0
            this.endif = 0
            this.lasttok = -1
            this.lasttokchecks = 10
            this.classExternal = false
            this.parametricTypeNesting = 0
            this.parametricTypeNestingToken = 0
        {
            this.lex = lexe_1387;
            this.nodes = [];
            while (this.i < this.lex.length && this.tok() != 0) {
                this.nodes.push(this.parseExpr());
            };
        } };
        parseFields() {
            let fields_1388 = [];
            while (this.tok() != 73) {
                let atts_1389 = [];
                while (this.tok() == 70) {
                    atts_1389.push(this.parseAttribute());
                };
                const pos_1390 = {line:this.lex.line[this.i], column:this.lex.column[this.i]};
                const pos_1391 = new NodeData(pos_1390.line, pos_1390.column, this.lex.fileName);
                let _static = false;
                if (this.tok() == 32) {
                    _static = true;
                    this.i++;
                };
                {
                    const temp_1392 = this.tok();
                    switch (temp_1392) {
                    case 29: {
                        this.i++
                    } break;

                    case 40: {
                        {
                            let f_1393 = this.parseExpr();
                            Project.data.set(f_1393, pos_1391);
                            if (_static) {
                                f_1393 = /*TStatic*/[43,f_1393];
                                Project.data.set(f_1393, pos_1391);
                            };
                            Project.mapAttributes.set(f_1393, atts_1389);
                            fields_1388.push(f_1393);
                        }
                    } break;

                    case 16: {
                        {
                            let f_1394 = this.parseExpr();
                            Project.data.set(f_1394, pos_1391);
                            if (_static) {
                                f_1394 = /*TStatic*/[43,f_1394];
                                Project.data.set(f_1394, pos_1391);
                            };
                            Project.mapAttributes.set(f_1394, atts_1389);
                            fields_1388.push(f_1394);
                        }
                    } break;

                    case 23: {
                        {
                            let f_1395 = this.parseExpr();
                            Project.data.set(f_1395, pos_1391);
                            if (_static) {
                                f_1395 = /*TStatic*/[43,f_1395];
                                Project.data.set(f_1395, pos_1391);
                            };
                            Project.mapAttributes.set(f_1395, atts_1389);
                            fields_1388.push(f_1395);
                        }
                    } break;

                    case 25: {
                        {
                            this.i++;
                            let expr_1396 = null;
                            let vars_1397 = [];
                            let types_1398 = [];
                            let values_1399 = [];
                            this.step(80);
                            if (this.tok() != 79) { while (true) {
                                vars_1397.push(this.getgo(62));
                                let expr_1400 = null;
                                let t_1401 = null;
                                if (this.tok() == 76) {
                                    this.i++;
                                    t_1401 = this.parseType();
                                };
                                if (this.tok() == 91) {
                                    this.i++;
                                    expr_1400 = this.parseExpr();
                                };
                                types_1398.push(t_1401);
                                values_1399.push(expr_1400);
                                if (this.tok() == 75) { this.i++ } else break;
                            } };
                            this.step(79);
                            let tmp = this.i;
                            while (this.tok() == 70) this.parseAttribute();
                            if (this.tok() != 73 && this.tok() != 16) {
                                this.i = tmp;
                                expr_1396 = this.parseExpr();
                            } else this.i = tmp;
                            let v_1402 = [];
                            {
                                let i_1403 = 0;
                                let it_1404 = 0;
                                let at_1405 = vars_1397.length;
                                while (it_1404 < at_1405) {
                                    i_1403 = it_1404;
                                    it_1404++;
                                    {
                                        v_1402.push(/*TVar*/[23,vars_1397[i_1403],types_1398[i_1403],values_1399[i_1403],true,false]);
                                    };
                                };
                            };
                            const field_1406 = /*TFunction*/[21,'new',expr_1396,v_1402,null];
                            Project.data.set(field_1406, pos_1391);
                            fields_1388.push(field_1406);
                        }
                    } break;

                    case 62: {
                        {
                            const name_1407 = this.getgo(62);
                            if ((name_1407 == 'get') && (this.tok() == 62)) {
                                const field_1408 = this.getgo(62);
                                this.fail(('Use property `var ' + (field_1408) + ' { get { return value } }` instead of `get ' + (field_1408) + '()`'));
                            };
                            if ((name_1407 == 'set') && (this.tok() == 62)) {
                                const field_1409 = this.getgo(62);
                                this.step(80);
                                const value_1410 = this.getgo(62);
                                this.fail(('Use property `var ' + (field_1409) + ' { set(' + (value_1410) + ') { ... } }` instead of `set ' + (field_1409) + '(' + (value_1410) + ')`'));
                            };
                            if (this.tok() == 80) {
                                if (name_1407 == 'constructor') { this.fail('Use `new()` syntax instead of `constructor()`') };
                                if (_static) { this.fail('Use `static function ' + name_1407 + '()` syntax for static methods') } else this.fail('Use `function ' + name_1407 + '()` syntax for methods');
                            };
                            this.fail('Fields should start with `var ' + name_1407 + '` or `let ' + name_1407 + '`');
                        }
                    } break;

                    case 61: {
                        this.fail('Fields cannot start with uppercase character `' + this.print() + '` -> `' + this.print().toLowerCase() + '`')
                    } break;

                    case 74: {
                        {
                            const pos_1411 = {line:this.lex.line[this.i], column:this.lex.column[this.i]};
                            const field_1412 = fields_1388.pop();
                            let v_1413 = null;
                            let t_1414 = null;
                            let n_1415 = null;
                            let onlyGet = false;
                            {
                                const temp_1416 = field_1412;
                                switch (temp_1416&&temp_1416[0]) {
                                case 23: {
                                    {
                                        const name_1417 = temp_1416[1];
                                        const type_1418 = temp_1416[2];
                                        const expr_1419 = temp_1416[3];
                                        const const_1420 = temp_1416[4];
                                        {
                                            if (expr_1419 != null) { this.fail('Property should not have a `= value`') };
                                            v_1413 = field_1412;
                                            t_1414 = type_1418;
                                            n_1415 = name_1417;
                                            onlyGet = const_1420;
                                        };
                                    }
                                } break;

                                default:
                                this.fail('Only `var` and `let` fields may have a getter `let v: T { get() ... }`')
                                };
                            };
                            this.i++;
                            if (this.print() == 'set') { this.fail('Expected `get` before `set`') };
                            if (this.print() != 'get') { this.fail('Expected `get`') };
                            const kind_1421 = this.print();
                            let getterExpr = null;
                            if (kind_1421 == 'get') {
                                this.i++;
                                getterExpr = this.parseExpr();
                            };
                            const kind_1422 = this.print();
                            let setterExpr = null;
                            let setterVar = null;
                            if ((kind_1422 == 'set') && (onlyGet)) { this.fail('Constants `let` may have only getter `get`') };
                            if (kind_1422 == 'set') {
                                this.i++;
                                this.step(80);
                                setterVar = this.getgo(62);
                                this.step(79);
                                setterExpr = this.parseExpr();
                            };
                            if ((setterExpr == null) && (!onlyGet)) { this.fail('Variables `var` should have both getter `get` and setter `set`') };
                            this.step(73);
                            const getter = ((getterExpr == null))? (null) : /*TFunction*/[21,'get_' + n_1415,getterExpr,[],t_1414];
                            const setter = ((setterExpr == null))? (null) : /*TFunction*/[21,'set_' + n_1415,setterExpr,[/*TVar*/[23,setterVar,t_1414,null,true,false]],null];
                            const property = /*TProperty*/[26,field_1412,getter,setter];
                            Project.data.set(property, new NodeData(pos_1411.line, pos_1411.column, this.lex.fileName));
                            Project.data.set(getter, new NodeData(pos_1411.line, pos_1411.column, this.lex.fileName));
                            Project.data.set(setter, new NodeData(pos_1411.line, pos_1411.column, this.lex.fileName));
                            fields_1388.push(property);
                            {
                                let step_1423 = 0;
                                const getter_1424 = getter;
                                if (step_1423 == 0 && getter_1424 != null) { step_1423 = 1 };
                                if (step_1423 == 1) { fields_1388.push(getter_1424) };
                            };
                            {
                                let step_1425 = 0;
                                const setter_1426 = setter;
                                if (step_1425 == 0 && setter_1426 != null) { step_1425 = 1 };
                                if (step_1425 == 1) { fields_1388.push(setter_1426) };
                            };
                        }
                    } break;

                    default:
                    this.fail('Fields cannot start with `' + this.print() + '`')
                    };
                };
            };
            return fields_1388;
        };
        tok() {
            if (this.i > this.lex.length) {
                console.log('Parser is out of token space!');
                console.log('This should NOT happen.');
                console.log('Please, issue a developer (with a sample code).');
                this.fail(this.lex.fileName + ': Parser internal error: out of token space');
            };
            let t_1427 = this.lex.token[this.i];
            if (this.lasttok != this.i) {
                this.lasttok = this.i;
                this.lasttokchecks = 1000;
            } else {
                this.lasttokchecks--;
                if (this.lasttokchecks < 0) { this.fail('Parser internal error: Same token parsed too many times: ' + ('`' + (this.print()) + '`')) };
            };
            if ((t_1427 == 78) && (this.lex.value[this.i + 1] == 'end')) { if (this.endif > 0) {
                this.i++;
                this.i++;
                this.endif--;
                this.tok();
            } else this.fail('Unexpected `#end`') };
            if ((t_1427 == 78) && (this.offset(1) == 17)) {
                this.i++;
                this.i++;
                const defName = this.getgo(62);
                const def = Project.defines[defName];
                if (def == null) { this.fail('`#if` looks for the `' + defName + '` parameter which is *not* defined in project file.' + (' Add `\"define\": { \"' + (defName) + '\": false }` to `hexa.json` or `--define ' + (defName) + '=false` to suppress this message.')) };
                if (def == true) { this.endif++ };
                if (def == false) {
                    let endifs = 1;
                    while (this.i < this.lex.length) {
                        if ((this.offset(0) == 78) && (this.offset(1) == 17)) {
                            this.i++;
                            this.i++;
                            endifs++;
                            continue;
                        };
                        if ((this.offset(0) == 78) && (this.lex.value[this.i + 1] == 'end')) {
                            this.i++;
                            this.i++;
                            endifs--;
                            if (endifs == 0) { break };
                            continue;
                        };
                        this.i++;
                    };
                };
                this.tok();
            };
            return this.lex.token[this.i];
        };
        print() { return Token.stringify(this.lex.token[this.i], this.lex.value[this.i]) };
        expect(t_1428) { if (t_1428 != this.tok()) { this.expected(Token.stringify(t_1428)) } };
        fail(message_1429, line_1430, column_1431, filename_1432) {
            const line_1433 = line_1430 != (null)? (line_1430) : this.lex.line[this.i];
            const column_1434 = column_1431 != (null)? (column_1431) : this.lex.column[this.i];
            const filename_1435 = filename_1432 != (null)? (filename_1432) : this.lex.fileName;
            throw new CompilerError(/*ParserError*/[0], message_1429, line_1433, column_1434, filename_1435);
        };
        autofail(message_1436, line_1437, column_1438, filename_1439) { this.fail(message_1436 + '\nTo fix this syntax error automatically call compiler with --autofix', line_1437, column_1438, filename_1439) };
        autofix(startToken, endToken, patch, delete_1440) {
            const start_1441 = startToken;
            const end_1442 = endToken;
            let i_1443 = 0;
            const filename_1444 = this.lex.fileName;
            const code_1445 = Fs.readFileSync(path.resolve(filename_1444)).toString('utf8');
            const original = code_1445.substring(start_1441, end_1442 + 1);
            const updated = code_1445.substr(0, start_1441) + patch + code_1445.substr(end_1442 + 1);
            console.log('Autofixed: `' + original + '` => `' + patch + '`');
            console.log(('File `' + (filename_1444) + '` overwritten with updated code\n') + updated);
        };
        getgo(t_1446) {
            this.expect(t_1446);
            return this.lex.value[this.i++];
        };
        step(t_1447) {
            this.expect(t_1447);
            this.i++;
        };
        next() { this.i++ };
        offset(v_1448) { return this.lex.token[this.i + v_1448] };
        unexpected() {
            let token = Token.stringify(this.lex.token[this.i], this.lex.value[this.i]);
            let error = ('Unexpected `' + (token) + '`');
            if (this.tok() == 82) { error += ' semicolon. Note: Hexa has no semicolons!' };
            if (this.print() == 'public') { error += '. Note: Hexa has no `public` keyword!' };
            this.fail(error);
        };
        expected(str_1449) {
            let token_1450 = Token.stringify(this.lex.token[this.i], this.lex.value[this.i]);
            this.fail(('Expected `' + (str_1449) + '` before `' + (token_1450) + '`'));
        };
        parseExpr() {
            let atts_1451 = [];
            while (this.tok() == 70) atts_1451.push(this.parseAttribute());
            let node_1452 = this.tok();
            let nodePosition = {line:this.lex.line[this.i], column:this.lex.column[this.i]};
            let result_1453 = null;
            {
                const temp_1454 = node_1452;
                switch (temp_1454) {
                case 39: {
                    {
                        this.next();
                        let names_1455 = [this.getgo(61)];
                        while (this.tok() == 75) {
                            this.step(75);
                            names_1455.push(this.getgo(61));
                        };
                        result_1453 = /*TUsing*/[39,names_1455];
                    }
                } break;

                case 13: {
                    {
                        this.i++;
                        {
                            const temp_1456 = this.tok();
                            switch (temp_1456) {
                            case 16: {
                                result_1453 = this.parseFunction(false, true)
                            } break;

                            case 40: case 23: {
                                {
                                    const parsed = this.parseVar(true);
                                    if (parsed.length > 1) { result_1453 = /*TVars*/[24,parsed] } else result_1453 = parsed[0];
                                }
                            } break;

                            case 7: case 22: {
                                result_1453 = this.parseClass(true)
                            } break;

                            case 61: {
                                {
                                    const alias_1457 = this.parseType();
                                    this.step(91);
                                    const value_1458 = this.parseType();
                                    result_1453 = /*TTypeAlias*/[8,alias_1457,value_1458];
                                }
                            } break;

                            default:
                            this.fail(('Wrong `declare` format, got `' + (Token.stringify(this.tok())) + '`'))
                            };
                        };
                    }
                } break;

                case 74: {
                    {
                        this.i++;
                        if (this.tok() == 73) {
                            this.i++;
                            result_1453 = /*TBlock*/[11,[]];
                        } else if (this.tok() == 76) {
                            this.i++;
                            this.step(73);
                            result_1453 = /*TObject*/[36,[],[]];
                        } else if (this.tok() == 62 && this.lex.token[this.i + 1] == 76) {
                            let names_1459 = [];
                            let el_1460 = [];
                            while (true) {
                                names_1459.push(this.getgo(62));
                                this.step(76);
                                el_1460.push(this.parseExpr());
                                if (this.tok() == 75) {
                                    this.i++;
                                    if (this.tok() == 73) { this.fail('Unexpected `}`, remove trailing `,` comma') };
                                    continue;
                                } else break;
                            };
                            if (this.tok() != 73) { this.fail(('Expected `}` or `,` before `' + (this.print()) + '`')) };
                            this.step(73);
                            result_1453 = /*TObject*/[36,names_1459,el_1460];
                        } else {
                            let el_1461 = [];
                            while (this.tok() != 73) {
                                el_1461.push(this.parseExpr());
                            };
                            this.step(73);
                            result_1453 = /*TBlock*/[11,el_1461];
                        };
                    }
                } break;

                case 17: {
                    {
                        this.i++;
                        this.step(80);
                        let econd_1462 = [this.parseExpr()];
                        while (this.tok() == 75) {
                            this.next();
                            econd_1462.push(this.parseExpr());
                        };
                        this.step(79);
                        let eif_1463 = null;
                        if (this.tok() != 76) { eif_1463 = this.parseExpr() };
                        let eelse_1464 = null;
                        if (this.tok() == 10) {
                            this.i++;
                            eelse_1464 = this.parseExpr();
                        };
                        result_1453 = /*TIf*/[13,econd_1462,eif_1463,eelse_1464];
                    }
                } break;

                case 41: {
                    {
                        this.i++;
                        this.step(80);
                        let econd_1465 = this.parseExpr();
                        this.step(79);
                        let e_1466 = this.parseExpr();
                        result_1453 = /*TWhile*/[20,econd_1465,e_1466,true];
                    }
                } break;

                case 9: {
                    {
                        this.i++;
                        let e_1467 = this.parseExpr();
                        this.step(41);
                        this.step(80);
                        let econd_1468 = this.parseExpr();
                        this.step(79);
                        result_1453 = /*TWhile*/[20,econd_1468,e_1467,false];
                    }
                } break;

                case 80: {
                    {
                        this.next();
                        if ((this.tok() == 79 && this.offset(1) == 90) || (this.tok() == 62 && this.offset(1) == 75) || (this.tok() == 62 && this.offset(1) == 76) || (this.tok() == 62 && this.offset(1) == 79 && this.offset(2) == 90)) {
                            let vars_1469 = [];
                            let types_1470 = [];
                            let values_1471 = [];
                            while (this.tok() != 79) {
                                vars_1469.push(this.getgo(62));
                                if (this.tok() == 76) {
                                    this.i++;
                                    types_1470.push(this.parseType());
                                };
                                if (this.tok() == 91) {
                                    this.i++;
                                    values_1471.push(this.parseExpr());
                                };
                                if (this.tok() == 75) { this.i++ };
                            };
                            this.step(79);
                            this.step(90);
                            let v_1472 = [];
                            {
                                let i_1473 = 0;
                                let it_1474 = 0;
                                let at_1475 = vars_1469.length;
                                while (it_1474 < at_1475) {
                                    i_1473 = it_1474;
                                    it_1474++;
                                    {
                                        v_1472.push(/*TVar*/[23,vars_1469[i_1473],types_1470[i_1473],values_1471[i_1473],true]);
                                    };
                                };
                            };
                            result_1453 = /*TArrow*/[22,this.parseExpr(),v_1472,null];
                        } else {
                            let expr_1476 = this.parseExpr();
                            this.step(79);
                            result_1453 = /*TParenthesis*/[14,expr_1476];
                        };
                    }
                } break;

                case 31: {
                    {
                        this.i++;
                        {
                            const temp_1477 = this.tok();
                            switch (temp_1477) {
                            case 73: {
                                result_1453 = /*TReturn*/[15,null]
                            } break;

                            case 40: {
                                result_1453 = /*TReturn*/[15,null]
                            } break;

                            case 23: {
                                result_1453 = /*TReturn*/[15,null]
                            } break;

                            case 4: {
                                result_1453 = /*TReturn*/[15,null]
                            } break;

                            case 3: {
                                result_1453 = /*TReturn*/[15,null]
                            } break;

                            case 8: {
                                result_1453 = /*TReturn*/[15,null]
                            } break;

                            case 31: {
                                result_1453 = /*TReturn*/[15,null]
                            } break;

                            default:
                            result_1453 = /*TReturn*/[15,this.parseExpr()]
                            };
                        };
                    }
                } break;

                case 35: {
                    {
                        this.i++;
                        result_1453 = /*TThrow*/[16,this.parseExpr()];
                    }
                } break;

                case 8: {
                    {
                        this.i++;
                        result_1453 = /*TContinue*/[18];
                    }
                } break;

                case 3: {
                    {
                        this.i++;
                        result_1453 = /*TBreak*/[17];
                    }
                } break;

                case 1: {
                    {
                        this.i++;
                        result_1453 = /*TUnderscore*/[42];
                    }
                } break;

                case 88: {
                    {
                        this.i++;
                        result_1453 = /*TUnop*/[19,88,false,this.parseExpr()];
                    }
                } break;

                case 107: {
                    {
                        this.i++;
                        result_1453 = /*TUnop*/[19,107,false,this.parseExpr()];
                    }
                } break;

                case 89: {
                    {
                        this.i++;
                        result_1453 = /*TUnop*/[19,89,false,this.parseExpr()];
                    }
                } break;

                case 87: {
                    {
                        this.i++;
                        result_1453 = /*TUnop*/[19,87,false,this.parseExpr()];
                    }
                } break;

                case 86: {
                    {
                        this.i++;
                        result_1453 = /*TUnop*/[19,86,false,this.parseExpr()];
                    }
                } break;

                case 60: {
                    result_1453 = /*TFloat*/[6,this.getgo(60)]
                } break;

                case 63: {
                    result_1453 = /*TInt*/[5,this.getgo(63)]
                } break;

                case 61: {
                    if (this.lex.token[this.i + 1] == 99) {
                        let res = this.parseType();
                        result_1453 = /*NodeTypeValue*/[48,res];
                    } else if (this.lex.token[this.i + 1] == 81) {
                        let name_1478 = this.getgo(61);
                        this.i++;
                        result_1453 = /*NodeTypeValue*/[48,/*Optional*/[0,/*Type*/[1,name_1478]]];
                    } else {
                        let name_1479 = this.getgo(61);
                        result_1453 = /*NodeTypeValue*/[48,/*Type*/[1,name_1479]];
                    }
                } break;

                case 62: {
                    {
                        let name_1480 = this.getgo(62);
                        if (this.tok() == 90) {
                            this.next();
                            result_1453 = /*TArrow*/[22,this.parseExpr(),[/*TVar*/[23,name_1480,null,null,true]],null];
                        } else result_1453 = /*TIdent*/[1,name_1480];
                    }
                } break;

                case 66: {
                    result_1453 = /*TString*/[0,this.getgo(66)]
                } break;

                case 64: {
                    {
                        let str_1481 = this.getgo(64);
                        if (this.hasInterpolation(str_1481)) { result_1453 = /*TParenthesis*/[14,this.parseInterpolations(str_1481)] } else result_1453 = /*TString*/[0,str_1481];
                    }
                } break;

                case 36: {
                    {
                        this.i++;
                        result_1453 = /*TBool*/[2,true];
                    }
                } break;

                case 14: {
                    {
                        this.i++;
                        result_1453 = /*TBool*/[2,false];
                    }
                } break;

                case 34: {
                    {
                        this.i++;
                        result_1453 = /*TThis*/[3];
                    }
                } break;

                case 26: {
                    {
                        this.i++;
                        result_1453 = /*TNull*/[7];
                    }
                } break;

                case 59: {
                    {
                        this.i++;
                        result_1453 = /*TSuper*/[4];
                    }
                } break;

                case 40: {
                    {
                        let parsed_1482 = this.parseVar();
                        if (parsed_1482.length > 1) { result_1453 = /*TVars*/[24,parsed_1482] } else result_1453 = parsed_1482[0];
                    }
                } break;

                case 23: {
                    {
                        let parsed_1483 = this.parseVar();
                        if (parsed_1483.length > 1) { result_1453 = /*TVars*/[24,parsed_1483] } else result_1453 = parsed_1483[0];
                    }
                } break;

                case 37: {
                    {
                        this.i++;
                        let expr_1484 = this.parseExpr();
                        let vars_1485 = [];
                        let t_1486 = [];
                        let v_1487 = [];
                        let catches_1488 = [];
                        while (this.tok() == 6) {
                            this.step(6);
                            this.step(80);
                            let name_1489 = this.getgo(62);
                            vars_1485.push(name_1489);
                            this.step(76);
                            let type_1490 = this.parseType();
                            {
                                t_1486.push(type_1490);
                            };
                            v_1487.push(/*TVar*/[23,name_1489,type_1490,null,true]);
                            this.step(79);
                            catches_1488.push(this.parseExpr());
                        };
                        result_1453 = /*TTry*/[27,expr_1484,t_1486,v_1487,catches_1488];
                    }
                } break;

                case 28: {
                    {
                        this.i++;
                        let path_1491 = [];
                        if (this.tok() == 62) {
                            path_1491.push(this.getgo(62));
                            while (this.tok() == 77) {
                                this.i++;
                                path_1491.push(this.getgo(62));
                            };
                        };
                        this.step(74);
                        let el_1492 = [];
                        while (this.tok() != 73) {
                            el_1492.push(this.parseExpr());
                        };
                        this.step(73);
                        result_1453 = /*TModule*/[35,path_1491,el_1492];
                        Project.data.set(result_1453, new NodeData(nodePosition.line, nodePosition.column, this.lex.fileName));
                        return result_1453;
                    }
                } break;

                case 11: {
                    {
                        this.i++;
                        let t_1493 = this.parseType();
                        let valuesType_1494 = null;
                        if (this.tok() == 76) {
                            this.i++;
                            valuesType_1494 = this.parseType();
                        };
                        let extend_1495 = null;
                        if (this.tok() == 12) {
                            this.i++;
                            extend_1495 = this.parseType();
                        };
                        this.step(74);
                        let names_1496 = [];
                        while (this.tok() != 73) {
                            while (this.tok() == 70) atts_1451.push(this.parseAttribute());
                            atts_1451 = [];
                            names_1496.push(this.parseExpr());
                        };
                        this.step(73);
                        result_1453 = /*TEnum*/[37,t_1493,names_1496,valuesType_1494,extend_1495];
                    }
                } break;

                case 7: case 22: {
                    {
                        let att = atts_1451;
                        atts_1451 = [];
                        const me = this.parseClass();
                        Project.mapAttributes.set(me, att);
                        result_1453 = me;
                    }
                } break;

                case 16: {
                    result_1453 = this.parseFunction()
                } break;

                case 72: {
                    {
                        this.i++;
                        let el_1497 = [];
                        let values_1498 = [];
                        let isMap = false;
                        if (this.tok() != 71) { while (true) {
                            if (this.tok() == 76) {
                                isMap = true;
                                this.next();
                                break;
                            };
                            el_1497.push(this.parseExpr());
                            if (this.tok() == 76) {
                                this.i++;
                                values_1498.push(this.parseExpr());
                                isMap = true;
                            };
                            if (this.tok() == 75) {
                                this.i++;
                                if (this.tok() == 71) { this.fail('Unexpected `]`, remove trailing comma `,` before `]` or add a value after `,` if required') };
                            } else break;
                        } };
                        this.step(71);
                        if (isMap) { result_1453 = /*TMap*/[32,el_1497,values_1498] } else result_1453 = /*TArray*/[31,el_1497];
                    }
                } break;

                case 25: {
                    {
                        this.i++;
                        let t_1499 = this.parseType();
                        let names_1500 = [];
                        let values_1501 = [];
                        if (this.tok() == 74) {
                            this.i++;
                            if (this.tok() == 76) {
                                this.i++;
                                this.step(73);
                            } else if (this.tok() == 62 && this.lex.token[this.i + 1] == 76) {
                                while (this.tok() != 73) {
                                    names_1500.push(this.getgo(62));
                                    this.step(76);
                                    values_1501.push(this.parseExpr());
                                    if (this.tok() == 75) { this.i++ };
                                };
                                this.step(73);
                            } else if (this.tok() == 73) { this.step(73) };
                        };
                        this.step(80);
                        let args_1502 = [];
                        let argNames_1503 = [];
                        if (this.tok() != 79) { while (true) {
                            {
                                const temp_1504 = this.tok();
                                switch (temp_1504) {
                                case 79: {
                                    this.fail('Unexpected `)`, remove trailing `,` comma')
                                } break;

                                case 61: {
                                    {
                                        argNames_1503.push(null);
                                        args_1502.push(this.parseExpr());
                                        if (this.tok() == 76) {
                                            this.step(76);
                                            this.parseType();
                                        };
                                    }
                                } break;

                                default:
                                {
                                    if (this.lex.token[this.i + 1] == 76) {
                                        argNames_1503.push(this.getgo(62));
                                        this.step(76);
                                    } else {
                                        argNames_1503.push(null);
                                    };
                                    args_1502.push(this.parseExpr());
                                }
                                };
                            };
                            if (this.tok() == 75) { this.i++ } else break;
                        } };
                        this.step(79);
                        result_1453 = /*TNew*/[30,[],t_1499,args_1502,names_1500,values_1501,argNames_1503];
                    }
                } break;

                case 33: {
                    {
                        this.i++;
                        this.step(80);
                        let exprs_1505 = [this.parseExpr()];
                        while (this.tok() == 75) {
                            this.i++;
                            exprs_1505.push(this.parseExpr());
                        };
                        this.step(79);
                        this.step(74);
                        let cases_1506 = [];
                        let conds_1507 = [];
                        let guards_1508 = [];
                        while (this.tok() != 73) {
                            this.step(4);
                            if (this.tok() == 1) {
                                conds_1507.push(/*TUnderscore*/[42]);
                                this.i++;
                            } else conds_1507.push(this.parseExpr());
                            guards_1508.push(null);
                            this.step(76);
                            let exs = [];
                            while (this.tok() != 4 && this.tok() != 73) {
                                exs.push(this.parseExpr());
                            };
                            cases_1506.push(/*TBlock*/[11,exs]);
                        };
                        this.step(73);
                        result_1453 = /*TSwitch*/[34,exprs_1505,conds_1507,guards_1508,cases_1506];
                    }
                } break;

                case 15: {
                    {
                        this.i++;
                        const start_1509 = this.i;
                        this.step(80);
                        if (this.tok() == 23 || this.tok() == 40) {
                            this.i++;
                            let name_1510 = this.getgo(62);
                            {
                                if (this.print() == 'of' || this.print() == 'in') {
                                    this.i++;
                                    let values_1511 = this.print();
                                    this.i++;
                                    while (this.tok() != 79 && this.tok() != 0) {
                                        if (this.tok() == 107 || this.tok() == 111) { values_1511 += ' ' + this.print() + ' ' } else values_1511 += this.print();
                                        this.i++;
                                    };
                                    this.fail(('This loop should be replaced to `for (' + (name_1510) + ' in ' + (values_1511) + ')`'));
                                };
                            };
                            let classic = true;
                            if (this.tok() == 91) { this.i++ } else classic = false;
                            let specialCase = '';
                            if ((this.tok() == 63) && (this.lex.value[this.i] == '0')) { this.i++ } else {
                                while (this.tok() == 62 || this.tok() == 61 || this.tok() == 80 || this.tok() == 79 || this.tok() == 111 || this.tok() == 107 || this.tok() == 63 || this.tok() == 102 || this.tok() == 77) {
                                    if (this.tok() == 107 || this.tok() == 111) { specialCase += ' ' + this.print() + ' ' } else specialCase += this.print();
                                    this.i++;
                                };
                            };
                            if (this.tok() == 82) { this.i++ } else classic = false;
                            if ((this.tok() == 62) && (this.lex.value[this.i] == name_1510)) { this.i++ } else classic = false;
                            let lesserOrEqual = false;
                            if (this.tok() == 99) { this.i++ } else if (this.tok() == 100) {
                                this.i++;
                                lesserOrEqual = true;
                            } else classic = false;
                            let values_1512 = this.print();
                            this.i++;
                            while (this.tok() == 62 || this.tok() == 61 || this.tok() == 80 || this.tok() == 79 || this.tok() == 111 || this.tok() == 107 || this.tok() == 63 || this.tok() == 102 || this.tok() == 77) {
                                if (this.tok() == 107 || this.tok() == 111) { values_1512 += ' ' + this.print() + ' ' } else values_1512 += this.print();
                                this.i++;
                            };
                            if (lesserOrEqual) { values_1512 += ' + 1' };
                            if (this.tok() == 82) { this.i++ } else classic = false;
                            if ((this.tok() == 62) && (this.lex.value[this.i] == name_1510)) {
                                this.i++;
                                if (this.tok() == 87) { this.i++ } else classic = false;
                            } else if (this.tok() == 87) {
                                this.i++;
                                if ((this.tok() == 62) && (this.lex.value[this.i] == name_1510)) { this.i++ } else classic = false;
                            } else classic = false;
                            if (this.tok() == 79) {} else classic = false;
                            if ((classic) && (specialCase == '')) { this.fail(('This loop should be replaced to `for (' + (name_1510) + ' in ' + (values_1512) + ')`')) };
                            if (classic) { this.fail(('This loop should be replaced to `for (' + (name_1510) + ' in ' + (specialCase) + ' ... ' + (values_1512) + ')`')) };
                            if (classic) { this.fail('This loop should be replaced to:\n' + ('var ' + (name_1510) + ' = ' + (specialCase) + '\n') + ('while (' + (name_1510) + ' < ' + (values_1512) + ') {\n') + '\t...\n' + ('\t' + (name_1510) + '++\n') + '}') };
                            this.fail(('Hexa has only `for (' + (name_1510) + ' in values)` syntax'));
                        };
                        let name_1513 = this.getgo(62);
                        this.step(20);
                        let values_1514 = this.parseExpr();
                        let range_1515 = null;
                        if (this.tok() == 98) {
                            this.i++;
                            range_1515 = this.parseExpr();
                        };
                        this.step(79);
                        let expression = this.parseExpr();
                        result_1453 = /*TFor*/[46,name_1513,values_1514,expression,range_1515];
                    }
                } break;

                case 32: {
                    {
                        this.next();
                        result_1453 = /*TStatic*/[43,this.parseExpr()];
                    }
                } break;

                case 29: {
                    {
                        this.next();
                        result_1453 = /*TPrivate*/[44,this.parseExpr()];
                    }
                } break;

                default:
                this.unexpected()
                };
            };
            if (result_1453 == null) {
                process_20.stdout.write('\n');
                this.fail('Expression is incomplete, current token is: ' + Token.stringify(this.tok()));
            };
            Project.data.set(result_1453, new NodeData(nodePosition.line, nodePosition.column, this.lex.fileName));
            if (atts_1451.length > 0) {
                Project.mapAttributes.set(result_1453, atts_1451);
                atts_1451 = [];
            };
            let done = this.i >= this.lex.length;
            while (!done) {
                Project.data.set(result_1453, new NodeData(this.lex.line[this.i], this.lex.column[this.i], this.lex.fileName));
                {
                    const temp_1516 = this.tok();
                    switch (temp_1516) {
                    case 0: {
                        done = true
                    } break;

                    case 72: {
                        {
                            this.i++;
                            let index_1517 = this.parseExpr();
                            if (this.tok() == 75) { this.fail('Expected `]` instead of `,` comma. Hexa supports only one `[index]` value.\n' + ('Note, you are indexing this expression: `' + (Node.stringify(result_1453)) + '[' + (Node.stringify(index_1517)) + ']`\n') + ('To create array here, wrap it with `{` as `{[' + (Node.stringify(index_1517)) + ', ...]}` so it doesn\'t index previous expression.')) };
                            this.step(71);
                            result_1453 = /*TIndex*/[33,result_1453,index_1517];
                        }
                    } break;

                    case 57: {
                        {
                            this.i++;
                            {
                                const temp_1518 = this.tok();
                                switch (temp_1518) {
                                case 61: {
                                    result_1453 = /*TIs*/[40,result_1453,this.parseType()]
                                } break;

                                default:
                                this.fail('Cannot parse type `' + Token.stringify(this.tok()) + '`')
                                };
                            };
                        }
                    } break;

                    case 58: {
                        {
                            this.i++;
                            let kind_1519 = this.tok();
                            if (this.tok() == 89) { this.i++ } else if (this.tok() == 81) { this.i++ } else kind_1519 = 123;
                            result_1453 = /*TAs*/[41,result_1453,kind_1519,this.parseType()];
                        }
                    } break;

                    case 80: {
                        {
                            let args_1520 = [];
                            let argNames_1521 = [];
                            this.i++;
                            if (this.tok() != 79) { while (true) {
                                {
                                    const temp_1522 = this.tok();
                                    switch (temp_1522) {
                                    case 79: {
                                        this.fail('Unexpected `)`, remove trailing `,` comma')
                                    } break;

                                    case 61: {
                                        {
                                            argNames_1521.push(null);
                                            args_1520.push(this.parseExpr());
                                            if (this.tok() == 76) {
                                                this.step(76);
                                                this.parseType();
                                            };
                                        }
                                    } break;

                                    default:
                                    {
                                        if ((this.tok() == 62) && (this.lex.token[this.i + 1] == 76)) {
                                            argNames_1521.push(this.getgo(62));
                                            this.step(76);
                                        } else {
                                            argNames_1521.push(null);
                                        };
                                        args_1520.push(this.parseExpr());
                                    }
                                    };
                                };
                                if (this.tok() == 75) { this.i++ } else break;
                            } };
                            this.step(79);
                            result_1453 = /*TCall*/[12,result_1453,args_1520,argNames_1521];
                        }
                    } break;

                    case 90: {
                        {
                            this.next();
                            result_1453 = /*TArrow*/[22,this.parseExpr(),[result_1453],null];
                        }
                    } break;

                    case 87: {
                        {
                            {
                                const temp_1523 = result_1453;
                                switch (temp_1523&&temp_1523[0]) {
                                case 19: {
                                    return result_1453
                                } break;
                                };
                            };
                            this.i++;
                            result_1453 = /*TUnop*/[19,87,true,result_1453];
                        }
                    } break;

                    case 86: {
                        {
                            {
                                const temp_1524 = result_1453;
                                switch (temp_1524&&temp_1524[0]) {
                                case 19: {
                                    return result_1453
                                } break;
                                };
                            };
                            this.i++;
                            result_1453 = /*TUnop*/[19,86,true,result_1453];
                        }
                    } break;

                    case 77: {
                        {
                            this.i++;
                            {
                                const temp_1525 = this.tok();
                                switch (temp_1525) {
                                case 61: {
                                    result_1453 = /*TDotUpper*/[29,result_1453,this.getgo(61)]
                                } break;

                                default:
                                result_1453 = /*TDot*/[28,result_1453,this.getgo(62)]
                                };
                            };
                        }
                    } break;

                    case 81: {
                        {
                            this.i++;
                            if (this.tok() == 77) {
                                let name_1526 = this.getgo(62);
                                result_1453 = /*TDot*/[28,result_1453,name_1526];
                            } else if (this.tok() == 81) {
                                this.i++;
                                result_1453 = /*TElvis*/[47,result_1453,this.parseExpr()];
                            } else {
                                let eif_1527 = this.parseExpr();
                                this.step(76);
                                let eelse_1528 = this.parseExpr();
                                result_1453 = /*TIf*/[13,[result_1453],eif_1527,eelse_1528];
                            };
                        }
                    } break;

                    case 113: {
                        {
                            this.i++;
                            result_1453 = this.parseExpr();
                        }
                    } break;

                    default:
                    {
                        const t_1529 = this.tok();
                        if (Parser.isBinop(t_1529) && this.offset(1) == 91) {
                            let op_1530 = this.tok();
                            this.i++;
                            this.i++;
                            let b_1531 = this.parseExpr();
                            result_1453 = /*TAssignop*/[10,result_1453,op_1530,b_1531];
                        } else if (Parser.isBinop(t_1529)) {
                            this.i++;
                            let b_1532 = this.parseExpr();
                            let a_1533 = result_1453;
                            {
                                const temp_1534 = b_1532;
                                switch (temp_1534&&temp_1534[0]) {
                                case 9: {
                                    {
                                        const aa = temp_1534[1];
                                        const op_1535 = temp_1534[2];
                                        const bb = temp_1534[3];
                                        {
                                            let tp = Parser.precedence(t_1529);
                                            let tLeft = tp > 99;
                                            tp = tp % 100;
                                            let bp = Parser.precedence(op_1535);
                                            let bLeft = bp > 99;
                                            bp = bp % 100;
                                            if (bp > tp) { result_1453 = /*TBinop*/[9,/*TBinop*/[9,result_1453,t_1529,aa],op_1535,bb] } else result_1453 = /*TBinop*/[9,result_1453,t_1529,b_1532];
                                        };
                                    }
                                } break;

                                default:
                                result_1453 = /*TBinop*/[9,result_1453,t_1529,b_1532]
                                };
                            };
                        } else done = true;
                    }
                    };
                };
            };
            if (result_1453 == null) {
                process_20.stdout.write('\n');
                this.fail('Expression postfix is incomplete');
            };
            if (atts_1451.length > 0) {
                Project.mapAttributes.set(result_1453, atts_1451);
                atts_1451 = [];
            };
            Project.data.set(result_1453, new NodeData(nodePosition.line, nodePosition.column, this.lex.fileName));
            return result_1453;
        };
        parseVar(external_1536) {
            let const_1537 = this.tok() == 23;
            this.i++;
            let vars_1538 = [];
            if (this.tok() == 83) {
                this.i++;
                const name_1539 = (this.tok() == 62)? (this.print()) : 'name';
                const prefix_1540 = (const_1537)? ('let') : 'var';
                this.fail(('Hexa doesn\'t support PHP-style variables, replace it to `' + (prefix_1540) + ' ' + (name_1539) + '`'));
            };
            if (this.tok() == 61) {
                const name_1541 = this.getgo(61).toLowerCase();
                const prefix_1542 = (const_1537)? ('let') : 'var';
                this.fail(('Variable name should start with lowercase, like this `' + (prefix_1542) + ' ' + (name_1541) + '`'));
            };
            const parseSingleVar = () => {
                let varname = this.getgo(62);
                if (varname.endsWith('___')) { this.fail('Variables can\'t end with `___`, it is reserved.') };
                let type_1543 = null;
                if (this.tok() == 76) {
                    this.i++;
                    type_1543 = this.parseType();
                };
                let expr_1544 = null;
                if (this.tok() == 91) {
                    this.i++;
                    expr_1544 = this.parseExpr();
                };
                return /*TVar*/[23,varname,type_1543,expr_1544,const_1537,(() => {
                    const result_1545 = external_1536;
                    if (result_1545 != null) { return result_1545 };
                    return false;
                })()];
            };
            const parseSingleBinding = () => {
                let path_1546 = [];
                while (this.tok() == 62 && this.offset(1) == 77) {
                    path_1546.push(this.getgo(62));
                    this.i++;
                };
                path_1546.push(this.getgo(61));
                this.step(77);
                path_1546.push(this.getgo(61));
                if (this.tok() == 80 && this.offset(1) == 79) { this.fail('Don\'t use empty parenthesis for `let ' + path_1546.join('.') + '()` bindings') };
                let bind = [];
                if (this.tok() == 80) {
                    do {{
                        this.i++;
                        if (this.tok() == 1) {
                            this.i++;
                            bind.push(null);
                        } else bind.push(/*TVar*/[23,this.getgo(62),null,null,const_1537]);
                    }} while (this.tok() == 75);
                    this.step(79);
                };
                this.step(91);
                let expr_1547 = this.parseExpr();
                return /*TEnumExtract*/[38,path_1546,bind,expr_1547];
            };
            while (true) {
                if (this.tok() == 61 || (this.tok() == 62 && this.offset(1) == 77)) { vars_1538.push(parseSingleBinding()) } else vars_1538.push(parseSingleVar());
                if (this.tok() == 75 && this.offset(1) == 62 && (this.offset(2) == 91 || this.offset(2) == 76)) { this.i++ } else break;
            };
            return vars_1538;
            let const_1548 = this.tok() == 23;
            this.i++;
            let vars_1549 = [];
            {
                const temp_1550 = this.tok();
                switch (temp_1550) {
                case 62: {
                    while (true) {
                        let varname_1551 = this.getgo(62);
                        if (varname_1551.endsWith('___')) { this.fail('Variables can\'t end with `___`, it is reserved.') };
                        let type_1552 = null;
                        if (this.tok() == 76) {
                            this.i++;
                            type_1552 = this.parseType();
                        };
                        let expr_1553 = null;
                        if (this.tok() == 91) {
                            this.i++;
                            expr_1553 = this.parseExpr();
                        };
                        vars_1549.push(/*TVar*/[23,varname_1551,type_1552,expr_1553,const_1548,external_1536]);
                        if (this.tok() == 75 && this.offset(1) == 62 && (this.offset(2) == 91 || this.offset(2) == 76)) { this.i++ } else break;
                    }
                } break;

                case 61: {
                    {
                        let left = /*TIdent*/[1,this.getgo(61)];
                        let res_1554 = left;
                        while (this.tok() == 77) {
                            res_1554 = /*TDot*/[28,res_1554,this.getgo(61)];
                        };
                        {
                            const temp_1555 = this.tok();
                            switch (temp_1555) {
                            case 80: {
                                {
                                    let args_1556 = [];
                                    while (this.tok() != 79) {
                                        args_1556.push(this.getgo(62));
                                    };
                                    this.step(91);
                                    let varname_1557 = this.getgo(62);
                                }
                            } break;

                            case 91: {
                                {
                                }
                            } break;

                            default:
                            this.fail('Wrong syntax')
                            };
                        };
                    }
                } break;

                default:
                this.fail('Wrong syntax')
                };
            };
            return vars_1549;
        };
        parseFunction(parseBody, external_1558) {
            const parseBody_1559 = ((parseBody != null))? (parseBody) : true;
            this.i++;
            let expr_1560 = null;
            let name_1561 = null;
            let vars_1562 = [];
            let types_1563 = [];
            let values_1564 = [];
            let pos_1565 = [];
            {
                const temp_1566 = this.tok();
                switch (temp_1566) {
                case 62: {
                    name_1561 = this.getgo(62)
                } break;

                case 61: {
                    this.fail(('Function names can\'t start with uppercase `' + (this.print()) + '` -> `' + (this.print().toLowerCase()) + '`'))
                } break;

                default:
                {
                }
                };
            };
            this.step(80);
            {
                if (this.tok() != 79) { while (true) {
                    let expr_1567 = null;
                    let t_1568 = null;
                    if (this.tok() == 98) { this.i++ };
                    pos_1565.push({line:this.lex.line[this.i], column:this.lex.column[this.i]});
                    let name_1569 = this.getgo(62);
                    if (this.tok() == 76) {
                        this.i++;
                        t_1568 = this.parseType();
                    };
                    if (this.tok() == 91) {
                        this.i++;
                        expr_1567 = this.parseExpr();
                    };
                    vars_1562.push(name_1569);
                    types_1563.push(t_1568);
                    values_1564.push(expr_1567);
                    if (this.tok() == 75) { this.i++ } else break;
                } };
                this.step(79);
            };
            let rettype_1570 = null;
            if (this.tok() == 76) {
                this.i++;
                rettype_1570 = this.parseType();
            };
            if (parseBody_1559) {
                const temp_1571 = this.tok();
                switch (temp_1571) {
                case 25: {
                    if (this.lex.token[this.i + 1] == 80) {} else expr_1560 = this.parseExpr()
                } break;

                case 73: {
                    {
                    }
                } break;

                case 32: {
                    {
                    }
                } break;

                case 29: {
                    {
                    }
                } break;

                case 16: {
                    {
                    }
                } break;

                case 40: {
                    {
                    }
                } break;

                case 23: {
                    {
                    }
                } break;

                case 70: {
                    {
                        let tmp_1572 = this.i;
                        while (this.tok() == 70) this.parseAttribute();
                        if (this.tok() != 73 && this.tok() != 32 && this.tok() != 29 && this.tok() != 16) {
                            this.i = tmp_1572;
                            expr_1560 = this.parseExpr();
                        } else this.i = tmp_1572;
                    }
                } break;

                default:
                expr_1560 = this.parseExpr()
                };
            };
            let v_1573 = [];
            {
                let i_1574 = 0;
                let it_1575 = 0;
                let at_1576 = vars_1562.length;
                while (it_1575 < at_1576) {
                    i_1574 = it_1575;
                    it_1575++;
                    {
                        const n_1577 = /*TVar*/[23,vars_1562[i_1574],types_1563[i_1574],values_1564[i_1574],true,false];
                        Project.data.set(n_1577, new NodeData(pos_1565[i_1574].line, pos_1565[i_1574].column, this.lex.fileName));
                        v_1573.push(n_1577);
                    };
                };
            };
            return /*TFunction*/[21,name_1561,expr_1560,v_1573,rettype_1570,external_1558];
        };
        parseClass(external_1578) {
            const _classExternal = this.classExternal;
            this.classExternal = external_1578;
            let isInterface = this.tok() == (22)? (1) : 0;
            this.i++;
            let t_1579 = this.parseType();
            let ext_1580 = (this.tok() == 12)? ((() => {
                this.i++;
                return this.parseType();
            })()) : (null);
            let impl_1581 = [];
            while (this.tok() == 18) {
                this.i++;
                impl_1581.push(this.parseType());
            };
            this.step(74);
            let fields_1582 = this.parseFields();
            this.step(73);
            let me_1583 = /*TClass*/[25,t_1579,ext_1580,impl_1581,fields_1582,(() => {
                const result_1584 = external_1578;
                if (result_1584 != null) { return result_1584 };
                return false;
            })(),isInterface];
            this.classExternal = _classExternal;
            return me_1583;
        };
        hasInterpolation(str_1585) {
            let chars = str_1585.split('');
            let i_1586 = 0;
            while (i_1586 < chars.length) {
                if (chars[i_1586] == '\\') { if (i_1586 + 1 < chars.length) { if (chars[i_1586 + 1] == '\\') { i_1586++ } else if (chars[i_1586 + 1] == '(') { return true } } };
                i_1586++;
            };
            return false;
        };
        parseInterpolations(str_1587) {
            const interpolate = (s_1588) => {
                let out = ['"'];
                if (s_1588.length < 2) { return s_1588 };
                let i_1589 = 0;
                const s_1590 = s_1588.split('"').join('\\"');
                const pushInterpolator = () => {
                    i_1589++;
                    i_1589++;
                    const pushParen = () => {
                        i_1589++;
                        while (i_1589 < s_1590.length) {
                            out.push(s_1590.charAt(i_1589));
                            if (s_1590.charAt(i_1589) == '(') {
                                pushParen();
                                continue;
                            };
                            if (s_1590.charAt(i_1589) == ')') {
                                i_1589++;
                                return;
                            };
                            i_1589++;
                        };
                        throw 'String interpolation error: unclosed inner parenthesis';
                    };
                    while (i_1589 < s_1590.length) {
                        out.push(s_1590.charAt(i_1589));
                        if (s_1590.charAt(i_1589) == '(') {
                            pushParen();
                            continue;
                        };
                        if (s_1590.charAt(i_1589) == ')') {
                            i_1589++;
                            return;
                        };
                        i_1589++;
                    };
                    throw 'String interpolation error: unclosed parenthesis';
                };
                let result_1591 = ['"'];
                while (i_1589 < s_1590.length) {
                    if (s_1590.charAt(i_1589) == '\\' && s_1590.charAt(i_1589 + 1) == '(') {
                        result_1591.push('" + ');
                        out.push('" + (');
                        let ii = i_1589 + 1;
                        pushInterpolator();
                        result_1591.push(s_1590.substring(ii, i_1589 + 1));
                        result_1591.push(' + "');
                        out.push(' + "');
                    } else {
                        out.push(s_1590.charAt(i_1589));
                        result_1591.push(s_1590.charAt(i_1589));
                        i_1589++;
                    };
                };
                result_1591.push('"');
                out.push('"');
                return out.join('');
            };
            let resStr = interpolate(str_1587);
            let tokens_1592 = Lexer.tokenize(Buffer.from(resStr), this.lex.fileName);
            try {
                let parsed_1594 = Parser.toNode(Parser.parseNodes(tokens_1592));
                {
                    const temp_1595 = parsed_1594;
                    switch (temp_1595&&temp_1595[0]) {
                    case 11: {
                        throw 'Parse interpolation error: got a block'
                    } break;

                    default:
                    return parsed_1594
                    };
                };
            } catch (temp_1593) {
                if (true) {
                const e = temp_1593
                {
                    this.fail('Parse interpolation error: ' + e);
                } } else

                throw temp_1593;
            };
        };
        parseAttribute() {
            this.i++;
            let name_1596 = this.getgo(62);
            let values_1597 = [];
            if (this.tok() == 80) {
                this.i++;
                if (this.tok() != 79) { while (true) {
                    values_1597.push(this.parseExpr());
                    if (this.tok() == 75) { this.i++ } else break;
                } };
                this.step(79);
            };
            return new Attribute(name_1596, values_1597);
        };
        parseType() {
            let path_1598 = [];
            while (this.tok() == 62 && this.offset(1) == 77) {
                path_1598.push(this.getgo(62));
                this.i++;
            };
            let result_1599 = null;
            {
                const temp_1600 = this.tok();
                switch (temp_1600) {
                case 61: {
                    {
                        let name_1601 = this.getgo(61);
                        if (path_1598.length != 0) { name_1601 = path_1598.join('.') + '.' + name_1601 };
                        while (this.tok() == 77) {
                            this.i++;
                            this.getgo(61);
                        };
                        let sresult = (this.tok() == 99)? ((() => {
                            this.i++;
                            this.parametricTypeNesting++;
                            let params_1602 = [this.parseType()];
                            while (this.tok() == 75) {
                                this.i++;
                                params_1602.push(this.parseType());
                            };
                            if (this.parametricTypeNestingToken == 0) { this.parametricTypeNestingToken = this.tok() };
                            {
                                const temp_1603 = this.parametricTypeNestingToken;
                                switch (temp_1603) {
                                case 96: {
                                    {
                                        this.parametricTypeNesting -= 1;
                                        this.parametricTypeNestingToken = 0;
                                        this.i++;
                                    }
                                } break;

                                case 106: {
                                    {
                                        this.parametricTypeNesting -= 1;
                                        this.parametricTypeNestingToken = 96;
                                    }
                                } break;

                                case 108: {
                                    {
                                        this.parametricTypeNesting -= 1;
                                        this.parametricTypeNestingToken = 108;
                                    }
                                } break;

                                default:
                                this.unexpected()
                                };
                            };
                            if (this.parametricTypeNesting < 0) { this.fail('parametricTypeNesting < 0') };
                            return /*ParametricType*/[2,name_1601,params_1602];
                        })()) : /*Type*/[1,name_1601];
                        if (this.tok() == 90) {
                            this.i++;
                            sresult = /*Function*/[3,[sresult],this.parseType()];
                        };
                        result_1599 = sresult;
                    }
                } break;

                case 72: {
                    {
                        if (path_1598.length != 0) { this.fail('Token.BkOpen') };
                        this.i++;
                        let res_1604 = null;
                        {
                            const temp_1605 = this.tok();
                            switch (temp_1605) {
                            case 71: {
                                {
                                    this.i++;
                                    res_1604 = /*ParametricType*/[2,'Array',[/*Object*/[5,[],[]]]];
                                }
                            } break;

                            case 76: {
                                {
                                    this.i++;
                                    if (this.tok() == 71) {
                                        this.i++;
                                        res_1604 = /*ParametricType*/[2,'Map',[/*Object*/[5,[],[]], /*Object*/[5,[],[]]]];
                                    } else {
                                        res_1604 = /*ParametricType*/[2,'Map',[/*Object*/[5,[],[]], this.parseType()]];
                                    };
                                }
                            } break;

                            default:
                            {
                                let key = this.parseType();
                                let innerRes = (this.tok() == 76)? ((() => {
                                    this.i++;
                                    return /*ParametricType*/[2,'Map',[key, this.parseType()]];
                                })()) : /*ParametricType*/[2,'Array',[key]];
                                this.step(71);
                                if (this.tok() == 90) {
                                    this.i++;
                                    innerRes = /*Function*/[3,[res_1604],this.parseType()];
                                };
                                res_1604 = innerRes;
                            }
                            };
                        };
                        result_1599 = res_1604;
                    }
                } break;

                case 74: {
                    {
                        if (path_1598.length != 0) { this.fail('Token.BrOpen') };
                        this.i++;
                        let sresult_1606 = (this.tok() == 76)? ((() => {
                            this.i++;
                            return /*Object*/[5,[],[]];
                        })()) : (() => {
                            let names_1607 = [];
                            let types_1608 = [];
                            while (this.tok() != 73) {
                                names_1607.push(this.getgo(62));
                                if (this.tok() == 76) {
                                    this.i++;
                                    types_1608.push(this.parseType());
                                };
                                if (this.tok() == 75) { this.i++ };
                            };
                            return /*Object*/[5,names_1607,types_1608];
                        })();
                        this.step(73);
                        if (this.tok() == 90) {
                            this.i++;
                            sresult_1606 = /*Function*/[3,[sresult_1606],this.parseType()];
                        };
                        result_1599 = sresult_1606;
                    }
                } break;

                case 80: {
                    {
                        if (path_1598.length != 0) { this.fail('Token.POpen') };
                        this.i++;
                        let args_1609 = [];
                        while (this.tok() != 79) {
                            this.parseType();
                            if (this.tok() == 76) {
                                this.i++;
                                args_1609.push(this.parseType());
                            };
                            if (this.tok() == 75) { this.i++ };
                        };
                        this.step(79);
                        this.step(90);
                        result_1599 = /*Function*/[3,args_1609,this.parseType()];
                    }
                } break;

                case 62: {
                    {
                        let res_1610 = null;
                        {
                            const temp_1611 = this.offset(1);
                            switch (temp_1611) {
                            case 76: {
                                {
                                    let argName = this.getgo(this.tok());
                                    this.step(76);
                                    let argType = this.parseType();
                                    res_1610 = /*FunctionArg*/[4,argName,argType,null];
                                }
                            } break;

                            default:
                            this.fail(('Type name `' + (this.print()) + '` can not start with lowercase'))
                            };
                        };
                        result_1599 = res_1610;
                    }
                } break;

                default:
                this.fail('Expected type, parsed `' + Token.stringify(this.tok()) + '`')
                };
            };
            if (this.tok() == 81) { result_1599 = /*Optional*/[0,result_1599] };
            while (this.tok() == 81) this.i++;
            if (this.tok() == 90) {
                this.i++;
                result_1599 = /*Function*/[3,[result_1599],this.parseType()];
            };
            return result_1599;
        };
    }
    Parser.uuid = 0
    Parser.toNode = (nodes) => {
            if (nodes.length == 0) { return null };
            if (nodes.length > 1) { return /*TBlock*/[11,nodes] };
            return nodes[0];
        };
    Parser.parseNodes = (lexe) => {
            const parser = new Parser(lexe);
            return parser.nodes;
        };
    Parser.uid = () => { return Parser.uuid++ };
    Parser.precedence = (op_1612) => {
            const left_1613 = 100;
            const right = 0;
            {
                const temp_1614 = op_1612;
                switch (temp_1614) {
                case 101: {
                    return 0 + left_1613
                } break;

                case 102: {
                    return 1 + left_1613
                } break;

                case 94: {
                    return 1 + left_1613
                } break;

                case 111: {
                    return 2 + left_1613
                } break;

                case 107: {
                    return 2 + left_1613
                } break;

                case 105: {
                    return 3 + left_1613
                } break;

                case 106: {
                    return 3 + left_1613
                } break;

                case 108: {
                    return 3 + left_1613
                } break;

                case 104: {
                    return 4 + left_1613
                } break;

                case 112: {
                    return 4 + left_1613
                } break;

                case 109: {
                    return 4 + left_1613
                } break;

                case 95: {
                    return 5 + left_1613
                } break;

                case 103: {
                    return 5 + left_1613
                } break;

                case 96: {
                    return 5 + left_1613
                } break;

                case 99: {
                    return 5 + left_1613
                } break;

                case 97: {
                    return 5 + left_1613
                } break;

                case 100: {
                    return 5 + left_1613
                } break;

                case 92: {
                    return 7 + left_1613
                } break;

                case 93: {
                    return 8 + left_1613
                } break;

                case 91: {
                    return 10 + right
                } break;

                default:
                this.fail('No precedence for ' + Token.stringify(op_1612))
                };
            };
        };
    Parser.isBinop = (t_1615) => {
            const temp_1616 = t_1615;
            switch (temp_1616) {
            case 111: {
                return true
            } break;

            case 102: {
                return true
            } break;

            case 94: {
                return true
            } break;

            case 107: {
                return true
            } break;

            case 91: {
                return true
            } break;

            case 95: {
                return true
            } break;

            case 103: {
                return true
            } break;

            case 96: {
                return true
            } break;

            case 97: {
                return true
            } break;

            case 99: {
                return true
            } break;

            case 100: {
                return true
            } break;

            case 112: {
                return true
            } break;

            case 104: {
                return true
            } break;

            case 109: {
                return true
            } break;

            case 92: {
                return true
            } break;

            case 93: {
                return true
            } break;

            case 105: {
                return true
            } break;

            case 106: {
                return true
            } break;

            case 108: {
                return true
            } break;

            case 101: {
                return true
            } break;

            default:
            return false
            };
        };
    var Dumper = class {
        constructor() {
            this.tabs = ''
        {
        } };
        dumpFiles(collected_1617, types_1618) {
            this.types = types_1618;
            const out_1619 = [];
            for (const file of $toIterator(collected_1617)) {
                out_1619.push('// file\n');
                for (const e of $toIterator(file)) {
                    out_1619.push('// file.node\n');
                    out_1619.push(this.dump(e));
                };
            };
            return out_1619.join('\n');
        };
        pushTab() { this.tabs += '\t' };
        popTab() { this.tabs = this.tabs.substring(0, this.tabs.length - 1) };
        dump(node_1620) { return '〈' + this.dumpWrapped(node_1620) + '⭐⎰' + this.dumpType(this.types.get(node_1620)) + '⎱〉' };
        dumpWrapped(node_1621) {
            const temp_1622 = node_1621;
            switch (temp_1622&&temp_1622[0]) {
            case 35: {
                {
                    const path_1623 = temp_1622[1];
                    const el_1624 = temp_1622[2];
                    return 'module ' + path_1623.join('.') + '{\n' + (() => {
                        const result_1625 = [];
                        const value_1626 = el_1624;
                        for (const e of $toIterator(value_1626)) result_1625.push(this.dump(e));
                        return result_1625;
                    })().join('\n') + '\n}';
                }
            } break;

            case 23: {
                return 'var'
            } break;

            case 9: {
                return 'TBinop'
            } break;

            case 25: {
                return '⋉'
            } break;

            case 12: {
                return 'call()'
            } break;

            case 37: {
                return 'enum'
            } break;

            case 21: {
                return 'function'
            } break;

            case 11: {
                return '{}'
            } break;

            case 13: {
                return 'if'
            } break;

            case 27: {
                return 'try'
            } break;

            case 8: {
                return 'declare'
            } break;

            case 30: {
                return 'new'
            } break;

            case null: case undefined: {
                throw 'Trying to dump null node'
            } break;

            default:
            throw 'Trying to dump unknown node: ' + node_1621
            };
        };
        dumpType(type_1627) { return type_1627 };
    }
    var TestLexer = class {
    }
    TestLexer.passed = 0
    TestLexer.overall = 0
    TestLexer.test = () => {
            console.log('TestLexer begin');
            TestLexer.compare('#!/bin', [], []);
            TestLexer.compare('#!/bin\n', [], []);
            TestLexer.compare('#!/bin\n//', [], []);
            TestLexer.compare('#!/bin\r\n123', [63], ['123']);
            TestLexer.compare('#!/bin\n\r123', [63], ['123']);
            TestLexer.compare('#!/bin\n123', [63], ['123']);
            TestLexer.compare('', [], []);
            TestLexer.compare('\n', [], []);
            TestLexer.compare('\n\n', [], []);
            TestLexer.compare('\r\r\n\r\n\r\t', [], []);
            TestLexer.compare(' ', [], []);
            TestLexer.compare('  ', [], []);
            TestLexer.compare(' ', [], []);
            TestLexer.compare('     ', [], []);
            TestLexer.compare('     ', [], []);
            TestLexer.compare('/* */', [], []);
            TestLexer.compare('/*\n*/', [], []);
            TestLexer.compare('//', [], []);
            TestLexer.compare('// ', [], []);
            TestLexer.compare('//\n', [], []);
            TestLexer.compare('123', [63], ['123']);
            TestLexer.compare(' 0 ', [63], ['0']);
            TestLexer.compare('0', [63], ['0']);
            TestLexer.compare('1 2 3', [63, 63, 63], ['1', '2', '3']);
            TestLexer.compare('0x1', [63], ['0x1']);
            TestLexer.compare('0x0', [63], ['0x0']);
            TestLexer.compare('0xF', [63], ['0xF']);
            TestLexer.compare('0xFA', [63], ['0xFA']);
            TestLexer.compare('0xFABCDEF', [63], ['0xFABCDEF']);
            TestLexer.compare('0x1F2A3B4C5D6E7F0', [63], ['0x1F2A3B4C5D6E7F0']);
            TestLexer.compare('-123', [107, 63], ['-', '123']);
            TestLexer.compare('+123', [111, 63], ['+', '123']);
            TestLexer.compare('0.123', [60], ['0.123']);
            TestLexer.compare('0.0', [60], ['0.0']);
            TestLexer.compare('0.0e+1', [60], ['0.0e+1']);
            TestLexer.compare('0.0E-1', [60], ['0.0E-1']);
            TestLexer.compare('0E-123', [60], ['0E-123']);
            TestLexer.compare('123e123', [60], ['123e123']);
            TestLexer.compare('1 2.0 3', [63, 60, 63], ['1', '2.0', '3']);
            TestLexer.compare('\'s\'', [64], ['\'s\'']);
            TestLexer.compare('"s"', [64], ['\'s\'']);
            TestLexer.compare('\"s\"', [64], ['\'s\'']);
            TestLexer.compare('`s`', [66], ['`s`']);
            TestLexer.compare('`aaa bbb``ccc` `ddd`', [66, 66], ['`aaa bbbccc`', '`ddd`']);
            TestLexer.compare('````````', [66], ['``']);
            TestLexer.compare('``', [66], ['``']);
            TestLexer.compare('``\n', [66], ['``']);
            TestLexer.compare('``\n``', [66, 66], ['``', '``']);
            TestLexer.compare('\'s\n\'', [64], ['\'s\n\'']);
            TestLexer.compare('\'s\r\n\'', [64], ['\'s\n\'']);
            TestLexer.compare('\'s\n                s\'', [64], ['\'s\n\t\t\t\ts\'']);
            TestLexer.compare('"s\n"', [64], ['\'s\n\'']);
            TestLexer.compare('"s\r\n"', [64], ['\'s\n\'']);
            TestLexer.compare('"\r\ns\r\n"', [64], ['\'\ns\n\'']);
            TestLexer.compare('`s\n`', [66], ['`s\n`']);
            TestLexer.compare('`s\r\n`', [66], ['`s\r\n`']);
            TestLexer.compare('`s\r`', [66], ['`s\r`']);
            TestLexer.compare('T', [61], ['T']);
            TestLexer.compare('T val', [61, 62], ['T', 'val']);
            TestLexer.compare('T val Type', [61, 62, 61], ['T', 'val', 'Type']);
            TestLexer.compare('_T', [62], ['_T']);
            TestLexer.compare('v', [62], ['v']);
            TestLexer.compare('_v', [62], ['_v']);
            TestLexer.compare('_123', [62], ['_123']);
            TestLexer.compare(' } ', [73], ['}']);
            TestLexer.compare('==', [95], ['==']);
            TestLexer.compare('===', [95, 91], ['==', '=']);
            TestLexer.compare('== =', [95, 91], ['==', '=']);
            TestLexer.compare('= ==', [91, 95], ['=', '==']);
            TestLexer.compare('=====', [95, 95, 91], ['==', '==', '=']);
            TestLexer.compare('> >> >>> . .. ...', [96, 106, 108, 77, 77, 77, 98], ['>', '>>', '>>>', '.', '.', '.', '...']);
            TestLexer.compare('>>>>>>.......', [108, 108, 98, 98, 77], ['>>>', '>>>', '...', '...', '.']);
            console.log(('TestLexer done ' + (Math.round((TestLexer.passed / TestLexer.overall) * 100)) + '% (' + (TestLexer.passed) + '/' + (TestLexer.overall) + ')'));
        };
    TestLexer.shouldError = (input, includes) => {
            TestLexer.overall++;
            try { Lexer.tokenize(Buffer.from(input), 'TEST') } catch (temp_1628) {
                if (true) {
                const e = temp_1628
                {
                    throw 'got' + e.toString();
                    TestLexer.passed++;
                    return;
                } } else

                throw temp_1628;
            };
            throw ('TestLexer test fail: `' + (input) + '` did not throw exception.');
        };
    TestLexer.renderInvisibleChars = (input_1629) => { return input_1629.split('\r').join('\\r').split('\n').join('\\n').split('\t').join('\\t') };
    TestLexer.compare = (input_1630, expect, expectValue, expectColumn = null, expectLine = null) => {
            expect.push(0);
            const output = Lexer.tokenize(Buffer.from(input_1630), 'TEST');
            let pos_1631 = 0;
            const incorrect = (text_1632) => {
                let got = Token.stringify(output.token[pos_1631], output.value[pos_1631]);
                got = TestLexer.renderInvisibleChars(got);
                console.log(('Incorrect token `' + (got) + '` in string `' + (TestLexer.renderInvisibleChars(input_1630)) + '` at index ' + (pos_1631) + ''));
                console.log(text_1632);
            };
            TestLexer.overall++;
            for (const ex of $toIterator(expect)) {
                if (ex == 0) { break };
                if (ex != output.token[pos_1631]) {
                    incorrect(('Expected `' + (TestLexer.renderInvisibleChars(Token.stringify(ex))) + '`'));
                    return;
                };
                const value_1633 = Token.stringify(output.token[pos_1631], output.value[pos_1631]);
                if (expectValue[pos_1631] != value_1633) {
                    incorrect(('Expected value `' + (TestLexer.renderInvisibleChars(expectValue[pos_1631])) + '` but got `' + (TestLexer.renderInvisibleChars(value_1633)) + '`'));
                    return;
                };
                pos_1631++;
            };
            TestLexer.passed++;
        };
    var TestParser = class {
    }
    TestParser.passed = 0
    TestParser.overall = 0
    TestParser.test = () => {
            console.log('TestParser begin');
            TestParser.shouldAllEqual(new Map([['', '<!--null-->'], ['  ', '<!--null-->'], ['   ', '<!--null-->'], ['       ', '<!--null-->'], ['\n', '<!--null-->'], ['\n\n', '<!--null-->'], ['\r\r\n\r\n\r\t', '<!--null-->'], ['{}', 'TBlock([])'], ['{{}}', 'TBlock([TBlock([])])'], ['{ 0 0 0 }', 'TBlock([TInt(0),TInt(0),TInt(0)])'], ['0', 'TInt(0)'], [' 0 ', 'TInt(0)'], ['123', 'TInt(123)'], ['12', 'TInt(12)'], ['0x1', 'TInt(0x1)'], ['0x0', 'TInt(0x0)'], ['0xF', 'TInt(0xF)'], ['0xFA', 'TInt(0xFA)'], ['0xFABCDEF', 'TInt(0xFABCDEF)'], ['0.0', 'TFloat(0.0)'], ['0.123', 'TFloat(0.123)'], ['\'s\'', 'TString(s)'], ['\"s\"', 'TString(s)']]));
            TestParser.shouldAllEqual(new Map([['1 2 3 trace("Hello!", "World!") + 5 * 6 / 3', 'TBlock([\n                  TInt(1),\n                  TInt(2),\n                  TInt(3),\n                  TBinop(\n                   TCall(TIdent(trace),[TString(Hello!),TString(World!)]),\n                   +,\n                    TBinop(TInt(5),*,TBinop(TInt(6),/,TInt(3))))])'], ['enum Test { Demo } hello World', 'TBlock([TEnum(Type(Test),[NodeTypeValue(Type(Demo))]),\n                  TIdent(hello),\n                    NodeTypeValue(Type(World))])']]));
            TestParser.shouldAllEqual(new Map([['i ++ ++ i', 'TBlock([TUnop(++,true,TIdent(i)),TUnop(++,false,TIdent(i))])'], ['a + b', 'TBinop(TIdent(a),+,TIdent(b))'], ['a += b', 'TAssignop(TIdent(a),+,TIdent(b))']]));
            TestParser.shouldAllEqual(new Map([['"\\\\(v)"', 'TString(\\\\(v))'], ['"\\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TString())))'], ['"\\(((v)))"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(TParenthesis(TParenthesis(TIdent(v)))),+,TString())))'], ['"\\( v )"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TString())))'], ['"\\(V)\\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))'], ['"\\(V)\\(v)s\\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TBinop(TString(s),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))))'], ['"\\(V)s\\(v)s\\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString(s),+,TBinop(TParenthesis(TIdent(v)),+,TBinop(TString(s),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))))']]));
            TestParser.shouldAllEqualWithoutTrim(new Map([['"\\( v )"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TString())))'], ['"\\(V)\r\n\\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString(\n),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))'], ['"\\(V) \\(v) \\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString( ),+,TBinop(TParenthesis(TIdent(v)),+,TBinop(TString( ),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))))']]));
            TestParser.shouldAllEqual(new Map([['using A', 'TUsing(A)'], ['using A, B, C', 'TUsing(A,B,C)']]));
            TestParser.shouldAllEqual(new Map([['module { }', 'TModule(, [])'], ['code module { } code', 'TBlock([TIdent(code),TModule(,[]),TIdent(code)])'], ['code module { } module { } code', 'TBlock([TIdent(code),TModule(,[]),TModule(,[]),TIdent(code)])'], ['module a { }', 'TModule(a, [])'], ['module a.b { }', 'TModule(a.b, [])'], ['module { class Inner {} }', 'TModule(,[TClass(Type(Inner),null,[],[],false)])'], ['module { private class Inner {} }', 'TModule(,[TPrivate(TClass(Type(Inner),null,[],[],false))])'], ['module a { module b { } }', 'TModule(a,[TModule(b,[])])']]));
            TestParser.shouldAllEqual(new Map([['var a = new Array<A>()', 'TVar(a,null,TNew([],ParametricType(Array,[Type(A)]),[],[],[],[]),false,false)'], ['a = Array<A>.staticField()', 'TBinop(TIdent(a),=,TCall(TDot(NodeTypeValue(ParametricType(Array,[Type(A)])),staticField),[]))'], ['a = EnumTest.EnumField', 'TBinop(TIdent(a),=,TDotUpper(NodeTypeValue(Type(EnumTest)),EnumField))'], ['a = EnumTest.EnumField(arg)', 'TBinop(TIdent(a),=,TCall(TDotUpper(NodeTypeValue(Type(EnumTest)),EnumField),[TIdent(arg)]))'], ['a = EnumTest.EnumField(argName: argValue, arg2, arg3: arg3)', 'TBinop(TIdent(a),=,TCall(TDotUpper(NodeTypeValue(Type(EnumTest)),EnumField),[argName:TIdent(argValue),TIdent(arg2),arg3:TIdent(arg3)]))'], ['a = EnumTest<A,B>.EnumField', 'TBinop(TIdent(a),=,TDotUpper(NodeTypeValue(ParametricType(EnumTest,[Type(A),Type(B)])),EnumField))'], ['var a = b as B, c = d as! B, e = f as? B', 'TVars([TVar(a,null,TAs(TIdent(b),<!--default-->,Type(B)),false,false),TVar(c,null,TAs(TIdent(d),!,Type(B)),false,false),TVar(e,null,TAs(TIdent(f),?,Type(B)),false,false)])'], ['var a = b is B, c = d is B, e = f is B', 'TVars([TVar(a,null,TAs(TIdent(b),Type(B)),false,false),TVar(c,null,TAs(TIdent(d),Type(B)),false,false),TVar(e,null,TAs(TIdent(f),Type(B)),false,false)])']]));
            TestParser.shouldAllEqual(new Map([['var x:[Array<T>]', 'TVar(x,ParametricType(Array,[ParametricType(Array,[Type(T)])]),null,false,false)'], ['var x:[Map<K,V> : Array<T>]', 'TVar(x,ParametricType(Map,[ParametricType(Map,[Type(K),Type(V)]),ParametricType(Array,[Type(T)])]),null,false,false)'], ['var x:{:}, y:[], z:[:], w:()=>{:}', 'TVars([TVar(x,Object([],[]),null,false,false),TVar(y,ParametricType(Array,[Object([],[])]),null,false,false),TVar(z,ParametricType(Map,[Object([],[]),Object([],[])]),null,false,false),TVar(w,Function([],Object([],[])),null,false,false)])'], ['let x:()=>()=>()=>()=>Void', 'TVar(x,Function([],Function([],Function([],Function([],Type(Void))))),null,true,false)']]));
            TestParser.shouldAllEqual(new Map([['enum A {}', 'TEnum(Type(A),[])'], ['enum A { A B C }', 'TEnum(Type(A),[NodeTypeValue(Type(A)),NodeTypeValue(Type(B)),NodeTypeValue(Type(C))])'], ['enum A { A(v:Int) B C(v:[K:V], a:Array<T>) }', 'TEnum(Type(A),[\n                   TCall(NodeTypeValue(Type(A)),[v:NodeTypeValue(Type(Int))]),\n                   NodeTypeValue(Type(B)),\n                   TCall(NodeTypeValue(Type(C)),[v:TMap([NodeTypeValue(Type(K))],[NodeTypeValue(Type(V))]),a:NodeTypeValue(ParametricType(Array,[Type(T)]))])\n                    ])'], ['enum A { E(v: T<T>?) }', 'TEnum(Type(A),[TCall(NodeTypeValue(Type(E)),[v:NodeTypeValue(Optional(ParametricType(T,[Type(T)])))])])'], ['enum A { E(v: T<T?>) }', 'TEnum(Type(A),[TCall(NodeTypeValue(Type(E)),[v:NodeTypeValue(ParametricType(T,[Optional(Type(T))]))])])'], ['enum A { E(v: T?) }', 'TEnum(Type(A),[TCall(NodeTypeValue(Type(E)),[v:NodeTypeValue(Optional(Type(T)))])])']]));
            TestParser.shouldAllEqual(new Map([['new A(a: 1, b: 2)', 'TNew([],Type(A),[TInt(1),TInt(2)],[],[],[a,b])'], ['class A {} var a = new A { } ()', 'TBlock([TClass(Type(A),null,[],[],false),TVar(a,null,TNew([],Type(A),[],[],[],[]),false,false)])'], ['class A { var field: String } var a = new A { field: "Value" } ()', 'TBlock([TClass(Type(A),null,[],[TVar(field,Type(String),null,false,false)],false),TVar(a,null,TNew([],Type(A),[],[field],[TString(Value)],[]),false,false)])'], ['class A { var field: String var otherfield: Int } var a = new A { field: "Value", otherfield: 25 } ()', 'TBlock([TClass(Type(A),null,[],[TVar(field,Type(String),null,false,false),TVar(otherfield,Type(Int),null,false,false)],false),TVar(a,null,TNew([],Type(A),[],[field,otherfield],[TString(Value),TInt(25)],[]),false,false)])']]));
            TestParser.shouldAllError(['class A { new(a b) {} }', 'class A { new(a, b,) {} }', 'class A { new(,) {} }', 'function f(a b c) {}', 'function f(a b) {}', 'function f(a, b,) {}', 'function f(a,) {}', 'function f(,) {}']);
            TestParser.shouldAllError(['class A { var i: Int { set (value) {} } }', 'class A { var i: Int { get {} set () {} } }', 'class A { var i: Int { get {} set {} } }', 'class A { let i: Int { get {} set (value) {} } }', 'class A { let i: Int { get {} set (value, val) {} } }', 'class A { var i: Int { get {} set (Value) {} } }', 'class A { var i: Int { get (value) {} set (value) {} } }', 'class A { var i: Int {} }']);
            TestParser.shouldAllError(['if(,) {}', 'if(a,) {}', 'switch (,) {}', 'switch (a,) {}', '@att(,) x', '@att(a,) x', '@att(a,b,) x', '@att(a b,) x', '@att(a b) x', 'new T(,)', 'new T(a b,)', 'new T(a,b,)', 'new T(a b)', 'call(1 2)', 'call(1 2,)', 'call(1,2,)', 'call(1,)', 'call(a:1,)', 'call(1:1,)', 'call(a:,)', 'call(a:)', 'call(,)', '[1 2]', '[,]', '[1,]', '[1,2,]', '[1:1 2:2]', '[1:1,2:2,]', '{a:1 b:2}', '{,}', '{a:1,}', '{a:1,b:2,}']);
            TestParser.shouldAllError(['=', '= 1']);
            TestParser.shouldAllEqual(new Map([['if (this) this', 'TIf([TThis],TThis,<!--null-->)'], ['if (this, this) this else break', 'TIf([TThis,TThis],TThis,TBreak)'], ['if (this, let a = this) this else break', 'TIf([TThis,TVar(a,null,TThis,true,false)],TThis,TBreak)'], ['if (let a = this, let b = this, this) this', 'TIf([TVar(a,null,TThis,true,false),TVar(b,null,TThis,true,false),TThis],TThis,<!--null-->)']]));
            TestParser.shouldAllEqual(new Map([['declare var a: T', 'TVar(a,Type(T),null,false,true)'], ['declare let a: T', 'TVar(a,Type(T),null,true,true)'], ['declare function name()', 'TFunction(name,null,[],null,true)'], ['declare function name() hi()', 'TBlock([TFunction(name,null,[],null,true),TCall(TIdent(hi),[])])'], ['declare function name() {}', 'TBlock([TFunction(name,null,[],null,true),TBlock([])])'], ['declare class A {}', 'TClass(Type(A),null,[],[],true)'], ['declare A = B', 'TTypeAlias(Type(A),Type(B))']]));
            TestParser.shouldAllError(['declare var a, b, c', 'declare anything']);
            TestParser.shouldAllEqual(new Map([['push([:])', 'TCall(TIdent(push),[TMap([],[])])'], ['push([])', 'TCall(TIdent(push),[TArray([])])'], ['[].length', 'TDot(TArray([]),length)'], ['[:].length', 'TDot(TMap([],[]),length)'], ['[[:]]', 'TArray([TMap([],[])])']]));
            console.log(('TestParser done ' + (Math.round((TestParser.passed / TestParser.overall) * 100)) + '% (' + (TestParser.passed) + '/' + (TestParser.overall) + ')'));
        };
    TestParser.shouldEqual = (input_1634, test) => {
            const test_1635 = TestParser.deepTrim(test);
            TestParser.shouldEqualWithoutTrim(input_1634, test_1635);
        };
    TestParser.shouldEqualWithoutTrim = (input_1636, test_1637) => {
            TestParser.overall++;
            let lexe_1638 = Lexer.tokenize(Buffer.from(input_1636), 'TEST');
            let parsed_1639 = Parser.toNode(Parser.parseNodes(lexe_1638));
            let res_1640 = TestParser.stringify(parsed_1639);
            if (test_1637 != res_1640) { throw ('TestParser test fail: `' + (input_1636) + '`\n!==: `' + (test_1637) + '`\nGot: `' + (res_1640) + '`\nParsed: `' + (parsed_1639) + '`') };
            TestParser.passed++;
        };
    TestParser.shouldAllEqual = (map_1641) => { for (const input of $toIterator(map_1641.keys())) {
            let test_1642 = map_1641.get(input);
            TestParser.shouldEqual(input, test_1642);
        } };
    TestParser.shouldAllEqualWithoutTrim = (map_1643) => { for (const input of $toIterator(map_1643.keys())) {
            let test_1644 = map_1643.get(input);
            TestParser.shouldEqualWithoutTrim(input, test_1644);
        } };
    TestParser.shouldError = (input_1645) => {
            TestParser.overall++;
            try {
                let lexe_1647 = Lexer.tokenize(Buffer.from(input_1645), 'TEST');
                let parser_1648 = Parser.toNode(Parser.parseNodes(lexe_1647));
            } catch (temp_1646) {
                if (true) {
                const e = temp_1646
                {
                    TestParser.passed++;
                    return;
                } } else

                throw temp_1646;
            };
            throw ('TestParser test fail: `' + (input_1645) + '` did not throw exception.');
        };
    TestParser.shouldAllError = (input_1649) => { for (const str of $toIterator(input_1649)) {
            TestParser.shouldError(str);
        } };
    TestParser.deepTrim = (s_1650) => { return s_1650.split('\n').join('').split('\r').join('').split('\t').join('').split(' ').join('') };
    TestParser.stringify = (node_1651) => {
            const temp_1652 = node_1651;
            switch (temp_1652&&temp_1652[0]) {
            case null: case undefined: {
                return '<!--null-->'
            } break;

            case 0: {
                {
                    const s_1653 = temp_1652[1];
                    return ('TString(' + (s_1653) + ')');
                }
            } break;

            case 1: {
                {
                    const s_1654 = temp_1652[1];
                    return ('TIdent(' + (s_1654) + ')');
                }
            } break;

            case 2: {
                {
                    const b_1655 = temp_1652[1];
                    return ('TBool(' + (b_1655) + ')');
                }
            } break;

            case 3: {
                return 'TThis'
            } break;

            case 4: {
                return 'TSuper'
            } break;

            case 5: {
                {
                    const s_1656 = temp_1652[1];
                    return ('TInt(' + (s_1656) + ')');
                }
            } break;

            case 6: {
                {
                    const s_1657 = temp_1652[1];
                    return ('TFloat(' + (s_1657) + ')');
                }
            } break;

            case 7: {
                return 'TNull'
            } break;

            case 17: {
                return 'TBreak'
            } break;

            case 18: {
                return 'TContinue'
            } break;

            case 40: {
                {
                    const expr_1658 = temp_1652[1];
                    const type_1659 = temp_1652[2];
                    return 'TAs(' + TestParser.stringify(expr_1658) + ',' + TestParser.stringifyType(type_1659) + ')';
                }
            } break;

            case 41: {
                {
                    const expr_1660 = temp_1652[1];
                    const kind_1661 = temp_1652[2];
                    const type_1662 = temp_1652[3];
                    return 'TAs(' + TestParser.stringify(expr_1660) + ',' + Token.stringify(kind_1661) + ',' + TestParser.stringifyType(type_1662) + ')';
                }
            } break;

            case 9: {
                {
                    const a_1663 = temp_1652[1];
                    const op_1664 = temp_1652[2];
                    const b_1665 = temp_1652[3];
                    return 'TBinop(' + TestParser.stringify(a_1663) + ',' + Token.stringify(op_1664) + ',' + TestParser.stringify(b_1665) + ')';
                }
            } break;

            case 10: {
                {
                    const a_1666 = temp_1652[1];
                    const op_1667 = temp_1652[2];
                    const b_1668 = temp_1652[3];
                    return 'TAssignop(' + TestParser.stringify(a_1666) + ',' + Token.stringify(op_1667) + ',' + TestParser.stringify(b_1668) + ')';
                }
            } break;

            case 11: {
                {
                    const els_1669 = temp_1652[1];
                    return 'TBlock(' + TestParser.stringifyNodeArray(els_1669) + ')';
                }
            } break;

            case 23: {
                {
                    const name_1670 = temp_1652[1];
                    const t_1671 = temp_1652[2];
                    const expr_1672 = temp_1652[3];
                    const const_1673 = temp_1652[4];
                    const external_1674 = temp_1652[5];
                    return ('TVar(' + (name_1670) + ',') + (((t_1671 != null))? (TestParser.stringifyType(t_1671)) : 'null') + ',' + (((expr_1672 != null))? (TestParser.stringify(expr_1672)) : 'null') + (',' + (const_1673) + ',' + (external_1674) + ')');
                }
            } break;

            case 24: {
                {
                    const vars_1675 = temp_1652[1];
                    return 'TVars(' + TestParser.stringifyNodeArray(vars_1675) + ')';
                }
            } break;

            case 21: {
                {
                    const name_1676 = temp_1652[1];
                    const expr_1677 = temp_1652[2];
                    const vars_1678 = temp_1652[3];
                    const rettype_1679 = temp_1652[4];
                    const external_1680 = temp_1652[5];
                    return ('TFunction(' + (name_1676) + ',') + (expr_1677 == (null)? ('null') : TestParser.stringify(expr_1677)) + ',' + TestParser.stringifyNodeArray(vars_1678) + ',' + (((rettype_1679 != null))? (TestParser.stringifyType(rettype_1679)) : 'null') + (',' + (external_1680) + ')');
                }
            } break;

            case 22: {
                {
                    const expr_1681 = temp_1652[1];
                    const vars_1682 = temp_1652[2];
                    const rettype_1683 = temp_1652[3];
                    return 'TArrow(' + (expr_1681 == (null)? ('null') : TestParser.stringify(expr_1681)) + ',' + TestParser.stringifyNodeArray(vars_1682) + ',' + (((rettype_1683 != null))? (TestParser.stringifyType(rettype_1683)) : 'null') + ')';
                }
            } break;

            case 12: {
                {
                    const e_1684 = temp_1652[1];
                    const el_1685 = temp_1652[2];
                    const argNames_1686 = temp_1652[3];
                    {
                        let res_1687 = 'TCall(' + TestParser.stringify(e_1684) + ',[';
                        {
                            let i_1688 = 0;
                            let it_1689 = 0;
                            let at_1690 = el_1685.length;
                            while (it_1689 < at_1690) {
                                i_1688 = it_1689;
                                it_1689++;
                                {
                                    res_1687 += ((argNames_1686[i_1688] == null))? ('') : argNames_1686[i_1688] + ':';
                                    res_1687 += TestParser.stringify(el_1685[i_1688]) + (((i_1688 != el_1685.length - 1))? (',') : '');
                                };
                            };
                        };
                        return res_1687 + '])';
                    };
                }
            } break;

            case 14: {
                {
                    const e_1691 = temp_1652[1];
                    return 'TParenthesis(' + TestParser.stringify(e_1691) + ')';
                }
            } break;

            case 15: {
                {
                    const e_1692 = temp_1652[1];
                    return 'TReturn(' + TestParser.stringify(e_1692) + ')';
                }
            } break;

            case 16: {
                {
                    const e_1693 = temp_1652[1];
                    return 'TThrow(' + TestParser.stringify(e_1693) + ')';
                }
            } break;

            case 37: {
                {
                    const t_1694 = temp_1652[1];
                    const els_1695 = temp_1652[2];
                    return 'TEnum(' + TestParser.stringifyType(t_1694) + ',' + TestParser.stringifyNodeArray(els_1695) + ')';
                }
            } break;

            case 39: {
                {
                    const a_1696 = temp_1652[1];
                    return 'TUsing(' + a_1696.join(',') + ')';
                }
            } break;

            case 35: {
                {
                    const paths = temp_1652[1];
                    const els_1697 = temp_1652[2];
                    return 'TModule(' + paths.join('.') + ',' + TestParser.stringifyNodeArray(els_1697) + ')';
                }
            } break;

            case 32: {
                {
                    const k_1698 = temp_1652[1];
                    const v_1699 = temp_1652[2];
                    return 'TMap([' + (() => {
                        const result_1700 = [];
                        const value_1701 = k_1698;
                        for (const p of $toIterator(value_1701)) result_1700.push(TestParser.stringify(p));
                        return result_1700;
                    })().join(',') + '],[' + (() => {
                        const result_1702 = [];
                        const value_1703 = v_1699;
                        for (const p of $toIterator(value_1703)) result_1702.push(TestParser.stringify(p));
                        return result_1702;
                    })().join(',') + '])';
                }
            } break;

            case 25: {
                {
                    const type_1704 = temp_1652[1];
                    const extend_1705 = temp_1652[2];
                    const implement_1706 = temp_1652[3];
                    const fields_1707 = temp_1652[4];
                    const external_1708 = temp_1652[5];
                    {
                        let res_1709 = 'TClass(' + TestParser.stringifyType(type_1704) + ',';
                        res_1709 += ((extend_1705 != null))? (TestParser.stringifyType(extend_1705)) : 'null,';
                        res_1709 += TestParser.stringifyNodeTypeArray(implement_1706) + ',';
                        res_1709 += TestParser.stringifyNodeArray(fields_1707) + ',';
                        res_1709 += external_1708 + ')';
                        return res_1709;
                    };
                }
            } break;

            case 30: {
                {
                    const path_1710 = temp_1652[1];
                    const t_1711 = temp_1652[2];
                    const args_1712 = temp_1652[3];
                    const names_1713 = temp_1652[4];
                    const values_1714 = temp_1652[5];
                    const argNames_1715 = temp_1652[6];
                    return 'TNew([' + path_1710.join('.') + '],' + TestParser.stringifyType(t_1711) + ',' + TestParser.stringifyNodeArray(args_1712) + ',[' + names_1713.join(',') + '],' + TestParser.stringifyNodeArray(values_1714) + ',[' + argNames_1715.join(',') + '])';
                }
            } break;

            case 48: {
                {
                    const type_1716 = temp_1652[1];
                    return 'NodeTypeValue(' + TestParser.stringifyType(type_1716) + ')';
                }
            } break;

            case 8: {
                {
                    const alias_1717 = temp_1652[1];
                    const value_1718 = temp_1652[2];
                    return 'TTypeAlias(' + TestParser.stringifyType(alias_1717) + ',' + TestParser.stringifyType(value_1718) + ')';
                }
            } break;

            case 28: {
                {
                    const l = temp_1652[1];
                    const r = temp_1652[2];
                    return 'TDot(' + TestParser.stringify(l) + ',' + r + ')';
                }
            } break;

            case 29: {
                {
                    const l_1719 = temp_1652[1];
                    const r_1720 = temp_1652[2];
                    return 'TDotUpper(' + TestParser.stringify(l_1719) + ',' + r_1720 + ')';
                }
            } break;

            case 44: {
                {
                    const expr_1721 = temp_1652[1];
                    return 'TPrivate(' + TestParser.stringify(expr_1721) + ')';
                }
            } break;

            case 13: {
                {
                    const econd_1722 = temp_1652[1];
                    const eif_1723 = temp_1652[2];
                    const eelse_1724 = temp_1652[3];
                    return 'TIf(' + TestParser.stringifyNodeArray(econd_1722) + ',' + TestParser.stringify(eif_1723) + ',' + TestParser.stringify(eelse_1724) + ')';
                }
            } break;

            case 31: {
                {
                    const el_1725 = temp_1652[1];
                    return 'TArray(' + TestParser.stringifyNodeArray(el_1725) + ')';
                }
            } break;

            case 19: {
                {
                    const op_1726 = temp_1652[1];
                    const postfix_1727 = temp_1652[2];
                    const e_1728 = temp_1652[3];
                    return 'TUnop(' + Token.stringify(op_1726) + ',' + postfix_1727 + ',' + TestParser.stringify(e_1728) + ')';
                }
            } break;

            default:
            throw '<!--' + node_1651 + '-->'
            };
        };
    TestParser.stringifyNodeArray = (arr) => { return '[' + (() => {
            const result_1729 = [];
            const value_1730 = arr;
            for (const e of $toIterator(value_1730)) result_1729.push(TestParser.stringify(e));
            return result_1729;
        })().join(',') + ']' };
    TestParser.stringifyNodeTypeArray = (arr_1731) => { return '[' + (() => {
            const result_1732 = [];
            const value_1733 = arr_1731;
            for (const e of $toIterator(value_1733)) result_1732.push(TestParser.stringifyType(e));
            return result_1732;
        })().join(',') + ']' };
    TestParser.stringifyType = (node_1734) => {
            const temp_1735 = node_1734;
            switch (temp_1735&&temp_1735[0]) {
            case 1: {
                {
                    const s_1736 = temp_1735[1];
                    return ('Type(' + (s_1736) + ')');
                }
            } break;

            case 2: {
                {
                    const name_1737 = temp_1735[1];
                    const params_1738 = temp_1735[2];
                    return ('ParametricType(' + (name_1737) + ',[') + (() => {
                        const result_1739 = [];
                        const value_1740 = params_1738;
                        for (const p of $toIterator(value_1740)) result_1739.push(TestParser.stringifyType(p));
                        return result_1739;
                    })().join(',') + '])';
                }
            } break;

            case 3: {
                {
                    const args_1741 = temp_1735[1];
                    const rettype_1742 = temp_1735[2];
                    return 'Function([' + (() => {
                        const result_1743 = [];
                        const value_1744 = args_1741;
                        for (const e of $toIterator(value_1744)) result_1743.push(TestParser.stringifyType(e));
                        return result_1743;
                    })().join(',') + '],' + TestParser.stringifyType(rettype_1742) + ')';
                }
            } break;

            case 5: {
                {
                    const names_1745 = temp_1735[1];
                    const types_1746 = temp_1735[2];
                    return 'Object([' + names_1745.join(',') + '],[' + (() => {
                        const result_1747 = [];
                        const value_1748 = types_1746;
                        for (const e of $toIterator(value_1748)) result_1747.push(TestParser.stringifyType(e));
                        return result_1747;
                    })().join(',') + '])';
                }
            } break;

            case 0: {
                {
                    const type_1749 = temp_1735[1];
                    return 'Optional(' + TestParser.stringifyType(type_1749) + ')';
                }
            } break;

            default:
            throw '<!--' + node_1734 + '-->'
            };
        };
    var TestTyper = class {
    }
    TestTyper.passed = 0
    TestTyper.overall = 0
    TestTyper.library = Fs.readFileSync(__dirname + '/library/js/js.hexa')
    TestTyper.test = () => {
            console.log('TestTyper begin');
            TestTyper.shouldNotError('let a = 1');
            TestTyper.shouldError('let a');
            TestTyper.shouldError('let a = 1 a = 2');
            TestTyper.shouldNotError('var a = 1 var b = 1');
            TestTyper.shouldNotError('var a = 1 var b = a');
            TestTyper.shouldNotError('var a = 1 let b = a');
            TestTyper.shouldError('var a = var b = 1');
            TestTyper.shouldError('var a = var b');
            TestTyper.shouldError('var a = { var b }');
            TestTyper.shouldError('var a = { 1 2 3 var b }');
            TestTyper.shouldNotError('var a = { 1 2 var b 3 }');
            TestTyper.shouldError('var a = { }');
            TestTyper.shouldError('let a = var b');
            TestTyper.shouldNotError('var a = 1 a = 2');
            TestTyper.shouldNotError('let a = { 2 }');
            TestTyper.shouldNotError('let a = { 1 2 3 2 }');
            TestTyper.shouldError('let a = return 2');
            TestTyper.shouldError('let a = { return 2 }');
            TestTyper.shouldError('let a = { break }');
            TestTyper.shouldError('let a = break');
            TestTyper.shouldError('var a = 1, b = return 2');
            TestTyper.shouldError('!1');
            TestTyper.shouldNotError('!true');
            TestTyper.shouldNotError('!!!true');
            TestTyper.shouldNotError('let a = true !a');
            TestTyper.shouldNotError('let a: Any = true !a');
            TestTyper.shouldNotError('"s" + 1');
            TestTyper.shouldError('("s" + 1).x');
            TestTyper.shouldNotError('module{}("s" + 1)');
            TestTyper.shouldNotError('module{}("s" + 1).length');
            TestTyper.shouldNotError('{("s" + 1).length}');
            TestTyper.shouldNotError('("s" + 1).length');
            TestTyper.shouldNotError('[("s" + 1).length]');
            TestTyper.shouldError('enum E { A B A }');
            TestTyper.shouldError('enum E { A(value: Int) B A(value: Int) }');
            TestTyper.shouldError('enum E { B(value: Int) A = 1 }');
            TestTyper.shouldError('enum E { lowercase }');
            TestTyper.shouldNotError('class A { static function x() {} } A.x()');
            TestTyper.shouldError('class A { static function x() {} static function x() {} }');
            TestTyper.shouldError('class A { static function x() {} static var x = 1 }');
            TestTyper.shouldError('class A { static function x() {} var x = 1 }');
            TestTyper.shouldError('class A { static let x = 1 static var x = 1 }');
            TestTyper.shouldError('class A { static let x = 1 function x() {} }');
            TestTyper.shouldNotError('module { class A { static function x() {} } } A.x()');
            TestTyper.shouldError('class A { static function x() {} } B.y()');
            TestTyper.shouldError('class A { static function x() {} } A.y()');
            TestTyper.shouldError('module { class A { static function x() {} } } A.y()');
            TestTyper.shouldNotError('enum E : Int { static function x() {} } E.x()');
            TestTyper.shouldError('enum E : Int { static function x() {} } E.y()');
            TestTyper.shouldNotError('enum E { A } let a = E.A');
            TestTyper.shouldError('enum E { A } let a = E.B');
            TestTyper.shouldNotError('class A { static var x = 0 } A.x = 1');
            TestTyper.shouldError('class A { static var x = 0 } A.y = 1');
            TestTyper.shouldNotError('var x = 1 x = 2');
            TestTyper.shouldNotError('var x: Bool = true');
            TestTyper.shouldError('var x: Bool = 1');
            TestTyper.shouldNotError('var x: Bool? = null');
            TestTyper.shouldNotError('var x: Int = 1 x = 1');
            TestTyper.shouldError('var x: Int = 1 x = true');
            TestTyper.shouldError('var x = 1 x = true');
            TestTyper.shouldError('var x = (1) x = (true)');
            TestTyper.shouldNotError('var x = 1 var y = 2 x = y');
            TestTyper.shouldError('var x: Int = 1 var y: Bool = true x = y');
            TestTyper.shouldError('var x = 1 var y = true x = y');
            TestTyper.shouldNotError('var x = null x = null');
            TestTyper.shouldNotError('var x = null x = true');
            TestTyper.shouldError('var x = 1 var y = x y = true');
            TestTyper.shouldNotError('var x = null var y = true x = y');
            TestTyper.shouldNotError('function x() {} var y = x y = x');
            TestTyper.shouldNotError('function x() {} var y: ()=>Void = x y = x');
            TestTyper.shouldNotError('class A { new() {} } let a = new A()');
            TestTyper.shouldError('class A { } let a = new A()');
            TestTyper.shouldNotError('class A { new() {} var x = 0 } let a = new A() a.x = 1');
            TestTyper.shouldNotError('let a = { b: true } let c = a.b');
            TestTyper.shouldNotError('let a: { b: Bool } = { b: true } let c = a.b');
            TestTyper.shouldNotError('let a = { b: true } a.b = false');
            TestTyper.shouldNotError('let a: { b: Bool } = { b: true } let c: { b: Bool } = a');
            TestTyper.shouldNotError('let a = { b: true } let c: { b: Bool } = a');
            TestTyper.shouldError('let a = { b: true } let c = a.x');
            TestTyper.shouldError('let a = { b: true } let c: Int = a.b');
            TestTyper.shouldError('let a = { b: true } let c = a.b c = 123');
            TestTyper.shouldError('let a = {a: 1, b: 2, a: 3}');
            TestTyper.shouldNotError('var i: Float = 123');
            TestTyper.shouldError('var i: Int = 0.123');
            TestTyper.shouldNotError('if (true) {}');
            TestTyper.shouldNotError('if (true == false) {}');
            TestTyper.shouldNotError('if (1 == 2) {}');
            TestTyper.shouldNotError('if (1 != 2) {}');
            TestTyper.shouldNotError('if (1 >= 2) {}');
            TestTyper.shouldErrorTemplate('$d$ a = $a$', ['$b$', '{ $b$ }'], ['break', 'continue', 'return $c$'], ['1', 'abc'], ['let', '"var"']);
            TestTyper.shouldNotError('var x = function() {return 1} var x = 1');
            TestTyper.shouldError('let x = function() {return 1} x = 1');
            TestTyper.shouldError('function x() {return 1} x = 1');
            TestTyper.shouldError('function x() {return 1} x = function() {return 1}');
            TestTyper.shouldError('{ function x() {return 1} } x()');
            TestTyper.shouldError('{ function x() {return return 1} }');
            TestTyper.shouldError('{ function x(y: Int) { y = 1 } }');
            TestTyper.shouldError('return 1');
            TestTyper.shouldError('{ return }');
            TestTyper.shouldNotError('{ () => { 1 } }');
            TestTyper.shouldNotError('{ () => 1 }');
            TestTyper.shouldNotError('var x = function () {} x = function () {}');
            TestTyper.shouldError('let x = function () {} x = function () {} ');
            TestTyper.shouldNotError('function () {}');
            TestTyper.shouldNotError('function (): Void {}');
            TestTyper.shouldNotError('function (): Int { return 0 }');
            TestTyper.shouldError('function (): Int {}');
            TestTyper.shouldError('var a: Int? = null if (var b = a) {}');
            TestTyper.shouldError('var a: Int? = null if (let b) {}');
            TestTyper.shouldError('var a: Int? = null if (let b = a) {} a = b');
            TestTyper.shouldError('var a: Int? = null if (let b = a) { b = a }');
            TestTyper.shouldNotError('var a: Int? = null if (let b = a) {} a = 5');
            TestTyper.shouldNotError('var a: Int? = null if (let b = a) { a = b }');
            TestTyper.shouldNotError('var a: Int? = null if (let a = a) {} a = 5');
            TestTyper.shouldNotError('var a: Int? = null if (let a = a, let b = a, let a = b) {} a = 5');
            TestTyper.shouldError('function x(y: Int): Void {} var z: Int = x(1)');
            TestTyper.shouldError('function x(y: Int) {} var z: Int = x(1)');
            TestTyper.shouldError('function x(y: Int) {} x(x(1))');
            TestTyper.shouldNotError('function x(y: Int) return 1 var z: Int = x(1)');
            TestTyper.shouldNotError('function x(y: Int): Int return 1 var z: Int = x(1)');
            TestTyper.shouldError('function x(): Int { return }');
            TestTyper.shouldError('function x() { {return} {return 1} }');
            TestTyper.shouldError('function x(y: Int): Bool return 1 var z: Int = x(1)');
            TestTyper.shouldError('function x(y: Int) return 1 var z: Bool = x(1)');
            TestTyper.shouldNotError('function x(y: Int): Void {} x(1)');
            TestTyper.shouldNotError('function x(y: Int, z: Int): Void {} x(1, 1)');
            TestTyper.shouldError('function x(y: Int, z: Int): Void {} x(1, true)');
            TestTyper.shouldError('function x(y: Int): Void {} x(true)');
            TestTyper.shouldError('function x(y: Void): Void {}');
            TestTyper.shouldError('function x(y: Int) { { return 1 } return true }');
            TestTyper.shouldNotError('function x(y: Int) { { return 1 } return 1 }');
            TestTyper.shouldNotError('enum E { V } function x() { return E.V }');
            TestTyper.shouldError('function x() { return Int }');
            TestTyper.shouldNotError('function x(y: Int, z: Int): Void {} x(1, 1, 1)');
            TestTyper.shouldNotError('function x(y: Int, z: Int): Void {} x(1)');
            TestTyper.shouldNotError('let a = [2, 4, 1, 2, 5]');
            TestTyper.shouldNotError('let a = [null, 2, 4, 1, 2]');
            TestTyper.shouldNotError('var a = [2, 4, 1, 2, 5] a = [2, 3, 4]');
            TestTyper.shouldError('let a = [2, 4, 1, 2, 5] a = [2, 3, 4]');
            TestTyper.shouldNotError('var a = 4, b = 2, c = 4 let arr = [a, b, c]');
            TestTyper.shouldError('var a = for (b in [1, 2, 3, 4]) b');
            TestTyper.shouldError('var a = (for (b in [1, 2, 3, 4]) b)');
            TestTyper.shouldNotError('var a = [for (b in [1, 2, 3, 4]) b]');
            TestTyper.shouldError('var a = [for (b in [1, 2, 3, 4]) a]');
            TestTyper.shouldNotError('var a = [ 1: "a", 2: "b", 3: "c" ]');
            TestTyper.shouldNotError('var a = [ "a": 1, "b": 2, "c": 3 ]');
            TestTyper.shouldNotError('var a = [ "a": 1, "b": 2, "c": 3 ] a = ["l": 11]');
            TestTyper.shouldNotError('var a = { a: "a" } a.a = "b"');
            TestTyper.shouldNotError('var a = [{ a: 1 }] a[0].a');
            TestTyper.shouldError('var a = [{ a: 1 }] a[0].b');
            TestTyper.shouldError('var a = [{ b: [{c : [1]}] }] a[0].b[0].d');
            TestTyper.shouldNotError('var a = [{ b: [{c : [1]}] }] a[0].b[0].c[0]');
            TestTyper.shouldError('var a = try { throw 1 } catch(e: Any) { throw 2 }');
            TestTyper.shouldError('var a = { try { throw 1 } catch(e: Any) { throw 2 } }');
            TestTyper.shouldNotError('var a = try { 1 } catch(e: Any) { 2 }');
            TestTyper.shouldNotError('try { var a = try { 1 } catch(e: Any) { throw 2 } } catch(e: Any) {}');
            TestTyper.shouldNotError('var a = try { throw 1 } catch(e: Any) { 2 }');
            TestTyper.shouldNotError('var a = { try { throw 1 } catch(e: Any) { 2 } }');
            TestTyper.shouldError('try { 1 } catch(e: Any) { throw 2 }');
            TestTyper.shouldNotError('try { throw 1 } catch(e: Any) { 2 }');
            TestTyper.shouldError('var a = throw 1');
            TestTyper.shouldError('var a = { throw 1 }');
            TestTyper.shouldError('{ throw 1 }');
            TestTyper.shouldError('throw 1');
            TestTyper.shouldNotError('try {} catch(e: Any) {}');
            TestTyper.shouldNotError('try {} catch(e: Int) {}');
            TestTyper.shouldNotError('try {} catch(e: Float) {}');
            TestTyper.shouldNotError('try {} catch(e: String) {}');
            TestTyper.shouldError('try {} catch(e: {:}) {}');
            TestTyper.shouldError('try {} catch(e: ()=>Void) {}');
            TestTyper.shouldNotError('function f() throw 123');
            TestTyper.shouldError('@noThrow(0) function f() {}');
            TestTyper.shouldNotError('@noThrow function f() {}');
            TestTyper.shouldError('@noThrow function f() throw 123');
            TestTyper.shouldError('@noThrow @throws(Int) function f() throw 123');
            TestTyper.shouldError('@noThrow @throws function f() {}');
            TestTyper.shouldNotError('@throws function f() throw 123');
            TestTyper.shouldNotError('let f = @throws function() throw 123');
            TestTyper.shouldError('let f = @noThrow function() throw 123');
            TestTyper.shouldError('let f = @noThrow @throws function() throw 123');
            TestTyper.shouldNotError('@throws(Int) function f() throw 123');
            TestTyper.shouldNotError('@throws(Int) function f() {}');
            TestTyper.shouldNotError('function f() try { throw 123 } catch(e: Int) {}');
            TestTyper.shouldError('{ break }');
            TestTyper.shouldError('function hi() { continue }');
            TestTyper.shouldNotError('while (true) { break }');
            TestTyper.shouldNotError('while (true) { continue }');
            TestTyper.shouldError('while ({ break }) { }');
            TestTyper.shouldNotError('do { continue } while (true)');
            TestTyper.shouldError('do { } while ({ continue })');
            TestTyper.shouldNotError('for (a in []) { continue }');
            TestTyper.shouldError('for (continue in []) { }');
            TestTyper.shouldError('for (a in continue) { }');
            TestTyper.shouldNotError('class A {}');
            TestTyper.shouldError('module { class A {} class A {} }');
            TestTyper.shouldError('module { let x = 1 } x = 1');
            TestTyper.shouldNotError('module { var x = 1 } var x = 1');
            TestTyper.shouldNotError('module { var x = 1 } x = 1');
            TestTyper.shouldError('module { class A {} } module { class A {} }');
            TestTyper.shouldNotError('class A {new() {} let a: A = new A()}');
            TestTyper.shouldError('function f() {} f(var a)');
            TestTyper.shouldError('function f(x) {} f(var a)');
            TestTyper.shouldError('function f() {} f(let a = 1)');
            TestTyper.shouldError('module hi { function hi() }');
            TestTyper.shouldError('module hi { function () {} }');
            TestTyper.shouldError('function hi() { static var x = 1 }');
            TestTyper.shouldError('function hi() { private var x = 1 }');
            TestTyper.shouldError('class A {} A = null');
            TestTyper.shouldError('class A {} A = A');
            TestTyper.shouldError('class A {new(){}} A = new A()');
            TestTyper.shouldError('module { class A {} } A = null');
            TestTyper.shouldError('module { class A {new(){}} } A = new A()');
            TestTyper.shouldError('class A { static function hi() { this } }');
            TestTyper.shouldError('function hi() { this }');
            TestTyper.shouldError('{ this }');
            TestTyper.shouldNotError('class A { function hi() { this } }');
            TestTyper.shouldNotError('class A { new() { this } }');
            TestTyper.shouldNotError('class A { function hi() { return this } }');
            TestTyper.shouldNotError('class A {\n               var a: [Int]\n              var b: String\n             new(a, b) { this.a = a this.b = b }\n           }');
            TestTyper.shouldError('static function hi() { }');
            TestTyper.shouldError('private function hi() { }');
            TestTyper.shouldError('class A {new () {}} let a = new A() a.b');
            TestTyper.shouldNotError('class A {new () {}let b = 1} let a = new A() a.b');
            TestTyper.shouldError('class A {new () {}let b = 1} let a = new A() a.c');
            TestTyper.shouldError('class A {new () {}let b = 1} let a = new A() a.b[0]');
            TestTyper.shouldNotError('class A { static var v: Int }');
            TestTyper.shouldNotError('class A { var v: Int = 0 new () {} }');
            TestTyper.shouldNotError('class A { let v: Int = 0 new () {} }');
            TestTyper.shouldNotError('class A { var v: Int new () { v = 0 } }');
            TestTyper.shouldNotError('class A { new () { v = 0 } var v: Int }');
            TestTyper.shouldNotError('class A { var v: Int new () { this.v = 0 } }');
            TestTyper.shouldNotError('class A { var v: Int new () { v = 0 v += 1 } }');
            TestTyper.shouldNotError('class A { var v: Int new () { this.v = 0 this.v += 1 } }');
            TestTyper.shouldError('class A { let v: Int = 0 new () { v = 0 } }');
            TestTyper.shouldNotError('enum A { static var v: Int }');
            TestTyper.shouldNotError('enum A { A(x: Int) } switch (A.A(0)) { case A.A(x): {} }');
            TestTyper.shouldError('enum A { A(x: Int) } switch (A.A(0)) { case A.A(x, y): {} }');
            TestTyper.shouldNotError('enum A {}');
            TestTyper.shouldNotError('enum A : Int { }');
            TestTyper.shouldNotError('enum A : Int { }');
            TestTyper.shouldNotError('enum A : String { }');
            TestTyper.shouldError('enum A : Float { }');
            TestTyper.shouldError('enum A : String { F = 1 }');
            TestTyper.shouldError('enum A : Int { F = "1" }');
            TestTyper.shouldNotError('enum A : String { F = "1" }');
            TestTyper.shouldNotError('enum A { A } var a = A.A');
            TestTyper.shouldError('class A { function hi() { super() } }');
            TestTyper.shouldError('function hi() { super() }');
            TestTyper.shouldError('{ super }');
            TestTyper.shouldError('{ super() }');
            TestTyper.shouldError('{ super.hello() }');
            TestTyper.shouldError('\n               class B { function hi() { } }\n             class A extends B { static function hi() { super() } }');
            TestTyper.shouldError('\n               class B { function hi() { } }\n             class A extends B { function hi() { (super).hi() } }');
            TestTyper.shouldNotError('\n                class B { function hi() { } }\n             class A extends B { function hi() { super() } }');
            TestTyper.shouldNotError('\n                class B { function hi() { } }\n             class A extends B { function hi() { super.hi() } }');
            TestTyper.shouldError('var a: Unknown = 1');
            TestTyper.shouldError('function a(): Unknown {}');
            TestTyper.shouldError('class A extends Unknown {}');
            TestTyper.shouldError('class A implements Unknown {}');
            TestTyper.shouldError('let x = if (true) false else 1');
            TestTyper.shouldNotError('let x = if (true) 0 else 1');
            TestTyper.shouldError('var x = if (true) 0 else 1 x = true');
            TestTyper.shouldNotError('var x = if (true) 0 else 1 x = 2');
            TestTyper.shouldNotError('let x = 0 ?? 1');
            TestTyper.shouldError('let x = 0 ?? true');
            TestTyper.shouldNotError('var x = 0 ?? 1 x = 2');
            TestTyper.shouldError('var x = 0 ?? 1 x = true');
            TestTyper.shouldError('let x = 0 x += 0');
            TestTyper.shouldNotError('var x = 0 x += 0');
            TestTyper.shouldError('var x = 0 x += true');
            TestTyper.shouldNotError('var x = 0 var z = x += 0 z = 0');
            TestTyper.shouldError('var x = 0 var z = x += 0 z = true');
            TestTyper.shouldNotError('function x(){class A{new(){}var y=1}return new A()}var z=x()z.y=2');
            TestTyper.shouldNotError('function x(){class A{new(){}var y=1}return new A()}x().y=2');
            TestTyper.shouldError('function x(){class A{new(){}var w=1}return new A()}var z=x()z.y=2');
            TestTyper.shouldError('function x(){class A{new(){}var w=1}return new A()}x().y=2');
            TestTyper.shouldNotError('let t = 1 t is Int');
            TestTyper.shouldError('let t = 1 t is Any');
            TestTyper.shouldError('let t = 1 t is Void');
            TestTyper.shouldError('let t = 1 t as Unknown');
            TestTyper.shouldNotError('let t = 1 t as Int');
            TestTyper.shouldError('let t = 1 t as Void');
            TestTyper.shouldNotError('function int(): Int return 1 int() as Int');
            TestTyper.shouldError('function void(): Void {} void() as Int');
            TestTyper.shouldNotError('class T<A, B> {}');
            TestTyper.shouldError('class T<A, A> {}');
            TestTyper.shouldError('class T<A, B, A> {}');
            TestTyper.shouldError('declare var a');
            TestTyper.shouldError('declare var a = value');
            TestTyper.shouldError('declare var a: Int = value');
            TestTyper.shouldNotError('declare var a: Int');
            TestTyper.shouldError('declare function()');
            TestTyper.shouldNotError('declare function(): Int');
            TestTyper.shouldError('var a = declare function(): Int');
            TestTyper.shouldNotError('@att("value") 123');
            TestTyper.shouldNotError('let known = 1 @att(known) 123');
            console.log(('TestTyper done ' + (Math.round((TestTyper.passed / TestTyper.overall) * 100)) + '% (' + (TestTyper.passed) + '/' + (TestTyper.overall) + ')'));
        };
    TestTyper.shouldNotError = (input_1750) => {
            TestTyper.overall++;
            let errorText = TestTyper.didError(input_1750);
            if (errorText != null) { throw ('TestTyper test fail: `' + (input_1750) + '` should NOT throw error, but it did.\r\n') + errorText };
            TestTyper.passed++;
        };
    TestTyper.shouldError = (input_1751) => {
            TestTyper.overall++;
            if (TestTyper.didError(input_1751) == null) { throw ('TestTyper test fail: `' + (input_1751) + '` should throw error, but it did not.') };
            TestTyper.passed++;
        };
    TestTyper.template = (code_1752, a_1753, b_1754 = null, c_1755 = null, d = null) => {
            const tests = [];
            for (const ta of $toIterator(a_1753)) {
                const ca_1756 = code_1752.split('$a$').join(ta);
                {
                    let step_1757 = 0;
                    const bs = b_1754;
                    if (step_1757 == 0 && bs != null) { step_1757 = 1 };
                    if (step_1757 == 1) { for (const tb of $toIterator(bs)) {
                        const cb = ca_1756.split('$b$').join(tb);
                        {
                            let step_1758 = 0;
                            const cs = c_1755;
                            if (step_1758 == 0 && cs != null) { step_1758 = 1 };
                            if (step_1758 == 1) { for (const tc of $toIterator(cs)) {
                                const cc_1759 = cb.split('$c$').join(tc);
                                {
                                    let step_1760 = 0;
                                    const ds = d;
                                    if (step_1760 == 0 && ds != null) { step_1760 = 1 };
                                    if (step_1760 == 1) { for (const td of $toIterator(ds)) {
                                        const cd = cc_1759.split('$d$').join(td);
                                        if (tests.indexOf(cd) == -1) { tests.push(cd) };
                                    } } else if (tests.indexOf(cc_1759) == -1) { tests.push(cc_1759) };
                                };
                            } } else if (tests.indexOf(cb) == -1) { tests.push(cb) };
                        };
                    } } else if (tests.indexOf(ca_1756) == -1) { tests.push(ca_1756) };
                };
            };
            return tests;
        };
    TestTyper.shouldErrorTemplate = (code_1761, a_1762, b_1763 = null, c_1764 = null, d_1765 = null) => { for (const test of $toIterator(TestTyper.template(code_1761, a_1762, b_1763, c_1764, d_1765))) TestTyper.shouldError(test) };
    TestTyper.shouldNotErrorTemplate = (code_1766, a_1767, b_1768 = null, c_1769 = null, d_1770 = null) => { for (const test of $toIterator(TestTyper.template(code_1766, a_1767, b_1768, c_1769, d_1770))) TestTyper.shouldNotError(test) };
    TestTyper.didError = (input_1771) => {
            const input_1772 = TestTyper.library + input_1771;
            let lexe_1773 = Lexer.tokenize(Buffer.from(input_1772), 'TEST');
            try { (new Typer()).fillFiles([Parser.parseNodes(lexe_1773)]) } catch (temp_1774) {
                if (true) {
                const e = temp_1774
                {
                    return '' + e;
                } } else

                throw temp_1774;
            };
            return null;
        };
    var GenJs = class {
        constructor() {
            this.extension = '.js'
            this.nativeEnums = false
            this.toIterator = false
            this.tabs = '\t\t'
            this.globalAccessor = ''
            this.reserved = ['with', 'const', 'instanceof', 'typeof', 'delete', 'undefined', 'package', 'async', 'await', 'arguments']
        {
        } };
        perform(normalizer) {
            this.project = normalizer;
            return this.stringify();
        };
        stringify() {
            const out_1775 = [('// Generated by Hexa ' + (version) + ' https://hexalang.github.io\n')];
            if (this.project.package.addLicenseNoticeToOutput) {
                out_1775.push(('// ' + (this.project.package.name) + '\n'));
                out_1775.push(('// ' + (this.project.package.name) + ' ' + (this.project.package.version) + '\n'));
                out_1775.push(('// LICENSE ' + (this.project.package.license) + '\n'));
            } else {
                out_1775.push('// The generated code is subject to the original license\n');
            };
            out_1775.push(';(function() {\n\t"use strict"\n\tconst $global = typeof(window) === "undefined"? global : window');
            out_1775.push('\n\tif (typeof($global.require) === "undefined") { $global.require = function () {} };');
            const constantsIndex = out_1775.length;
            const constants = [];
            out_1775.push('');
            for (const e of $toIterator(this.project.enumsSimple)) {
                if (e.staticVars.length + e.staticMethods.length == 0) { continue };
                out_1775.push('\n\tvar ' + e.name + ' = {');
                for (const v of $toIterator(e.staticMethods)) {
                    const temp_1776 = v;
                    switch (temp_1776&&temp_1776[0]) {
                    case 7: {
                        {
                            const name_1777 = temp_1776[1];
                            const expr_1778 = temp_1776[2];
                            const args_1779 = temp_1776[3];
                            const defaults_1780 = temp_1776[4];
                            {
                                out_1775.push('\n\t\t' + name_1777 + ': ');
                                out_1775.push(this.printFunctionArguments(args_1779, defaults_1780) + ' => { ' + this.printStatement(expr_1778) + ' }');
                                out_1775.push(',');
                            };
                        }
                    } break;
                    };
                };
                out_1775.push('\n\t}');
                for (const v of $toIterator(e.staticVars)) {
                    const temp_1781 = v;
                    switch (temp_1781&&temp_1781[0]) {
                    case 5: {
                        {
                            const name_1782 = temp_1781[1];
                            const expr_1783 = temp_1781[2];
                            {
                                out_1775.push('\n\t' + e.name + '.' + name_1782);
                                if (expr_1783 != null) { out_1775.push(' = ' + this.printExpression(expr_1783)) };
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_1784 = temp_1781[1];
                            const expr_1785 = temp_1781[2];
                            {
                                out_1775.push('\n\t' + e.name + '.' + name_1784);
                                out_1775.push(' = ' + this.printExpression(expr_1785));
                            };
                        }
                    } break;
                    };
                };
            };
            for (const e of $toIterator(this.project.enumsComplex)) {
                if ((e.staticMethods.length == 0) && (e.names.length == 0)) { out_1775.push('\n\tvar ' + e.name + ' = {}') } else {
                    out_1775.push('\n\tvar ' + e.name + ' = {');
                    for (const v of $toIterator(e.staticMethods)) {
                        const temp_1786 = v;
                        switch (temp_1786&&temp_1786[0]) {
                        case 7: {
                            {
                                const name_1787 = temp_1786[1];
                                const expr_1788 = temp_1786[2];
                                const args_1789 = temp_1786[3];
                                const defaults_1790 = temp_1786[4];
                                {
                                    out_1775.push('\n\t\t' + name_1787 + ': ');
                                    out_1775.push(this.printFunctionArguments(args_1789, defaults_1790) + ' => { ' + this.printStatement(expr_1788) + ' }');
                                    out_1775.push(',');
                                };
                            }
                        } break;
                        };
                    };
                    let i_1791 = 0;
                    for (const name of $toIterator(e.names)) {
                        if (e.constructors[i_1791] != null) {
                            out_1775.push('\n\t\t' + name + ': ');
                            out_1775.push('(' + e.constructors[i_1791].join(',') + ')=>[');
                            out_1775.push('' + i_1791 + ',' + e.constructors[i_1791].join(','));
                            out_1775.push('],');
                        };
                        i_1791++;
                    };
                    out_1775.push('\n\t}');
                };
                let i_1792 = 0;
                for (const name of $toIterator(e.names)) {
                    if (e.constructors[i_1792] != null) {} else {
                        out_1775.push('\n\tObject.defineProperty(' + e.name + ', "' + name + '", { get: function() { return [' + i_1792 + '] }})');
                    };
                    i_1792++;
                };
                for (const v of $toIterator(e.staticVars)) {
                    const temp_1793 = v;
                    switch (temp_1793&&temp_1793[0]) {
                    case 5: {
                        {
                            const name_1794 = temp_1793[1];
                            const expr_1795 = temp_1793[2];
                            {
                                out_1775.push('\n\t' + e.name + '.' + name_1794);
                                if (expr_1795 != null) { out_1775.push(' = ' + this.printExpression(expr_1795)) };
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_1796 = temp_1793[1];
                            const expr_1797 = temp_1793[2];
                            {
                                out_1775.push('\n\t' + e.name + '.' + name_1796);
                                out_1775.push(' = ' + this.printExpression(expr_1797));
                            };
                        }
                    } break;
                    };
                };
            };
            for (const i of $toIterator(this.project.interfaces)) {
                throw i;
            };
            for (const c of $toIterator(this.project.classes)) {
                if (c.useless) { continue };
                if (c.external) {
                    if (c.jsRequire != null) {
                        constants.push('\n\t' + 'const ' + c.name + ' = require("' + c.jsRequire + '")');
                        continue;
                    };
                    {
                        let step_1798 = 0;
                        const jsNative = c.jsNative;
                        let temp_1799 = null;
                        if (step_1798 == 0 && jsNative != null) {
                            temp_1799 = jsNative != c.name;
                            step_1798 = 1;
                        };
                        if (step_1798 == 1 && temp_1799 != false) { step_1798 = 2 };
                        if (step_1798 == 2) { out_1775.push('\n\t' + 'var ' + c.name + ' = $global.' + jsNative) };
                    };
                    continue;
                };
                out_1775.push('\n\t' + 'var ' + c.name + ' = class');
                {
                    let step_1800 = 0;
                    const extend_1801 = c.extend;
                    if (step_1800 == 0 && extend_1801 != null) { step_1800 = 1 };
                    if (step_1800 == 1) { out_1775.push(' extends ' + extend_1801) };
                };
                out_1775.push(' {');
                for (const v of $toIterator(c.methods)) {
                    const temp_1802 = v;
                    switch (temp_1802&&temp_1802[0]) {
                    case 7: {
                        {
                            const name_1803 = temp_1802[1];
                            const expr_1804 = temp_1802[2];
                            const args_1805 = temp_1802[3];
                            {
                                if (name_1803 == null || name_1803 == 'new') { out_1775.push('\n\t\tconstructor') } else out_1775.push('\n\t\t' + name_1803);
                                out_1775.push('(' + args_1805.join(', ') + ') ');
                                if ((name_1803 == null || name_1803 == 'new') && (c.vars.length > 0)) {
                                    out_1775.push('{ ');
                                    for (const v of $toIterator(c.vars)) {
                                        const temp_1806 = v;
                                        switch (temp_1806&&temp_1806[0]) {
                                        case 5: {
                                            {
                                                const name_1807 = temp_1806[1];
                                                const expr_1808 = temp_1806[2];
                                                if (expr_1808 != null) { out_1775.push('\n\t\t\tthis.' + name_1807 + ' = ' + this.printExpression(expr_1808) + '') };
                                            }
                                        } break;

                                        case 6: {
                                            {
                                                const name_1809 = temp_1806[1];
                                                const expr_1810 = temp_1806[2];
                                                if (expr_1810 != null) { out_1775.push('\n\t\t\tthis.' + name_1809 + ' = ' + this.printExpression(expr_1810) + '') };
                                            }
                                        } break;
                                        };
                                    };
                                    out_1775.push('\n\t\t');
                                    out_1775.push(this.printStatement(expr_1804) + ' };');
                                } else out_1775.push(this.printBlock(expr_1804) + ';');
                            };
                        }
                    } break;
                    };
                };
                for (const name of $toIterator(c.property)) {
                    out_1775.push('\n\t\tget ' + name + ('() { return this.get_' + (name) + '(); };'));
                    out_1775.push('\n\t\tset ' + name + ('(value) { return this.set_' + (name) + '(value); };'));
                };
                out_1775.push('\n\t}');
                for (const v of $toIterator(c.staticVars)) {
                    const temp_1811 = v;
                    switch (temp_1811&&temp_1811[0]) {
                    case 5: {
                        {
                            const name_1812 = temp_1811[1];
                            const expr_1813 = temp_1811[2];
                            {
                                out_1775.push('\n\t' + c.name + '.' + name_1812);
                                if (expr_1813 != null) { out_1775.push(' = ' + this.printExpression(expr_1813)) };
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_1814 = temp_1811[1];
                            const expr_1815 = temp_1811[2];
                            {
                                out_1775.push('\n\t' + c.name + '.' + name_1814);
                                out_1775.push(' = ' + this.printExpression(expr_1815));
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.staticMethods)) {
                    const temp_1816 = v;
                    switch (temp_1816&&temp_1816[0]) {
                    case 7: {
                        {
                            const name_1817 = temp_1816[1];
                            const expr_1818 = temp_1816[2];
                            const args_1819 = temp_1816[3];
                            const defaults_1820 = temp_1816[4];
                            {
                                out_1775.push('\n\t' + c.name + '.' + name_1817 + ' = ');
                                out_1775.push(this.printFunctionArguments(args_1819, defaults_1820) + ' => ' + this.printBlock(expr_1818) + ';');
                            };
                        }
                    } break;
                    };
                };
            };
            for (const g of $toIterator(this.project.globalFuncs)) {
                const temp_1821 = g;
                switch (temp_1821&&temp_1821[0]) {
                case 7: {
                    {
                        const name_1822 = temp_1821[1];
                        const expr_1823 = temp_1821[2];
                        const args_1824 = temp_1821[3];
                        const defaults_1825 = temp_1821[4];
                        {
                            out_1775.push('\n\tfunction ' + name_1822);
                            out_1775.push(this.printFunctionArguments(args_1824, defaults_1825) + ' ' + this.printBlock(expr_1823) + ';');
                        };
                    }
                } break;
                };
            };
            for (const g of $toIterator(this.project.globalVars)) {
                const temp_1826 = g;
                switch (temp_1826&&temp_1826[0]) {
                case 5: {
                    {
                        const name_1827 = temp_1826[1];
                        const expr_1828 = temp_1826[2];
                        {
                            out_1775.push('\n\tvar ' + name_1827);
                            if (expr_1828 != null) { out_1775.push(' = ' + this.printExpression(expr_1828)) } else out_1775.push(' = null');
                        };
                    }
                } break;

                case 6: {
                    {
                        const name_1829 = temp_1826[1];
                        const expr_1830 = temp_1826[2];
                        out_1775.push('\n\tvar ' + name_1829 + ' = ' + this.printExpression(expr_1830));
                    }
                } break;
                };
            };
            for (const init of $toIterator(this.project.init)) {
                out_1775.push('\n\t{\n\t\t');
                out_1775.push(this.printStatement(init));
                out_1775.push('\n\t}');
            };
            if (this.toIterator) { constants.unshift('\n\tfunction $toIterator(v) { if (typeof(v) === "number") { v = Math.max(v, 0); const i = new Uint32Array(v); let n = 0; while (n < v) i[n] = n++; return i; } return v; };') };
            out_1775[constantsIndex] = constants.join('');
            out_1775.push('\n})();\n');
            return out_1775.join('');
        };
        pushTab() { this.tabs += '\t' };
        popTab() { this.tabs = this.tabs.substring(0, this.tabs.length - 1) };
        printBlock(s_1831) {
            const temp_1832 = s_1831;
            switch (temp_1832&&temp_1832[0]) {
            case 1: {
                {
                    const el_1833 = temp_1832[1];
                    {
                        if (el_1833.length == 1) {
                            const temp_1834 = el_1833[0];
                            switch (temp_1834&&temp_1834[0]) {
                            case 1: {
                                return this.printStatement(el_1833[0])
                            } break;
                            };
                        };
                        if (el_1833.length == 1) { return '{ ' + this.printStatement(el_1833[0]) + ' }' };
                        if (el_1833.length == 0) { return '{}' };
                        return this.printStatement(s_1831);
                    };
                }
            } break;

            default:
            return '{ ' + this.printStatement(s_1831) + ' }'
            };
        };
        printStatement(s_1835) {
            {
                const temp_1836 = s_1835;
                switch (temp_1836&&temp_1836[0]) {
                case 0: {
                    {
                        const els_1837 = temp_1836[1];
                        {
                            let r_1838 = '';
                            for (const s of $toIterator(els_1837)) if (s != null) { r_1838 += '\n' + this.tabs + this.printStatement(s) + ';' };
                            return r_1838;
                        };
                    }
                } break;

                case 26: {
                    return 'break'
                } break;

                case 25: {
                    return 'continue'
                } break;

                case 1: {
                    {
                        const el_1839 = temp_1836[1];
                        {
                            if (el_1839.length == 1) {
                                const temp_1840 = el_1839[0];
                                switch (temp_1840&&temp_1840[0]) {
                                case 1: {
                                    return this.printStatement(el_1839[0])
                                } break;
                                };
                            };
                            this.pushTab();
                            let r_1841 = '{';
                            for (const e of $toIterator(el_1839)) {
                                const temp_1842 = e;
                                switch (temp_1842&&temp_1842[0]) {
                                case null: case undefined: {
                                    {
                                    }
                                } break;

                                case 0: {
                                    {
                                        const els_1843 = temp_1842[1];
                                        for (const s of $toIterator(els_1843)) if (s != null) { r_1841 += '\n' + this.tabs + this.printStatement(s) + ';' };
                                    }
                                } break;

                                default:
                                r_1841 += '\n' + this.tabs + this.printStatement(e) + ';'
                                };
                            };
                            this.popTab();
                            return r_1841 + '\n' + this.tabs + '}';
                        };
                    }
                } break;

                case 3: {
                    {
                        const e_1844 = temp_1836[1];
                        const args_1845 = temp_1836[2];
                        return 'new ' + this.printExpression(e_1844) + this.printCallArguments(args_1845);
                    }
                } break;

                case 6: {
                    {
                        const name_1846 = temp_1836[1];
                        const expr_1847 = temp_1836[2];
                        return 'const ' + name_1846 + (expr_1847 == (null)? ('') : ' = ' + this.printExpression(expr_1847));
                    }
                } break;

                case 5: {
                    {
                        const name_1848 = temp_1836[1];
                        const expr_1849 = temp_1836[2];
                        return 'let ' + name_1848 + (expr_1849 == (null)? ('') : ' = ' + this.printExpression(expr_1849));
                    }
                } break;

                case 7: {
                    {
                        const name_1850 = temp_1836[1];
                        const expr_1851 = temp_1836[2];
                        const args_1852 = temp_1836[3];
                        const defaults_1853 = temp_1836[4];
                        return 'const ' + name_1850 + ' = ' + this.printFunctionArguments(args_1852, defaults_1853) + ' => ' + this.printBlock(expr_1851);
                    }
                } break;

                case 8: {
                    {
                        const e_1854 = temp_1836[1];
                        {
                            if (e_1854 == null) { return 'return' };
                            return 'return ' + this.printExpression(e_1854);
                        };
                    }
                } break;

                case 9: {
                    {
                        const econd_1855 = temp_1836[1];
                        const eif_1856 = temp_1836[2];
                        const eelse_1857 = temp_1836[3];
                        {
                            let r_1858 = 'if (' + this.printExpression(econd_1855) + ') ' + this.printBlock(eif_1856);
                            if (eelse_1857 != null) { r_1858 += ' else ' + this.printStatement(eelse_1857) };
                            return r_1858;
                        };
                    }
                } break;

                case 2: {
                    {
                        const e_1859 = temp_1836[1];
                        const args_1860 = temp_1836[2];
                        return this.printExpression(e_1859) + this.printCallArguments(args_1860);
                    }
                } break;

                case 27: {
                    {
                        const args_1861 = temp_1836[1];
                        return 'super' + this.printCallArguments(args_1861);
                    }
                } break;

                case 12: {
                    {
                        const expr_1862 = temp_1836[1];
                        const t_1863 = temp_1836[2];
                        const v_1864 = temp_1836[3];
                        const catches_1865 = temp_1836[4];
                        const temp_1866 = temp_1836[5];
                        {
                            let r_1867 = 'try ';
                            r_1867 += this.printBlock(expr_1862);
                            r_1867 += (' catch (' + (temp_1866) + ') {\n') + this.tabs + '\t';
                            this.pushTab();
                            {
                                let i_1868 = 0;
                                let it_1869 = 0;
                                let at_1870 = catches_1865.length;
                                while (it_1869 < at_1870) {
                                    i_1868 = it_1869;
                                    it_1869++;
                                    {
                                        let typeof_1871 = 'T';
                                        {
                                            const temp_1872 = t_1863[i_1868];
                                            switch (temp_1872&&temp_1872[0]) {
                                            case 4: {
                                                {
                                                    const type_1873 = temp_1872[1];
                                                    typeof_1871 = type_1873.name;
                                                }
                                            } break;

                                            default:
                                            throw '' + t_1863[i_1868]
                                            };
                                        };
                                        {
                                            const temp_1874 = typeof_1871;
                                            switch (temp_1874) {
                                            case 'Any': {
                                                r_1867 += 'if (true) { '
                                            } break;

                                            case 'String': {
                                                r_1867 += ('if (typeof(' + (temp_1866) + ') == \"string\") { ')
                                            } break;

                                            case 'Int': {
                                                r_1867 += ('if (typeof(' + (temp_1866) + ') == \"number\") { ')
                                            } break;

                                            case 'Float': {
                                                r_1867 += ('if (typeof(' + (temp_1866) + ') == \"number\") { ')
                                            } break;

                                            case 'Bool': {
                                                r_1867 += ('if (typeof(' + (temp_1866) + ') == \"boolean\") { ')
                                            } break;

                                            default:
                                            r_1867 += ('if (' + (temp_1866) + ' instanceof ' + (typeof_1871) + ') { ')
                                            };
                                        };
                                        r_1867 += '\n' + this.tabs;
                                        r_1867 += ('const ' + (v_1864[i_1868]) + ' = ' + (temp_1866) + '');
                                        r_1867 += '\n' + this.tabs;
                                        r_1867 += this.printStatement(catches_1865[i_1868]);
                                        r_1867 += ' }';
                                        r_1867 += ' else';
                                        r_1867 += '\n' + this.tabs;
                                    };
                                };
                            };
                            r_1867 += '\n' + this.tabs + ('throw ' + (temp_1866) + ';');
                            this.popTab();
                            return r_1867 + '\n' + this.tabs + '}';
                        };
                    }
                } break;

                case 14: {
                    {
                        const a_1875 = temp_1836[1];
                        const v_1876 = temp_1836[2];
                        return this.printExpression(a_1875) + ' = ' + this.printExpression(v_1876);
                    }
                } break;

                case 13: {
                    {
                        const e_1877 = temp_1836[1];
                        return 'throw ' + this.printExpression(e_1877);
                    }
                } break;

                case 20: {
                    {
                        const name_1878 = temp_1836[1];
                        const over_1879 = temp_1836[2];
                        const by_1880 = temp_1836[3];
                        {
                            this.toIterator = true;
                            return 'for (const ' + name_1878 + ' of $toIterator(' + this.printExpression(over_1879) + ')) ' + this.printStatement(by_1880);
                        };
                    }
                } break;

                case 22: {
                    {
                        const e_1881 = temp_1836[1];
                        return this.printExpression(e_1881) + '++';
                    }
                } break;

                case 23: {
                    {
                        const e_1882 = temp_1836[1];
                        return this.printExpression(e_1882) + '--';
                    }
                } break;

                case 21: {
                    {
                        const econd_1883 = temp_1836[1];
                        const e_1884 = temp_1836[2];
                        const pre_1885 = temp_1836[3];
                        {
                            if (pre_1885) { return 'while (' + this.printExpression(econd_1883) + ') ' + this.printStatement(e_1884) };
                            return 'do {' + this.printStatement(e_1884) + '} while (' + this.printExpression(econd_1883) + ')';
                        };
                    }
                } break;

                case 15: {
                    {
                        const a_1886 = temp_1836[1];
                        const op_1887 = temp_1836[2];
                        const value_1888 = temp_1836[3];
                        return this.printExpression(a_1886) + ' ' + Token.stringify(op_1887) + '= ' + this.printExpression(value_1888);
                    }
                } break;

                case 16: {
                    {
                        const expr_1889 = temp_1836[1];
                        const name_1890 = temp_1836[2];
                        return this.printExpression(expr_1889) + '.' + name_1890;
                    }
                } break;

                case 24: {
                    {
                        const expr_1891 = temp_1836[1];
                        const cases_1892 = temp_1836[2];
                        const statements = temp_1836[3];
                        {
                            let r_1893 = 'switch (' + this.printExpression(expr_1891) + ') {';
                            {
                                let i_1894 = 0;
                                let it_1895 = 0;
                                let at_1896 = cases_1892.length;
                                while (it_1895 < at_1896) {
                                    i_1894 = it_1895;
                                    it_1895++;
                                    if (cases_1892[i_1894].length > 0) {
                                        r_1893 += '\n' + this.tabs;
                                        for (const cc of $toIterator(cases_1892[i_1894])) {
                                            const temp_1897 = cc;
                                            switch (temp_1897&&temp_1897[0]) {
                                            case 8: {
                                                r_1893 += 'case null: case undefined: '
                                            } break;

                                            default:
                                            r_1893 += 'case ' + this.printExpression(cc) + ': '
                                            };
                                        };
                                        this.pushTab();
                                        r_1893 += '{\n' + this.tabs;
                                        r_1893 += this.printStatement(statements[i_1894]);
                                        this.popTab();
                                        r_1893 += '\n' + this.tabs + '} break;\n' + this.tabs;
                                    };
                                };
                            };
                            {
                                let i_1898 = 0;
                                let it_1899 = 0;
                                let at_1900 = cases_1892.length;
                                while (it_1899 < at_1900) {
                                    i_1898 = it_1899;
                                    it_1899++;
                                    if (cases_1892[i_1898].length == 0) {
                                        r_1893 += '\n' + this.tabs + 'default: ';
                                        r_1893 += '\n' + this.tabs;
                                        r_1893 += this.printStatement(statements[i_1898]);
                                        r_1893 += '\n' + this.tabs;
                                    };
                                };
                            };
                            return r_1893 + '}';
                        };
                    }
                } break;

                case null: case undefined: {
                    console.error('Got null statement kind in JavaScript generator, probably unsupported feature was used, ignoring')
                } break;

                default:
                console.error('Unknown statement kind:', ((() => {
                    const result_1901 = s_1835;
                    if (result_1901 != null) { return result_1901 };
                    return [];
                })())[0])
                };
            };
            return '{/* undefined */}';
        };
        printCallArguments(args_1902) { return '(' + (() => {
            const result_1903 = [];
            const value_1904 = args_1902;
            for (const a of $toIterator(value_1904)) result_1903.push(this.printExpression(a));
            return result_1903;
        })().join(', ') + ')' };
        printFunctionArguments(args_1905, defaults_1906) { return '(' + (() => {
            const result_1907 = [];
            const value_1908 = args_1905.length;
            for (const a of $toIterator(value_1908)) result_1907.push(args_1905[a] + (((defaults_1906 != null && defaults_1906[a] != null))? (' = ' + this.printExpression(defaults_1906[a])) : ''));
            return result_1907;
        })().join(', ') + ')' };
        printExpression(e_1909) {
            {
                const temp_1910 = e_1909;
                switch (temp_1910&&temp_1910[0]) {
                case 8: {
                    return 'null'
                } break;

                case 9: {
                    return 'this'
                } break;

                case 7: {
                    {
                        const name_1911 = temp_1910[1];
                        return name_1911;
                    }
                } break;

                case 3: {
                    {
                        const v_1912 = temp_1910[1];
                        return '' + v_1912;
                    }
                } break;

                case 4: {
                    {
                        const v_1913 = temp_1910[1];
                        return '' + v_1913;
                    }
                } break;

                case 2: {
                    {
                        const s_1914 = temp_1910[1];
                        {
                            const s_1915 = s_1914.split('');
                            const charsOut = [];
                            while (s_1915.length > 0) {
                                const temp_1916 = s_1915[0];
                                switch (temp_1916) {
                                case '\'': {
                                    {
                                        charsOut.push('\\');
                                        charsOut.push('\'');
                                        s_1915.shift();
                                    }
                                } break;

                                case '\n': {
                                    {
                                        charsOut.push('\\n');
                                        s_1915.shift();
                                    }
                                } break;

                                case '\r': {
                                    {
                                        charsOut.push('\\r');
                                        s_1915.shift();
                                    }
                                } break;

                                case '\\': {
                                    {
                                        s_1915.shift();
                                        if (s_1915[0] == '\'') {
                                            charsOut.push('\\\'');
                                            s_1915.shift();
                                        } else if (s_1915[0] == '"') {
                                            charsOut.push('\\"');
                                            s_1915.shift();
                                        } else if (s_1915[0] == '\\') {
                                            charsOut.push('\\\\');
                                            s_1915.shift();
                                        } else {
                                            charsOut.push('\\');
                                        };
                                    }
                                } break;

                                default:
                                {
                                    charsOut.push(s_1915[0]);
                                    s_1915.shift();
                                }
                                };
                            };
                            return '\'' + charsOut.join('') + '\'';
                        };
                    }
                } break;

                case 5: {
                    return 'true'
                } break;

                case 6: {
                    return 'false'
                } break;

                case 10: {
                    {
                        const expr_1917 = temp_1910[1];
                        const name_1918 = temp_1910[2];
                        return this.printExpression(expr_1917) + '.' + name_1918;
                    }
                } break;

                case 11: {
                    {
                        const e_1919 = temp_1910[1];
                        const args_1920 = temp_1910[2];
                        return this.printExpression(e_1919) + this.printCallArguments(args_1920);
                    }
                } break;

                case 14: {
                    {
                        const name_1921 = temp_1910[1];
                        const expr_1922 = temp_1910[2];
                        const args_1923 = temp_1910[3];
                        const defaults_1924 = temp_1910[4];
                        {
                            if (name_1921 == null) { return this.printFunctionArguments(args_1923, defaults_1924) + ' => ' + this.printBlock(expr_1922) };
                            return '((() => { const ' + name_1921 + ' = ' + this.printFunctionArguments(args_1923, defaults_1924) + ' => ' + this.printBlock(expr_1922) + '; return ' + name_1921 + ' })())';
                        };
                    }
                } break;

                case 15: {
                    {
                        const expr_1925 = temp_1910[1];
                        const args_1926 = temp_1910[2];
                        const defaults_1927 = temp_1910[3];
                        return this.printFunctionArguments(args_1926, defaults_1927) + ' => (' + this.printExpression(expr_1925) + ')';
                    }
                } break;

                case 12: {
                    {
                        const e_1928 = temp_1910[1];
                        const args_1929 = temp_1910[2];
                        return 'new ' + this.printExpression(e_1928) + this.printCallArguments(args_1929);
                    }
                } break;

                case 18: {
                    {
                        const el_1930 = temp_1910[1];
                        return '[' + (() => {
                            const result_1931 = [];
                            const value_1932 = el_1930;
                            for (const a of $toIterator(value_1932)) result_1931.push(this.printExpression(a));
                            return result_1931;
                        })().join(', ') + ']';
                    }
                } break;

                case 20: {
                    {
                        const op_1933 = temp_1910[1];
                        const postfix_1934 = temp_1910[2];
                        const e_1935 = temp_1910[3];
                        {
                            if (postfix_1934) { return this.printExpression(e_1935) + Token.stringify(op_1933) };
                            return Token.stringify(op_1933) + this.printExpression(e_1935);
                        };
                    }
                } break;

                case 21: {
                    {
                        const nullable_1936 = temp_1910[1];
                        const othewise = temp_1910[2];
                        return '((' + this.printExpression(nullable_1936) + ') || (' + this.printExpression(othewise) + '))';
                    }
                } break;

                case 16: {
                    {
                        const e_1937 = temp_1910[1];
                        return '(' + this.printExpression(e_1937) + ')';
                    }
                } break;

                case 13: {
                    {
                        const a_1938 = temp_1910[1];
                        const op_1939 = temp_1910[2];
                        const b_1940 = temp_1910[3];
                        return this.printExpression(a_1938) + ' ' + Token.stringify(op_1939) + ' ' + this.printExpression(b_1940);
                    }
                } break;

                case 23: {
                    {
                        const expr_1941 = temp_1910[1];
                        const index_1942 = temp_1910[2];
                        return this.printExpression(expr_1941) + '[' + this.printExpression(index_1942) + ']';
                    }
                } break;

                case 22: {
                    {
                        const econd_1943 = temp_1910[1];
                        const eif_1944 = temp_1910[2];
                        const eelse_1945 = temp_1910[3];
                        {
                            let r_1946 = '';
                            try {
                                r_1946 += '(' + this.printExpression(econd_1943) + ')?';
                                r_1946 += ' (' + this.printExpression(eif_1944) + ')';
                                r_1946 += ' : ' + this.printExpression(eelse_1945);
                                return r_1946;
                            } catch (temp_1947) {
                                if (true) {
                                const error = temp_1947
                                {
                                    console.log('If =>', e_1909, error);
                                    return r_1946 + '<!-- If => error -->';
                                } } else

                                throw temp_1947;
                            };
                        };
                    }
                } break;

                case 33: {
                    {
                        const expr_1948 = temp_1910[1];
                        {
                            const e_1949 = this.printExpression(expr_1948);
                            return e_1949 + '&&' + e_1949 + '[0]';
                        };
                    }
                } break;

                case 17: {
                    {
                        const names_1950 = temp_1910[1];
                        const el_1951 = temp_1910[2];
                        return '{' + (() => {
                            const result_1952 = [];
                            const value_1953 = el_1951.length;
                            for (const i of $toIterator(value_1953)) result_1952.push(((names_1950[i]) + ':' + this.printExpression(el_1951[i])));
                            return result_1952;
                        })().join(', ') + '}';
                    }
                } break;

                case 19: {
                    {
                        const keys_1954 = temp_1910[1];
                        const values_1955 = temp_1910[2];
                        {
                            if (keys_1954.length == 0) { return 'new Map()' };
                            return 'new Map([' + (() => {
                                const result_1956 = [];
                                const value_1957 = keys_1954.length;
                                for (const i of $toIterator(value_1957)) result_1956.push('[' + this.printExpression(keys_1954[i]) + ', ' + this.printExpression(values_1955[i]) + ']');
                                return result_1956;
                            })().join(', ') + '])';
                        };
                    }
                } break;

                case 31: {
                    {
                        const a_1958 = temp_1910[1];
                        const op_1959 = temp_1910[2];
                        const value_1960 = temp_1910[3];
                        return this.printExpression(a_1958) + ' ' + Token.stringify(op_1959) + '= ' + this.printExpression(value_1960);
                    }
                } break;

                case 32: {
                    {
                        const kind_1961 = temp_1910[1];
                        const args_1962 = temp_1910[2];
                        const s_1963 = temp_1910[3];
                        {
                            const temp_1964 = kind_1961;
                            switch (temp_1964) {
                            case 0: {
                                return '((' + this.printExpression(args_1962[0]) + ') ' + s_1963 + ' (' + this.printExpression(args_1962[1]) + '))'
                            } break;

                            case 1: {
                                return s_1963 + this.printCallArguments(args_1962)
                            } break;

                            case 2: {
                                return '(' + s_1963 + '(' + this.printExpression(args_1962[0]) + '))'
                            } break;

                            case 3: {
                                return '((' + this.printExpression(args_1962[1]) + ')' + s_1963 + ')'
                            } break;
                            };
                        };
                    }
                } break;

                case 24: {
                    {
                        const e_1965 = temp_1910[1];
                        const t_1966 = temp_1910[2];
                        return '(' + this.printExpression(e_1965) + ')';
                    }
                } break;

                case 30: {
                    {
                        const e_1967 = temp_1910[1];
                        const t_1968 = temp_1910[2];
                        return '((' + this.printExpression(e_1967) + ') instanceof ' + Type.stringify(t_1968) + ')';
                    }
                } break;

                case 34: {
                    {
                        const type_1969 = temp_1910[1];
                        const tagName = temp_1910[2];
                        const tag_1970 = temp_1910[3];
                        const args_1971 = temp_1910[4];
                        {
                            if (args_1971.length == 0) { return ('/*' + (tagName) + '*/[') + this.printExpression(tag_1970) + ']' };
                            return (('/*' + (tagName) + '*/[') + this.printExpression(tag_1970) + ',' + (() => {
                                const result_1972 = [];
                                const value_1973 = args_1971;
                                for (const a of $toIterator(value_1973)) result_1972.push(this.printExpression(a));
                                return result_1972;
                            })().join(',') + ']');
                        };
                    }
                } break;

                case 35: {
                    {
                        const expr_1974 = temp_1910[1];
                        const index_1975 = temp_1910[2];
                        return this.printExpression(expr_1974) + '[' + (1 + index_1975) + ']';
                    }
                } break;

                case null: case undefined: {
                    console.error('Got null expression kind in JavaScript generator, probably unsupported feature was used, ignoring')
                } break;

                default:
                console.error('Unknown expression kind:', ((() => {
                    const result_1976 = e_1909;
                    if (result_1976 != null) { return result_1976 };
                    return [];
                })())[0], e_1909)
                };
            };
            return '{/* undefined */}';
        };
    }
    GenJs.spawn = () => { return new GenJs() };
    var GenCxx = class {
        constructor() {
            this.globalAccessor = ''
            this.declarationsOfFunctions = []
            this.declarationsOfOpaqueTypes = []
            this.declarationsOfFullTypes = []
            this.declarationsOfStringsMap = new Map()
            this.declarationsOfStrings = []
            this.tabs = ''
            this.reserved = []
            this.currentReturnType = null
            this.last = ''
        {
        } };
        perform(normalizer_1977) {
            this.project = normalizer_1977;
            return this.stringify();
        };
        stringify() {
            const header = [('// Generated by Hexa ' + (version) + ' https://hexalang.github.io')];
            if (this.project.package.addLicenseNoticeToOutput) {
                header.push(('// ' + (this.project.package.name) + ''));
                header.push(('// LICENSE ' + (this.project.package.license) + ''));
            } else {
                header.push('// The generated code is subject to the original license');
            };
            header.push(Fs.readFileSync(__dirname + '/library/cxx/hexa.cpp').toString('utf8').split('\r\n').join('\n'));
            const out_1978 = [];
            const forward = [];
            const types_1979 = [];
            this.registerString('');
            this.declarationsOfStringsMap.set('', 0);
            this.registerString('null');
            this.declarationsOfStringsMap.set('null', 1);
            for (const e of $toIterator(this.project.enumsSimple)) {
                forward.push('class ' + e.name + '_;');
                if (e.staticVars.length + e.staticMethods.length == 0) { continue };
                types_1979.push('class ' + e.name + '_ {\n\tpublic:');
                for (const v of $toIterator(e.staticVars)) {
                    const temp_1980 = v;
                    switch (temp_1980&&temp_1980[0]) {
                    case 5: {
                        {
                            const name_1981 = temp_1980[1];
                            const expr_1982 = temp_1980[2];
                            const type_1983 = temp_1980[3];
                            {
                                types_1979.push(('\n\tstatic ' + (this.stringifyType(type_1983)) + ' ') + name_1981 + '_;');
                                out_1978.push(('' + (this.stringifyType(type_1983)) + ' ') + e.name + '_::' + name_1981 + '_;\n');
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_1984 = temp_1980[1];
                            const expr_1985 = temp_1980[2];
                            const type_1986 = temp_1980[3];
                            {
                                types_1979.push(('\n\tstatic ' + (this.stringifyType(type_1986)) + ' ') + name_1984 + '_;');
                                out_1978.push(('' + (this.stringifyType(type_1986)) + ' ') + e.name + '_::' + name_1984 + '_;\n');
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(e.staticMethods)) {
                    const temp_1987 = v;
                    switch (temp_1987&&temp_1987[0]) {
                    case 7: {
                        {
                            const name_1988 = temp_1987[1];
                            const expr_1989 = temp_1987[2];
                            const args_1990 = temp_1987[3];
                            const defaults_1991 = temp_1987[4];
                            const funcType = temp_1987[5];
                            {
                                types_1979.push('\n\tstatic ');
                                types_1979.push(this.printFunctionReturnType(funcType));
                                types_1979.push(' ' + name_1988 + '_');
                                types_1979.push(this.printFunctionArguments(args_1990, funcType, true));
                                types_1979.push(';');
                            };
                        }
                    } break;
                    };
                };
                types_1979.push('\n};\n');
                for (const v of $toIterator(e.staticMethods)) {
                    const temp_1992 = v;
                    switch (temp_1992&&temp_1992[0]) {
                    case 7: {
                        {
                            const name_1993 = temp_1992[1];
                            const expr_1994 = temp_1992[2];
                            const args_1995 = temp_1992[3];
                            const defaults_1996 = temp_1992[4];
                            const funcType_1997 = temp_1992[5];
                            {
                                out_1978.push(this.printFunctionReturnType(funcType_1997));
                                out_1978.push(' ' + e.name + '_::' + name_1993 + '_');
                                out_1978.push(this.printFunctionArguments(args_1995, funcType_1997));
                                const _currentReturnType = this.currentReturnType;
                                this.currentReturnType = this.getFunctionReturnType(funcType_1997);
                                out_1978.push(' ' + this.printBlock(expr_1994) + ';\n');
                                this.currentReturnType = _currentReturnType;
                            };
                        }
                    } break;
                    };
                };
            };
            for (const e of $toIterator(this.project.enumsComplex)) {
                forward.push('class ' + e.name + '_;');
                types_1979.push('class ' + e.name + '_ : public class_ {\n\tpublic:');
                types_1979.push('\n\tAny_** enum_;');
                types_1979.push('\n\tuint16_t is_;');
                types_1979.push('\n\tuint8_t length_;');
                let i_1998 = 0;
                for (const name of $toIterator(e.names)) {
                    if (e.constructors[i_1998] != null) {
                        types_1979.push('\n\tstatic ' + e.name + '_* ' + name + '_(');
                        types_1979.push((() => {
                            const result_1999 = [];
                            const value_2000 = e.constructors[i_1998].length;
                            for (const c of $toIterator(value_2000)) result_1999.push(this.stringifyType(e.constructorsTypes[i_1998][c]) + ' ' + e.constructors[i_1998][c] + '_');
                            return result_1999;
                        })().join(', '));
                        types_1979.push(');');
                        out_1978.push(e.name + '_* ' + e.name + '_::' + name + '_(');
                        out_1978.push((() => {
                            const result_2001 = [];
                            const value_2002 = e.constructors[i_1998].length;
                            for (const c of $toIterator(value_2002)) result_2001.push(this.stringifyType(e.constructorsTypes[i_1998][c]) + ' ' + e.constructors[i_1998][c] + '_');
                            return result_2001;
                        })().join(', '));
                        out_1978.push(') {\n');
                        out_1978.push(('\tprintf(\"' + (e.name) + '::' + (name) + '_()\\n\");fflush(0);\n'));
                        out_1978.push('\t' + e.name + '_* _ = (' + e.name + '_*)(malloc(sizeof(' + e.name + '_)));\n');
                        out_1978.push(('\t_->length_ = ' + (e.constructors[i_1998].length) + ';\n'));
                        out_1978.push(('\t_->enum_ = (Any_**)(malloc(sizeof(Any_*) * ' + (e.constructors[i_1998].length) + '));\n'));
                        out_1978.push(('\t_->is_ = ' + (i_1998) + ';\n'));
                        {
                            let c_2003 = 0;
                            let it_2004 = 0;
                            let at_2005 = e.constructors[i_1998].length;
                            while (it_2004 < at_2005) {
                                c_2003 = it_2004;
                                it_2004++;
                                {
                                    out_1978.push(('\t_->enum_[' + (c_2003) + '] = '));
                                    out_1978.push(this.printToAnyConverter(e.constructors[i_1998][c_2003] + '_', e.constructorsTypes[i_1998][c_2003]));
                                    out_1978.push(';\n');
                                };
                            };
                        };
                        out_1978.push('\treturn _;\n');
                        out_1978.push('};\n');
                    } else {
                        types_1979.push('\n\tstatic ' + e.name + '_* ' + name + '_();');
                        out_1978.push(e.name + '_* ' + e.name + '_::' + name + '_() {\n');
                        out_1978.push(('\tprintf(\"' + (e.name) + '::' + (name) + '_()\\n\");fflush(0);\n'));
                        out_1978.push('\t' + e.name + '_* _ = (' + e.name + '_*)(malloc(sizeof(' + e.name + '_)));\n');
                        out_1978.push('\t_->length_ = 0;\n');
                        out_1978.push(('\t_->is_ = ' + (i_1998) + ';\n'));
                        out_1978.push('\treturn _;\n');
                        out_1978.push('};\n');
                    };
                    i_1998++;
                };
                for (const v of $toIterator(e.staticVars)) {
                    const temp_2006 = v;
                    switch (temp_2006&&temp_2006[0]) {
                    case 5: {
                        {
                            const name_2007 = temp_2006[1];
                            const expr_2008 = temp_2006[2];
                            const type_2009 = temp_2006[3];
                            {
                                types_1979.push(('\n\tstatic ' + (this.stringifyType(type_2009)) + ' ') + name_2007 + '_;');
                                out_1978.push(('' + (this.stringifyType(type_2009)) + ' ') + e.name + '_::' + name_2007 + '_;\n');
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2010 = temp_2006[1];
                            const expr_2011 = temp_2006[2];
                            const type_2012 = temp_2006[3];
                            {
                                types_1979.push(('\n\tstatic ' + (this.stringifyType(type_2012)) + ' ') + name_2010 + '_;');
                                out_1978.push(('' + (this.stringifyType(type_2012)) + ' ') + e.name + '_::' + name_2010 + '_;\n');
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(e.staticMethods)) {
                    const temp_2013 = v;
                    switch (temp_2013&&temp_2013[0]) {
                    case 7: {
                        {
                            const name_2014 = temp_2013[1];
                            const expr_2015 = temp_2013[2];
                            const args_2016 = temp_2013[3];
                            const defaults_2017 = temp_2013[4];
                            const funcType_2018 = temp_2013[5];
                            {
                                types_1979.push('\n\tstatic ');
                                types_1979.push(this.printFunctionReturnType(funcType_2018));
                                types_1979.push(' ' + name_2014 + '_');
                                types_1979.push(this.printFunctionArguments(args_2016, funcType_2018, true));
                                types_1979.push(';');
                                out_1978.push(this.printFunctionReturnType(funcType_2018));
                                out_1978.push(' ' + e.name + '_::' + name_2014 + '_');
                                out_1978.push(this.printFunctionArguments(args_2016, funcType_2018));
                                const _currentReturnType_2019 = this.currentReturnType;
                                this.currentReturnType = this.getFunctionReturnType(funcType_2018);
                                out_1978.push(' ' + this.printBlock(expr_2015) + ';\n');
                                this.currentReturnType = _currentReturnType_2019;
                            };
                        }
                    } break;
                    };
                };
                types_1979.push('\n};\n');
            };
            for (const c of $toIterator(this.project.classes)) {
                if (c.external) {
                    if (c.jsRequire != null) { forward.push(c.jsRequire) };
                    {
                        let step_2020 = 0;
                        const jsNative_2021 = c.jsNative;
                        let temp_2022 = null;
                        if (step_2020 == 0 && jsNative_2021 != null) {
                            temp_2022 = jsNative_2021 != c.name;
                            step_2020 = 1;
                        };
                        if (step_2020 == 1 && temp_2022 != false) { step_2020 = 2 };
                        if (step_2020 == 2) { forward.push('#define ' + c.name + ' ' + jsNative_2021) };
                    };
                    continue;
                };
                if (c.name == 'Any') { continue };
                if (c.name == 'Bool') { continue };
                forward.push('class ' + c.name + '_;');
                types_1979.push('class ' + c.name + '_ : public class_ {\n\tpublic:');
                for (const v of $toIterator(c.vars)) {
                    const temp_2023 = v;
                    switch (temp_2023&&temp_2023[0]) {
                    case 5: {
                        {
                            const name_2024 = temp_2023[1];
                            const expr_2025 = temp_2023[2];
                            const type_2026 = temp_2023[3];
                            types_1979.push(('\n\t' + (this.stringifyType(type_2026)) + ' ') + name_2024 + '_;');
                        }
                    } break;

                    case 6: {
                        {
                            const name_2027 = temp_2023[1];
                            const expr_2028 = temp_2023[2];
                            const type_2029 = temp_2023[3];
                            types_1979.push(('\n\t' + (this.stringifyType(type_2029)) + ' ') + name_2027 + '_;');
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.methods)) {
                    const temp_2030 = v;
                    switch (temp_2030&&temp_2030[0]) {
                    case 7: {
                        {
                            const name_2031 = temp_2030[1];
                            const expr_2032 = temp_2030[2];
                            const args_2033 = temp_2030[3];
                            const defaults_2034 = temp_2030[4];
                            const funcType_2035 = temp_2030[5];
                            if (name_2031 == null || name_2031 == 'new') {
                                types_1979.push('\n\t' + c.name + '_() {};');
                                types_1979.push('\n\tvoid this_');
                                types_1979.push(this.printFunctionArguments(args_2033, funcType_2035, true));
                                types_1979.push(';');
                                types_1979.push('\n\tstatic ' + c.name + '_* new_');
                                types_1979.push(this.printFunctionArguments(args_2033, funcType_2035));
                                types_1979.push(';');
                                out_1978.push('void ' + c.name + '_::this_');
                                out_1978.push(this.printFunctionArguments(args_2033, funcType_2035));
                                out_1978.push(' {\n');
                                for (const v of $toIterator(c.vars)) {
                                    const temp_2036 = v;
                                    switch (temp_2036&&temp_2036[0]) {
                                    case 5: {
                                        {
                                            const name_2037 = temp_2036[1];
                                            const expr_2038 = temp_2036[2];
                                            const type_2039 = temp_2036[3];
                                            if (expr_2038 != null) { out_1978.push('\tthis->' + name_2037 + '_ = ' + this.printExpression(expr_2038) + ';\n') };
                                        }
                                    } break;

                                    case 6: {
                                        {
                                            const name_2040 = temp_2036[1];
                                            const expr_2041 = temp_2036[2];
                                            const type_2042 = temp_2036[3];
                                            out_1978.push('\tthis->' + name_2040 + '_ = ' + this.printExpression(expr_2041) + ';\n');
                                        }
                                    } break;
                                    };
                                };
                                out_1978.push('};\n');
                                out_1978.push(c.name + '_* ' + c.name + '_::new_');
                                out_1978.push(this.printFunctionArguments(args_2033, funcType_2035));
                                out_1978.push(' {\n');
                                out_1978.push(('\tprintf(\"' + (c.name) + '::new_()\\n\");fflush(0);\n'));
                                out_1978.push('\tvoid* buffer_ = (' + c.name + '_*)(malloc(sizeof(' + c.name + '_)));\n');
                                out_1978.push('\t' + c.name + '_* _ = new (buffer_) ' + c.name + '_();\n');
                                out_1978.push('\t_->this_(');
                                out_1978.push((() => {
                                    const result_2043 = [];
                                    const value_2044 = args_2033;
                                    for (const a of $toIterator(value_2044)) result_2043.push(a + '_');
                                    return result_2043;
                                })().join(', '));
                                out_1978.push(');\n');
                                out_1978.push('\treturn _;\n');
                                out_1978.push('};\n');
                            } else {
                                types_1979.push('\n\tvirtual ');
                                types_1979.push(this.printFunctionReturnType(funcType_2035));
                                types_1979.push(' ' + name_2031 + '_');
                                types_1979.push(this.printFunctionArguments(args_2033, funcType_2035));
                                types_1979.push(';');
                                out_1978.push(this.printFunctionReturnType(funcType_2035));
                                out_1978.push(' ' + c.name + '_::' + name_2031 + '_');
                                out_1978.push(this.printFunctionArguments(args_2033, funcType_2035));
                                const _currentReturnType_2045 = this.currentReturnType;
                                this.currentReturnType = this.getFunctionReturnType(funcType_2035);
                                out_1978.push(' ' + this.printBlock(expr_2032) + ';\n');
                                this.currentReturnType = _currentReturnType_2045;
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.staticVars)) {
                    const temp_2046 = v;
                    switch (temp_2046&&temp_2046[0]) {
                    case 5: {
                        {
                            const name_2047 = temp_2046[1];
                            const expr_2048 = temp_2046[2];
                            const type_2049 = temp_2046[3];
                            {
                                types_1979.push(('\n\tstatic ' + (this.stringifyType(type_2049)) + ' ') + name_2047 + '_;');
                                out_1978.push(('' + (this.stringifyType(type_2049)) + ' ') + c.name + '_::' + name_2047 + '_;\n');
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2050 = temp_2046[1];
                            const expr_2051 = temp_2046[2];
                            const type_2052 = temp_2046[3];
                            {
                                types_1979.push(('\n\tstatic ' + (this.stringifyType(type_2052)) + ' ') + name_2050 + '_;');
                                out_1978.push(('' + (this.stringifyType(type_2052)) + ' ') + c.name + '_::' + name_2050 + '_;\n');
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.staticMethods)) {
                    const temp_2053 = v;
                    switch (temp_2053&&temp_2053[0]) {
                    case 7: {
                        {
                            const name_2054 = temp_2053[1];
                            const expr_2055 = temp_2053[2];
                            const args_2056 = temp_2053[3];
                            const defaults_2057 = temp_2053[4];
                            const funcType_2058 = temp_2053[5];
                            {
                                types_1979.push('\n\tstatic ');
                                types_1979.push(this.printFunctionReturnType(funcType_2058));
                                types_1979.push(' ' + name_2054 + '_');
                                types_1979.push(this.printFunctionArguments(args_2056, funcType_2058));
                                types_1979.push(';');
                            };
                        }
                    } break;
                    };
                };
                types_1979.push('\n};\n');
                for (const v of $toIterator(c.staticMethods)) {
                    const temp_2059 = v;
                    switch (temp_2059&&temp_2059[0]) {
                    case 7: {
                        {
                            const name_2060 = temp_2059[1];
                            const expr_2061 = temp_2059[2];
                            const args_2062 = temp_2059[3];
                            const defaults_2063 = temp_2059[4];
                            const funcType_2064 = temp_2059[5];
                            {
                                out_1978.push(this.printFunctionReturnType(funcType_2064));
                                out_1978.push(' ' + c.name + '_::' + name_2060 + '_');
                                out_1978.push(this.printFunctionArguments(args_2062, funcType_2064));
                                const _currentReturnType_2065 = this.currentReturnType;
                                this.currentReturnType = this.getFunctionReturnType(funcType_2064);
                                out_1978.push(' ' + this.printBlock(expr_2061) + ';\n');
                                this.currentReturnType = _currentReturnType_2065;
                            };
                        }
                    } break;
                    };
                };
            };
            for (const g of $toIterator(this.project.globalFuncs)) {
                const temp_2066 = g;
                switch (temp_2066&&temp_2066[0]) {
                case 7: {
                    {
                        const name_2067 = temp_2066[1];
                        const expr_2068 = temp_2066[2];
                        const args_2069 = temp_2066[3];
                        const defaults_2070 = temp_2066[4];
                        const funcType_2071 = temp_2066[5];
                        {
                            types_1979.push(this.printFunctionReturnType(funcType_2071));
                            types_1979.push(' ' + name_2067 + '_');
                            types_1979.push(this.printFunctionArguments(args_2069, funcType_2071));
                            types_1979.push(';\n');
                            out_1978.push(this.printFunctionReturnType(funcType_2071));
                            out_1978.push(' ' + name_2067 + '_');
                            out_1978.push(this.printFunctionArguments(args_2069, funcType_2071));
                            const _currentReturnType_2072 = this.currentReturnType;
                            this.currentReturnType = this.getFunctionReturnType(funcType_2071);
                            out_1978.push(' ' + this.printBlock(expr_2068) + ';\n');
                            this.currentReturnType = _currentReturnType_2072;
                        };
                    }
                } break;
                };
            };
            out_1978.push('int main(int argc, char **argv) {\n');
            out_1978.push('\tprintf("Starting...\\n");fflush(0);\n');
            this.pushTab();
            for (const e of $toIterator(this.project.enumsSimple)) {
                for (const v of $toIterator(e.staticVars)) {
                    const temp_2073 = v;
                    switch (temp_2073&&temp_2073[0]) {
                    case 5: {
                        {
                            const name_2074 = temp_2073[1];
                            const expr_2075 = temp_2073[2];
                            const type_2076 = temp_2073[3];
                            if (expr_2075 != null) { out_1978.push('\t' + e.name + '_::' + name_2074 + '_ = ' + this.printExpression(expr_2075) + ';\n') };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2077 = temp_2073[1];
                            const expr_2078 = temp_2073[2];
                            const type_2079 = temp_2073[3];
                            if (expr_2078 != null) { out_1978.push('\t' + e.name + '_::' + name_2077 + '_ = ' + this.printExpression(expr_2078) + ';\n') };
                        }
                    } break;
                    };
                };
            };
            for (const e of $toIterator(this.project.enumsComplex)) {
                for (const v of $toIterator(e.staticVars)) {
                    const temp_2080 = v;
                    switch (temp_2080&&temp_2080[0]) {
                    case 5: {
                        {
                            const name_2081 = temp_2080[1];
                            const expr_2082 = temp_2080[2];
                            const type_2083 = temp_2080[3];
                            if (expr_2082 != null) { out_1978.push('\t' + e.name + '_::' + name_2081 + '_ = ' + this.printExpression(expr_2082) + ';\n') };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2084 = temp_2080[1];
                            const expr_2085 = temp_2080[2];
                            const type_2086 = temp_2080[3];
                            if (expr_2085 != null) { out_1978.push('\t' + e.name + '_::' + name_2084 + '_ = ' + this.printExpression(expr_2085) + ';\n') };
                        }
                    } break;
                    };
                };
            };
            for (const e of $toIterator(this.project.classes)) {
                for (const v of $toIterator(e.staticVars)) {
                    const temp_2087 = v;
                    switch (temp_2087&&temp_2087[0]) {
                    case 5: {
                        {
                            const name_2088 = temp_2087[1];
                            const expr_2089 = temp_2087[2];
                            const type_2090 = temp_2087[3];
                            if (expr_2089 != null) { out_1978.push('\t' + e.name + '_::' + name_2088 + '_ = ' + this.printExpression(expr_2089) + ';\n') };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2091 = temp_2087[1];
                            const expr_2092 = temp_2087[2];
                            const type_2093 = temp_2087[3];
                            if (expr_2092 != null) { out_1978.push('\t' + e.name + '_::' + name_2091 + '_ = ' + this.printExpression(expr_2092) + ';\n') };
                        }
                    } break;
                    };
                };
            };
            for (const g of $toIterator(this.project.globalVars)) {
                const temp_2094 = g;
                switch (temp_2094&&temp_2094[0]) {
                case 5: {
                    {
                        const name_2095 = temp_2094[1];
                        const expr_2096 = temp_2094[2];
                        const type_2097 = temp_2094[3];
                        {
                            types_1979.push(this.stringifyType(type_2097));
                            types_1979.push(' ' + name_2095 + '_;\n');
                            if (expr_2096 != null) { out_1978.push('\t' + name_2095 + '_ = ' + this.printExpression(expr_2096) + ';\n') };
                        };
                    }
                } break;

                case 6: {
                    {
                        const name_2098 = temp_2094[1];
                        const expr_2099 = temp_2094[2];
                        const type_2100 = temp_2094[3];
                        {
                            types_1979.push(this.stringifyType(type_2100));
                            types_1979.push(' ' + name_2098 + '_;\n');
                            if (expr_2099 != null) { out_1978.push('\t' + name_2098 + '_ = ' + this.printExpression(expr_2099) + ';\n') };
                        };
                    }
                } break;
                };
            };
            if (this.project.init.length > 1) { throw 'project.init.length > 1' };
            const init_2101 = this.printStatement(this.project.init[0]);
            {
                let id_2102 = 0;
                let it_2103 = 0;
                let at_2104 = this.declarationsOfStrings.length;
                while (it_2103 < at_2104) {
                    id_2102 = it_2103;
                    it_2103++;
                    {
                        out_1978.push(('\tString_Strings[' + (id_2102) + '] = String_fromUTF8z(\"' + (this.declarationsOfStrings[id_2102]) + '\");\n'));
                    };
                };
            };
            out_1978.push('\t');
            out_1978.push(init_2101);
            this.popTab();
            out_1978.push('\tprintf("Exiting...\\n");fflush(0);\n');
            out_1978.push('\treturn 0;\n}\n/*}*/\n');
            return (header.join('\n') + '\n// Forward\n' + forward.join('\n') + ('\n\n// Strings\nString_* String_Strings[' + (this.declarationsOfStrings.length) + '] = {nullptr};\n') + '\n// Types\n' + types_1979.join('') + '\n// Statements\n' + out_1978.join('')).split('\n').join('\r\n');
            let out_2105 = '';
            for (const e of $toIterator(this.project.enumsSimple)) {
                this.declarationsOfOpaqueTypes.push('typedef uint16_t _x' + e.name);
                for (const v of $toIterator(e.staticVars)) {
                    const temp_2106 = v;
                    switch (temp_2106&&temp_2106[0]) {
                    case 5: {
                        {
                            const name_2107 = temp_2106[1];
                            const expr_2108 = temp_2106[2];
                            const type_2109 = temp_2106[3];
                            {
                                out_2105 += '\n' + this.stringifyType(type_2109) + ' _x' + e.name + '_' + name_2107;
                                if (expr_2108 != null) { out_2105 += ' = ' + this.printExpression(expr_2108) + ';' };
                            };
                        }
                    } break;

                    case 6: {
                        {
                            const name_2110 = temp_2106[1];
                            const expr_2111 = temp_2106[2];
                            const type_2112 = temp_2106[3];
                            {
                                out_2105 += '\n' + this.stringifyType(type_2112) + ' _x' + e.name + '_' + name_2110;
                                out_2105 += ' = ' + this.printExpression(expr_2111) + ';';
                            };
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(e.staticMethods)) {
                    const temp_2113 = v;
                    switch (temp_2113&&temp_2113[0]) {};
                };
            };
            for (const c of $toIterator(this.project.classes)) {
                if (c.external) {
                    if (c.jsRequire != null) {
                        out_2105 += '\n ' + '/*var ' + c.name + ' = require("' + c.jsRequire + '")*/';
                        continue;
                    };
                    header.push('typedef ' + ((() => {
                        const result_2114 = c.jsNative;
                        if (result_2114 != null) { return result_2114 };
                        return c.name;
                    })()) + ' _x' + c.name + ';');
                    continue;
                };
                const renamed_2115 = '_x' + c.name;
                const t_2116 = ['struct ', renamed_2115, ' {'];
                this.declarationsOfOpaqueTypes.push(('typedef struct ' + (renamed_2115) + '* ' + (renamed_2115) + ''));
                t_2116.push('\n _xclass _xclass;');
                for (const v of $toIterator(c.vars)) {
                    const temp_2117 = v;
                    switch (temp_2117&&temp_2117[0]) {
                    case 5: {
                        {
                            const name_2118 = temp_2117[1];
                            const expr_2119 = temp_2117[2];
                            const type_2120 = temp_2117[3];
                            t_2116.push('\n ' + this.stringifyType(type_2120) + ' _x' + name_2118 + ';');
                        }
                    } break;

                    case 6: {
                        {
                            const name_2121 = temp_2117[1];
                            const expr_2122 = temp_2117[2];
                            const type_2123 = temp_2117[3];
                            t_2116.push('\n ' + this.stringifyType(type_2123) + ' _x' + name_2121 + ';');
                        }
                    } break;
                    };
                };
                for (const v of $toIterator(c.methods)) {
                    const temp_2124 = v;
                    switch (temp_2124&&temp_2124[0]) {
                    case 7: {
                        {
                            const name_2125 = temp_2124[1];
                            const expr_2126 = temp_2124[2];
                            const args_2127 = temp_2124[3];
                            const defaults_2128 = temp_2124[4];
                            {
                                const types_2129 = null;
                                const returns_2130 = null;
                                let declaration = this.printType(returns_2130) + ' ';
                                const constructor = (name_2125 == null || name_2125 == 'new');
                                if (constructor) { declaration = renamed_2115 + ' ' };
                                declaration += renamed_2115 + '_' + name_2125;
                                if (constructor) { if (args_2127.length > 0) { declaration += '(void* _x' + args_2127.join(', void* _x') + ')' } else declaration += '()' } else {
                                    if (args_2127.length > 0) { declaration += ('(' + (renamed_2115) + ' _xthis, void* _x') + args_2127.join(', void* _x') + ')' } else declaration += ('(' + (renamed_2115) + ' _xthis)');
                                };
                                this.declarationsOfFunctions.push(declaration);
                                out_2105 += '\n' + declaration;
                                out_2105 += ' { ';
                                if (constructor) {
                                    out_2105 += ('\n ' + (renamed_2115) + ' _xthis = (' + (renamed_2115) + ')malloc(sizeof(struct ' + (renamed_2115) + '));');
                                    for (const v of $toIterator(c.vars)) {
                                        const temp_2131 = v;
                                        switch (temp_2131&&temp_2131[0]) {
                                        case 5: {
                                            {
                                                const name_2132 = temp_2131[1];
                                                const expr_2133 = temp_2131[2];
                                                const type_2134 = temp_2131[3];
                                                if (expr_2133 != null) { out_2105 += '\n _xthis->_x' + name_2132 + ' = ' + this.printExpression(expr_2133) + ';' };
                                            }
                                        } break;

                                        case 6: {
                                            {
                                                const name_2135 = temp_2131[1];
                                                const expr_2136 = temp_2131[2];
                                                const type_2137 = temp_2131[3];
                                                out_2105 += '\n _xthis->_x' + name_2135 + ' = ' + this.printExpression(expr_2136) + ';';
                                            }
                                        } break;
                                        };
                                    };
                                    out_2105 += '\n ';
                                    out_2105 += this.printStatement(expr_2126) + '\n return _xthis;\n};';
                                } else out_2105 += this.printStatement(expr_2126) + '\n};';
                            };
                        }
                    } break;
                    };
                };
                t_2116.push('\n}');
                this.declarationsOfFullTypes.push(t_2116.join(''));
                for (const v of $toIterator(c.staticVars)) {
                    const temp_2138 = v;
                    switch (temp_2138&&temp_2138[0]) {
                    case 5: {
                        {
                            const name_2139 = temp_2138[1];
                            const expr_2140 = temp_2138[2];
                            const type_2141 = temp_2138[3];
                            {
                                out_2105 += '\n ' + this.stringifyType(type_2141) + ' ' + renamed_2115 + '_' + name_2139;
                                out_2105 += ';';
                            };
                        }
                    } break;
                    };
                };
            };
        };
        pushTab() { this.tabs += '\t' };
        popTab() { this.tabs = this.tabs.substring(0, this.tabs.length - 1) };
        printBlock(s_2142) {
            const temp_2143 = s_2142;
            switch (temp_2143&&temp_2143[0]) {
            case 1: {
                {
                    const el_2144 = temp_2143[1];
                    {
                        if (el_2144.length == 1) {
                            const temp_2145 = el_2144[0];
                            switch (temp_2145&&temp_2145[0]) {
                            case 1: {
                                return this.printBlock(el_2144[0])
                            } break;

                            default:
                            return '{ ' + this.printStatement(el_2144[0]) + '; }'
                            };
                        };
                        if (el_2144.length == 0) { return '{}' };
                        return this.printStatement(s_2142);
                    };
                }
            } break;

            default:
            return '{ ' + this.printStatement(s_2142) + '; }'
            };
        };
        printStatement(s_2146) {
            this.last = (() => {
                const result_2147 = s_2146;
                if (result_2147 != null) { return result_2147 };
                return this.last;
            })();
            {
                const temp_2148 = s_2146;
                switch (temp_2148&&temp_2148[0]) {
                case 0: {
                    {
                        const els_2149 = temp_2148[1];
                        {
                            let r_2150 = '';
                            for (const s of $toIterator(els_2149)) if (s != null) { r_2150 += '\n' + this.tabs + this.printStatement(s) + ';' };
                            return r_2150;
                        };
                    }
                } break;

                case 26: {
                    return 'break'
                } break;

                case 25: {
                    return 'continue'
                } break;

                case 1: {
                    {
                        const el_2151 = temp_2148[1];
                        {
                            this.pushTab();
                            let r_2152 = '{';
                            for (const e of $toIterator(el_2151)) {
                                const temp_2153 = e;
                                switch (temp_2153&&temp_2153[0]) {
                                case null: case undefined: {
                                    {
                                    }
                                } break;

                                case 0: {
                                    {
                                        const els_2154 = temp_2153[1];
                                        for (const s of $toIterator(els_2154)) if (s != null) { r_2152 += '\n' + this.tabs + this.printStatement(s) + ';' };
                                    }
                                } break;

                                default:
                                r_2152 += '\n' + this.tabs + this.printStatement(e) + ';'
                                };
                            };
                            this.popTab();
                            return r_2152 + '\n' + this.tabs + '}';
                        };
                    }
                } break;

                case 3: {
                    {
                        const e_2155 = temp_2148[1];
                        const args_2156 = temp_2148[2];
                        return '' + this.printExpression(e_2155) + '::new_' + this.printCallArguments(args_2156);
                    }
                } break;

                case 6: {
                    {
                        const name_2157 = temp_2148[1];
                        const expr_2158 = temp_2148[2];
                        const type_2159 = temp_2148[3];
                        return this.stringifyType(type_2159) + ' ' + name_2157 + '_' + (expr_2158 == (null)? ('') : ' = ' + this.printTypeConverter(this.printExpression(expr_2158), this.getType(expr_2158), type_2159));
                    }
                } break;

                case 5: {
                    {
                        const name_2160 = temp_2148[1];
                        const expr_2161 = temp_2148[2];
                        const type_2162 = temp_2148[3];
                        return this.stringifyType(type_2162) + ' ' + name_2160 + '_' + (expr_2161 == (null)? ('') : ' = ' + this.printTypeConverter(this.printExpression(expr_2161), this.getType(expr_2161), type_2162));
                    }
                } break;

                case 7: {
                    {
                        const name_2163 = temp_2148[1];
                        const expr_2164 = temp_2148[2];
                        const args_2165 = temp_2148[3];
                        const defaults_2166 = temp_2148[4];
                        const funcType_2167 = temp_2148[5];
                        {
                            const _currentReturnType_2168 = this.currentReturnType;
                            this.currentReturnType = this.getFunctionReturnType(funcType_2167);
                            const result_2169 = ('auto ' + (name_2163) + '_ = [&]') + this.printFunctionArguments(args_2165, defaults_2166) + '->' + this.printFunctionReturnType(funcType_2167) + ' ' + this.printBlock(expr_2164);
                            this.currentReturnType = _currentReturnType_2168;
                            return result_2169;
                        };
                    }
                } break;

                case 8: {
                    {
                        const e_2170 = temp_2148[1];
                        {
                            if (e_2170 == null) { return 'return' };
                            return 'return ' + this.printTypeConverter(this.printExpression(e_2170), this.getType(e_2170), this.currentReturnType);
                        };
                    }
                } break;

                case 9: {
                    {
                        const econd_2171 = temp_2148[1];
                        const eif_2172 = temp_2148[2];
                        const eelse_2173 = temp_2148[3];
                        {
                            let r_2174 = 'if (' + this.printExpression(econd_2171) + ') ' + this.printBlock(eif_2172);
                            if (eelse_2173 != null) { r_2174 += ' else ' + this.printStatement(eelse_2173) };
                            return r_2174;
                        };
                    }
                } break;

                case 2: {
                    {
                        const e_2175 = temp_2148[1];
                        const args_2176 = temp_2148[2];
                        const expects_2177 = temp_2148[3];
                        return this.printExpression(e_2175) + this.printCallArguments(args_2176, expects_2177);
                    }
                } break;

                case 12: {
                    {
                        const expr_2178 = temp_2148[1];
                        const t_2179 = temp_2148[2];
                        const v_2180 = temp_2148[3];
                        const catches_2181 = temp_2148[4];
                        {
                            this.pushTab();
                            let r_2182 = '_try {\n' + this.tabs;
                            r_2182 += this.printStatement(expr_2178);
                            this.popTab();
                            r_2182 += '\n' + this.tabs + '} _catch(' + this.printType(t_2179[0]) + ' _x' + v_2180[0] + ') {\n' + this.tabs + ' ';
                            this.pushTab();
                            r_2182 += this.printStatement(catches_2181[0]);
                            this.popTab();
                            return r_2182 + '\n' + this.tabs + '}';
                        };
                    }
                } break;

                case 14: {
                    {
                        const a_2183 = temp_2148[1];
                        const v_2184 = temp_2148[2];
                        {
                            {
                                const temp_2185 = a_2183;
                                switch (temp_2185&&temp_2185[0]) {
                                case 10: {
                                    {
                                        const expr_2186 = temp_2185[1];
                                        const name_2187 = temp_2185[2];
                                        {
                                            const type_2188 = this.getType(expr_2186);
                                            if ((type_2188 == this.project.typer.typeAny) || (type_2188 == null)) { return this.printExpression(expr_2186) + '->var_(String_fromUTF8z("' + name_2187 + '"), ' + this.printToAnyConverter(this.printExpression(v_2184), this.getType(v_2184)) + ')' };
                                        };
                                    }
                                } break;
                                };
                            };
                            return this.printExpression(a_2183) + ' = ' + this.printExpression(v_2184);
                        };
                    }
                } break;

                case 13: {
                    {
                        const e_2189 = temp_2148[1];
                        return '_throw(' + this.printExpression(e_2189) + ')';
                    }
                } break;

                case 20: {
                    {
                        const name_2190 = temp_2148[1];
                        const over_2191 = temp_2148[2];
                        const by_2192 = temp_2148[3];
                        return 'for (Any_* ' + name_2190 + '_; ' + this.printExpression(over_2191) + ';) ' + this.printStatement(by_2192);
                    }
                } break;

                case 22: {
                    {
                        const e_2193 = temp_2148[1];
                        return this.printExpression(e_2193) + '++';
                    }
                } break;

                case 23: {
                    {
                        const e_2194 = temp_2148[1];
                        return this.printExpression(e_2194) + '--';
                    }
                } break;

                case 21: {
                    {
                        const econd_2195 = temp_2148[1];
                        const e_2196 = temp_2148[2];
                        const pre_2197 = temp_2148[3];
                        {
                            if (pre_2197) { return 'while (' + this.printExpression(econd_2195) + ') ' + this.printStatement(e_2196) };
                            return 'do {' + this.printStatement(e_2196) + '} while (' + this.printExpression(econd_2195) + ')';
                        };
                    }
                } break;

                case 15: {
                    {
                        const a_2198 = temp_2148[1];
                        const op_2199 = temp_2148[2];
                        const value_2200 = temp_2148[3];
                        return this.printExpression(a_2198) + ' ' + Token.stringify(op_2199) + '= ' + this.printExpression(value_2200);
                    }
                } break;

                case 16: {
                    {
                        const expr_2201 = temp_2148[1];
                        const name_2202 = temp_2148[2];
                        {
                            {
                                const temp_2203 = expr_2201;
                                switch (temp_2203&&temp_2203[0]) {
                                case 7: {
                                    {
                                        const id_2204 = temp_2203[1];
                                        if (id_2204.charAt(0) == id_2204.charAt(0).toUpperCase()) { return id_2204 + '_::' + name_2202 + '_' };
                                    }
                                } break;
                                };
                            };
                            return this.printExpression(expr_2201) + '->' + name_2202;
                        };
                    }
                } break;

                case 24: {
                    {
                        const expr_2205 = temp_2148[1];
                        const cases_2206 = temp_2148[2];
                        const statements_2207 = temp_2148[3];
                        {
                            let r_2208 = '{ auto switch_ = ' + this.printExpression(expr_2205) + ';';
                            let else_ = false;
                            {
                                let i_2209 = 0;
                                let it_2210 = 0;
                                let at_2211 = cases_2206.length;
                                while (it_2210 < at_2211) {
                                    i_2209 = it_2210;
                                    it_2210++;
                                    if (cases_2206[i_2209].length > 1) {
                                        if (else_) { r_2208 += ' else' };
                                        r_2208 += '\n' + this.tabs + 'if ((';
                                        const conds_2212 = [];
                                        for (const cc of $toIterator(cases_2206[i_2209])) {
                                            const temp_2213 = cc;
                                            switch (temp_2213&&temp_2213[0]) {
                                            case 8: {
                                                conds_2212.push('switch_ == -1')
                                            } break;

                                            default:
                                            conds_2212.push('switch_ == ' + this.printExpression(cc))
                                            };
                                        };
                                        r_2208 += conds_2212.join(') || (') + ')) ';
                                        this.pushTab();
                                        r_2208 += this.printBlock(statements_2207[i_2209]);
                                        this.popTab();
                                        else_ = true;
                                    } else {
                                        let step_2214 = 0;
                                        const cc_2215 = cases_2206[i_2209][0];
                                        if (step_2214 == 0 && cc_2215 != null) { step_2214 = 1 };
                                        if (step_2214 == 1) {
                                            if (else_) { r_2208 += ' else' };
                                            r_2208 += '\n' + this.tabs + 'if (';
                                            {
                                                const temp_2216 = cc_2215;
                                                switch (temp_2216&&temp_2216[0]) {
                                                case 8: {
                                                    r_2208 += 'switch_ == -1) '
                                                } break;

                                                default:
                                                r_2208 += 'switch_ == ' + this.printExpression(cc_2215) + ') '
                                                };
                                            };
                                            this.pushTab();
                                            r_2208 += this.printBlock(statements_2207[i_2209]);
                                            this.popTab();
                                            else_ = true;
                                        };
                                    };
                                };
                            };
                            {
                                let i_2217 = 0;
                                let it_2218 = 0;
                                let at_2219 = cases_2206.length;
                                while (it_2218 < at_2219) {
                                    i_2217 = it_2218;
                                    it_2218++;
                                    if (cases_2206[i_2217].length == 0) {
                                        if (else_) { r_2208 += ' else' };
                                        r_2208 += '\n' + this.tabs;
                                        r_2208 += this.printBlock(statements_2207[i_2217]);
                                    };
                                };
                            };
                            r_2208 += ';\n' + this.tabs;
                            return r_2208 + '}';
                            let r_2220 = 'switch (' + this.printExpression(expr_2205) + ') {';
                            {
                                let i_2221 = 0;
                                let it_2222 = 0;
                                let at_2223 = cases_2206.length;
                                while (it_2222 < at_2223) {
                                    i_2221 = it_2222;
                                    it_2222++;
                                    if (cases_2206[i_2221].length > 0) {
                                        r_2220 += '\n' + this.tabs;
                                        for (const cc of $toIterator(cases_2206[i_2221])) r_2220 += 'case ' + this.printExpression(cc) + ': ';
                                        this.pushTab();
                                        r_2220 += this.printBlock(statements_2207[i_2221]);
                                        this.popTab();
                                        r_2220 += ' break;';
                                    };
                                };
                            };
                            {
                                let i_2224 = 0;
                                let it_2225 = 0;
                                let at_2226 = cases_2206.length;
                                while (it_2225 < at_2226) {
                                    i_2224 = it_2225;
                                    it_2225++;
                                    if (cases_2206[i_2224].length == 0) {
                                        r_2220 += '\n' + this.tabs + 'default:';
                                        r_2220 += '\n' + this.tabs;
                                        r_2220 += this.printBlock(statements_2207[i_2224]);
                                    };
                                };
                            };
                            r_2220 += '\n' + this.tabs;
                            return r_2220 + '}';
                        };
                    }
                } break;

                default:
                {
                    console.error('Unknown statement kind (GenCxx):', s_2146);
                    console.trace('Here I am!');
                }
                };
            };
        };
        printCallArguments(args_2227, expects_2228) {
            {
                let step_2229 = 0;
                const exp_2230 = expects_2228;
                if (step_2229 == 0 && exp_2230 != null) { step_2229 = 1 };
                if (step_2229 == 1) { return '(' + (() => {
                    const result_2231 = [];
                    const value_2232 = args_2227.length;
                    for (const i of $toIterator(value_2232)) result_2231.push(this.printTypeConverter(this.printExpression(args_2227[i]), this.getType(args_2227[i]), exp_2230[i]));
                    return result_2231;
                })().join(', ') + ')' };
            };
            return '(' + (() => {
                const result_2233 = [];
                const value_2234 = args_2227;
                for (const a of $toIterator(value_2234)) result_2233.push(this.printExpression(a));
                return result_2233;
            })().join(', ') + ')';
        };
        getFunctionReturnType(funcType_2235) {
            const temp_2236 = funcType_2235;
            switch (temp_2236&&temp_2236[0]) {
            case 12: {
                {
                    const args_2237 = temp_2236[1];
                    const returns_2238 = temp_2236[2];
                    return returns_2238;
                }
            } break;

            default:
            return null
            };
        };
        printFunctionReturnType(funcType_2239) {
            const temp_2240 = funcType_2239;
            switch (temp_2240&&temp_2240[0]) {
            case 12: {
                {
                    const args_2241 = temp_2240[1];
                    const returns_2242 = temp_2240[2];
                    return this.stringifyType(returns_2242);
                }
            } break;

            default:
            return 'void'
            };
        };
        printToAnyConverter(string_2243, type_2244) {
            if (type_2244 == this.project.typer.typeAny) { return string_2243 };
            if (type_2244 == this.project.typer.typeBool) { return 'Any_fromBool(' + string_2243 + ')' };
            if (type_2244 == this.project.typer.typeInt) { return 'Any_fromInt(' + string_2243 + ')' };
            return string_2243;
        };
        printTypeConverter(string_2245, from_2246, to_2247) {
            if (from_2246 == to_2247) { return string_2245 };
            if ((from_2246 == this.project.typer.typeBool) && (to_2247 == this.project.typer.typeAny)) { return 'Any_fromBool(' + string_2245 + ')' };
            if ((from_2246 == this.project.typer.typeAny) && (to_2247 == this.project.typer.typeBool)) { return '(' + string_2245 + ')->_toBool()' };
            if ((from_2246 == this.project.typer.typeAny) && (to_2247 == this.project.typer.typeInt)) { return '(' + string_2245 + ')->_toInt()' };
            if ((from_2246 == this.project.typer.typeAny) && (to_2247 == this.project.typer.typeFloat)) { return '(' + string_2245 + ')->_toFloat()' };
            if ((from_2246 == this.project.typer.typeInt) && (to_2247 == this.project.typer.typeString)) { return 'String_fromInt(' + string_2245 + ')' };
            if (to_2247 == this.project.typer.typeAny) { return this.printToAnyConverter(string_2245, from_2246) };
            if (from_2246 != to_2247) { return '(' + this.stringifyType(to_2247) + ')(' + string_2245 + ')' };
            return string_2245;
        };
        printFunctionArguments(args_2248, funcType_2249, defaults_2250) {
            if (args_2248.length == 0) { return '(void)' };
            {
                const temp_2251 = funcType_2249;
                switch (temp_2251&&temp_2251[0]) {
                case 12: {
                    {
                        const types_2252 = temp_2251[1];
                        return '(' + (() => {
                            const result_2253 = [];
                            const value_2254 = args_2248.length;
                            for (const a of $toIterator(value_2254)) result_2253.push((() => {
                                let result_2255 = this.stringifyType(types_2252[a]) + ' ' + args_2248[a] + '_';
                                if (defaults_2250) {
                                    const temp_2256 = types_2252[a];
                                    switch (temp_2256&&temp_2256[0]) {
                                    case 2: {
                                        result_2255 += ' = nullptr'
                                    } break;

                                    case 1: {
                                        result_2255 += ' = nullptr'
                                    } break;
                                    };
                                };
                                return result_2255;
                            })());
                            return result_2253;
                        })().join(', ') + ')';
                    }
                } break;
                };
            };
            return '(' + (() => {
                const result_2257 = [];
                const value_2258 = args_2248.length;
                for (const a of $toIterator(value_2258)) result_2257.push('Any_* ' + args_2248[a] + '_');
                return result_2257;
            })().join(', ') + ')';
        };
        stringType(t_2259, prefix_2260) {
            if (t_2259 == null) { return 'void*' };
            {
                const temp_2261 = t_2259;
                switch (temp_2261&&temp_2261[0]) {
                case 2: {
                    {
                        const name_2262 = temp_2261[1];
                        const params_2263 = temp_2261[2];
                        return '_x' + name_2262;
                    }
                } break;

                case 1: {
                    {
                        const name_2264 = temp_2261[1];
                        return '_x' + name_2264;
                    }
                } break;

                case 5: {
                    {
                    }
                } break;

                case 0: {
                    {
                        const t_2265 = temp_2261[1];
                        return this.stringType(t_2265, '');
                    }
                } break;
                };
            };
            return prefix_2260 + 'void*';
        };
        printType(t_2266) {
            const type_2267 = this.stringType(t_2266, '');
            return type_2267;
        };
        stringifyType(t_2268) {
            const temp_2269 = t_2268;
            switch (temp_2269&&temp_2269[0]) {
            case 2: {
                {
                    const t_2270 = temp_2269[1];
                    {
                        const name_2271 = this.stringifyType(t_2270);
                        if (name_2271 == 'int32_t') { return 'int32_t*' };
                        if (name_2271 == 'bool') { return 'bool*' };
                        if (name_2271 == 'double') { return 'double*' };
                        return name_2271;
                    };
                }
            } break;

            case 1: {
                {
                    const handle_2272 = temp_2269[1];
                    return this.stringifyType(handle_2272.value);
                }
            } break;

            case 4: {
                {
                    const type_2273 = temp_2269[1];
                    {
                        if (type_2273.name == 'Int') { return 'int32_t' };
                        if (type_2273.name == 'Bool') { return 'bool' };
                        if (type_2273.name == 'Void') { return 'void' };
                        if (type_2273.name == 'Float') { return 'double' };
                        return type_2273.name + '_*';
                    };
                }
            } break;

            case 3: {
                {
                    const type_2274 = temp_2269[1];
                    return type_2274.name + '_*';
                }
            } break;

            case 6: {
                {
                    const type_2275 = temp_2269[1];
                    {
                        {
                            let step_2276 = 0;
                            const sub = type_2275.fieldsTypeSimple;
                            if (step_2276 == 0 && sub != null) { step_2276 = 1 };
                            if (step_2276 == 1) { return this.stringifyType(sub) };
                        };
                        return type_2275.name + '_*';
                    };
                }
            } break;

            case 7: {
                {
                    const type_2277 = temp_2269[1];
                    return type_2277.name + '_*';
                }
            } break;

            case 19: {
                return 'Any_*'
            } break;

            case 12: {
                return 'Any_*'
            } break;

            case null: case undefined: {
                return 'Any_*/*?*/'
            } break;

            default:
            throw 'stringifyType ' + t_2268
            };
        };
        getType(e_2278) {
            const temp_2279 = e_2278;
            switch (temp_2279&&temp_2279[0]) {
            case 3: {
                return this.project.typer.typeInt
            } break;

            case 4: {
                return this.project.typer.typeFloat
            } break;

            case 2: {
                return this.project.typer.typeString
            } break;

            case 5: {
                return this.project.typer.typeBool
            } break;

            case 6: {
                return this.project.typer.typeBool
            } break;

            case 7: {
                {
                    const type_2280 = temp_2279[2];
                    return type_2280;
                }
            } break;

            case 16: {
                {
                    const expr_2281 = temp_2279[1];
                    return this.getType(expr_2281);
                }
            } break;

            case 11: {
                {
                    const type_2282 = temp_2279[3];
                    return type_2282;
                }
            } break;

            case 13: {
                {
                    const type_2283 = temp_2279[4];
                    return type_2283;
                }
            } break;

            case 10: {
                {
                    const type_2284 = temp_2279[3];
                    return type_2284;
                }
            } break;

            default:
            return this.project.typer.typeAny
            };
        };
        registerString(string_2285) {
            this.declarationsOfStrings.push(string_2285);
            return this.declarationsOfStrings.length - 1;
        };
        printExpression(e_2286) {
            const temp_2287 = e_2286;
            switch (temp_2287&&temp_2287[0]) {
            case 9: {
                return 'this'
            } break;

            case 7: {
                {
                    const name_2288 = temp_2287[1];
                    return '' + name_2288 + '_';
                }
            } break;

            case 8: {
                return 'nullptr'
            } break;

            case 3: {
                {
                    const v_2289 = temp_2287[1];
                    return v_2289;
                }
            } break;

            case 4: {
                {
                    const v_2290 = temp_2287[1];
                    {
                        if (v_2290.indexOf('.') == -1) { return v_2290 + '.0' };
                        return v_2290;
                    };
                }
            } break;

            case 2: {
                {
                    const string_2291 = temp_2287[1];
                    {
                        {
                            let step_2292 = 0;
                            const id_2293 = this.declarationsOfStringsMap.get(string_2291);
                            if (step_2292 == 0 && id_2293 != null) { step_2292 = 1 };
                            if (step_2292 == 1) { return ('String_Strings[' + (id_2293) + ']') + '/*has:' + string_2291.split('*').join('#') + '*/' };
                        };
                        const s_2294 = string_2291.split('');
                        const charsOut_2295 = [];
                        while (s_2294.length > 0) {
                            const temp_2296 = s_2294[0];
                            switch (temp_2296) {
                            case '\'': {
                                {
                                    charsOut_2295.push('\\\'');
                                    s_2294.shift();
                                }
                            } break;

                            case '"': {
                                {
                                    charsOut_2295.push('\\"');
                                    s_2294.shift();
                                }
                            } break;

                            case '\n': {
                                {
                                    charsOut_2295.push('\\n');
                                    s_2294.shift();
                                }
                            } break;

                            case '\r': {
                                {
                                    charsOut_2295.push('\\r');
                                    s_2294.shift();
                                }
                            } break;

                            case '\\': {
                                {
                                    s_2294.shift();
                                    if (s_2294[0] == '\'') {
                                        charsOut_2295.push('\\\'');
                                        s_2294.shift();
                                    } else if (s_2294[0] == '"') {
                                        charsOut_2295.push('\\"');
                                        s_2294.shift();
                                    } else if (s_2294[0] == '\\') {
                                        charsOut_2295.push('\\\\');
                                        s_2294.shift();
                                    } else {
                                        charsOut_2295.push('\\');
                                    };
                                }
                            } break;

                            default:
                            {
                                charsOut_2295.push(s_2294[0]);
                                s_2294.shift();
                            }
                            };
                        };
                        const id_2297 = this.registerString(charsOut_2295.join(''));
                        this.declarationsOfStringsMap.set(string_2291, id_2297);
                        return ('String_Strings[' + (id_2297) + ']') + '/*new:' + string_2291.split('*').join('#') + '*/';
                    };
                }
            } break;

            case 5: {
                return 'true'
            } break;

            case 6: {
                return 'false'
            } break;

            case 10: {
                {
                    const expr_2298 = temp_2287[1];
                    const name_2299 = temp_2287[2];
                    {
                        const temp_2300 = expr_2298;
                        switch (temp_2300&&temp_2300[0]) {
                        case 9: {
                            return 'this->' + name_2299 + '_'
                        } break;

                        case 7: {
                            {
                                const id_2301 = temp_2300[1];
                                {
                                    if (id_2301.charAt(0) == id_2301.charAt(0).toUpperCase()) { return id_2301 + '_::' + name_2299 + '_' };
                                    const type_2302 = this.getType(expr_2298);
                                    if ((type_2302 == this.project.typer.typeAny) || (type_2302 == null)) { return this.printExpression(expr_2298) + '->let_(String_fromUTF8z("' + name_2299 + '"))' };
                                    return this.printExpression(expr_2298) + '->' + name_2299 + '_';
                                };
                            }
                        } break;

                        default:
                        return this.printExpression(expr_2298) + '->' + name_2299 + '_'
                        };
                    };
                }
            } break;

            case 11: {
                {
                    const e_2303 = temp_2287[1];
                    const args_2304 = temp_2287[2];
                    return this.printExpression(e_2303) + this.printCallArguments(args_2304);
                }
            } break;

            case 14: {
                {
                    const name_2305 = temp_2287[1];
                    const expr_2306 = temp_2287[2];
                    const args_2307 = temp_2287[3];
                    const defaults_2308 = temp_2287[4];
                    const funcType_2309 = temp_2287[5];
                    {
                        const _currentReturnType_2310 = this.currentReturnType;
                        this.currentReturnType = this.getFunctionReturnType(funcType_2309);
                        const result_2311 = '[&]' + this.printFunctionArguments(args_2307, defaults_2308) + '->' + this.printFunctionReturnType(funcType_2309) + ' ' + this.printBlock(expr_2306);
                        this.currentReturnType = _currentReturnType_2310;
                        return result_2311;
                    };
                }
            } break;

            case 12: {
                {
                    const e_2312 = temp_2287[1];
                    const args_2313 = temp_2287[2];
                    return '' + this.printExpression(e_2312) + '::new_' + this.printCallArguments(args_2313);
                }
            } break;

            case 18: {
                {
                    const el_2314 = temp_2287[1];
                    {
                        if (el_2314.length == 0) { return 'Array_::new_(0)' };
                        return 'Array_from(' + (() => {
                            const result_2315 = [];
                            const value_2316 = el_2314;
                            for (const a of $toIterator(value_2316)) result_2315.push(this.printExpression(a));
                            return result_2315;
                        })().join(', ') + ')';
                    };
                }
            } break;

            case 20: {
                {
                    const op_2317 = temp_2287[1];
                    const postfix_2318 = temp_2287[2];
                    const e_2319 = temp_2287[3];
                    {
                        if (postfix_2318) { return this.printExpression(e_2319) + Token.stringify(op_2317) };
                        return Token.stringify(op_2317) + this.printExpression(e_2319);
                    };
                }
            } break;

            case 21: {
                {
                    const nullable_2320 = temp_2287[1];
                    const othewise_2321 = temp_2287[2];
                    return '((' + this.printExpression(nullable_2320) + ')||(' + this.printExpression(othewise_2321) + '))';
                }
            } break;

            case 16: {
                {
                    const e_2322 = temp_2287[1];
                    return '(' + this.printExpression(e_2322) + ')';
                }
            } break;

            case 13: {
                {
                    const a_2323 = temp_2287[1];
                    const op_2324 = temp_2287[2];
                    const b_2325 = temp_2287[3];
                    {
                        if (op_2324 == 111) {
                            if (this.getType(a_2323) == this.project.typer.typeString) { return 'String_opAdd(' + this.printExpression(a_2323) + ', ' + this.printTypeConverter(this.printExpression(b_2325), this.getType(b_2325), this.project.typer.typeString) + ')' };
                            if (this.getType(b_2325) == this.project.typer.typeString) { return 'String_opAdd(' + this.printTypeConverter(this.printExpression(a_2323), this.getType(a_2323), this.project.typer.typeString) + ', ' + this.printExpression(b_2325) + ')' };
                        };
                        return this.printExpression(a_2323) + ' ' + Token.stringify(op_2324) + ' ' + this.printExpression(b_2325);
                    };
                }
            } break;

            case 23: {
                {
                    const expr_2326 = temp_2287[1];
                    const index_2327 = temp_2287[2];
                    return this.printExpression(expr_2326) + '->get_(' + this.printTypeConverter(this.printExpression(index_2327), this.getType(index_2327), this.project.typer.typeInt) + ')';
                }
            } break;

            case 22: {
                {
                    const econd_2328 = temp_2287[1];
                    const eif_2329 = temp_2287[2];
                    const eelse_2330 = temp_2287[3];
                    {
                        let r_2331 = '';
                        try {
                            r_2331 += '(' + this.printExpression(econd_2328) + ')?';
                            r_2331 += '(' + this.printExpression(eif_2329) + ')';
                            r_2331 += ':' + this.printExpression(eelse_2330);
                            return r_2331;
                        } catch (temp_2332) {
                            if (true) {
                            const error = temp_2332
                            {
                                console.log('If =>', e_2286, error);
                                return r_2331 + '<!-- If => error -->';
                            } } else

                            throw temp_2332;
                        };
                    };
                }
            } break;

            case 33: {
                {
                    const expr_2333 = temp_2287[1];
                    {
                        const e_2334 = this.printExpression(expr_2333);
                        return '(' + e_2334 + ' == nullptr? -1 : ' + e_2334 + '->is_)';
                    };
                }
            } break;

            case 17: {
                {
                    const names_2335 = temp_2287[1];
                    const el_2336 = temp_2287[2];
                    return 'Object_from(' + (() => {
                        const result_2337 = [];
                        const value_2338 = el_2336.length;
                        for (const i of $toIterator(value_2338)) result_2337.push(((names_2335[i]) + ', ' + this.printExpression(el_2336[i])));
                        return result_2337;
                    })().join(', ') + ')';
                }
            } break;

            case 19: {
                {
                    const keys_2339 = temp_2287[1];
                    const values_2340 = temp_2287[2];
                    {
                        if (keys_2339.length == 0) { return 'Map_::new_()' };
                        return 'Map_from(' + (() => {
                            const result_2341 = [];
                            const value_2342 = keys_2339.length;
                            for (const i of $toIterator(value_2342)) result_2341.push('' + this.printExpression(keys_2339[i]) + ', ' + this.printExpression(values_2340[i]) + '');
                            return result_2341;
                        })().join(', ') + ')';
                    };
                }
            } break;

            case 31: {
                {
                    const a_2343 = temp_2287[1];
                    const op_2344 = temp_2287[2];
                    const value_2345 = temp_2287[3];
                    return this.printExpression(a_2343) + ' ' + Token.stringify(op_2344) + '= ' + this.printExpression(value_2345);
                }
            } break;

            case 32: {
                {
                    const kind_2346 = temp_2287[1];
                    const args_2347 = temp_2287[2];
                    const s_2348 = temp_2287[3];
                    {
                        const temp_2349 = kind_2346;
                        switch (temp_2349) {
                        case 0: {
                            return '((' + this.printExpression(args_2347[0]) + ')' + s_2348 + '(' + this.printExpression(args_2347[1]) + '))'
                        } break;

                        case 1: {
                            return s_2348 + this.printCallArguments(args_2347)
                        } break;

                        case 2: {
                            return '(' + s_2348 + '(' + this.printExpression(args_2347[0]) + '))'
                        } break;

                        case 3: {
                            return '((' + this.printExpression(args_2347[1]) + ')' + s_2348 + ')'
                        } break;
                        };
                    };
                }
            } break;

            case 24: {
                {
                    const e_2350 = temp_2287[1];
                    const to_2351 = temp_2287[2];
                    {
                        {
                            const temp_2352 = e_2350;
                            switch (temp_2352&&temp_2352[0]) {
                            case 8: {
                                return 'nullptr'
                            } break;
                            };
                        };
                        return 'reinterpret_cast<' + this.stringifyType(to_2351) + '>(' + this.printExpression(e_2350) + '))';
                    };
                }
            } break;

            case 34: {
                {
                    const typeName = temp_2287[1];
                    const tagName_2353 = temp_2287[2];
                    const tag_2354 = temp_2287[3];
                    const args_2355 = temp_2287[4];
                    return '' + typeName + '_::' + tagName_2353 + '_(' + (() => {
                        const result_2356 = [];
                        const value_2357 = args_2355;
                        for (const a of $toIterator(value_2357)) result_2356.push(this.printExpression(a));
                        return result_2356;
                    })().join(', ') + ')';
                }
            } break;

            case 35: {
                {
                    const expr_2358 = temp_2287[1];
                    const index_2359 = temp_2287[2];
                    return this.printExpression(expr_2358) + '->enum_[' + index_2359 + ']';
                }
            } break;

            default:
            {
                console.error('Unknown expression kind:', e_2286);
                return '<!-- ' + ((() => {
                    const result_2360 = e_2286;
                    if (result_2360 != null) { return result_2360 };
                    return [];
                })())[0] + ' -->';
            }
            };
        };
    }
    GenCxx.spawn = () => { return new GenCxx() };
    var Rename = class {
        constructor(defaults_2363) {
        this.name = defaults_2363 };
    }
    var NiceComplexEnum = class {
        constructor() {
            this.staticMethods = []
            this.staticVars = []
        {
        } };
    }
    var NiceSimpleEnum = class {
        constructor() {
            this.staticMethods = []
            this.staticVars = []
        {
        } };
    }
    var NiceClass = class {
        constructor() {
            this.staticMethods = []
            this.staticVars = []
            this.methods = []
            this.vars = []
            this.property = []
            this.jsRequire = null
            this.jsNative = null
        {
        } };
    }
    var NiceProject = class {
        constructor() {
            this.interfaces = []
            this.classes = []
            this.enumsSimple = []
            this.enumsComplex = []
            this.globalVars = []
            this.globalFuncs = []
            this.globalFunctions = []
            this.externalFunctions = []
            this.init = []
        {
        } };
    }
    var DataHelper = class {
    }
    DataHelper.varName = (v_2495) => {
            const temp_2496 = v_2495;
            switch (temp_2496&&temp_2496[0]) {
            case 23: {
                {
                    const name_2497 = temp_2496[1];
                    return name_2497;
                }
            } break;

            default:
            throw ('varName got not a TVar, but `' + (v_2495) + '`')
            };
        };
    DataHelper.nameOf = (v_2498) => {
            const temp_2499 = v_2498;
            switch (temp_2499&&temp_2499[0]) {
            case 44: {
                {
                    const node_2500 = temp_2499[1];
                    return DataHelper.nameOf(node_2500);
                }
            } break;

            case 26: {
                {
                    const node_2501 = temp_2499[1];
                    return DataHelper.nameOf(node_2501);
                }
            } break;

            case 23: {
                {
                    const name_2502 = temp_2499[1];
                    return name_2502;
                }
            } break;

            case 37: {
                {
                    const t_2503 = temp_2499[1];
                    {
                        {
                            const temp_2504 = t_2503;
                            switch (temp_2504&&temp_2504[0]) {
                            case 1: {
                                {
                                    const name_2505 = temp_2504[1];
                                    return name_2505;
                                }
                            } break;

                            case 2: {
                                {
                                    const name_2506 = temp_2504[1];
                                    return name_2506;
                                }
                            } break;
                            };
                        };
                        throw 'unreachable';
                    };
                }
            } break;

            case 21: {
                {
                    const name_2507 = temp_2499[1];
                    return name_2507;
                }
            } break;

            case 25: {
                {
                    const t_2508 = temp_2499[1];
                    {
                        {
                            const temp_2509 = t_2508;
                            switch (temp_2509&&temp_2509[0]) {
                            case 1: {
                                {
                                    const name_2510 = temp_2509[1];
                                    return name_2510;
                                }
                            } break;

                            case 2: {
                                {
                                    const name_2511 = temp_2509[1];
                                    return name_2511;
                                }
                            } break;
                            };
                        };
                        throw 'unreachable';
                    };
                }
            } break;

            case 8: {
                {
                    const t_2512 = temp_2499[1];
                    {
                        const temp_2513 = t_2512;
                        switch (temp_2513&&temp_2513[0]) {
                        case 1: {
                            {
                                const name_2514 = temp_2513[1];
                                return name_2514;
                            }
                        } break;

                        case 2: {
                            {
                                const name_2515 = temp_2513[1];
                                return name_2515;
                            }
                        } break;
                        };
                    };
                }
            } break;

            case 43: {
                {
                    const field_2516 = temp_2499[1];
                    return DataHelper.nameOf(field_2516);
                }
            } break;

            default:
            throw ('nameOf expected named node, but got `' + (v_2498) + '`')
            };
        };
    DataHelper.asStringAttValue = (a_2517, index_2518) => {
            const temp_2519 = a_2517.values[index_2518];
            switch (temp_2519&&temp_2519[0]) {
            case null: case undefined: {
                throw 'Got null, not a string'
            } break;

            case 0: {
                {
                    const s_2520 = temp_2519[1];
                    return s_2520;
                }
            } break;

            default:
            throw ('Got `' + (a_2517.values[index_2518]) + '`, not a string')
            };
        };
    DataHelper.getLastOfBlock = (block_2521) => {
            const temp_2522 = block_2521;
            switch (temp_2522&&temp_2522[0]) {
            case null: case undefined: {
                throw 'Got null, not a block'
            } break;

            case 11: {
                {
                    const el_2523 = temp_2522[1];
                    return el_2523[el_2523.length - 1];
                }
            } break;

            default:
            throw ('Got `' + (block_2521) + '`, not a block')
            };
        };
    DataHelper.isVoidValue = (block_2524) => {
            {
                const temp_2525 = block_2524;
                switch (temp_2525&&temp_2525[0]) {
                case null: case undefined: {
                    return true
                } break;

                case 15: {
                    return true
                } break;

                case 17: {
                    return true
                } break;

                case 18: {
                    return true
                } break;

                case 23: {
                    return true
                } break;

                case 13: {
                    {
                        const eelse_2526 = temp_2525[3];
                        if (eelse_2526 == null) { return true };
                    }
                } break;

                case 37: {
                    return true
                } break;

                case 25: {
                    return true
                } break;

                case 34: {
                    return true
                } break;

                case 11: {
                    {
                        const el_2527 = temp_2525[1];
                        {
                            if (el_2527.length == 0) { return true };
                            return DataHelper.isVoidValue(el_2527[el_2527.length - 1]);
                        };
                    }
                } break;

                default:
                return false
                };
            };
            return false;
        };
    DataHelper.extractTypeName = (t_2528) => {
            const temp_2529 = t_2528;
            switch (temp_2529&&temp_2529[0]) {
            case 1: {
                {
                    const name_2530 = temp_2529[1];
                    return name_2530;
                }
            } break;

            case 2: {
                {
                    const name_2531 = temp_2529[1];
                    return name_2531;
                }
            } break;

            case null: case undefined: {
                return null
            } break;

            default:
            throw 'Type has no name: ' + t_2528
            };
        };
    DataHelper.getAttribute = (atts_2532, name_2533) => {
            if (atts_2532 != null && atts_2532.length > 0) { for (const att of $toIterator(atts_2532)) {
                if (att.name == name_2533) { return att };
            } };
            return null;
        };
    var NodeData = class {
        constructor(atLine, atColumn, atFile) {
        {
            this.line = atLine;
            this.column = atColumn;
            this.fileName = atFile;
        } };
    }
    var Project = class {
    }
    Project.mapAttributes = new Map()
    Project.mapNames = new Map()
    Project.data = new Map()
    Project.hints = []
    Project.defines = {}
    var Attribute = class {
        constructor(name_2678, values_2679) {
        {
            this.name = name_2678;
            this.values = values_2679;
        } };
    }
    var EnumType = class {
        constructor() {
            this.fieldNames = []
            this.tagBindVars = []
            this.tagBindVarsNames = []
            this.fieldStatic = []
            this.fieldEnumConstructor = []
            this.fieldType = []
        {
        } };
        getIndex(name_2680) {
            let index_2681 = this.fieldNames.indexOf(name_2680);
            {
                let step_2682 = 0;
                const temp_2683 = index_2681 == -1;
                let extend_2684 = null;
                if (step_2682 == 0 && temp_2683 != false) {
                    extend_2684 = this.extend;
                    step_2682 = 1;
                };
                if (step_2682 == 1 && extend_2684 != null) { step_2682 = 2 };
                if (step_2682 == 2) {};
            };
            return index_2681;
        };
    }
    var ClassType = class {
        constructor() {
            this.implement = []
            this.isInterface = false
            this.owner = null
            this.fieldNames = []
            this.fieldRenames = []
            this.fieldStatic = []
            this.fieldNode = []
            this.fieldInitialized = []
            this.protected = []
            this.immutable = []
            this.lateAssignRequired = []
            this.constructor = -1
            this.indexKeyType = null
            this.indexValueType = null
            this.fields = new Map()
            this.genericParams = []
            this.useless = true
            this.nativeBasicType = false
            this.instanceCache = /*ClassInstance*/[4,this,null]
            this.genericCache = []
        {
        } };
        instantiate() { return this.instanceCache };
        instantiateGeneric(params_2685) {
            for (const cached of $toIterator(this.genericCache)) {
                if (cached.length != (params_2685.length + 1)) { continue };
                let found_2686 = true;
                {
                    let i_2687 = 0;
                    let it_2688 = 0;
                    let at_2689 = cached.length - 1;
                    while (it_2688 < at_2689) {
                        i_2687 = it_2688;
                        it_2688++;
                        {
                            if (params_2685[i_2687] != cached[i_2687 + 1]) {
                                found_2686 = false;
                                break;
                            };
                        };
                    };
                };
                if (found_2686) {
                    const result_2690 = cached[0];
                    return result_2690;
                };
            };
            const result_2691 = /*ClassInstance*/[4,this,params_2685];
            const cache = [result_2691];
            for (const param of $toIterator(params_2685)) cache.push(param);
            this.genericCache.push(cache);
            return result_2691;
        };
    }
    var CompilerError = class {
        constructor(except, details, line_2734, column_2735, filename_2736) {
        {
            this.exception = except;
            this.details = ((details == null))? ('') : details;
            this.line = ((line_2734 == null))? (0) : line_2734;
            this.column = ((column_2735 == null))? (0) : column_2735;
            this.fileName = ((filename_2736 == null))? ('') : filename_2736;
        } };
        toString() { return '[' + this.fileName + ':' + this.line + ':' + this.column + ']: ' + this.details };
    }
    var Hint = class {
        constructor(code_2737, details_2738, position_2739) {
        {
            this.code = code_2737;
            this.details = details_2738;
            this.at = position_2739;
        } };
        toString() { return '[' + this.at.fileName + ':' + this.at.line + ':' + this.at.column + ']: Hint #' + this.code + ': ' + this.details };
    }
    var Main = class {
        init() {
            if (Fs.existsSync('hexa.json')) {
                const create = Main.question('Hexa package \'hexa.json\' already exists here. Create new? (no)');
                if ((create.toLowerCase() != 'yes') && (create.toLowerCase() != 'y')) { process_20.exit(1) };
            };
            let currentDirTmp = process.cwd().split(path.sep);
            let packageFileName = currentDirTmp.splice(0, -1).join(path.sep) + path.sep + 'hexa.json';
            let currentDir = currentDirTmp[currentDirTmp.length - 1];
            let name = Main.question(('Enter package name (' + (currentDir) + '): '));
            if (name == '') { name = currentDir };
            let version_2746 = Main.question('Enter package version (1.0.0): ');
            if (version_2746 == '') { version_2746 = '1.0.0' };
            let description = Main.question('Enter package description: ');
            let main = Main.question('Enter main file (main.hexa): ');
            if (main == '') { main = 'main.hexa' };
            const target = {name:'default', generator:'js', output:name, options:[]};
            const generatorstr = Main.question('Enter generator type (JavaScript):\n1. JavaScript\n2. C\n3. Haxe\n');
            if (generatorstr.toUpperCase() == 'C' || generatorstr == '2') { target.generator = 'native' } else if (generatorstr.toUpperCase() == 'HAXE' || generatorstr == '3') { target.generator = 'haxe' } else {
                target.output += '.js';
                const option = Main.question('Select standard library (nodejs):\n1. no library\n2. nodejs\n3. browser\n');
                {
                    const temp_2747 = option;
                    switch (temp_2747) {
                    case '1': {
                        {
                        }
                    } break;

                    case '2': {
                        target.options.push('nodejs')
                    } break;

                    case '3': {
                        target.options.push('browser')
                    } break;

                    default:
                    target.options.push('nodejs')
                    };
                };
            };
            while (!(main.endsWith('.hexa'))) {
                process_20.stdout.write('Wrong file name. Must end with \'.hexa\'.\n');
                main = Main.question('Enter main file (main.hexa): ');
            };
            const author = Main.question('Enter package author name: ');
            const license = Main.question('Enter license: ');
            const pack = {name:name, version:version_2746, description:description, author:author, license:license, targets:[target], files:[main]};
            const extras = [];
            let addGit = false;
            if (Fs.existsSync('.git')) { if (!Fs.existsSync('.gitignore') || !Fs.existsSync('.gitattributes')) { if (['y', 'yes', ''].includes(Main.question('Create additional git files? (.gitignore, .gitattributes) (yes)').toLowerCase().trim())) {
                if (!Fs.existsSync('.gitignore')) { extras.push('.gitignore') };
                if (!Fs.existsSync('.gitattributes')) { extras.push('.gitattributes') };
                addGit = true;
            } } };
            const addMain = Fs.existsSync(main) == false;
            if (addMain) { extras.push(main) };
            const packageStr = JSON.stringify(pack, (null), '\t').split('\r\n').join('\n').split('\n').join('\r\n');
            const extrasStr = extras.length > (0)? ('\nAnd \'' + extras.join('\', \'') + '\'') : '';
            const answ = Main.question(('About to write to: ' + (packageFileName) + ':\n' + (packageStr) + '' + (extrasStr) + '\nIs this ok? (yes)'));
            if ((answ != '') && (answ.toLowerCase() != 'yes') && (answ.toLowerCase() != 'y')) {
                console.log('Exiting without changes');
                process_20.exit(1);
            };
            Fs.writeFileSync('hexa.json', packageStr + '\r\n');
            if ((addMain) && (!Fs.existsSync(main))) { Fs.writeFileSync(main, 'console.log("Thank you for choosing Hexa")') };
            if ((addGit) && (!Fs.existsSync('.gitattributes'))) { Fs.writeFileSync('.gitattributes', ['# Auto detect text files and perform LF normalization', '* text=auto', ''].join('\r\n')) };
            if ((addGit) && (!Fs.existsSync('.gitignore'))) { Fs.writeFileSync('.gitignore', ['# Mac & Win', '*~', '._*', '*DS_Store*', '.DS_Store', '.DS_Store?', '.Spotlight-V100', '.Trashes', 'ehthumbs.db', 'Thumbs.db', '*Thumbs.db', '__MACOSX', '', '# Custom', '*.map', target.output, 'node_modules', ''].join('\r\n')) };
            process_20.stdout.write('Hexa package initialized!');
        };
        processFile(target_2748) {
            const content = Fs.readFileSync(target_2748);
            const tokens = Lexer.tokenize(content, target_2748);
            if (tokens.length > 0) { this.lines += tokens.line[tokens.length - 1] };
            const parsed = Parser.parseNodes(tokens);
            return parsed;
        };
        repl() {
            const js = this.processFile(__dirname + '/library/js/js.hexa');
            const nodejs = this.processFile(__dirname + '/library/nodejs/nodejs.hexa');
            const lines = [];
            let lines_2749 = [];
            while (true) {
                let line = Main.question('> ');
                if (line.length == 0) { continue };
                lines_2749.push(line);
                lines_2749 = [line];
                try {
                    let code = '"use strict"\r\n';
                    try {
                        const content_2752 = lines_2749.join('\n');
                        const tokens_2753 = Lexer.tokenize(Buffer.from(content_2752), 'REPL');
                        const parser = Parser.toNode(Parser.parseNodes(tokens_2753));
                        let collected = /*TBlock*/[11,[js, nodejs, parser]];
                        if (parser == null) { continue };
                    } catch (temp_2751) {
                        if (true) {
                        const e = temp_2751
                        {
                            lines_2749.pop();
                            console.error('\x1b[31mCompilation Error: ' + e, '\x1b[0m');
                            continue;
                        } } else

                        throw temp_2751;
                    };
                    const result = eval(code);
                    if (result == null) { console.log('\x1b[90m' + result, '\x1b[0m') } else if (result == true) { console.log('\x1b[33m' + result, '\x1b[0m') } else if (result == false) { console.log('\x1b[33m' + result, '\x1b[0m') } else console.log(result);
                } catch (temp_2750) {
                    if (true) {
                    const e = temp_2750
                    {
                        console.error('Error: ' + e);
                    } } else

                    throw temp_2750;
                };
            };
        };
        processFiles(targets) {
            let res = [];
            if (false) {
                let targets_2754;
                for (const target of $toIterator(targets_2754)) {
                };
                targets_2754.pop();
            };
            for (const target of $toIterator(targets)) {
                if (!Fs.existsSync(target)) {
                    console.log(('No such source file on disk `' + (target) + '`'));
                    continue;
                };
                try { res.push(this.processFile(target)) } catch (temp_2755) {
                    if (true) {
                    const e = temp_2755
                    {
                        console.log(e.toString());
                    } } else

                    throw temp_2755;
                };
            };
            if (targets.length != res.length) {
                console.log('[Stopped on errors]');
                process_20.exit(1);
            };
            return res;
        };
        incorrect(what) {
            process_20.stdout.write(('Incorrect package file! Field `' + (what) + '` does not exists\n'));
            process_20.exit(1);
        };
        loadPackage(filename, target_2756) {
            const pack_2757 = JSON.parse(Fs.readFileSync(path.resolve(filename)).toString('utf8').split('\r\n').join('\n'));
            if (pack_2757.name == null) { this.incorrect('name') };
            if (pack_2757.targets == null) { this.incorrect('targets') };
            {
                let step = 0;
                const define = pack_2757.define;
                if (step == 0 && define != null) { step = 1 };
                if (step == 1) { for (const key of $toIterator(Reflect.ownKeys(define))) {
                    if (!Reflect.has(Project.defines, key)) { Reflect.set(Project.defines, key, Reflect.get(define, key)) };
                } };
            };
            const t = (() => {
                {
                    let t_2758 = 0;
                    let it = 0;
                    let at = pack_2757.targets.length;
                    while (it < at) {
                        t_2758 = it;
                        it++;
                        {
                            if (pack_2757.targets[t_2758].name == target_2756) {
                                this.targetIndex = t_2758;
                                return pack_2757.targets[t_2758];
                            };
                        };
                    };
                };
                process_20.stdout.write(('Cannot find `' + (target_2756) + '` target in package file\n'));
                process_20.exit(1);
            })();
            const generator = availableGenerators(t.generator);
            if (generator == null) {
                process_20.stdout.write(('Generator `' + (t.generator) + '` not available or not supported by this compiler version\n'));
                process_20.exit(1);
            };
            if (pack_2757.files == null) { pack_2757.files = [] };
            if (pack_2757.noLib == true) {} else {
                setLibrary(generator, t.options, pack_2757.files, Project.defines);
                {
                    let step_2759 = 0;
                    const extra = pack_2757.targets[this.targetIndex].files;
                    if (step_2759 == 0 && extra != null) { step_2759 = 1 };
                    if (step_2759 == 1) { for (const file of $toIterator(extra)) pack_2757.files.push(file) };
                };
            };
            if (pack_2757.addLicenseNoticeToOutput == null) { pack_2757.addLicenseNoticeToOutput = true };
            return pack_2757;
        };
        constructor() {
            this.lines = 0
            this.targetName = 'default'
            this.targetIndex = 0
        {
            const begin = Date.now();
            Lexer.init();
            if (process_20.argv[0].endsWith('node.exe') || process_20.argv[0].endsWith('node')) {
                process_20.argv.shift();
                process_20.argv.shift();
            } else if (process_20.argv[0].endsWith('.exe')) { process_20.argv.shift() };
            const defines = {};
            while (process_20.argv[0] == '--define') {
                if (process_20.argv.length < 2) {
                    console.log('Usage: `--define name=value`');
                    process_20.exit(1);
                };
                process_20.argv.shift();
                const kv = process_20.argv.shift().split('=');
                if (kv.length < 2) {
                    console.log('Usage: `--define name=value`');
                    process_20.exit(1);
                };
                const k = kv[0];
                const v = JSON.parse(kv[1]);
                defines[k] = v;
            };
            Project.defines = defines;
            if (process_20.argv[0] == '--syntax-linter') {
                if (process_20.argv.length < 2) { console.log('Usage: `hexa --syntax-linter file.hexa`') } else {
                    const file = process_20.argv[1];
                    try {
                        const content_2761 = Fs.readFileSync(file);
                        try {
                            const tokens_2763 = Lexer.tokenize(content_2761, file);
                            try { const parser_2765 = Parser.parseNodes(tokens_2763) } catch (temp_2764) {
                                if (true) {
                                const e = temp_2764
                                console.log(('' + (e) + '')) } else

                                throw temp_2764;
                            };
                        } catch (temp_2762) {
                            if (true) {
                            const e = temp_2762
                            console.log(('' + (e) + '')) } else

                            throw temp_2762;
                        };
                    } catch (temp_2760) {
                        if (true) {
                        const e = temp_2760
                        console.log(('ERROR: Unable to open file ' + (file) + '')) } else

                        throw temp_2760;
                    };
                };
                process_20.exit(0);
            };
            const beginTests = Date.now();
            TestLexer.test();
            TestParser.test();
            TestTyper.test();
            console.log(('[Tests finished in ' + (Date.now() - beginTests) + ' ms]'));
            const ignoreArguments = (from) => {
                if (from == process_20.argv.length) { return };
                const args = [];
                const count = process_20.argv.length - from;
                let i = 0;
                while (i < count) args.push(process_20.argv[i++ + from]);
                console.log('Arguments `' + args.join('`, `') + '` ignored');
            };
            if (process_20.argv[0] == '--version') {
                console.log(('Hexa ' + (version) + ' on node.js ') + process_20.versions.node);
                ignoreArguments(1);
                process_20.exit(0);
            } else if (process_20.argv[0] == '--help') {
                console.log('Usage: `hexa project.json` or `hexa init`');
                ignoreArguments(3);
                process_20.exit(0);
            } else if (process_20.argv[0] == null) {
                this.repl();
                process_20.exit(0);
            } else if (process_20.argv[0] == 'init') {
                this.init();
                ignoreArguments(3);
                process_20.exit(0);
            };
            let currentFile = path.resolve(process_20.argv[0]);
            let currentParsedFile = path.parse(currentFile);
            let input = (null);
            let packageFolder = currentParsedFile.dir;
            if (currentParsedFile.ext == '.json') {
                process.argv.shift();
                if (process.argv[0] == '--target') {
                    process.argv.shift();
                    this.targetName = (() => {
                        const result_2766 = process.argv[0];
                        if (result_2766 != null) { return result_2766 };
                        return 'default';
                    })();
                };
                input = this.loadPackage(currentFile, this.targetName);
                ignoreArguments(0);
                if (this.targetName != 'default') { console.log(('[Building ' + (input.name) + ' - ' + (this.targetName) + ']')) } else console.log(('[Building ' + (input.name) + ']'));
            } else if ((Fs.existsSync(currentFile)) && (Fs.lstatSync(currentFile).isDirectory())) {
                ignoreArguments(3);
                input = this.loadPackage(currentFile + path.sep + 'hexa.json', this.targetName);
                packageFolder = currentFile;
            } else if (currentParsedFile.ext == '.hexa') { return } else {
                console.error(('Unknown command: ' + (process_20.argv[0]) + ''));
                console.error('Try --help');
                process_20.exit(1);
                return;
            };
            const beginParsing = Date.now();
            let files = [];
            if (input.files != null) {
                const fileList = input.files.map((file_2767) => {
                    if (file_2767.startsWith('/') || file_2767.charAt(1) == ':') { return path.resolve(file_2767) };
                    return path.resolve(packageFolder + path.sep + file_2767);
                });
                files = this.processFiles(fileList);
            };
            console.log(('[Parsing finished in ' + (Date.now() - beginParsing) + ' ms]'));
            const beginTyper = Date.now();
            const typer = new Typer();
            try { typer.fillFiles(files) } catch (temp_2768) {
                if (true) {
                const e = temp_2768
                {
                    console.log(e.toString());
                    process_20.exit(1);
                } } else

                throw temp_2768;
            };
            console.log(('[Typer finished in ' + (Date.now() - beginTyper) + ' ms]'));
            const normalizer = new Normalizer();
            const generators = new Map();
            const registerTarget = (name_2769, generator_2770) => {
                {
                    let step_2771 = 0;
                    const generator_2772 = generators.get(name_2769);
                    if (step_2771 == 0 && generator_2772 != null) { step_2771 = 1 };
                    if (step_2771 == 1) { console.log(('Note: generator `' + (name_2769) + '` was overridden')) };
                };
                generators.set(name_2769, generator_2770);
            };
            registerTarget('js', GenJs.spawn);
            registerTarget('native', GenCxx.spawn);
            {
                let step_2773 = 0;
                const generatorName = input.targets[this.targetIndex].generator;
                if (step_2773 == 0 && generatorName != null) { step_2773 = 1 };
                if (step_2773 == 1) {
                    let step_2774 = 0;
                    const generatorSpawner = generators.get(generatorName);
                    if (step_2774 == 0 && generatorSpawner != null) { step_2774 = 1 };
                    if (step_2774 == 1) {
                        const generator_2775 = generatorSpawner();
                        if (input.targets[this.targetIndex].output == null) { this.incorrect('targets[' + this.targetIndex + '].output') };
                        const target_2776 = packageFolder + path.sep + path.parse(input.targets[this.targetIndex].output).name + generator_2775.extension;
                        const target_2777 = path.join(packageFolder, input.targets[this.targetIndex].output);
                        normalizer.keywords = generator_2775.reserved;
                        normalizer.collected = files;
                        normalizer.nativeEnums = generator_2775.nativeEnums;
                        normalizer.reservedGlobals = (() => {
                            const result_2778 = generator_2775.reservedGlobals;
                            if (result_2778 != null) { return result_2778 };
                            return normalizer.reservedGlobals;
                        })();
                        normalizer.package = input;
                        {
                            let step_2779 = 0;
                            const randomSeed = input.randomSeed;
                            if (step_2779 == 0 && randomSeed != null) { step_2779 = 1 };
                            if (step_2779 == 1) { normalizer.id = randomSeed };
                        };
                        {
                            let step_2780 = 0;
                            const globalAccessor = generator_2775.globalAccessor;
                            if (step_2780 == 0 && globalAccessor != null) { step_2780 = 1 };
                            if (step_2780 == 1) { normalizer.globalAccessor = globalAccessor };
                        };
                        normalizer.typer = typer;
                        const beginNormalizer = Date.now();
                        const normal = normalizer.normalize();
                        console.log(('[Normalizer finished in ' + (Date.now() - beginNormalizer) + ' ms]'));
                        const beginGenerator = Date.now();
                        for (const hint of $toIterator(Project.hints)) {
                            console.log(hint.toString());
                        };
                        const outs = generator_2775.perform(normal);
                        console.log(('[Generator finished in ' + (Date.now() - beginGenerator) + ' ms]'));
                        Fs.writeFileSync(target_2777, outs);
                    } else {
                        console.log(('Generator for `' + (generatorName) + '` is not registered.'));
                        process_20.exit(1);
                    };
                } else {
                    console.log('Generator is not defined or unknown. Is there `target.generator` field in `hexa.json`?');
                    process_20.exit(1);
                };
            };
            const delta = Date.now() - begin;
            const lps = Math.round(this.lines / (delta / 1000));
            console.log(('[Finished in ' + (delta) + ' ms, ' + (this.lines) + ' lines, ' + (lps) + ' lines per second]'));
            process_20.stdout.once('drain', () => { process_20.exit(0) });
            process_20.stdout.write('');
        } };
    }
    Main.question = (query) => {
            process_20.stdout.write(query);
            let bufsize = 256;
            let buf = new Buffer(bufsize);
            let bytesRead = 0;
            try { bytesRead = Fs.readSync(process_20.stdin.fd, buf, 0, bufsize) } catch (temp) {
                if (true) {
                const e = temp
                {
                    const e = e;
                    if (e.code == 'EAGAIN') { return 'ERROR: interactive stdin input not supported.' };
                    if (e.code == 'EOF') { return '' };
                    throw e;
                } } else

                throw temp;
            };
            if (bytesRead == 0) { return '' };
            const answer = buf.toString('utf8', 0, bytesRead).trim();
            return answer;
        };
    var Normalizer = class {
        constructor() {
            this.project = new NiceProject()
            this.keywords = []
            this.reservedGlobals = []
            this.collected = []
            this.nativeEnums = false
            this.globalAccessor = '<!-- global -->'
            this.scopes = [new Map()]
            this.globals = []
            this.id = Math.round(Math.random() * 123.0)
            this.parentNames = new Map()
        {
        } };
        normalize() {
            for (const global of $toIterator(this.reservedGlobals)) this.addToScope(global);
            for (const file of $toIterator(this.collected)) for (const e of $toIterator(file)) {
                const temp = e;
                switch (temp&&temp[0]) {
                case 35: {
                    {
                        const path_105 = temp[1];
                        const el = temp[2];
                        for (const e of $toIterator(el)) {
                            const temp_106 = e;
                            switch (temp_106&&temp_106[0]) {
                            case 25: {
                                {
                                    const t = temp_106[1];
                                    const ext = temp_106[2];
                                    const impl = temp_106[3];
                                    const fields = temp_106[4];
                                    const external = temp_106[5];
                                    this.renameClassFields(fields);
                                }
                            } break;

                            case 37: {
                                {
                                    const t_107 = temp_106[1];
                                    const fields_108 = temp_106[2];
                                    const valuesType = temp_106[3];
                                    this.renameClassFields(fields_108);
                                }
                            } break;

                            case 23: {
                                {
                                    const name_109 = temp_106[1];
                                    const t_110 = temp_106[2];
                                    const expr = temp_106[3];
                                    const const_111 = temp_106[4];
                                    const external_112 = temp_106[5];
                                    {
                                        const atts = Project.mapAttributes.get(e);
                                        const native = this.getAtt(atts, 'native');
                                        if (native != null) {
                                            const temp_113 = native.values[0];
                                            switch (temp_113&&temp_113[0]) {
                                            case 0: {
                                                {
                                                    const s = temp_113[1];
                                                    this.uniqueNative(s, e);
                                                }
                                            } break;

                                            default:
                                            throw '@native takes string as argument'
                                            };
                                        } else this.unique(name_109, e);
                                    };
                                }
                            } break;

                            case 21: {
                                {
                                    const name_114 = temp_106[1];
                                    const expr_115 = temp_106[2];
                                    const vars = temp_106[3];
                                    const rettype = temp_106[4];
                                    const external_116 = temp_106[5];
                                    {
                                        let step = 0;
                                        const name_117 = name_114;
                                        if (step == 0 && name_117 != null) { step = 1 };
                                        if (step == 1) { this.unique(name_117, e) };
                                    };
                                }
                            } break;
                            };
                        };
                    }
                } break;
                };
            };
            const init = [];
            for (const file of $toIterator(this.collected)) {
                const initial = [];
                this.pushScope();
                for (const e of $toIterator(file)) {
                    const temp_118 = e;
                    switch (temp_118&&temp_118[0]) {
                    case 35: {
                        {
                            const path_119 = temp_118[1];
                            const el_120 = temp_118[2];
                            {
                                this.pushScope();
                                for (const e of $toIterator(el_120)) {
                                    const temp_121 = e;
                                    switch (temp_121&&temp_121[0]) {
                                    case 21: {
                                        {
                                            let step_122 = 0;
                                            const s_123 = this.nodeToStatement(e);
                                            if (step_122 == 0 && s_123 != null) { step_122 = 1 };
                                            if (step_122 == 1) { this.project.globalFuncs.push(s_123) };
                                        }
                                    } break;

                                    case 23: {
                                        {
                                            let step_124 = 0;
                                            const s_125 = this.nodeToStatement(e);
                                            if (step_124 == 0 && s_125 != null) { step_124 = 1 };
                                            if (step_124 == 1) { this.project.globalVars.push(s_125) };
                                        }
                                    } break;

                                    case 24: {
                                        {
                                            const vars_126 = temp_121[1];
                                            for (const v of $toIterator(vars_126)) {
                                                let step_127 = 0;
                                                const s_128 = this.nodeToStatement(v);
                                                if (step_127 == 0 && s_128 != null) { step_127 = 1 };
                                                if (step_127 == 1) { this.project.globalVars.push(s_128) };
                                            };
                                        }
                                    } break;

                                    default:
                                    this.fillStatement(e, path_119)
                                    };
                                };
                                this.popScope();
                            };
                        }
                    } break;

                    default:
                    {
                        const statement = this.fillStatement(e, null);
                        {
                            const temp_129 = statement;
                            switch (temp_129&&temp_129[0]) {
                            case null: case undefined: {
                                {
                                }
                            } break;

                            case 1: {
                                {
                                    const el_130 = temp_129[1];
                                    if (el_130.length > 0) { initial.push(statement) };
                                }
                            } break;

                            default:
                            initial.push(statement)
                            };
                        };
                    }
                    };
                };
                this.popScope();
                if (initial.length > 0) { init.push(/*Block*/[1,initial]) };
            };
            this.project.init.push(/*Block*/[1,init]);
            if (this.project.init.length > 1) { throw 'too many inits' };
            this.project.package = this.package;
            this.project.typer = this.typer;
            this.project.classes.sort((a_131, b_132) => {
                if (a_131.external == true) { return -1 };
                if (a_131.extend == null) { return 0 };
                return 1;
            });
            return this.project;
        };
        nodeToExpression(e) {
            if (e == null) { return null };
            {
                const temp_133 = e;
                switch (temp_133&&temp_133[0]) {
                case 0: {
                    {
                        const v_134 = temp_133[1];
                        return /*String*/[2,v_134];
                    }
                } break;

                case 5: {
                    {
                        const v_135 = temp_133[1];
                        return /*Int*/[3,v_135];
                    }
                } break;

                case 6: {
                    {
                        const v_136 = temp_133[1];
                        return /*Float*/[4,v_136];
                    }
                } break;

                case 2: {
                    {
                        const v_137 = temp_133[1];
                        {
                            if (v_137) { return /*True*/[5] };
                            return /*False*/[6];
                        };
                    }
                } break;

                case 7: {
                    return /*Null*/[8]
                } break;

                case 48: {
                    {
                        const t_138 = temp_133[1];
                        {
                            const temp_139 = t_138;
                            switch (temp_139&&temp_139[0]) {
                            case 1: {
                                {
                                    const name_140 = temp_139[1];
                                    return /*Ident*/[7,(() => {
                                        const result = this.parentNames.get(this.typer.parents.get(e));
                                        if (result != null) { return result };
                                        return name_140;
                                    })()];
                                }
                            } break;
                            };
                        };
                    }
                } break;

                case 1: {
                    {
                        const name_141 = temp_133[1];
                        {
                            let source = this.typer.parents.get(e);
                            {
                                const temp_142 = source;
                                switch (temp_142&&temp_142[0]) {
                                case null: case undefined: {
                                    throw ('Unmapped `' + (e) + '` of name `' + (name_141) + '` ') + JSON.stringify(Project.data.get(e))
                                } break;

                                case 23: {
                                    {
                                        const name_143 = temp_142[1];
                                        {
                                            let step_144 = 0;
                                            const map = this.typer.parents.get(source);
                                            if (step_144 == 0 && map != null) { step_144 = 1 };
                                            if (step_144 == 1) {
                                                const temp_145 = map;
                                                switch (temp_145&&temp_145[0]) {
                                                case 35: {
                                                    {
                                                        const path_146 = temp_145[1];
                                                        {
                                                            const name_147 = (() => {
                                                                const result_148 = this.parentNames.get(source);
                                                                if (result_148 != null) { return result_148 };
                                                                return name_143;
                                                            })();
                                                            return /*Ident*/[7,this.globalAccessor + name_147,this.typer.types.get(source)];
                                                        };
                                                    }
                                                } break;

                                                default:
                                                return /*Dot*/[10,/*This*/[9],name_143,this.typer.types.get(e)]
                                                };
                                            };
                                        };
                                    }
                                } break;

                                case 21: {
                                    {
                                        const name_149 = temp_142[1];
                                        {
                                            let step_150 = 0;
                                            const map_151 = this.typer.parents.get(source);
                                            if (step_150 == 0 && map_151 != null) { step_150 = 1 };
                                            if (step_150 == 1) {
                                                const temp_152 = map_151;
                                                switch (temp_152&&temp_152[0]) {
                                                case 35: {
                                                    {
                                                        const path_153 = temp_152[1];
                                                        return /*Ident*/[7,this.globalAccessor + name_149];
                                                    }
                                                } break;

                                                default:
                                                return /*Dot*/[10,/*This*/[9],name_149,this.typer.types.get(e)]
                                                };
                                            };
                                        };
                                    }
                                } break;

                                case 43: {
                                    {
                                        const f_154 = temp_142[1];
                                        {
                                            const staticSource = this.typer.parents.get(source);
                                            {
                                                const temp_155 = staticSource;
                                                switch (temp_155&&temp_155[0]) {
                                                case 25: {
                                                    {
                                                        const t_156 = temp_155[1];
                                                        return /*Dot*/[10,/*Ident*/[7,DataHelper.extractTypeName(t_156)],this.getClassDotField(staticSource, name_141),this.typer.types.get(e)];
                                                    }
                                                } break;

                                                case 37: {
                                                    {
                                                        const t_157 = temp_155[1];
                                                        return /*Dot*/[10,/*Ident*/[7,DataHelper.extractTypeName(t_157)],this.getClassDotField(staticSource, name_141),this.typer.types.get(e)];
                                                    }
                                                } break;

                                                default:
                                                throw ('staticSource is ' + (staticSource) + ' for ' + (name_141) + '')
                                                };
                                            };
                                        };
                                    }
                                } break;
                                };
                            };
                            return /*Ident*/[7,(() => {
                                const result_158 = this.parentNames.get(source);
                                if (result_158 != null) { return result_158 };
                                return name_141;
                            })(),this.typer.types.get(e)];
                        };
                    }
                } break;

                case 28: {
                    {
                        const expr_159 = temp_133[1];
                        const name_160 = temp_133[2];
                        {
                            const parent = this.typer.parents.get(expr_159);
                            const hasNoSideEffects = (expr_161) => { return true };
                            if ((name_160 == 'length') && (false)) {
                                const temp_162 = expr_159;
                                switch (temp_162&&temp_162[0]) {
                                case 31: {
                                    {
                                        const el_163 = temp_162[1];
                                        return /*Int*/[3,el_163.length];
                                    }
                                } break;

                                case 0: {
                                    {
                                        const s_164 = temp_162[1];
                                        return /*Int*/[3,s_164.length];
                                    }
                                } break;

                                case 1: {
                                    {
                                        const name_165 = temp_162[1];
                                        {
                                            const temp_166 = parent;
                                            switch (temp_166&&temp_166[0]) {
                                            case 23: {
                                                {
                                                    const name_167 = temp_166[1];
                                                    const t_168 = temp_166[2];
                                                    const expr_169 = temp_166[3];
                                                    const const_170 = temp_166[4];
                                                    if (const_170) {
                                                        const temp_171 = expr_169;
                                                        switch (temp_171&&temp_171[0]) {
                                                        case 0: {
                                                            {
                                                                const s_172 = temp_171[1];
                                                                return /*Int*/[3,s_172.length];
                                                            }
                                                        } break;
                                                        };
                                                    };
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;
                                };
                            };
                            {
                                const temp_173 = parent;
                                switch (temp_173&&temp_173[0]) {
                                case 37: {
                                    {
                                        const t_174 = temp_173[1];
                                        const fields_175 = temp_173[2];
                                        const valuesType_176 = temp_173[3];
                                        {
                                            {
                                                let step_177 = 0;
                                                const temp_178 = !this.nativeEnums;
                                                let vt = null;
                                                if (step_177 == 0 && temp_178 != false) {
                                                    vt = valuesType_176;
                                                    step_177 = 1;
                                                };
                                                let tag = null;
                                                if (step_177 == 1 && vt != null) {
                                                    tag = this.getTag(parent, name_160);
                                                    step_177 = 2;
                                                };
                                                if (step_177 == 2 && tag != null) { step_177 = 3 };
                                                if (step_177 == 3) { return tag };
                                            };
                                            return /*Dot*/[10,this.nodeToExpression(expr_159),(() => {
                                                const result_179 = this.getClassDotField(parent, name_160);
                                                if (result_179 != null) { return result_179 };
                                                return name_160;
                                            })(),this.typer.types.get(e)];
                                        };
                                    }
                                } break;

                                case 25: {
                                    return /*Dot*/[10,this.nodeToExpression(expr_159),(() => {
                                        const result_180 = this.getClassDotField(parent, name_160);
                                        if (result_180 != null) { return result_180 };
                                        return name_160;
                                    })(),this.typer.types.get(e)]
                                } break;
                                };
                            };
                            {
                                let step_181 = 0;
                                const type = this.typer.types.get(expr_159);
                                if (step_181 == 0 && type != null) { step_181 = 1 };
                                if (step_181 == 1) {
                                    const temp_182 = type;
                                    switch (temp_182&&temp_182[0]) {
                                    case 4: {
                                        {
                                            const type_183 = temp_182[1];
                                            {
                                                const renamed = type_183.fieldRenames[type_183.fieldNames.indexOf(name_160)];
                                                {
                                                    let step_184 = 0;
                                                    const rename = renamed;
                                                    if (step_184 == 0 && rename != null) { step_184 = 1 };
                                                    if (step_184 == 1) { return /*Dot*/[10,this.nodeToExpression(expr_159),rename,this.typer.types.get(e)] };
                                                };
                                            };
                                        }
                                    } break;
                                    };
                                };
                            };
                            return /*Dot*/[10,this.nodeToExpression(expr_159),name_160,this.typer.types.get(e)];
                        };
                    }
                } break;

                case 29: {
                    {
                        const expr_185 = temp_133[1];
                        const name_186 = temp_133[2];
                        {
                            const parent_187 = this.typer.parents.get(expr_185);
                            {
                                const temp_188 = parent_187;
                                switch (temp_188&&temp_188[0]) {
                                case 37: {
                                    {
                                        const t_189 = temp_188[1];
                                        const fields_190 = temp_188[2];
                                        const valuesType_191 = temp_188[3];
                                        {
                                            {
                                                let step_192 = 0;
                                                const temp_193 = !this.nativeEnums;
                                                let vt_194 = null;
                                                if (step_192 == 0 && temp_193 != false) {
                                                    vt_194 = valuesType_191;
                                                    step_192 = 1;
                                                };
                                                let tag_195 = null;
                                                if (step_192 == 1 && vt_194 != null) {
                                                    tag_195 = this.getTag(parent_187, name_186);
                                                    step_192 = 2;
                                                };
                                                if (step_192 == 2 && tag_195 != null) { step_192 = 3 };
                                                if (step_192 == 3) { return tag_195 };
                                            };
                                            {
                                                let step_196 = 0;
                                                const temp_197 = !this.nativeEnums;
                                                let temp_198 = null;
                                                if (step_196 == 0 && temp_197 != false) {
                                                    temp_198 = valuesType_191 == null;
                                                    step_196 = 1;
                                                };
                                                let tag_199 = null;
                                                if (step_196 == 1 && temp_198 != false) {
                                                    tag_199 = this.getTag(parent_187, name_186);
                                                    step_196 = 2;
                                                };
                                                if (step_196 == 2 && tag_199 != null) { step_196 = 3 };
                                                if (step_196 == 3) { return /*Enum*/[34,DataHelper.extractTypeName(t_189),name_186,tag_199,[]] };
                                            };
                                            return /*Dot*/[10,this.nodeToExpression(expr_185),(() => {
                                                const result_200 = this.getClassDotField(parent_187, name_186);
                                                if (result_200 != null) { return result_200 };
                                                return name_186;
                                            })()];
                                        };
                                    }
                                } break;

                                case 25: {
                                    return /*Dot*/[10,this.nodeToExpression(expr_185),(() => {
                                        const result_201 = this.getClassDotField(parent_187, name_186);
                                        if (result_201 != null) { return result_201 };
                                        return name_186;
                                    })()]
                                } break;
                                };
                            };
                            return /*Dot*/[10,this.nodeToExpression(expr_185),name_186];
                        };
                    }
                } break;

                case 12: {
                    {
                        const expr_202 = temp_133[1];
                        const args = temp_133[2];
                        const argNames = temp_133[3];
                        {
                            if (args.length == 1) {
                                const temp_203 = expr_202;
                                switch (temp_203&&temp_203[0]) {
                                case 28: {
                                    {
                                        const expr_204 = temp_203[1];
                                        const name_205 = temp_203[2];
                                        if (name_205 == 'charCodeAt') {
                                            const temp_206 = expr_204;
                                            switch (temp_206&&temp_206[0]) {
                                            case 0: {
                                                {
                                                    const s_207 = temp_206[1];
                                                    if (s_207.indexOf('\\') == -1) {
                                                        const temp_208 = args[0];
                                                        switch (temp_208&&temp_208[0]) {
                                                        case 5: {
                                                            {
                                                                const v_209 = temp_208[1];
                                                                {
                                                                    const i = parseInt(v_209);
                                                                    if ((i < s_207.length) && (i > -1)) { return /*Int*/[3,s_207.charCodeAt(i)] };
                                                                };
                                                            }
                                                        } break;
                                                        };
                                                    };
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;
                                };
                            };
                            const a_210 = [];
                            for (const arg of $toIterator(args)) {
                                a_210.push(this.nodeToExpression(arg));
                            };
                            if (!this.nativeEnums) {
                                const temp_211 = expr_202;
                                switch (temp_211&&temp_211[0]) {
                                case 29: {
                                    {
                                        const expr_212 = temp_211[1];
                                        const name_213 = temp_211[2];
                                        {
                                            const parent_214 = this.typer.parents.get(expr_212);
                                            {
                                                const temp_215 = parent_214;
                                                switch (temp_215&&temp_215[0]) {
                                                case 37: {
                                                    {
                                                        const t_216 = temp_215[1];
                                                        const fields_217 = temp_215[2];
                                                        const valuesType_218 = temp_215[3];
                                                        {
                                                            let step_219 = 0;
                                                            const tag_220 = this.getTag(parent_214, name_213);
                                                            if (step_219 == 0 && tag_220 != null) { step_219 = 1 };
                                                            if (step_219 == 1) { return /*Enum*/[34,DataHelper.extractTypeName(t_216),name_213,tag_220,a_210] };
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                        };
                                    }
                                } break;
                                };
                            };
                            const atts_221 = Project.mapAttributes.get(this.typer.parents.get(expr_202));
                            const infix = this.getAtt(atts_221, 'infix');
                            if (infix != null) {
                                const temp_222 = infix.values[0];
                                switch (temp_222&&temp_222[0]) {
                                case 0: {
                                    {
                                        const s_223 = temp_222[1];
                                        return /*NativeOperator*/[32,0,a_210,s_223];
                                    }
                                } break;

                                default:
                                throw '@infix takes string as argument'
                                };
                            };
                            const operator = this.getAtt(atts_221, 'operator');
                            if (operator != null) {
                                const temp_224 = operator.values[0];
                                switch (temp_224&&temp_224[0]) {
                                case 0: {
                                    {
                                        const s_225 = temp_224[1];
                                        return /*NativeOperator*/[32,1,a_210,s_225];
                                    }
                                } break;

                                default:
                                throw '@operator takes string as argument'
                                };
                            };
                            const v_226 = this.nodeToExpression(expr_202);
                            return /*Call*/[11,v_226,a_210,this.typer.types.get(e)];
                        };
                    }
                } break;

                case 9: {
                    {
                        const a_227 = temp_133[1];
                        const op = temp_133[2];
                        const b_228 = temp_133[3];
                        {
                            const ea = this.nodeToExpression(a_227);
                            const eb = this.nodeToExpression(b_228);
                            if (op == 111) {
                                const temp_229 = ea;
                                switch (temp_229&&temp_229[0]) {
                                case 2: {
                                    {
                                        const sa = temp_229[1];
                                        {
                                            const temp_230 = eb;
                                            switch (temp_230&&temp_230[0]) {
                                            case 2: {
                                                {
                                                    const sb = temp_230[1];
                                                    return /*String*/[2,sa + sb];
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;
                                };
                            };
                            return /*Binop*/[13,ea,op,eb,this.typer.types.get(e)];
                        };
                    }
                } break;

                case 30: {
                    {
                        const path_231 = temp_133[1];
                        const t_232 = temp_133[2];
                        const args_233 = temp_133[3];
                        const fields_234 = temp_133[4];
                        const el_235 = temp_133[5];
                        {
                            const v_236 = /*Ident*/[7,(() => {
                                const result_237 = this.parentNames.get(this.typer.parents.get(e));
                                if (result_237 != null) { return result_237 };
                                return DataHelper.extractTypeName(t_232);
                            })()];
                            const a_238 = [];
                            for (const arg of $toIterator(args_233)) {
                                a_238.push(this.nodeToExpression(arg));
                            };
                            return /*New*/[12,v_236,a_238];
                        };
                    }
                } break;

                case 21: {
                    {
                        const name_239 = temp_133[1];
                        const expr_240 = temp_133[2];
                        const vars_241 = temp_133[3];
                        const rettype_242 = temp_133[4];
                        {
                            const a_243 = [];
                            const defaults = [];
                            const types = [];
                            for (const arg of $toIterator(vars_241)) {
                                const temp_244 = arg;
                                switch (temp_244&&temp_244[0]) {
                                case 23: {
                                    {
                                        const name_245 = temp_244[1];
                                        const t_246 = temp_244[2];
                                        const expr_247 = temp_244[3];
                                        const const_248 = temp_244[4];
                                        {
                                            a_243.push(this.unique(name_245, arg));
                                            types.push(t_246);
                                            if (expr_247 != null) { defaults.push(this.nodeToExpression(expr_247)) } else defaults.push(null);
                                        };
                                    }
                                } break;
                                };
                            };
                            return /*Function*/[14,name_239 != (null)? (this.unique(name_239, e)) : (null),this.nodeToStatement(expr_240),a_243,defaults,this.typer.types.get(e)];
                        };
                    }
                } break;

                case 22: {
                    {
                        const expr_249 = temp_133[1];
                        const vars_250 = temp_133[2];
                        const rettype_251 = temp_133[3];
                        {
                            const a_252 = [];
                            const defaults_253 = [];
                            const types_254 = [];
                            for (const arg of $toIterator(vars_250)) {
                                const temp_255 = arg;
                                switch (temp_255&&temp_255[0]) {
                                case 23: {
                                    {
                                        const name_256 = temp_255[1];
                                        const t_257 = temp_255[2];
                                        const expr_258 = temp_255[3];
                                        const const_259 = temp_255[4];
                                        {
                                            a_252.push(this.unique(name_256, arg));
                                            types_254.push(t_257);
                                            if (expr_258 != null) { defaults_253.push(this.nodeToExpression(expr_258)) } else defaults_253.push(null);
                                        };
                                    }
                                } break;
                                };
                            };
                            return /*Arrow*/[15,this.nodeToExpression(expr_249),a_252,defaults_253,types_254,rettype_251];
                        };
                    }
                } break;

                case 11: {
                    {
                        const el_260 = temp_133[1];
                        {
                            if (el_260.length == 1) { return this.nodeToExpression(el_260[0]) };
                            const block = [];
                            let i_261 = 0;
                            while (i_261 < el_260.length - 1) {
                                {
                                    let step_262 = 0;
                                    const s_263 = this.nodeToStatement(el_260[i_261]);
                                    if (step_262 == 0 && s_263 != null) { step_262 = 1 };
                                    if (step_262 == 1) { block.push(s_263) };
                                };
                                i_261++;
                            };
                            block.push(/*Return*/[8,this.nodeToExpression(el_260[el_260.length - 1])]);
                            return /*Call*/[11,/*Parenthesis*/[16,/*Function*/[14,null,/*Block*/[1,block],[]]],[]];
                        };
                    }
                } break;

                case 36: {
                    {
                        const names = temp_133[1];
                        const el_264 = temp_133[2];
                        {
                            const els = [];
                            for (const e of $toIterator(el_264)) {
                                els.push(this.nodeToExpression(e));
                            };
                            return /*Object*/[17,names,els];
                        };
                    }
                } break;

                case 14: {
                    {
                        const inner = temp_133[1];
                        {
                            const unwrapNestedParens = (inner_265) => {
                                const temp_266 = inner_265;
                                switch (temp_266&&temp_266[0]) {
                                case 14: {
                                    {
                                        const i_267 = temp_266[1];
                                        return unwrapNestedParens(i_267);
                                    }
                                } break;

                                default:
                                return inner_265
                                };
                            };
                            const value_268 = unwrapNestedParens(inner);
                            return /*Parenthesis*/[16,this.nodeToExpression(value_268)];
                        };
                    }
                } break;

                case 31: {
                    {
                        const el_269 = temp_133[1];
                        {
                            if (el_269.length == 1) {
                                const temp_270 = el_269[0];
                                switch (temp_270&&temp_270[0]) {
                                case 46: {
                                    {
                                        const name_271 = temp_270[1];
                                        const over = temp_270[2];
                                        const by = temp_270[3];
                                        {
                                            const block_272 = [];
                                            const result_273 = this.unique('result');
                                            block_272.push(/*Const*/[6,result_273,/*Array*/[18,[]],this.typer.types.get(e)]);
                                            const value_274 = this.unique('value');
                                            block_272.push(/*Const*/[6,value_274,this.nodeToExpression(over),this.typer.types.get(el_269[0])]);
                                            const push = /*Call*/[2,/*Dot*/[10,/*Ident*/[7,result_273,this.typer.types.get(e)],'push'],[this.nodeToExpression(by)]];
                                            const fillLoop = () => {
                                                {
                                                    const temp_275 = over;
                                                    switch (temp_275&&temp_275[0]) {
                                                    case 5: {
                                                        {
                                                            const s_276 = temp_275[1];
                                                            {
                                                                const i_277 = name_271;
                                                                block_272.push(/*Const*/[6,i_277,/*Int*/[3,-1]]);
                                                                block_272.push(/*While*/[21,/*Binop*/[13,/*Parenthesis*/[16,/*Binop*/[13,/*Ident*/[7,i_277],111,/*Int*/[3,1]]],99,/*Ident*/[7,value_274]],/*Block*/[1,[/*Increment*/[22,/*Ident*/[7,i_277]], push]],true]);
                                                                return;
                                                            };
                                                        }
                                                    } break;
                                                    };
                                                };
                                                block_272.push(/*For*/[20,name_271,/*Ident*/[7,value_274],push]);
                                            };
                                            fillLoop();
                                            block_272.push(/*Return*/[8,/*Ident*/[7,result_273]]);
                                            return /*Call*/[11,/*Parenthesis*/[16,/*Function*/[14,null,/*Block*/[1,block_272],[],[],/*Function*/[12,[],this.typer.types.get(e)]]],[]];
                                        };
                                    }
                                } break;
                                };
                            };
                            const els_278 = [];
                            for (const e of $toIterator(el_269)) els_278.push(this.nodeToExpression(e));
                            return /*Array*/[18,els_278];
                        };
                    }
                } break;

                case 47: {
                    {
                        const nullable = temp_133[1];
                        const otherwise = temp_133[2];
                        {
                            const result_279 = this.unique('result');
                            return /*Call*/[11,/*Parenthesis*/[16,/*Function*/[14,null,/*Block*/[1,[/*Const*/[6,result_279,this.nodeToExpression(nullable)], /*If*/[9,/*Binop*/[13,/*Ident*/[7,result_279],103,/*Null*/[8]],/*Return*/[8,/*Ident*/[7,result_279]],null], /*Return*/[8,this.nodeToExpression(otherwise)]]],[],[],/*Function*/[12,[],this.typer.types.get(otherwise)]]],[],this.typer.types.get(otherwise)];
                            return /*Elvis*/[21,this.nodeToExpression(nullable),this.nodeToExpression(otherwise)];
                        };
                    }
                } break;

                case 19: {
                    {
                        const op_280 = temp_133[1];
                        const postfix = temp_133[2];
                        const e_281 = temp_133[3];
                        return /*Unop*/[20,op_280,postfix,this.nodeToExpression(e_281)];
                    }
                } break;

                case 3: {
                    return /*This*/[9]
                } break;

                case 32: {
                    {
                        const keys = temp_133[1];
                        const values_282 = temp_133[2];
                        {
                            const k_283 = [];
                            const v_284 = [];
                            for (const key of $toIterator(keys)) k_283.push(this.nodeToExpression(key));
                            for (const value of $toIterator(values_282)) v_284.push(this.nodeToExpression(value));
                            return /*Map*/[19,k_283,v_284];
                        };
                    }
                } break;

                case 10: {
                    {
                        const a_285 = temp_133[1];
                        const op_286 = temp_133[2];
                        const b_287 = temp_133[3];
                        return /*Assignop*/[31,this.nodeToExpression(a_285),op_286,this.nodeToExpression(b_287)];
                    }
                } break;

                case 13: {
                    {
                        const econd = temp_133[1];
                        const eif = temp_133[2];
                        const eelse = temp_133[3];
                        {
                            let binds = false;
                            for (const cond of $toIterator(econd)) {
                                const temp_288 = cond;
                                switch (temp_288&&temp_288[0]) {
                                case 23: {
                                    binds = true
                                } break;
                                };
                            };
                            if (!binds && econd.length == 1) { return /*If*/[22,this.nodeToExpression(econd[0]),this.nodeToExpression(eif),this.nodeToExpression(eelse)] };
                            if (!binds) {
                                let parens = /*Parenthesis*/[16,this.nodeToExpression(econd[0])];
                                let i_289 = 1;
                                while (i_289 < econd.length) {
                                    parens = /*Binop*/[13,parens,92,/*Parenthesis*/[16,this.nodeToExpression(econd[i_289])]];
                                    i_289++;
                                };
                                return /*If*/[22,parens,this.nodeToExpression(eif),this.nodeToExpression(eelse)];
                            };
                            return /*If*/[22,this.nodeToExpression(econd[0]),this.nodeToExpression(eif),this.nodeToExpression(eelse)];
                        };
                    }
                } break;

                case 33: {
                    {
                        const expr_290 = temp_133[1];
                        const index_291 = temp_133[2];
                        return /*Index*/[23,this.nodeToExpression(expr_290),this.nodeToExpression(index_291)];
                    }
                } break;

                case 41: {
                    {
                        const e_292 = temp_133[1];
                        const kind = temp_133[2];
                        const t_293 = temp_133[3];
                        {
                            const temp_294 = kind;
                            switch (temp_294) {
                            case 81: {
                                console.log('`as?` is not yet supported by normalizer, only `as!`')
                            } break;

                            case 89: {
                                return /*UnsafeBitCast*/[24,this.nodeToExpression(e_292),this.typer.types.get(t_293)]
                            } break;

                            default:
                            console.log('`as` is not yet supported by normalizer, only `as!`')
                            };
                        };
                    }
                } break;

                case 40: {
                    {
                        const e_295 = temp_133[1];
                        const t_296 = temp_133[2];
                        return /*Is*/[30,this.nodeToExpression(e_295),this.typer.types.get(t_296)];
                    }
                } break;

                default:
                console.error('(internal warning) Unknown node type for expression:', e, Project.data.get(e))
                };
            };
            console.log('normalizer: unprocessed expression ' + e + Typer.positionOf(e));
            return null;
        };
        nodeToStatement(e_297) {
            if (e_297 == null) { return null };
            {
                const temp_298 = e_297;
                switch (temp_298&&temp_298[0]) {
                case 11: {
                    {
                        const el_299 = temp_298[1];
                        {
                            let els_300 = [];
                            for (const e of $toIterator(el_299)) {
                                const statement_301 = this.nodeToStatement(e);
                                if (statement_301 != null) { els_300.push(statement_301) };
                            };
                            if (els_300.length == 1) {
                                const temp_302 = els_300[0];
                                switch (temp_302&&temp_302[0]) {
                                case 1: {
                                    return els_300[0]
                                } break;
                                };
                            };
                            return /*Block*/[1,els_300];
                        };
                    }
                } break;

                case 37: {
                    {
                        const t_303 = temp_298[1];
                        const fields_304 = temp_298[2];
                        const valuesType_305 = temp_298[3];
                        {
                            this.renameClassFields(fields_304);
                            const typed = this.typer.types.get(e_297);
                            const isComplexEnum = valuesType_305 == null;
                            if (isComplexEnum) {
                                const type_306 = new NiceComplexEnum();
                                type_306.name = this.unique(DataHelper.extractTypeName(t_303), e_297);
                                this.globals.push(type_306.name);
                                const names_307 = [];
                                const constructors = [];
                                const constructorsTypes = [];
                                const types_308 = [];
                                for (const f of $toIterator(fields_304)) {
                                    const temp_309 = f;
                                    switch (temp_309&&temp_309[0]) {
                                    case 48: {
                                        {
                                            const t_310 = temp_309[1];
                                            {
                                                const temp_311 = t_310;
                                                switch (temp_311&&temp_311[0]) {
                                                case 1: {
                                                    {
                                                        const name_312 = temp_311[1];
                                                        {
                                                            names_307.push(name_312);
                                                            constructors.push(null);
                                                            constructorsTypes.push(null);
                                                            types_308.push(null);
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                        }
                                    } break;

                                    case 12: {
                                        {
                                            const e_313 = temp_309[1];
                                            const args_314 = temp_309[2];
                                            const argNames_315 = temp_309[3];
                                            {
                                                {
                                                    const temp_316 = e_313;
                                                    switch (temp_316&&temp_316[0]) {
                                                    case 48: {
                                                        {
                                                            const t_317 = temp_316[1];
                                                            {
                                                                const temp_318 = t_317;
                                                                switch (temp_318&&temp_318[0]) {
                                                                case 1: {
                                                                    {
                                                                        const name_319 = temp_318[1];
                                                                        names_307.push(name_319);
                                                                    }
                                                                } break;
                                                                };
                                                            };
                                                        }
                                                    } break;
                                                    };
                                                };
                                                const aaa = argNames_315;
                                                constructors.push((() => {
                                                    const result_320 = [];
                                                    const value_321 = argNames_315;
                                                    for (const arg of $toIterator(value_321)) result_320.push(this.unique((arg)));
                                                    return result_320;
                                                })());
                                                constructorsTypes.push((() => {
                                                    const result_322 = [];
                                                    const value_323 = args_314;
                                                    for (const arg of $toIterator(value_323)) result_322.push(this.typer.toType(Typer.nodeToNodeType(arg), arg));
                                                    return result_322;
                                                })());
                                                types_308.push((() => {
                                                    const result_324 = [];
                                                    const value_325 = args_314;
                                                    for (const arg of $toIterator(value_325)) result_324.push(this.unique((arg)));
                                                    return result_324;
                                                })());
                                            };
                                        }
                                    } break;

                                    case 43: {
                                        {
                                            const field = temp_309[1];
                                            {
                                                const temp_326 = field;
                                                switch (temp_326&&temp_326[0]) {
                                                case 23: {
                                                    {
                                                        const name_327 = temp_326[1];
                                                        const t_328 = temp_326[2];
                                                        const expr_329 = temp_326[3];
                                                        const const_330 = temp_326[4];
                                                        {
                                                            const uname = (() => {
                                                                const result_331 = this.parentNames.get(field);
                                                                if (result_331 != null) { return result_331 };
                                                                return this.unique(name_327, field);
                                                            })();
                                                            if (const_330) { type_306.staticVars.push(/*Const*/[6,uname,this.nodeToExpression(expr_329),this.typer.types.get(field)]) } else type_306.staticVars.push(/*Var*/[5,uname,this.nodeToExpression(expr_329),this.typer.types.get(field)]);
                                                        };
                                                    }
                                                } break;

                                                case 21: {
                                                    {
                                                        const name_332 = temp_326[1];
                                                        const expr_333 = temp_326[2];
                                                        const vars_334 = temp_326[3];
                                                        const rettype_335 = temp_326[4];
                                                        {
                                                            const uname_336 = (() => {
                                                                const result_337 = this.parentNames.get(field);
                                                                if (result_337 != null) { return result_337 };
                                                                return this.unique(name_332, field);
                                                            })();
                                                            const a_338 = [];
                                                            const defaults_339 = [];
                                                            const types_340 = [];
                                                            for (const arg of $toIterator(vars_334)) {
                                                                const temp_341 = arg;
                                                                switch (temp_341&&temp_341[0]) {
                                                                case 23: {
                                                                    {
                                                                        const name_342 = temp_341[1];
                                                                        const t_343 = temp_341[2];
                                                                        const expr_344 = temp_341[3];
                                                                        const const_345 = temp_341[4];
                                                                        {
                                                                            a_338.push(this.unique(name_342, arg));
                                                                            types_340.push(t_343);
                                                                            if (expr_344 != null) { defaults_339.push(this.nodeToExpression(expr_344)) } else defaults_339.push(null);
                                                                        };
                                                                    }
                                                                } break;
                                                                };
                                                            };
                                                            type_306.staticMethods.push(/*Function*/[7,uname_336,this.unwrapNestingBlocks(this.nodeToStatement(expr_333)),a_338,defaults_339,this.typer.types.get(field)]);
                                                        };
                                                    }
                                                } break;

                                                default:
                                                console.error('(internal warning) Unknown complex enum static field kind:', field)
                                                };
                                            };
                                        }
                                    } break;

                                    default:
                                    console.error('(internal warning) Unknown complex enum field kind:', f)
                                    };
                                };
                                type_306.names = names_307;
                                type_306.constructors = constructors;
                                type_306.constructorsTypes = constructorsTypes;
                                type_306.types = types_308;
                                this.project.enumsComplex.push(type_306);
                                return null;
                            } else {
                                const type_346 = new NiceSimpleEnum();
                                type_346.name = DataHelper.extractTypeName(t_303);
                                const names_347 = [];
                                const values_348 = [];
                                for (const f of $toIterator(fields_304)) {
                                    const temp_349 = f;
                                    switch (temp_349&&temp_349[0]) {
                                    case 9: {
                                        {
                                            const a_350 = temp_349[1];
                                            const op_351 = temp_349[2];
                                            const b_352 = temp_349[3];
                                            {
                                                {
                                                    const temp_353 = a_350;
                                                    switch (temp_353&&temp_353[0]) {
                                                    case 48: {
                                                        {
                                                            const t_354 = temp_353[1];
                                                            {
                                                                const temp_355 = t_354;
                                                                switch (temp_355&&temp_355[0]) {
                                                                case 1: {
                                                                    {
                                                                        const name_356 = temp_355[1];
                                                                        names_347.push(name_356);
                                                                    }
                                                                } break;
                                                                };
                                                            };
                                                        }
                                                    } break;
                                                    };
                                                };
                                                {
                                                    const temp_357 = b_352;
                                                    switch (temp_357&&temp_357[0]) {
                                                    case 0: {
                                                        {
                                                            const s_358 = temp_357[1];
                                                            values_348.push(/*String*/[2,s_358]);
                                                        }
                                                    } break;

                                                    case 5: {
                                                        {
                                                            const s_359 = temp_357[1];
                                                            values_348.push(/*Int*/[3,s_359]);
                                                        }
                                                    } break;

                                                    default:
                                                    console.error('(internal warning) Unknown node field value kind:', b_352)
                                                    };
                                                };
                                            };
                                        }
                                    } break;

                                    case 48: {
                                        {
                                            const t_360 = temp_349[1];
                                            {
                                                const temp_361 = t_360;
                                                switch (temp_361&&temp_361[0]) {
                                                case 1: {
                                                    {
                                                        const name_362 = temp_361[1];
                                                        {
                                                            names_347.push(name_362);
                                                            if (typed.fieldsTypeSimple == this.typer.typeString) { values_348.push(/*String*/[2,name_362]) };
                                                            if (typed.fieldsTypeSimple == this.typer.typeInt) { values_348.push(/*Int*/[3,values_348.length]) };
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                        }
                                    } break;

                                    case 43: {
                                        {
                                            const field_363 = temp_349[1];
                                            {
                                                const temp_364 = field_363;
                                                switch (temp_364&&temp_364[0]) {
                                                case 23: {
                                                    {
                                                        const name_365 = temp_364[1];
                                                        const t_366 = temp_364[2];
                                                        const expr_367 = temp_364[3];
                                                        const const_368 = temp_364[4];
                                                        {
                                                            const uname_369 = (() => {
                                                                const result_370 = this.parentNames.get(field_363);
                                                                if (result_370 != null) { return result_370 };
                                                                return this.unique(name_365, field_363);
                                                            })();
                                                            if (const_368) { type_346.staticVars.push(/*Const*/[6,uname_369,this.nodeToExpression(expr_367),this.typer.types.get(field_363)]) } else type_346.staticVars.push(/*Var*/[5,uname_369,this.nodeToExpression(expr_367),this.typer.types.get(field_363)]);
                                                        };
                                                    }
                                                } break;

                                                case 21: {
                                                    {
                                                        const name_371 = temp_364[1];
                                                        const expr_372 = temp_364[2];
                                                        const vars_373 = temp_364[3];
                                                        const rettype_374 = temp_364[4];
                                                        {
                                                            const uname_375 = (() => {
                                                                const result_376 = this.parentNames.get(field_363);
                                                                if (result_376 != null) { return result_376 };
                                                                return this.unique(name_371, field_363);
                                                            })();
                                                            const a_377 = [];
                                                            const defaults_378 = [];
                                                            const types_379 = [];
                                                            for (const arg of $toIterator(vars_373)) {
                                                                const temp_380 = arg;
                                                                switch (temp_380&&temp_380[0]) {
                                                                case 23: {
                                                                    {
                                                                        const name_381 = temp_380[1];
                                                                        const t_382 = temp_380[2];
                                                                        const expr_383 = temp_380[3];
                                                                        const const_384 = temp_380[4];
                                                                        {
                                                                            a_377.push(this.unique(name_381, arg));
                                                                            types_379.push(t_382);
                                                                            if (expr_383 != null) { defaults_378.push(this.nodeToExpression(expr_383)) } else defaults_378.push(null);
                                                                        };
                                                                    }
                                                                } break;
                                                                };
                                                            };
                                                            type_346.staticMethods.push(/*Function*/[7,uname_375,this.unwrapNestingBlocks(this.nodeToStatement(expr_372)),a_377,defaults_378,this.typer.types.get(field_363)]);
                                                        };
                                                    }
                                                } break;

                                                default:
                                                console.error('(internal warning) Unknown simple enum static field kind:', field_363)
                                                };
                                            };
                                        }
                                    } break;

                                    default:
                                    console.error('(internal warning) Unknown simple enum field kind:', f)
                                    };
                                };
                                type_346.names = names_347;
                                type_346.values = values_348;
                                this.project.enumsSimple.push(type_346);
                                return null;
                            };
                        };
                    }
                } break;

                case 25: {
                    {
                        const t_385 = temp_298[1];
                        const ext_386 = temp_298[2];
                        const impl_387 = temp_298[3];
                        const fields_388 = temp_298[4];
                        const external_389 = temp_298[5];
                        {
                            this.renameClassFields(fields_388);
                            const type_390 = new NiceClass();
                            {
                                const temp_391 = this.typer.types.get(e_297);
                                switch (temp_391&&temp_391[0]) {
                                case 3: {
                                    {
                                        const the = temp_391[1];
                                        type_390.useless = the.useless;
                                    }
                                } break;
                                };
                            };
                            type_390.external = external_389;
                            type_390.extend = DataHelper.extractTypeName(ext_386);
                            for (const implement of $toIterator(impl_387)) {
                                const temp_392 = implement;
                                switch (temp_392&&temp_392[0]) {
                                case 1: {
                                    {
                                        const name_393 = temp_392[1];
                                        type_390.implement = name_393;
                                    }
                                } break;

                                case 2: {
                                    {
                                        const name_394 = temp_392[1];
                                        const params = temp_392[2];
                                        {
                                            type_390.implement = name_394;
                                            type_390.implementParams = (() => {
                                                const result_395 = [];
                                                const value_396 = params;
                                                for (const param of $toIterator(value_396)) result_395.push(DataHelper.extractTypeName(param));
                                                return result_395;
                                            })();
                                        };
                                    }
                                } break;
                                };
                            };
                            {
                                const temp_397 = t_385;
                                switch (temp_397&&temp_397[0]) {
                                case 1: {
                                    {
                                        const name_398 = temp_397[1];
                                        {
                                        };
                                    }
                                } break;

                                case 2: {
                                    {
                                        const name_399 = temp_397[1];
                                        const params_400 = temp_397[2];
                                        type_390.genericParams = (() => {
                                            const result_401 = [];
                                            const value_402 = params_400;
                                            for (const param of $toIterator(value_402)) result_401.push(DataHelper.extractTypeName(param));
                                            return result_401;
                                        })();
                                    }
                                } break;
                                };
                            };
                            const atts_403 = Project.mapAttributes.get(e_297);
                            const require_404 = this.getAtt(atts_403, 'require');
                            if (require_404 != null) {
                                const temp_405 = require_404.values[0];
                                switch (temp_405&&temp_405[0]) {
                                case 0: {
                                    {
                                        const s_406 = temp_405[1];
                                        type_390.jsRequire = s_406;
                                    }
                                } break;

                                default:
                                throw '@require takes string as argument'
                                };
                            };
                            const native_407 = this.getAtt(atts_403, 'native');
                            if (native_407 != null) {
                                const temp_408 = native_407.values[0];
                                switch (temp_408&&temp_408[0]) {
                                case 0: {
                                    {
                                        const s_409 = temp_408[1];
                                        {
                                            type_390.jsNative = s_409;
                                            type_390.name = this.unique(s_409, e_297);
                                        };
                                    }
                                } break;

                                default:
                                throw '@native takes string as argument'
                                };
                            } else type_390.name = this.unique(DataHelper.extractTypeName(t_385), e_297);
                            this.globals.push(type_390.name);
                            for (const f of $toIterator(fields_388)) {
                                const temp_410 = f;
                                switch (temp_410&&temp_410[0]) {
                                case 23: {
                                    {
                                        const name_411 = temp_410[1];
                                        const t_412 = temp_410[2];
                                        const expr_413 = temp_410[3];
                                        const const_414 = temp_410[4];
                                        {
                                            const uname_415 = (() => {
                                                const result_416 = this.parentNames.get(f);
                                                if (result_416 != null) { return result_416 };
                                                return this.unique(name_411, f);
                                            })();
                                            if (const_414) { type_390.vars.push(/*Const*/[6,uname_415,this.nodeToExpression(expr_413),this.typer.types.get(f)]) } else type_390.vars.push(/*Var*/[5,uname_415,this.nodeToExpression(expr_413),this.typer.types.get(f)]);
                                        };
                                    }
                                } break;

                                case 26: {
                                    {
                                        const field_417 = temp_410[1];
                                        {
                                            const temp_418 = field_417;
                                            switch (temp_418&&temp_418[0]) {
                                            case 23: {
                                                {
                                                    const name_419 = temp_418[1];
                                                    const t_420 = temp_418[2];
                                                    const expr_421 = temp_418[3];
                                                    const const_422 = temp_418[4];
                                                    {
                                                        const uname_423 = (() => {
                                                            const result_424 = this.parentNames.get(f);
                                                            if (result_424 != null) { return result_424 };
                                                            return this.unique(name_419, f);
                                                        })();
                                                        if (const_422) { type_390.vars.push(/*Const*/[6,uname_423,this.nodeToExpression(expr_421),this.typer.types.get(field_417)]) } else type_390.vars.push(/*Var*/[5,uname_423,this.nodeToExpression(expr_421),this.typer.types.get(field_417)]);
                                                        type_390.property.push(uname_423);
                                                    };
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;

                                case 21: {
                                    {
                                        const name_425 = temp_410[1];
                                        const expr_426 = temp_410[2];
                                        const vars_427 = temp_410[3];
                                        const rettype_428 = temp_410[4];
                                        {
                                            const uname_429 = ((name_425 == 'new'))? ('new') : ((() => {
                                                const result_430 = this.parentNames.get(f);
                                                if (result_430 != null) { return result_430 };
                                                return this.unique(name_425, f);
                                            })());
                                            const a_431 = [];
                                            const defaults_432 = [];
                                            const types_433 = [];
                                            for (const arg of $toIterator(vars_427)) {
                                                const temp_434 = arg;
                                                switch (temp_434&&temp_434[0]) {
                                                case 23: {
                                                    {
                                                        const name_435 = temp_434[1];
                                                        const t_436 = temp_434[2];
                                                        const expr_437 = temp_434[3];
                                                        const const_438 = temp_434[4];
                                                        {
                                                            a_431.push(this.unique(name_435, arg));
                                                            types_433.push(t_436);
                                                            if (expr_437 != null) { defaults_432.push(this.nodeToExpression(expr_437)) } else defaults_432.push(null);
                                                        };
                                                    }
                                                } break;
                                                };
                                            };
                                            type_390.methods.push(/*Function*/[7,uname_429,this.unwrapNestingBlocks(this.nodeToStatement(expr_426)),a_431,defaults_432,this.typer.types.get(f)]);
                                        };
                                    }
                                } break;

                                case 43: {
                                    {
                                        const field_439 = temp_410[1];
                                        {
                                            const temp_440 = field_439;
                                            switch (temp_440&&temp_440[0]) {
                                            case 23: {
                                                {
                                                    const name_441 = temp_440[1];
                                                    const t_442 = temp_440[2];
                                                    const expr_443 = temp_440[3];
                                                    const const_444 = temp_440[4];
                                                    {
                                                        const uname_445 = (() => {
                                                            const result_446 = this.parentNames.get(field_439);
                                                            if (result_446 != null) { return result_446 };
                                                            return this.unique(name_441, field_439);
                                                        })();
                                                        if (const_444) { type_390.staticVars.push(/*Const*/[6,uname_445,this.nodeToExpression(expr_443),this.typer.types.get(field_439)]) } else type_390.staticVars.push(/*Var*/[5,uname_445,this.nodeToExpression(expr_443),this.typer.types.get(field_439)]);
                                                    };
                                                }
                                            } break;

                                            case 21: {
                                                {
                                                    const name_447 = temp_440[1];
                                                    const expr_448 = temp_440[2];
                                                    const vars_449 = temp_440[3];
                                                    const rettype_450 = temp_440[4];
                                                    {
                                                        const uname_451 = (() => {
                                                            const result_452 = this.parentNames.get(field_439);
                                                            if (result_452 != null) { return result_452 };
                                                            return this.unique(name_447, field_439);
                                                        })();
                                                        const a_453 = [];
                                                        const defaults_454 = [];
                                                        const types_455 = [];
                                                        for (const arg of $toIterator(vars_449)) {
                                                            const temp_456 = arg;
                                                            switch (temp_456&&temp_456[0]) {
                                                            case 23: {
                                                                {
                                                                    const name_457 = temp_456[1];
                                                                    const t_458 = temp_456[2];
                                                                    const expr_459 = temp_456[3];
                                                                    const const_460 = temp_456[4];
                                                                    {
                                                                        a_453.push(this.unique(name_457, arg));
                                                                        types_455.push(t_458);
                                                                        if (expr_459 != null) { defaults_454.push(this.nodeToExpression(expr_459)) } else defaults_454.push(null);
                                                                    };
                                                                }
                                                            } break;
                                                            };
                                                        };
                                                        type_390.staticMethods.push(/*Function*/[7,uname_451,this.unwrapNestingBlocks(this.nodeToStatement(expr_448)),a_453,defaults_454,this.typer.types.get(field_439)]);
                                                    };
                                                }
                                            } break;

                                            default:
                                            console.error('(internal warning) Unknown class static field kind:', field_439)
                                            };
                                        };
                                    }
                                } break;

                                default:
                                console.error('(internal warning) Unknown class field kind:', f)
                                };
                            };
                            this.project.classes.push(type_390);
                            return null;
                        };
                    }
                } break;

                case 8: {
                    {
                    }
                } break;

                case 30: {
                    {
                        const path_461 = temp_298[1];
                        const t_462 = temp_298[2];
                        const args_463 = temp_298[3];
                        const fields_464 = temp_298[4];
                        const values_465 = temp_298[5];
                        {
                            const v_466 = /*Ident*/[7,(() => {
                                const result_467 = this.parentNames.get(this.typer.parents.get(e_297));
                                if (result_467 != null) { return result_467 };
                                return DataHelper.extractTypeName(t_462);
                            })()];
                            const a_468 = [];
                            for (const arg of $toIterator(args_463)) {
                                a_468.push(this.nodeToExpression(arg));
                            };
                            const result_469 = /*New*/[3,v_466,a_468];
                            if (fields_464.length > 0) {
                                const temp_470 = this.unique('temp');
                                const block_471 = [/*Const*/[6,temp_470,/*New*/[12,v_466,a_468]]];
                                {
                                    let field_472 = 0;
                                    let it = 0;
                                    let at = fields_464.length;
                                    while (it < at) {
                                        field_472 = it;
                                        it++;
                                        block_471.push(/*Assign*/[14,/*Dot*/[10,/*Ident*/[7,temp_470],fields_464[field_472]],this.nodeToExpression(values_465[field_472])]);
                                    };
                                };
                                return /*Block*/[1,block_471];
                            };
                            return result_469;
                        };
                    }
                } break;

                case 12: {
                    {
                        const e_473 = temp_298[1];
                        const args_474 = temp_298[2];
                        const argNames_475 = temp_298[3];
                        {
                            {
                                const temp_476 = e_473;
                                switch (temp_476&&temp_476[0]) {
                                case 4: {
                                    {
                                        const a_477 = [];
                                        for (const arg of $toIterator(args_474)) {
                                            a_477.push(this.nodeToExpression(arg));
                                        };
                                        return /*SuperConstructor*/[27,a_477];
                                    }
                                } break;
                                };
                            };
                            const v_478 = this.nodeToExpression(e_473);
                            const a_479 = [];
                            for (const arg of $toIterator(args_474)) {
                                a_479.push(this.nodeToExpression(arg));
                            };
                            let expects = [];
                            {
                                const temp_480 = this.typer.types.get(e_473);
                                switch (temp_480&&temp_480[0]) {
                                case 12: {
                                    {
                                        const args_481 = temp_480[1];
                                        expects = args_481;
                                    }
                                } break;
                                };
                            };
                            return /*Call*/[2,v_478,a_479,expects];
                        };
                    }
                } break;

                case 23: {
                    {
                        const name_482 = temp_298[1];
                        const t_483 = temp_298[2];
                        const expr_484 = temp_298[3];
                        const const_485 = temp_298[4];
                        const external_486 = temp_298[5];
                        {
                            const uname_487 = (() => {
                                const result_488 = this.parentNames.get(e_297);
                                if (result_488 != null) { return result_488 };
                                return this.unique(name_482, e_297);
                            })();
                            if (external_486) { return null };
                            if (const_485) { return /*Const*/[6,uname_487,this.nodeToExpression(expr_484),this.typer.types.get(e_297)] };
                            return /*Var*/[5,uname_487,this.nodeToExpression(expr_484),this.typer.types.get(e_297)];
                        };
                    }
                } break;

                case 21: {
                    {
                        const name_489 = temp_298[1];
                        const expr_490 = temp_298[2];
                        const vars_491 = temp_298[3];
                        const rettype_492 = temp_298[4];
                        const external_493 = temp_298[5];
                        {
                            const uname_494 = ((name_489 != null))? (((() => {
                                const result_495 = this.parentNames.get(e_297);
                                if (result_495 != null) { return result_495 };
                                return this.unique(name_489, e_297);
                            })())) : (null);
                            if (external_493) { return null };
                            let rettype_496 = rettype_492;
                            const a_497 = [];
                            const defaults_498 = [];
                            let types_499 = [];
                            for (const arg of $toIterator(vars_491)) {
                                const temp_500 = arg;
                                switch (temp_500&&temp_500[0]) {
                                case 23: {
                                    {
                                        const name_501 = temp_500[1];
                                        const t_502 = temp_500[2];
                                        const expr_503 = temp_500[3];
                                        const const_504 = temp_500[4];
                                        {
                                            a_497.push(this.unique(name_501, arg));
                                            types_499.push(t_502);
                                            if (expr_503 != null) { defaults_498.push(this.nodeToExpression(expr_503)) } else defaults_498.push(null);
                                        };
                                    }
                                } break;
                                };
                            };
                            if (name_489 == 'new') { return /*Function*/[7,null,this.unwrapNestingBlocks(this.nodeToStatement(expr_490)),a_497,defaults_498,this.typer.types.get(e_297)] };
                            return /*Function*/[7,uname_494,this.unwrapNestingBlocks(this.nodeToStatement(expr_490)),a_497,defaults_498,this.typer.types.get(e_297)];
                        };
                    }
                } break;

                case 46: {
                    {
                        const name_505 = temp_298[1];
                        const over_506 = temp_298[2];
                        const by_507 = temp_298[3];
                        const range = temp_298[4];
                        {
                            const data_508 = Project.data.get(over_506);
                            const ov = (Node.stringify)? (Node.stringify(over_506)) : ('' + over_506);
                            const type_509 = (() => {
                                const result_510 = this.typer.types.get(over_506);
                                if (result_510 != null) { return result_510 };
                                return this.typer.types.get(this.typer.parents.get(over_506));
                            })();
                            if (type_509 == null) { console.log(data_508.fileName, data_508.line, ('for ' + (name_505) + ' over `' + (ov) + '` no type')) } else {
                                const nameOf = (type_509[1].parent)? (DataHelper.nameOf(type_509[1].parent)) : '<undefined>';
                                if (this.typer.types.get(e_297) == null) { console.log(data_508.fileName, data_508.line, ('++++++++++++++++++++++++++++for ' + (name_505) + ' over `' + (ov) + '` type ='), Type.stringify(type_509), ' iterator type =', this.typer.types.get(e_297), nameOf) };
                            };
                            if (range == null) {
                                const temp_511 = over_506;
                                switch (temp_511&&temp_511[0]) {
                                case 5: {
                                    {
                                        const s_512 = temp_511[1];
                                        {
                                            const i_513 = this.unique(name_505, e_297);
                                            const it_514 = this.unique('it');
                                            return /*Block*/[1,[/*Var*/[5,i_513,/*Int*/[3,0],this.typer.typeInt], /*Var*/[5,it_514,/*Int*/[3,0],this.typer.typeInt], /*While*/[21,/*Binop*/[13,/*Ident*/[7,it_514],99,/*Int*/[3,s_512]],/*Block*/[1,[/*Assign*/[14,/*Ident*/[7,i_513],/*Ident*/[7,it_514]], /*Increment*/[22,/*Ident*/[7,it_514]], this.nodeToStatement(by_507)]],true]]];
                                        };
                                    }
                                } break;

                                default:
                                {
                                    let iteratorOverInt = false;
                                    {
                                        const temp_515 = this.typer.types.get(over_506);
                                        switch (temp_515&&temp_515[0]) {
                                        case 4: {
                                            {
                                                const type_516 = temp_515[1];
                                                const generic = temp_515[2];
                                                if ((generic == null || generic.length == 0) && (type_516.name == 'Int')) { iteratorOverInt = true };
                                            }
                                        } break;
                                        };
                                    };
                                    if (iteratorOverInt) {
                                        const i_517 = this.unique(name_505, e_297);
                                        const it_518 = this.unique('it');
                                        const finish = this.unique('at');
                                        return /*Block*/[1,[/*Var*/[5,i_517,/*Int*/[3,0],this.typer.typeInt], /*Var*/[5,it_518,/*Int*/[3,0],this.typer.typeInt], /*Var*/[5,finish,this.nodeToExpression(over_506),this.typer.types.get(over_506)], /*While*/[21,/*Binop*/[13,/*Ident*/[7,it_518],99,/*Ident*/[7,finish]],/*Block*/[1,[/*Assign*/[14,/*Ident*/[7,i_517],/*Ident*/[7,it_518]], /*Increment*/[22,/*Ident*/[7,it_518]], this.nodeToStatement(by_507)]],true]]];
                                    };
                                }
                                };
                            };
                            {
                                let step_519 = 0;
                                const range_520 = range;
                                if (step_519 == 0 && range_520 != null) { step_519 = 1 };
                                if (step_519 == 1) {
                                    const i_521 = this.unique(name_505, e_297);
                                    const it_522 = this.unique('it');
                                    const finish_523 = this.unique('at');
                                    return /*Block*/[1,[/*Var*/[5,i_521,/*Int*/[3,0],this.typer.typeInt], /*Var*/[5,it_522,this.nodeToExpression(over_506),this.typer.typeInt], /*Var*/[5,finish_523,this.nodeToExpression(range_520),this.typer.typeInt], /*While*/[21,/*Binop*/[13,/*Ident*/[7,it_522],99,/*Ident*/[7,finish_523]],/*Block*/[1,[/*Assign*/[14,/*Ident*/[7,i_521],/*Ident*/[7,it_522]], /*Increment*/[22,/*Ident*/[7,it_522]], this.nodeToStatement(by_507)]],true]]];
                                };
                            };
                            return /*For*/[20,name_505,this.nodeToExpression(over_506),this.nodeToStatement(by_507)];
                        };
                    }
                } break;

                case 15: {
                    {
                        const e_524 = temp_298[1];
                        {
                            if (e_524 == null) { return /*Return*/[8,null] };
                            return /*Return*/[8,this.nodeToExpression(e_524)];
                        };
                    }
                } break;

                case 28: {
                    {
                        const expr_525 = temp_298[1];
                        const name_526 = temp_298[2];
                        return /*Dot*/[16,this.nodeToExpression(expr_525),name_526];
                    }
                } break;

                case 29: {
                    {
                        const expr_527 = temp_298[1];
                        const name_528 = temp_298[2];
                        return /*Dot*/[16,this.nodeToExpression(expr_527),name_528];
                    }
                } break;

                case 13: {
                    {
                        const econd_529 = temp_298[1];
                        const eif_530 = temp_298[2];
                        const eelse_531 = temp_298[3];
                        {
                            let binds_532 = false;
                            for (const cond of $toIterator(econd_529)) {
                                const temp_533 = cond;
                                switch (temp_533&&temp_533[0]) {
                                case 23: {
                                    binds_532 = true
                                } break;
                                };
                            };
                            if (!binds_532 && econd_529.length == 1) { return /*If*/[9,this.nodeToExpression(econd_529[0]),this.nodeToStatement(eif_530),this.nodeToStatement(eelse_531)] };
                            if (!binds_532) {
                                let parens_534 = /*Parenthesis*/[16,this.nodeToExpression(econd_529[0])];
                                let i_535 = 1;
                                while (i_535 < econd_529.length) {
                                    parens_534 = /*Binop*/[13,parens_534,92,/*Parenthesis*/[16,this.nodeToExpression(econd_529[i_535])]];
                                    i_535++;
                                };
                                return /*If*/[9,parens_534,this.nodeToStatement(eif_530),this.nodeToStatement(eelse_531)];
                            };
                            const block_536 = [];
                            let current = 0;
                            const step_537 = this.unique('step');
                            block_536.push(/*Var*/[5,step_537,/*Int*/[3,0],this.typer.typeInt]);
                            let nullable_538 = false;
                            let last = '';
                            {
                                const temp_539 = econd_529[0];
                                switch (temp_539&&temp_539[0]) {
                                case 23: {
                                    {
                                        const name_540 = temp_539[1];
                                        const t_541 = temp_539[2];
                                        const expr_542 = temp_539[3];
                                        const const_543 = temp_539[4];
                                        {
                                            last = this.unique(name_540, econd_529[0]);
                                            nullable_538 = true;
                                            block_536.push(/*Const*/[6,last,this.nodeToExpression(expr_542),this.typer.types.get(econd_529[0])]);
                                        };
                                    }
                                } break;

                                default:
                                {
                                    last = this.unique('temp');
                                    block_536.push(/*Const*/[6,last,this.nodeToExpression(econd_529[0])]);
                                }
                                };
                            };
                            while (current < econd_529.length - 1) {
                                const temp_544 = econd_529[current + 1];
                                switch (temp_544&&temp_544[0]) {
                                case 23: {
                                    {
                                        const vname = temp_544[1];
                                        const t_545 = temp_544[2];
                                        const expr_546 = temp_544[3];
                                        const const_547 = temp_544[4];
                                        {
                                            const name_548 = this.unique(vname, econd_529[current + 1]);
                                            block_536.push(/*Var*/[5,name_548,/*Null*/[8]]);
                                            block_536.push(/*If*/[9,/*Binop*/[13,/*Binop*/[13,/*Ident*/[7,step_537],95,/*Int*/[3,current + 0]],92,/*Binop*/[13,/*Ident*/[7,last],103,(nullable_538)? (/*Null*/[8]) : /*False*/[6]]],/*Block*/[1,[/*Assign*/[14,/*Ident*/[7,name_548],this.nodeToExpression(expr_546)], /*Assign*/[14,/*Ident*/[7,step_537],/*Int*/[3,current + 1]], null]],null]);
                                            current++;
                                            last = name_548;
                                            nullable_538 = true;
                                        };
                                    }
                                } break;

                                default:
                                {
                                    const next = this.unique('temp');
                                    block_536.push(/*Var*/[5,next,/*Null*/[8]]);
                                    block_536.push(/*If*/[9,/*Binop*/[13,/*Binop*/[13,/*Ident*/[7,step_537],95,/*Int*/[3,current + 0]],92,/*Binop*/[13,/*Ident*/[7,last],103,(nullable_538)? (/*Null*/[8]) : /*False*/[6]]],/*Block*/[1,[/*Assign*/[14,/*Ident*/[7,next],this.nodeToExpression(econd_529[current + 1])], /*Assign*/[14,/*Ident*/[7,step_537],/*Int*/[3,current + 1]], null]],null]);
                                    current++;
                                    last = next;
                                    nullable_538 = false;
                                }
                                };
                            };
                            block_536.push(/*If*/[9,/*Binop*/[13,/*Binop*/[13,/*Ident*/[7,step_537],95,/*Int*/[3,econd_529.length - 1]],92,/*Binop*/[13,/*Ident*/[7,last],103,(nullable_538)? (/*Null*/[8]) : /*False*/[6]]],/*Assign*/[14,/*Ident*/[7,step_537],/*Int*/[3,econd_529.length]],null]);
                            block_536.push(/*If*/[9,/*Binop*/[13,/*Ident*/[7,step_537],95,/*Int*/[3,econd_529.length]],this.nodeToStatement(eif_530),this.nodeToStatement(eelse_531)]);
                            return /*Block*/[1,block_536];
                        };
                    }
                } break;

                case 27: {
                    {
                        const expr_549 = temp_298[1];
                        const t_550 = temp_298[2];
                        const v_551 = temp_298[3];
                        const catches = temp_298[4];
                        {
                            let temp_552 = this.unique('temp');
                            let tt = [];
                            let vv = [];
                            for (const c of $toIterator(v_551)) vv.push(DataHelper.nameOf(c));
                            let cc = [];
                            for (const c of $toIterator(catches)) cc.push(this.nodeToStatement(c));
                            for (const c of $toIterator(t_550)) tt.push(this.typer.types.get(c));
                            return /*Try*/[12,this.nodeToStatement(expr_549),tt,vv,cc,temp_552];
                        };
                    }
                } break;

                case 16: {
                    {
                        const value_553 = temp_298[1];
                        return /*Throw*/[13,this.nodeToExpression(value_553)];
                    }
                } break;

                case 10: {
                    {
                        const a_554 = temp_298[1];
                        const op_555 = temp_298[2];
                        const b_556 = temp_298[3];
                        return /*Assignop*/[15,this.nodeToExpression(a_554),op_555,this.nodeToExpression(b_556)];
                    }
                } break;

                case 9: {
                    {
                        const a_557 = temp_298[1];
                        const op_558 = temp_298[2];
                        const b_559 = temp_298[3];
                        {
                            const temp_560 = op_558;
                            switch (temp_560) {
                            case 91: {
                                return /*Assign*/[14,this.nodeToExpression(a_557),this.nodeToExpression(b_559)]
                            } break;

                            default:
                            {
                                const sa_561 = this.nodeToStatement(a_557);
                                const sb_562 = this.nodeToStatement(b_559);
                                if ((sa_561 == null) && (sb_562 == null)) { return null };
                                if ((sa_561 == null) || (sb_562 == null)) { return (() => {
                                    const result_563 = sa_561;
                                    if (result_563 != null) { return result_563 };
                                    return sb_562;
                                })() };
                                return /*Statements*/[0,[sa_561, sb_562]];
                            }
                            };
                        };
                    }
                } break;

                case 18: {
                    return /*Continue*/[25]
                } break;

                case 17: {
                    return /*Break*/[26]
                } break;

                case 20: {
                    {
                        const econd_564 = temp_298[1];
                        const e_565 = temp_298[2];
                        const pre = temp_298[3];
                        return /*While*/[21,this.nodeToExpression(econd_564),this.nodeToStatement(e_565),pre];
                    }
                } break;

                case 19: {
                    {
                        const op_566 = temp_298[1];
                        const postfix_567 = temp_298[2];
                        const e_568 = temp_298[3];
                        {
                            const temp_569 = op_566;
                            switch (temp_569) {
                            case 87: {
                                return /*Increment*/[22,this.nodeToExpression(e_568)]
                            } break;

                            case 86: {
                                return /*Decrement*/[23,this.nodeToExpression(e_568)]
                            } break;

                            default:
                            {
                            }
                            };
                        };
                    }
                } break;

                case 14: {
                    {
                        const inner_570 = temp_298[1];
                        {
                            const unwrapNestedParens_571 = (inner_572) => {
                                const temp_573 = inner_572;
                                switch (temp_573&&temp_573[0]) {
                                case 14: {
                                    {
                                        const i_574 = temp_573[1];
                                        return unwrapNestedParens_571(i_574);
                                    }
                                } break;

                                default:
                                return inner_572
                                };
                            };
                            return this.nodeToStatement(unwrapNestedParens_571(inner_570));
                        };
                    }
                } break;

                case 34: {
                    {
                        const exprs = temp_298[1];
                        const conds = temp_298[2];
                        const guards = temp_298[3];
                        const cases = temp_298[4];
                        {
                            if (exprs.length > 1) { console.error('Multiple switch values not supported:', e_297, Project.data.get(e_297)) };
                            const s_575 = [];
                            const c = [];
                            if (this.nativeEnums) {
                                const index_576 = this.nodeToExpression(exprs[0]);
                                {
                                    let i_577 = 0;
                                    let it_578 = 0;
                                    let at_579 = cases.length;
                                    while (it_578 < at_579) {
                                        i_577 = it_578;
                                        it_578++;
                                        {
                                            const toCase = (co) => {
                                                const temp_580 = co;
                                                switch (temp_580&&temp_580[0]) {
                                                case 7: {
                                                    return /*Null*/[8]
                                                } break;

                                                case 42: {
                                                    return /*Underscore*/[36]
                                                } break;

                                                case 0: {
                                                    {
                                                        const v_581 = temp_580[1];
                                                        return /*String*/[2,v_581];
                                                    }
                                                } break;

                                                case 5: {
                                                    {
                                                        const v_582 = temp_580[1];
                                                        return /*Int*/[3,v_582];
                                                    }
                                                } break;

                                                case 6: {
                                                    {
                                                        const v_583 = temp_580[1];
                                                        return /*Float*/[4,v_583];
                                                    }
                                                } break;

                                                case 2: {
                                                    {
                                                        const v_584 = temp_580[1];
                                                        {
                                                            if (v_584) { return /*True*/[5] };
                                                            return /*False*/[6];
                                                        };
                                                    }
                                                } break;

                                                case 28: {
                                                    {
                                                        const expr_585 = temp_580[1];
                                                        const name_586 = temp_580[2];
                                                        return /*Dot*/[10,this.nodeToExpression(expr_585),name_586];
                                                    }
                                                } break;

                                                case 29: {
                                                    {
                                                        const expr_587 = temp_580[1];
                                                        const name_588 = temp_580[2];
                                                        return /*Dot*/[10,this.nodeToExpression(expr_587),name_588];
                                                    }
                                                } break;

                                                case 9: {
                                                    {
                                                        const a_589 = temp_580[1];
                                                        const op_590 = temp_580[2];
                                                        const b_591 = temp_580[3];
                                                        {
                                                            const temp_592 = op_590;
                                                            switch (temp_592) {
                                                            case 104: {
                                                                return /*Binop*/[13,toCase(a_589),104,toCase(b_591)]
                                                            } break;

                                                            default:
                                                            console.error('(internal warning) Unknown native case binop kind:', e_297, this.typer.parents.get(e_297))
                                                            };
                                                        };
                                                    }
                                                } break;

                                                case 12: {
                                                    {
                                                        const e_593 = temp_580[1];
                                                        const args_594 = temp_580[2];
                                                        const argNames_595 = temp_580[3];
                                                        {
                                                            const temp_596 = e_593;
                                                            switch (temp_596&&temp_596[0]) {
                                                            case 29: {
                                                                {
                                                                    const expr_597 = temp_596[1];
                                                                    const name_598 = temp_596[2];
                                                                    {
                                                                        const a_599 = [];
                                                                        {
                                                                            let arg = 0;
                                                                            let it_600 = 0;
                                                                            let at_601 = args_594.length;
                                                                            while (it_600 < at_601) {
                                                                                arg = it_600;
                                                                                it_600++;
                                                                                {
                                                                                    const temp_602 = args_594[arg];
                                                                                    switch (temp_602&&temp_602[0]) {
                                                                                    case 1: {
                                                                                        {
                                                                                            const name_603 = temp_602[1];
                                                                                            a_599.push(/*Ident*/[7,this.unique(name_603, args_594[arg])]);
                                                                                        }
                                                                                    } break;

                                                                                    case 42: {
                                                                                        a_599.push(/*Underscore*/[36])
                                                                                    } break;

                                                                                    default:
                                                                                    console.log('(internal warning) Unknown native case extract value kind:', args_594[arg])
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                        return /*Call*/[11,this.nodeToExpression(e_593),a_599];
                                                                    };
                                                                }
                                                            } break;

                                                            default:
                                                            console.error('(internal warning) Unknown case extract kind:', e_593, this.typer.parents.get(e_593))
                                                            };
                                                        };
                                                    }
                                                } break;

                                                default:
                                                console.error('(internal warning) Unknown native enum case kind:', co, Project.data.get(co))
                                                };
                                            };
                                            c.push([toCase(conds[i_577])]);
                                            s_575.push(this.nodeToStatement(cases[i_577]));
                                        };
                                    };
                                };
                                return /*Switch*/[24,index_576,c,s_575];
                            };
                            const temp_604 = this.unique('temp');
                            const value_605 = this.nodeToExpression(exprs[0]);
                            let index_606 = /*Ident*/[7,temp_604];
                            let promoted = false;
                            {
                                const temp_607 = this.typer.types.get(exprs[0]);
                                switch (temp_607&&temp_607[0]) {
                                case 6: {
                                    {
                                        const type_608 = temp_607[1];
                                        if (type_608.fieldsTypeSimple == null) {
                                            index_606 = /*EnumTag*/[33,index_606];
                                            promoted = true;
                                        };
                                    }
                                } break;

                                case 7: {
                                    {
                                        const type_609 = temp_607[1];
                                        if (type_609.fieldsTypeSimple == null) {
                                            index_606 = /*EnumTag*/[33,index_606];
                                            promoted = true;
                                        };
                                    }
                                } break;
                                };
                            };
                            let i_610 = 0;
                            for (const ec of $toIterator(cases)) {
                                const block_611 = [];
                                const co_612 = conds[i_610];
                                const cx = [];
                                const addTag = (co_613) => {
                                    const temp_614 = co_613;
                                    switch (temp_614&&temp_614[0]) {
                                    case 7: {
                                        cx.push(/*Null*/[8])
                                    } break;

                                    case 42: {
                                        {
                                        }
                                    } break;

                                    case 0: {
                                        {
                                            const v_615 = temp_614[1];
                                            cx.push(/*String*/[2,v_615]);
                                        }
                                    } break;

                                    case 5: {
                                        {
                                            const v_616 = temp_614[1];
                                            cx.push(/*Int*/[3,v_616]);
                                        }
                                    } break;

                                    case 6: {
                                        {
                                            const v_617 = temp_614[1];
                                            cx.push(/*Float*/[4,v_617]);
                                        }
                                    } break;

                                    case 2: {
                                        {
                                            const v_618 = temp_614[1];
                                            if (v_618) { cx.push(/*True*/[5]) } else cx.push(/*False*/[6]);
                                        }
                                    } break;

                                    case 12: {
                                        {
                                            const e_619 = temp_614[1];
                                            const args_620 = temp_614[2];
                                            const argNames_621 = temp_614[3];
                                            {
                                                const temp_622 = e_619;
                                                switch (temp_622&&temp_622[0]) {
                                                case 29: {
                                                    {
                                                        const expr_623 = temp_622[1];
                                                        const name_624 = temp_622[2];
                                                        {
                                                            const parent_625 = this.typer.parents.get(expr_623);
                                                            const tag_626 = this.getTag(parent_625, name_624);
                                                            cx.push(tag_626);
                                                            if (!promoted) { index_606 = /*EnumTag*/[33,index_606] };
                                                            promoted = true;
                                                            {
                                                                let arg_627 = 0;
                                                                let it_628 = 0;
                                                                let at_629 = args_620.length;
                                                                while (it_628 < at_629) {
                                                                    arg_627 = it_628;
                                                                    it_628++;
                                                                    {
                                                                        const temp_630 = args_620[arg_627];
                                                                        switch (temp_630&&temp_630[0]) {
                                                                        case 1: {
                                                                            {
                                                                                const name_631 = temp_630[1];
                                                                                block_611.push(/*Const*/[6,this.unique(name_631, args_620[arg_627]),/*EnumParameter*/[35,/*Ident*/[7,temp_604,this.typer.types.get(args_620[arg_627])],arg_627],this.typer.types.get(args_620[arg_627])]);
                                                                            }
                                                                        } break;

                                                                        case 42: {
                                                                            {
                                                                            }
                                                                        } break;

                                                                        default:
                                                                        console.log('(internal warning) Unknown case extract value kind:', arg_627)
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    }
                                                } break;

                                                default:
                                                console.error('(internal warning) Unknown case extract kind:', e_619, this.typer.parents.get(e_619))
                                                };
                                            };
                                        }
                                    } break;

                                    case 29: {
                                        {
                                            const expr_632 = temp_614[1];
                                            const name_633 = temp_614[2];
                                            cx.push(this.getTag(this.typer.parents.get(expr_632), name_633));
                                        }
                                    } break;

                                    case 9: {
                                        {
                                            const a_634 = temp_614[1];
                                            const op_635 = temp_614[2];
                                            const b_636 = temp_614[3];
                                            {
                                                const temp_637 = op_635;
                                                switch (temp_637) {
                                                case 104: {
                                                    {
                                                        addTag(a_634);
                                                        addTag(b_636);
                                                    }
                                                } break;

                                                default:
                                                console.error('(internal warning) Unknown case binop kind:', e_297, this.typer.parents.get(e_297))
                                                };
                                            };
                                        }
                                    } break;

                                    default:
                                    console.error('(internal warning) Unknown case kind:', co_613, Project.data.get(co_613))
                                    };
                                };
                                addTag(co_612);
                                c.push(cx);
                                block_611.push(this.unwrapNestingBlocks(this.nodeToStatement(ec)));
                                s_575.push(this.unwrapNestingBlocks(/*Block*/[1,block_611]));
                                i_610++;
                            };
                            return /*Block*/[1,[/*Const*/[6,temp_604,value_605,this.typer.types.get(exprs[0])], /*Switch*/[24,index_606,c,s_575]]];
                        };
                    }
                } break;

                case 24: {
                    {
                        const vars_638 = temp_298[1];
                        {
                            const s_639 = [];
                            for (const v of $toIterator(vars_638)) {
                                let step_640 = 0;
                                const st = this.nodeToStatement(v);
                                if (step_640 == 0 && st != null) { step_640 = 1 };
                                if (step_640 == 1) { s_639.push(st) };
                            };
                            return /*Statements*/[0,s_639];
                        };
                    }
                } break;

                case 33: {
                    {
                        const v_641 = temp_298[1];
                        const index_642 = temp_298[2];
                        {
                            Project.hints.push(new Hint(10, ('Unused value of index `' + (Node.stringify(e_297)) + '`'), Project.data.get(e_297)));
                            {
                                const temp_643 = index_642;
                                switch (temp_643&&temp_643[0]) {
                                case 0: {
                                    return this.nodeToStatement(v_641)
                                } break;

                                case 5: {
                                    return this.nodeToStatement(v_641)
                                } break;

                                case 2: {
                                    return this.nodeToStatement(v_641)
                                } break;

                                case 6: {
                                    return this.nodeToStatement(v_641)
                                } break;
                                };
                            };
                            return /*Statements*/[0,[this.nodeToStatement(v_641), this.nodeToStatement(index_642)]];
                        };
                    }
                } break;

                case 1: {
                    {
                        const name_644 = temp_298[1];
                        Project.hints.push(new Hint(10, ('Unused value `' + (name_644) + '`'), Project.data.get(e_297)));
                    }
                } break;

                case 22: {
                    {
                    }
                } break;

                case 0: {
                    {
                        const v_645 = temp_298[1];
                        Project.hints.push(new Hint(10, ('Unused string `\"' + (v_645) + '\"`'), Project.data.get(e_297)));
                    }
                } break;

                case 2: {
                    {
                        const v_646 = temp_298[1];
                        Project.hints.push(new Hint(10, ('Unused boolean `' + (v_646) + '`'), Project.data.get(e_297)));
                    }
                } break;

                case 5: {
                    {
                        const v_647 = temp_298[1];
                        Project.hints.push(new Hint(10, ('Unused number `' + (v_647) + '`'), Project.data.get(e_297)));
                    }
                } break;

                case 6: {
                    {
                        const v_648 = temp_298[1];
                        Project.hints.push(new Hint(10, ('Unused float `' + (v_648) + '`'), Project.data.get(e_297)));
                    }
                } break;

                case 7: {
                    Project.hints.push(new Hint(10, 'Unused `null`', Project.data.get(e_297)))
                } break;

                default:
                {
                    console.log('normalizer: unprocessed statement ' + e_297 + Typer.positionOf(e_297));
                    return /*UnusedExpression*/[4,this.nodeToExpression(e_297)];
                }
                };
            };
            return null;
        };
        getTag(enumNode, name_649) {
            const temp_650 = enumNode;
            switch (temp_650&&temp_650[0]) {
            case 37: {
                {
                    const t_651 = temp_650[1];
                    const fields_652 = temp_650[2];
                    const valuesType_653 = temp_650[3];
                    {
                        let typed_654 = (null);
                        {
                            const temp_655 = this.typer.types.get(enumNode);
                            switch (temp_655&&temp_655[0]) {
                            case 6: {
                                {
                                    const type_656 = temp_655[1];
                                    typed_654 = type_656;
                                }
                            } break;
                            };
                        };
                        let i_657 = 0;
                        for (const f of $toIterator(fields_652)) {
                            {
                                const temp_658 = f;
                                switch (temp_658&&temp_658[0]) {
                                case 48: {
                                    {
                                        const t_659 = temp_658[1];
                                        {
                                            const temp_660 = t_659;
                                            switch (temp_660&&temp_660[0]) {
                                            case 1: {
                                                {
                                                    const n = temp_660[1];
                                                    {
                                                        if (n == name_649) { if (typed_654.fieldsTypeSimple == this.typer.typeString) { return /*String*/[2,n] } };
                                                        if (n == name_649) { return /*Int*/[3,i_657] };
                                                    };
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;

                                case 12: {
                                    {
                                        const e_661 = temp_658[1];
                                        {
                                            const temp_662 = e_661;
                                            switch (temp_662&&temp_662[0]) {
                                            case 48: {
                                                {
                                                    const t_663 = temp_662[1];
                                                    {
                                                        const temp_664 = t_663;
                                                        switch (temp_664&&temp_664[0]) {
                                                        case 1: {
                                                            {
                                                                const n_665 = temp_664[1];
                                                                if (n_665 == name_649) { return /*Int*/[3,i_657] };
                                                            }
                                                        } break;
                                                        };
                                                    };
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;

                                case 9: {
                                    {
                                        const a_666 = temp_658[1];
                                        const op_667 = temp_658[2];
                                        const b_668 = temp_658[3];
                                        {
                                            const temp_669 = a_666;
                                            switch (temp_669&&temp_669[0]) {
                                            case 48: {
                                                {
                                                    const t_670 = temp_669[1];
                                                    {
                                                        const temp_671 = t_670;
                                                        switch (temp_671&&temp_671[0]) {
                                                        case 1: {
                                                            {
                                                                const n_672 = temp_671[1];
                                                                if (n_672 == name_649) { return this.nodeToExpression(b_668) };
                                                            }
                                                        } break;
                                                        };
                                                    };
                                                }
                                            } break;
                                            };
                                        };
                                    }
                                } break;

                                case 43: {
                                    return null
                                } break;

                                default:
                                console.error('(internal warning) Unknown enum tag kind:', f)
                                };
                            };
                            i_657++;
                        };
                        {
                            let step_673 = 0;
                            const extend = typed_654.extend;
                            if (step_673 == 0 && extend != null) { step_673 = 1 };
                            if (step_673 == 1) { return this.getTag(extend.parent, name_649) };
                        };
                        throw ('Enum has no tag or field `' + (name_649) + '` ') + t_651;
                    };
                }
            } break;
            };
        };
        getAtt(atts_674, atname) {
            if (atts_674 != null && atts_674.length > 0) { for (const att of $toIterator(atts_674)) {
                if (att.name == atname) { return att };
            } };
            return null;
        };
        pushScope() { this.scopes.push((new Map())) };
        popScope() { this.scopes.pop() };
        hasInScope(name_675) {
            for (const scope of $toIterator(this.scopes)) {
                if (scope.get(name_675) != null) { return true };
            };
            return false;
        };
        addToScope(name_676) { this.scopes[this.scopes.length - 1].set(name_676, true) };
        unique(name_677, node) {
            let uname_678 = name_677;
            while (this.hasInScope(uname_678) || (this.keywords.indexOf(uname_678) != -1) || (this.globals.indexOf(uname_678) != -1)) uname_678 = name_677 + '_' + (++this.id);
            this.addToScope(uname_678);
            {
                let step_679 = 0;
                const temp_680 = node != null;
                let already = null;
                if (step_679 == 0 && temp_680 != false) {
                    already = this.parentNames.get(node);
                    step_679 = 1;
                };
                if (step_679 == 1 && already != null) { step_679 = 2 };
                if (step_679 == 2) { throw ('unique ' + (name_677) + ' already set to ' + (already) + ' for ' + (node) + '') };
            };
            if (node != null) { this.parentNames.set(node, uname_678) };
            return uname_678;
        };
        uniqueNative(name_681, node_682) {
            {
                let step_683 = 0;
                const temp_684 = node_682 != null;
                let already_685 = null;
                if (step_683 == 0 && temp_684 != false) {
                    already_685 = this.parentNames.get(node_682);
                    step_683 = 1;
                };
                if (step_683 == 1 && already_685 != null) { step_683 = 2 };
                if (step_683 == 2) { throw ('unique ' + (name_681) + ' already set to ' + (already_685) + ' for ' + (node_682) + '') };
            };
            this.addToScope(name_681);
            this.parentNames.set(node_682, name_681);
        };
        fillStatement(e_686) { return this.nodeToStatement(e_686) };
        renameClassFields(fields_687) {
            this.pushScope();
            for (const f of $toIterator(fields_687)) {
                const temp_688 = f;
                switch (temp_688&&temp_688[0]) {
                case 23: {
                    {
                        const name_689 = temp_688[1];
                        const t_690 = temp_688[2];
                        const expr_691 = temp_688[3];
                        const const_692 = temp_688[4];
                        {
                            const atts_693 = Project.mapAttributes.get(f);
                            const native_694 = this.getAtt(atts_693, 'native');
                            if (native_694 != null) {
                                const temp_695 = native_694.values[0];
                                switch (temp_695&&temp_695[0]) {
                                case 0: {
                                    {
                                        const s_696 = temp_695[1];
                                        if (this.parentNames.get(f) == null) { this.unique(s_696, f) };
                                    }
                                } break;

                                default:
                                throw '@native takes string as argument'
                                };
                            } else if (this.parentNames.get(f) == null) { this.unique(name_689, f) };
                        };
                    }
                } break;

                case 21: {
                    {
                        const name_697 = temp_688[1];
                        const expr_698 = temp_688[2];
                        const vars_699 = temp_688[3];
                        const rettype_700 = temp_688[4];
                        if (name_697 == 'new') { this.parentNames.set(f, 'new') } else {
                            const atts_701 = Project.mapAttributes.get(f);
                            const native_702 = this.getAtt(atts_701, 'native');
                            if (native_702 != null) {
                                const temp_703 = native_702.values[0];
                                switch (temp_703&&temp_703[0]) {
                                case 0: {
                                    {
                                        const s_704 = temp_703[1];
                                        if (this.parentNames.get(f) == null) { this.unique(s_704, f) };
                                    }
                                } break;

                                default:
                                throw '@native takes string as argument'
                                };
                            } else if (this.parentNames.get(f) == null) { this.unique(name_697, f) };
                        };
                    }
                } break;

                case 43: {
                    {
                        const field_705 = temp_688[1];
                        {
                            const temp_706 = field_705;
                            switch (temp_706&&temp_706[0]) {
                            case 23: {
                                {
                                    const name_707 = temp_706[1];
                                    const t_708 = temp_706[2];
                                    const expr_709 = temp_706[3];
                                    const const_710 = temp_706[4];
                                    if (this.parentNames.get(field_705) == null) { this.unique(name_707, field_705) };
                                }
                            } break;

                            case 21: {
                                {
                                    const name_711 = temp_706[1];
                                    const expr_712 = temp_706[2];
                                    const vars_713 = temp_706[3];
                                    const rettype_714 = temp_706[4];
                                    {
                                        const atts_715 = Project.mapAttributes.get(f);
                                        const native_716 = this.getAtt(atts_715, 'native');
                                        if (native_716 != null) {
                                            const temp_717 = native_716.values[0];
                                            switch (temp_717&&temp_717[0]) {
                                            case 0: {
                                                {
                                                    const s_718 = temp_717[1];
                                                    if (this.parentNames.get(field_705) == null) { this.unique(s_718, field_705) };
                                                }
                                            } break;

                                            default:
                                            throw '@native takes string as argument'
                                            };
                                        } else if (this.parentNames.get(field_705) == null) { this.unique(name_711, field_705) };
                                    };
                                }
                            } break;
                            };
                        };
                    }
                } break;
                };
            };
            this.popScope();
        };
        getClassDotField(expr_719, name_720) {
            {
                const temp_721 = expr_719;
                switch (temp_721&&temp_721[0]) {
                case 25: {
                    {
                        const t_722 = temp_721[1];
                        const ext_723 = temp_721[2];
                        const impl_724 = temp_721[3];
                        const fields_725 = temp_721[4];
                        const external_726 = temp_721[5];
                        for (const f of $toIterator(fields_725)) {
                            const temp_727 = f;
                            switch (temp_727&&temp_727[0]) {
                            case 43: {
                                {
                                    const sf = temp_727[1];
                                    if (DataHelper.nameOf(sf) == name_720) { return (() => {
                                        const result_728 = this.parentNames.get(sf);
                                        if (result_728 != null) { return result_728 };
                                        return name_720;
                                    })() };
                                }
                            } break;

                            case 23: {
                                {
                                    const n_729 = temp_727[1];
                                    if (n_729 == name_720) { return (() => {
                                        const result_730 = this.parentNames.get(f);
                                        if (result_730 != null) { return result_730 };
                                        return name_720;
                                    })() };
                                }
                            } break;
                            };
                        };
                    }
                } break;

                case 37: {
                    {
                        const t_731 = temp_721[1];
                        const fields_732 = temp_721[2];
                        const valuesType_733 = temp_721[3];
                        for (const f of $toIterator(fields_732)) {
                            const temp_734 = f;
                            switch (temp_734&&temp_734[0]) {
                            case 43: {
                                {
                                    const sf_735 = temp_734[1];
                                    if (DataHelper.nameOf(sf_735) == name_720) { return (() => {
                                        const result_736 = this.parentNames.get(sf_735);
                                        if (result_736 != null) { return result_736 };
                                        return name_720;
                                    })() };
                                }
                            } break;
                            };
                        };
                    }
                } break;
                };
            };
            return null;
        };
        unwrapNestingBlocks(block_737) {
            const temp_738 = block_737;
            switch (temp_738&&temp_738[0]) {
            case 1: {
                {
                    const el_739 = temp_738[1];
                    {
                        if (el_739.length == 1) { return this.unwrapNestingBlocks(el_739[0]) };
                        return block_737;
                    };
                }
            } break;

            default:
            return block_737
            };
        };
    }
    function btoa(text_33) { return new Buffer(text_33, 'binary').toString('base64') };
    function atob(base64) { return new Buffer(base64, 'base64').toString('binary') };
    function exitProgramWithMessage(message) {};
    function hasOwnProperty(object_103, name_104) { return object_103.hasOwnProperty(name_104) };
    function setLibrary(target_2740, options, files, defines) {
            const temp_2741 = target_2740;
            switch (temp_2741) {
            case 'JavaScript': {
                {
                    defines.js = (() => {
                        const result_2742 = defines.js;
                        if (result_2742 != null) { return result_2742 };
                        return true;
                    })();
                    files.unshift(path.resolve(__dirname + '/library/js/js.hexa'));
                    if (options.includes('nodejs')) { files.unshift(path.resolve(__dirname + '/library/nodejs/nodejs.hexa')) };
                    if (options.includes('browser')) { files.unshift(path.resolve(__dirname + '/library/browser/html.hexa')) };
                }
            } break;

            case 'Native': {
                {
                    defines.native = (() => {
                        const result_2743 = defines.native;
                        if (result_2743 != null) { return result_2743 };
                        return true;
                    })();
                    files.unshift(path.resolve(__dirname + '/library/c/c.hexa'));
                }
            } break;
            };
        };
    function availableGenerators(name_2744) {
            const temp_2745 = name_2744;
            switch (temp_2745) {
            case 'js': {
                return 'JavaScript'
            } break;

            case 'native': {
                return 'Native'
            } break;

            case 'c#': {
                return 'Native'
            } break;

            default:
            return null
            };
        };
    var version = '0.0.1'
    {
        {
            new Main();
        }
    }
})();
