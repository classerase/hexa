// The Hexa Compiler
// Copyright (C) 2018  Oleg Petrenko
// Copyright (C) 2018  Bogdan Danylchenko
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

module {
	declare Attribute = {name: String, values: [Node]}
	declare Handle<T> = {value: T}

	class Project {
		static var mapAttributes: Map<Node, [Attribute]> = new Map()
		static var mapNames: [Node : Node] = [:]
		static var data: [Node : NodeData] = [:]
	}

	class NodeData {
		new(atLine, atColumn, atFile) {
			line = atLine
			column = atColumn
			fileName = atFile
		}
		var line: Int
		var column: Int
		var fileName: String
	}

	// true/false
	TBool(b: Bool)
	// this
	TThis
	// super
	TSuper
	// 123
	TInt(s: String)
	// 0.123
	TFloat(s: String)
	// null
	TNull
	// //
	// // /**/
	enum Node {
		// Constants
		TString(s: String)
		// ident
		TIdent(s: String)

	///////////////////
	/// Syntax Tree ///
	///////////////////

	// a op b
	TBinop(a: Node, op: Token, b: Node)

	// a op= b
	TAssignop(a: Node, op: Token, b: Node)

	// { el[0] ... el[n] }
	TBlock(el: Array<Node>)

	// e(args[0], ...args[n])
	TCall(e: Node, args: Array<Node>, argNames:Array<String>)

	// if (econd[0], ...econd[n]) { eif } [else { eelse }]
	TIf(econd: Array<Node>, eif: Node, eelse: Null<Node>)

	TParenthesis(inner: Node) // (inner)
	TReturn(e: Null<Node>) // return e
	TThrow(e: Node) // throw e
	TBreak // break
	TContinue // continue

	// postfix ? e op : op e
	TUnop(op: Token, postfix: Bool, e: Node)

	// while (econd) { e } or if pre == true then do { e } while (econd)
	TWhile(econd: Node, e: Node, pre: Bool)

	/// Function
	// name(vars): rettype { expr }
	TFunction(name: String, expr: Node, vars: Array<Node>, rettype: NodeType /*, lastIsRest: Bool*/)
	// (const ? let : var) name: t = expr
	TVar(name: String, t: NodeType, expr: Node, const: Bool)

	// var TVar[0], ..., TVar[n]
	TVars(vars: Array<Node>)

	// external class t extends ext implements impl { fields }
	TClass(t: NodeType, ext: NodeType, impl: Array<NodeType>, fields: Array<Node>, external: Bool)

	// try { expr } catch(v[0]) { } ... catch(v[n]) { }
	TTry(expr: Node, t: Array<NodeType>, v: Array<Node>, catches: Array<Node>) /*vars: Array<String>, */

	// expr.name
	TDot(expr: Node, name: String)

	// new t { } (args)
	TNew(path: Array<String>, t: NodeType, args: Array<Node>, fields: Array<String>, el: Array<Node>)

	// [elements[0], ...elements[n]]
	TArray(elements: Array<Node>)

	// [keys[0] : values[0], ... keys[n] : values[n]]
	TMap(keys: Array<Node>, values: Array<Node>)

	// expr[index]
	TIndex(expr: Node, index: Node)

	// switch (exprs) {
	//     case cases[0]: conds[0]
	//     case cases[n]: conds[n]
	// }
	TSwitch(exprs: Array<Node>, conds: Array<Array<Node>>, cases: Array<Node>)

	// module path[0].path[1].r..path[n] { el }
	TModule(path: Array<String>, el: Array<Node>)

	// { name[0]: el[0], name[1]: el[1], ... name[n]: el[n] }
	// NOTE: Do not use Map here
	TObject(names: Array<String>, el: Array<Node>)

	// enum t { fields[0], ..., fields[n] }
	TEnum(t: NodeType, fields: Array<Node>)

	// let expr(extract[0], ..., extract[n]) = name
	TEnumExtract(path: Array<String>, bind: Array<Node/*.TVar*/>, expr: Node)

	// declare name t
	TDeclare(name: String, t: Node)

	// using path[0], ..., path[n]
	TUsing(path: Array<String>)

	// expr is t
	TIs(expr: Node, t: NodeType)

	// expr as t
	TAs(expr: Node, kind: Token, t: NodeType)

	TUnderscore // _
	TStatic(field: Node) // `static` field
	TPrivate(field: Node) // `private` field or type
	TExport(field: Node) // `export` type

	// for (name in over) by
	TFor(name: String, over: Node, by: Node)

	// nullable ?? othewise
	TElvis(nullable: Node, othewise: Node)

	NodeTypeValue(type: NodeType)
}

class DataHelper {
	static function varName(v: Node) {
		switch (v) {
			case Node.TVar(name,_): return name
			case _: throw 'varName got not a TVar, but `\(v)`'
		}
	}

	static function nameOf(v: Node) {
		switch (v) {
			case Node.TPrivate(node): return nameOf(node)
			case Node.TVar(name,_): return name
			case Node.TEnum(t, _):
				switch (t) {
					case NodeType.Type(name): return name
					case NodeType.ParametricType(name, _): return name
				}
				throw "unreachable"

			case Node.TFunction(name,_): return name
			case Node.TClass(t, _):
				switch (t) {
					case NodeType.Type(name): return name
					case NodeType.ParametricType(name, _): return name
				}
				throw "unreachable"

			case Node.TDeclare(name, _): return name
			case _: throw 'nameOf expected named node, but got `\(v)`'
		}
	}

	static function asStringAttValue(a: Attribute, index: Int): String {
		switch (a.values[index]) {
			case null: throw 'Got null, not a string'
			case Node.TString(s): return s
			case _: throw 'Got `(a.values[index])`, not a string'
		}
	}

	static function getLastOfBlock(block: Node): Null<Node> {
		switch (block) {
			case null: throw 'Got null, not a block'
			case Node.TBlock(el): return el[el.length - 1]
			case _: throw 'Got `\(block)`, not a block'
		}
	}

	static function isVoidValue(block: Node): Bool {
		switch (block) {
			case null: return true
			case Node.TReturn(_): return true
			case Node.TBreak: return true
			case Node.TContinue: return true
			case Node.TVar(_): return true
			case Node.TIf(_,_,eelse): if (eelse == null) return true
			case Node.TEnum(_): return true
			case Node.TClass(_): return true
			// Also recursively traverses { ... { ... { ... void }}}
			case Node.TBlock(el):
			if (el.length == 0) return true
			return isVoidValue(el[el.length - 1])
			case _: return false
			return false
		}
	}

	enum NodeType {
		Optional(type: NodeType) // T?
		Type(name: String)
		ParametricType(name: String, params: Array<NodeType>)
		Function(args: Array<NodeType>, ret: NodeType)
		FunctionArg(name: String, type: NodeType, defaultValue: Node)
		Object(names: [String], types: Array<NodeType>)
	}
}
