// The Hexa Compiler
// Copyright (C) 2018  Oleg Petrenko
// Copyright (C) 2018  Bogdan Danylchenko
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

#if js
module {

extern class Buffer<T> implements ArrayAccess<T> {
	static function alloc<T>(size:Int): Buffer<T>
	function toString(encoding:String, ?start:Int, ?end:Int):String
	static function from<T>(string:String, ?encoding:String):Buffer<T>
@native("Buffer")
	var length: Int
	function readUInt16LE(offset: Int): Int
	function writeUInt16LE(value: Int, offset: Int): Int
	function readUInt32LE(offset: Int): Int
}

@native('Map')
declare class Map<K, V> {
	new()
	function get(k: K): V
	function set(k: K, v: V): Void
	function has(k: K): Bool
	function keys(): Array<K>
}

@native("console")
declare class Console {
	static function log(str: String): Void
	static function error(data: Any, ?message: String): Void
}

declare class ProcessStd {
	function write(text: String): Void
}

@native("process")
declare class Process {
	static let stdout: ProcessStd
	static let stderr: ProcessStd
	static let argv: Array<String>
	static function exit(errorCode: Int): Void
	static let versions: { node: String }
}

class ParsedPath {
	var root: String
	var dir: String
	var base: String
	var ext: String
	var name: String
}

@jsRequire("path")
@native("path")
declare class Path {
	static let sep: String
	static function resolve(path: String): String
	static function parse(path: String): ParsedPath
}

	public static function readFileSync<T>(path: String): Buffer<T>
@jsRequire("fs")
@native("fs")
declare class Fs {
	static function lstatSync(path: String): Any
	static function existsSync(path: String): Bool
	static function mkdirSync(path: String): Void
}

@jsRequire("readline-sync")
@native("readlinesync")
declare class Readline {
	static function question(query: String): String
}

class Extentions {
	@inline static function trim(s: String) return @untyped s["trim"]()
}

}
#end
