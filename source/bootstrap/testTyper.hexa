// The Hexa Compiler
// Copyright (C) 2018  Oleg Petrenko
// Copyright (C) 2018  Bogdan Danylchenko
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

module {
	class TestTyper {
		static function test() {
			console.log("TestTyper begin")

			shouldNotError('let a = 1')
			shouldError('let a')
			shouldError('let a = 1 a = 2')
			shouldNotError('var a = 1 var b = 1')
			shouldNotError('var a = 1 var b = a')
			shouldNotError('var a = 1 let b = a')
			shouldError('var a = var b = 1')
			shouldError('var a = var b')
			shouldError('var a = { var b }')
			shouldError('var a = { 1 2 3 var b }')
			shouldNotError('var a = { 1 2 var b 3 }')
			shouldError('var a = { }')
			shouldError('let a = var b')
			shouldNotError('var a = 1 a = 2')
			shouldNotError('let a = { 2 }')
			shouldNotError('let a = { 1 2 3 2 }')
			shouldError('let a = return 2')
			shouldError('let a = { return 2 }')
			shouldError('let a = { break }')
			shouldError('let a = break')
			shouldError('var a = 1, b = return 2')

			// Function
			shouldNotError('var x = function() {return 1} var x = 1')
			shouldError('let x = function() {return 1} x = 1')
			shouldError('function x() {return 1} x = 1')
			shouldError('function x() {return 1} x = function() {return 1}')
			shouldError('{ function x() {return 1} } x()')
			shouldError('{ function x() {return return 1} }')
			shouldError('return 1') // Outside of function
			shouldError('{ return }') // Outside of function
			shouldNotError('{ () => { return 1 } }')
			shouldNotError('var x = function () {} x = function () {}')
			shouldError('let x = function () {} x = function () {} ')
			shouldError('var a: Int? = null if (var b = a) {}') // let-only binding
			shouldNotError('var a: Int? = null if (let b = a) {} a = 5')
			shouldNotError('var a: Int? = null if (let a = a) {} a = 5')
			shouldNotError('var a: Int? = null if (let a = a, let b = a, let a = b) {} a = 5')

			// Arrays
			shouldNotError('let a = [2, 4, 1, 2, 5]')
			shouldNotError('var a = [2, 4, 1, 2, 5] a = [2, 3, 4]')
			shouldError('let a = [2, 4, 1, 2, 5] a = [2, 3, 4]')
			shouldNotError('var a = for (b in [1, 2, 3, 4]) b')
			shouldError('var a = for (b in [1, 2, 3, 4]) a')

			// Maps
			shouldNotError('var a = [ 1: "a", 2: "b", 3: "c" ]')
			shouldNotError('var a = [ "a": 1, "b": 2, "c": 3 ]')
			shouldNotError('var a = [ "a": 1, "b": 2, "c": 3 ] a = ["l": 11]')

			// Throw-Try-Catch
			shouldError('var a = try { throw 1 } catch(e: Any) { throw 2 }')
			shouldError('var a = { try { throw 1 } catch(e: Any) { throw 2 } }')
			shouldNotError('var a = try { 1 } catch(e: Any) { 2 }')
			shouldNotError('try { var a = try { 1 } catch(e: Any) { throw 2 } } catch(e: Any) {}')
			shouldNotError('var a = try { throw 1 } catch(e: Any) { 2 }')
			shouldNotError('var a = { try { throw 1 } catch(e: Any) { 2 } }')
			shouldError('try { 1 } catch(e: Any) { throw 2 }')
			shouldNotError('try { throw 1 } catch(e: Any) { 2 }')
			shouldError('var a = throw 1')
			shouldError('var a = { throw 1 }')

			// Unhandled exceptions in functions
			shouldNotError('function f() throw 123') // Infers @throws(Int)
			shouldError('@noThrow(0) function f() {}')
			shouldNotError('@noThrow function f() {}')
			shouldError('@noThrow function f() throw 123')
			shouldError('@noThrow @throws(Int) function f() throw 123')
			shouldError('@noThrow @throws function f() {}')
			shouldNotError('@throws function f() throw 123')
			shouldNotError('let f = @throws function() throw 123')
			shouldError('let f = @noThrow function() throw 123')
			shouldError('let f = @noThrow @throws function() throw 123')
			shouldNotError('@throws(Int) function f() throw 123')
			shouldNotError('@throws(Int) function f() {}') // Fake exceptions
			shouldNotError('function f() try { throw 123 } catch(e: Int) {}')

			// Loops
			shouldError('{ break }') // Outside of loop
			shouldError('function hi() { continue }') // Outside of loop
			shouldNotError('while (true) { break }')
			shouldNotError('while (true) { continue }')
			shouldError('while ({ break }) { }')
			shouldNotError('do { continue } while (true)')
			shouldError('do { } while ({ continue })')
			shouldNotError('for (a in []) { continue }')
			shouldError('for (a in continue) { }')

			// Global modules
			shouldNotError('class A {}')
			shouldError('module { class A {} class A {} }') // Can not redefine in same namespace
			shouldError('module { let x = 1 } x = 1') // Constant
			shouldNotError('module { var x = 1 } var x = 1') // Overlapping of global var x
			shouldNotError('module { var x = 1 } x = 1') // Global var x
			shouldError('module { class A {} } module { class A {} }') // Can not redefine in same namespace
			shouldNotError('class A {new() {} let a: A = new A()}') // `A` sees itself
			shouldError('function f() {} f(var a)') // Type cannot be inferred
			shouldError('function f(x) {} f(var a)') // Type cannot be inferred
			shouldError('function f() {} f(let a = 1)') // Type cannot be inferred

			// Module namespaces
			shouldError('module hi { function hi() }') // Non-declare should have a body
			shouldError('module hi { function hi() }')

			// Classes
			shouldError('class A { static function hi() { this } }')
			shouldError('function hi() { this }')
			shouldError('{ this }')
			shouldNotError('class A { function hi() { this } }')
			shouldNotError('class A { function hi() { return this } }')
			shouldError('static function hi() { }')
			shouldError('private function hi() { }')

			// Inheritance
			shouldError('class A { function hi() { super() } }')
			shouldError('function hi() { super() }')
			shouldError('{ super }') // Super as value
			shouldError('{ super() }')
			shouldError('{ super.hello() }')
			shouldError('
				class B { function hi() { } }
				class A extends B { static function hi() { super() } }')
			shouldError('
				class B { function hi() { } }
				class A extends B { function hi() { (super).hi() } }') // Super as value
			shouldNotError('
				class B { function hi() { } }
				class A extends B { function hi() { super() } }')
			shouldNotError('
				class B { function hi() { } }
				class A extends B { function hi() { super.hi() } }')

			console.log('TestTyper done \(Math.round((passed/overall)*100))% (\(passed)/\(overall))')
		}

		static var passed = 0
		static var overall = 0

		static function shouldNotError(input: String): Void {
			overall++
			var errorText = didError(input)
			if (errorText != null)
				throw 'TestTyper test fail: `\(input)` should NOT throw error, but it did.\r\n' + errorText
			passed++
		}

		static function shouldError(input: String): Void {
			overall++
			if (didError(input) == null)
				throw 'TestTyper test fail: `\(input)` should throw error, but it is not.'
			passed++
		}

		static function template(code: String, a: [String], b: [String] = null, c: [String] = null, d: [String] = null) : Void {
			let tests = []
			for (ta in a) {
				let ca = code.split('$a$').join(ta)
				if (let bs = b) for (tb in bs) {
					let cb = ca.split('$b$').join(tb)
					if (let cs = c) for (tc in cs) {
						let cc = cb.split('$c$').join(tc)
						if (let ds = d) for (td in ds) {
							let cd = cc.split('$d$').join(td)
							if (tests.indexOf(cd) == -1) tests.push(cd)
						} else if (tests.indexOf(cc) == -1) tests.push(cc)
					} else if (tests.indexOf(cb) == -1) tests.push(cb)
				} else if (tests.indexOf(ca) == -1) tests.push(ca)
			}
			return tests
		}

		static function shouldErrorTemplate(code: String, a: [String], b: [String] = null, c: [String] = null, d: [String] = null) : Void {
			for (test in template(code, a, b, c, d)) shouldError(test)
		}

		static function shouldNotErrorTemplate(code: String, a: [String], b: [String] = null, c: [String] = null, d: [String] = null) : Void {
			for (test in template(code, a, b, c, d)) shouldNotError(test)
		}

		static function didError(input: String): String {
			let input =
			"module { " +
			"@untypedFields declare class Any {} " +
			"@untypedFields declare class Void {} " +
			"@untypedFields declare class Null<T> {} " +
			"@untypedFields declare class Array<T> {} " +
			"@untypedFields declare class Map<K, V> {}" +
			"@untypedFields declare class Bool {}" +
			"@untypedFields declare class Int {}" +
			"@untypedFields declare class String {}" +
			"}" +
			input

			var lexe = Lexer.tokenize(Buffer.from(input), "TEST")
			var parsed = new Parser(lexe).node
			try {
				Typer.fillScopes(Node.TBlock([parsed]))
			} catch(e: Any) {
				return '' + e
			}
			return null
		}
	}
}
