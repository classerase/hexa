// The Hexa Compiler
// Copyright (C) 2018  Oleg Petrenko
// Copyright (C) 2018  Bogdan Danylchenko
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

module {
class TestTyper {
	static function test() {
		Console.log("TestTyper begin")

		shouldNotError('let a = 1')
		shouldError('let a')
		shouldError('let a = 1 a = 2')
		shouldNotError('var a = 1 var b = 1')
		shouldNotError('var a = 1 var b = a')
		shouldNotError('var a = 1 let b = a')
		shouldError('var a = var b = 1')
		shouldError('var a = var b')
		shouldError('var a = { var b }')
		shouldError('var a = { 1 2 3 var b }')
		shouldNotError('var a = { 1 2 var b 3 }')
		shouldError('var a = { }')
		shouldError('let a = var b')
		shouldNotError('var a = 1 a = 2')
		shouldNotError('let a = { 2 }')
		shouldNotError('let a = { 1 2 3 2 }')
		shouldError('let a = return 2')
		shouldError('let a = { return 2 }')
		shouldError('let a = { break }')
		shouldError('let a = break')
		shouldError('var a = 1, b = return 2')

		// Function
		//shouldError('var z = 1 function x(){return 1} z = x')
		shouldError('function x(){return 1} x = function(){return 1}')
		shouldError('{ function x(){return 1} } x()')
		shouldError('{ function x(){return return 1} }')
		shouldNotError('var x = function (){} x = function (){}')
		shouldError('let x = function (){} x = function (){} ')
		shouldError('var a: Int? = null if(var b = a) {}'); // let-only binding
		shouldNotError('var a: Int? = null if(let b = a) {} a = 5')
		shouldNotError('var a: Int? = null if(let a = a) {} a = 5')
		shouldNotError('var a: Int? = null if(let a = a, let b = a, let a = b) {} a = 5')
		shouldNotError('var x = function() {return 1} var x = 1')
		shouldError('let x = function() {return 1} x = 1')
		shouldError('function x() {return 1} x = 1')

		// Arrays
		shouldNotError('let a = [2, 4, 1, 2, 5]')
		//shouldError('let a = [2, 4, 1, 2, ""]')
		//shouldError('let a = [2, 4, 1, 2, 5.1]')
		shouldNotError('var a = [2, 4, 1, 2, 5] a = [2, 3, 4]')
		shouldError('let a = [2, 4, 1, 2, 5] a = [2, 3, 4]')
		shouldNotError('var a = 4, b = 2, c = 4 let arr = [a, b, c]')
		//shouldError('var a = 4, b = 2, c = 4 let arr = [a, b, c, ""]')
		shouldNotError('var a = for (b in [1, 2, 3, 4]) b')
		shouldError('var a = for (b in [1, 2, 3, 4]) a')

		// Maps
		shouldNotError('var a = [ 1: "a", 2: "b", 3: "c" ]')
		//shouldError('var a = [ 1: "a", 2: "b", 3: 2 ]')
		//shouldError('var a = [ 1: "a", 2: "b", "3": 2 ]')
		shouldNotError('var a = [ "a": 1, "b": 2, "c": 3 ]')
		//shouldError('var a = [ "a": 1, "b": 2, 3: 25 ]')
		//shouldError('var a = [ "a": 1, "b": 2, "3": "25" ]')
		shouldNotError('var a = [ "a": 1, "b": 2, "c": 3 ] a = ["l": 11]')

		// Throw-Try-Catch
		shouldNotError('var a = try { 1 } catch(e: Any) { 2 }')
		shouldNotError('var a = try { 1 } catch(e: Any) { throw 2 }')
		shouldNotError('var a = try { throw 1 } catch(e: Any) { 2 }')
		shouldNotError('var a = { try { throw 1 } catch(e: Any) { 2 } }')
		//shouldError('var a = throw 1')
		//shouldError('var a = { throw 1 }')

		// Unhandled exceptions in functions
		//shouldError('function f() throw 123') BUT @throws INFERENCE!
		//shouldError('@noThrow function f() throw 123')
		shouldNotError('@throws function f() throw 123')
		shouldNotError('@throws(Int) function f() throw 123')
		shouldNotError('@throws(Int) function f() {}') // Fake exceptions
		//shouldError('@throws function f() {}') // Type of exception cannot be inferred
		shouldNotError('function f() try { throw 123 } catch(e: Int) {}')

		// Global modules
		shouldNotError('class A {}')

		// Module namespaces
		shouldError('module hi { function hi() }') // Non-declare should have a body
		shouldError('module hi { function hi() }')

		shouldNotError('module{class A {static var x}} var a = A.x')
		Console.log('TestTyper done \(Math.round((passed/overall)*100))% (\(passed)/\(overall))')
	}

	static var passed = 0
	static var overall = 0

	static function shouldNotError(input: String): Void {
		overall++
		var errorText = didError(input)
		if (errorText != null)
			throw 'TestTyper test fail: `\(input)` should NOT throw error, but it did.\r\n' + errorText
		Console.log('TestTyper test passed: `\(input)`')
		passed++
	}

	static function shouldError(input: String): Void {
		overall++
		if (didError(input) == null)
			throw 'TestTyper test fail: `\(input)` should throw error, but it is not.'
		Console.log('TestTyper test passed: `\(input)`')
		passed++
	}

	static function didError(input: String): String {
		let input =
		"module { " +
		"@untypedFields declare class Any {} " +
		"@untypedFields declare class Void {} " +
		"@untypedFields declare class Null<T> {} " +
		"@untypedFields declare class Array<T> {} " +
		"@untypedFields declare class Map<K, V> {}" +
		"@untypedFields declare class Bool {}" +
		"@untypedFields declare class Int {}" +
		"@untypedFields declare class String {}" +
		"}" +
		input

		var lexe = Lexer.tokenize(Buffer.from(input), "TEST")
		var parsed = new Parser(lexe).node
		try {
			Typer.fillScopes(Node.TBlock([parsed]))
		} catch(e: Any) {
			return '' + e
		}
		return null
	}
}
}
