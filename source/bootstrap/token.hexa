// The Hexa Compiler
// Copyright (C) 2018  Oleg Petrenko
// Copyright (C) 2018  Bogdan Danylchenko
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

module {
enum Token: Int {
	// Default
	Eof          = 0
	Default      = 123 // Simplifies some parsing

	// Keywords
	Underscore   = 1
	KBreak       = 3
	KCase        = 4
	KCatch       = 6
	KClass       = 7
	KContinue    = 8
	KDo          = 9
	KElse        = 10
	KEnum        = 11
	KExtends     = 12
	KDeclare     = 13
	KFalse       = 14
	KFor         = 15
	KFunction    = 16
	KIf          = 17
	KImplements  = 18
	//KImport      = 19
	KIn          = 20
	KInterface   = 22
	KLet         = 23
	KNew         = 25
	KNull        = 26
	KModule      = 28
	KPrivate     = 29
	KReturn      = 31
	KStatic      = 32
	KSwitch      = 33
	KThis        = 34
	KThrow       = 35
	KTrue        = 36
	KTry         = 37
	KUsing       = 39
	KVar         = 40
	KWhile       = 41
	KIs			 = 57
	KAs          = 58
	KSuper       = 59

	// Literals
	LFloat       = 60 // 0.123
	LUpper       = 61 // Word
	LLower       = 62 // word
	LInt         = 63 // 123
	LString      = 64 // "", '', ``
	LDoc         = 65 // /** doc **/
	// var LCommentLine = 66
	// var LComment	 = 67

	// Symbols
	At           = 70 // @
	BkClose      = 71 // ]
	BkOpen       = 72 // [
	BrClose      = 73 // }
	BrOpen       = 74 // {
	Comma        = 75 // ,
	DblDot       = 76 // :
	Dot          = 77 // .
	Sharp        = 78 // #
	PClose       = 79 // )
	POpen        = 80 // (
	Question     = 81 // ?
	Semicolon    = 82 //
	Query        = 83 // $
	Interval     = 98 // ...

	// Unop
	OpDecrement  = 86 // --
	OpIncrement  = 87 // ++
	OpNegBits    = 88 // ~
	OpNot        = 89 // !

	// Binop
	OpArrow      = 90 // =>
	OpAssign     = 91 // =
	OpBoolAnd    = 92 // &&
	OpBoolOr     = 93 // ||
	OpDiv        = 94 // /
	OpEq         = 95 // ==
	OpGt         = 96 // >
	OpGte        = 97 // >=
	OpLt         = 99 // <
	OpLte       = 100 // <=
	OpMod       = 101 // %
	OpMult      = 102 // *
	OpNotEq     = 103 // !=
	OpOr        = 104 // |
	OpShl       = 105 // <<
	OpShr       = 106 // >>
	OpSub       = 107 // -
	OpUShr      = 108 // >>>
	OpXor       = 109 // ^
	OpIntDiv    = 110 // \
	OpAdd       = 111 // +
	OpAnd       = 112 // &
	OpChain     = 113 // ?.

	public function stringify(?param:String): String {
		var token : Token = cast this
		return switch (token) {
		case At: "@"
		case Query: "$"
		case Sharp: "#"
		case BkClose: "]"
		case BkOpen: "["
		case BrClose: "}"
		case BrOpen: "{"
		case Comma: ","
		case DblDot: ":"
		case Default: "<!--default-->"
		case Dot: "."
		case Eof: "<!--eof-->"
		case Interval: "..."
		case KAs: "as"
		case KBreak: "break"
		case KCase: "case"
		case KCatch: "catch"
		case KClass: "class"
		case KContinue: "continue"
		case KDo: "do"
		case KElse: "else"
		case KEnum: "enum"
		case KExtends: "extends"
		case KDeclare: "declare"
		case KFalse: "false"
		case KFor: "for"
		case KFunction: "function"
		case KIf: "if"
		case KImplements: "implements"
		//case KImport: "import"
		case KIn: "in"
		case KInterface: "interface"
		case KLet: "let"
		case KNew: "new"
		case KNull: "null"
		case KModule: "module"
		case KPrivate: "private"
		case KReturn: "return"
		case KStatic: "static"
		case KSuper: "super"
		case KSwitch: "switch"
		case KThis: "this"
		case KThrow: "throw"
		case KTrue: "true"
		case KTry: "try"
		case KUsing: "using"
		case KVar: "var"
		case KWhile: "while"
		case OpAdd: "+"
		case OpAnd: "&"
		case OpArrow: "=>"
		case OpAssign: "="
		case OpBoolAnd: "&&"
		case OpBoolOr: "||"
		case OpDecrement: "--"
		case OpDiv: "/"
		case OpEq: "=="
		case OpGt: ">"
		case OpGte: ">="
		case OpIncrement: "++"
		case OpIntDiv: "\\"
		case OpLt: "<"
		case OpLte: "<="
		case OpMod: "%"
		case OpMult: "*"
		case OpNegBits: "~"
		case OpNot: "!"
		case OpNotEq: "!="
		case OpOr: "|"
		case OpShl: "<<"
		case OpShr: ">>"
		case OpSub: "-"
		case OpUShr: ">>>"
		case OpXor: "^"
		case OpChain: "?."
		case PClose: ")"
		case POpen: "("
		case Question: "?"
		case Semicolon: ";"
		case Underscore: "_"
		case LString: param == null? 'string' : '\'\(param)\''
		case LUpper: param == null? 'upper' : param
		case LLower: param == null? 'lower' : param
		case LInt: param == null? 'integer' : param
		case LFloat: param == null? 'float' : param
		case LDoc: '///\(param)'
		// case LComment: '/*\(param)*/'
		// case LCommentLine: '//\(param)'
		case KIs: "is"
		}
	}
}
}
