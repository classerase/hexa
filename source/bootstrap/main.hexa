// The Hexa Compiler
// Copyright (C) 2018  Oleg Petrenko
// Copyright (C) 2018  Bogdan Danylchenko
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

enum Generator: String {
	JavaScript = "JavaScript"
	C = "C"
	Haxe = "Haxe"
}

declare Target = {
	generator: Generator,
	instance: { generatePackageJson: Bool }
}

// Contents of hexa.json
declare Package = {
	name: String,
	output: String,
	version: String,
	description: String,
	main: String,
	author: String,
	license: String,
	target: Target,
	files: [String]
}

class Main {
	// Source https://stackoverflow.com/questions/3430939/node-js-readsync-from-stdin
	static function question(query: String): String {
		Process.stdout.write(query)
		var bufsize = 256
		var buf = new Buffer(bufsize)
		var bytesRead = 0
		try {
			bytesRead = Fs.readSync(Process.stdin.fd, buf, 0, bufsize)
		} catch (e: { code: String }) {{
			if (e.code == 'EAGAIN') return 'ERROR: interactive stdin input not supported.'
			if (e.code == 'EOF') return ''
			throw e // unexpected exception
		}}
		if (bytesRead == 0) {
			// No more stdin input available.
			// OS X 10.8.3: regardless of input method, this is how the end
			// of input is signaled.
			// Windows 7: this is how the end of input is signaled for
			// *interactive* stdin input.
			return ''
		}
		// Process the chunk read.
		let answer = buf.toString('utf8', 0, bytesRead).trim()
		return answer
	}

	// Asks a couple of questions and creates hexa.json
	function init() {
		var currentDirTmp = Process.argv[1].split(Path.sep)
		var packageFileName = currentDirTmp.splice(0, -1).join(Path.sep) + Path.sep + "hexa.json"
		var currentDir = currentDirTmp[currentDirTmp.length - 2]
		var name = question('Enter package name (\(currentDir)): ')
		if (name == "") name = currentDir

		var version = question("Enter package version (1.0.0): ")
		if (version == "") version = "1.0.0"

		var description = question("Enter package description: ")

		var main = question("Enter main file (main.hexa): ")
		if (main == "") main = "main.hexa"

		var target: Target = { generator: Generator.JavaScript, instance: { generatePackageJson: false } }
		var generatorstr = question("Enter generator type (JavaScript):\n1. JavaScript\n2. C\n3. Haxe")
		if (generatorstr.toUpperCase() == "C" || generatorstr == "2") target.generator = Generator.C
		else if (generatorstr.toUpperCase() == "HAXE" || generatorstr == "3") target.generator = Generator.Haxe

		while (!(main.endsWith(".hexa"))) {
			Process.stdout.write("Wrong file name. Must ends with '.hexa'.\n")
			main = question("Enter main file (main.hexa): ")
		}

		var author = question("Enter package author name: ")
		var license = question("Enter license: ")

		var pack: Package = {
			name: name, version: version, description: description,
			output: name,
			main: main, author: author, license: license, target: target, files: []
		}
		var packageStr = JSON.stringify(pack, null, "\t")
		var answ = question('About to write to: \(packageFileName):\n\(packageStr)\nIs this ok? (yes)')
		if (answ != "") Process.exit(1)

		Fs.writeFileSync("hexa.json", packageStr)
		Process.stdout.write("Hexa package initialized!\n")
	}

	// Parses a file
	function processFile(target: String): Node {
		var content = Fs.readFileSync(target)
		var tokens = Lexer.tokenize(content, target)
		var parser = new Parser(tokens)
		return parser.node
	}

	// Read-eval-print loop, starts if hexa called without arguments
	function repl() {
		// Load standard library
		let js = processFile('library/js/js.hexa')
		let nodejs = processFile('library/nodejs/nodejs.hexa')
		// REPL
		let lines = []
		var lines = []
		while (true) {
			var line = question("> ")
			if (line.length == 0) continue
			lines.push(line)
			lines = [line] // Do not remember previous commands yet
			try {
				var code = '"use strict"\r\n'
				try {
					let content = lines.join('\n')
					let tokens = Lexer.tokenize(Buffer.from(content), "REPL")
					let parser = new Parser(tokens)
					var collected = Node.TBlock([js, nodejs, parser.node])
					if (parser.node == null) continue
					Typer.fillScopes(collected)
					code += GenJs.stringifyProject(Normalizer.normalize(collected, GenJs.reserved))
				} catch (e: Any) {
					lines.pop()
					console.error('\x1b[31mCompilation Error: ' + e, '\x1b[0m')
					continue
				}
				let result = eval(code)
				if (result == null) console.log('\x1b[90m' + result, '\x1b[0m')
				else if (result == true) console.log('\x1b[33m' + result, '\x1b[0m')
				else if (result == false) console.log('\x1b[33m' + result, '\x1b[0m')
				else console.log(result)
			} catch (e: Any) {
				console.error("Error: " + e)
			}
		}
	}

	// Parses all files, shows errors and stops if any
	function processFiles(targets: [String]): [Node] {
		var res: [Node] = []
		for (target in targets) {
			try {
				res.push(processFile(target))
			} catch (e: Any) {
				console.log(e.toString())
			}
		}
		if (targets.length != res.length) throw 'Stopped on errors'
		return res
	}

	// Loads hexa.json
	function loadPackage(filename): Package {
		var pack = JSON.parse(Fs.readFileSync(Path.resolve(filename)).toString('utf8'))
		function incorrect(what: String) {
			Process.stdout.write("Incorrect package file! Field `\(what)` does not exists\n")
			Process.exit(1)
		}
		if (pack.target == null) incorrect('target')
		if (pack.main == null) incorrect('main')
		if (pack.name == null) incorrect('name')
		Project.defines = pack.define ?? {:}

		// Add standard library
		if (pack.files == null) pack.files = []
		pack.files.unshift(Path.resolve('library/js/js.hexa'))
		pack.files.unshift(Path.resolve('library/nodejs/nodejs.hexa'))
		return pack
	}

	// Entry
	new() {
		// Debug information

		// Used to measure compiler performance and to show a success message
		let begin = Date.now()

		// Initialize compiler
		Lexer.init()

		// Self-test
		#if debug
			TestLexer.test()
			TestParser.test()
			TestTyper.test()
		#end

		// Usage examples
		if (Process.argv[2] == "--version") {
			console.log('Hexa Alpha on node.js ' + Process.versions.node)
			Process.exit(0)
		}
		else if (Process.argv[2] == "--help") {
			console.log("Usage: `node hexa.js project.json` or `node hexa.js init`")
			Process.exit(1)
		}
		else if (Process.argv[2] == null) {
			repl()
			Process.exit(0)
		}
		else if (Process.argv[2] == "init") {
			init()
			Process.exit(0)
		}

		// Get inputs
		var currentFile = Path.resolve(Process.argv[2])
		var currentParsedFile: ParsedPath = Path.parse(currentFile)
		var input: Package = null
		var main: String = null
		var packageFolder: String = currentParsedFile.dir

		// Build the selected project
		if (currentParsedFile.ext == ".json") {
			input = loadPackage(currentFile)
			console.log("[Building \(input.name)]")
			main = Path.resolve(currentFile + '/../') + Path.sep + (input.main)
		}
		// Search for project in the selected folder
		else if (Fs.lstatSync(currentFile).isDirectory()) {
			input = loadPackage(currentFile + Path.sep + "hexa.json")
			packageFolder = currentFile
			main = packageFolder + Path.sep + (input.main)
		}
		// Evaluate file directly
		else if (currentParsedFile.ext == ".hexa") {
			eval('"use strict"\r\n' + GenJs.stringifyProject(Normalizer.normalize(processFile(currentFile), GenJs.reserved)))
			return
		}

		// Perform compilation
		var codes: [Node] = []
		if (input.files != null) {
			var files = input.files.map(function(file) {
				// Avoid global paths
				if (file.startsWith('/') || file.charAt(1) == ':') return Path.resolve(file)
				return Path.resolve(packageFolder + Path.sep + file)
			})
			codes = processFiles(files)
		}
		codes.push(processFile(main))
		var collected: Node = Node.TBlock(codes)

		Typer.fillScopes(collected)

		var parsedMain = collected

		// Perform code generation
		switch (input.target.generator) {
			case Generator.JavaScript:
				var target = packageFolder + Path.sep + Path.parse(input.main).name + ".js"
				if (input.output != null)
					target = packageFolder + Path.sep + Path.parse(input.output).name + ".js"
				let license = input.license != null? "// LICENSE \(input.license)\r\n" : ''

				let outs = GenJs.stringifyProject(Normalizer.normalize(collected, GenJs.reserved))
				Fs.writeFileSync(target, license + outs)
			case Generator.C:
			case Generator.Haxe:

			case _: throw "Generator is not defined or unknown. Is there `target.generator` field in `hexa.json`?"
		}

		console.log("[Finished in \(Date.now() - begin) ms]")
	}
}

// Entry point
new Main()
