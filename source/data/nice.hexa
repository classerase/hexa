// The Hexa Compiler
// Copyright (C) 2018  Oleg Petrenko
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

module {
	// Does not return a value
	enum NiceStatement {
		Statements(el: [NiceStatement]) // Multiple statements *not* wrapped into a block
		Block(el: [NiceStatement])
		Call(e: NiceExpression, args: [NiceExpression])
		New(e: NiceExpression, args: [NiceExpression])
		UnusedExpression(e: NiceExpression)
		Var(name: String, expr: NiceExpression, type: NodeType)
		Const(name: String, expr: NiceExpression, type: NodeType)
		Function(name: String, expr: NiceStatement, args: [String], defaults: [NiceExpression], types: [NodeType], returns: NodeType)
		Return(e: NiceExpression) // TODO Null?
		If(econd: NiceExpression, eif: NiceStatement, eelse: NiceStatement) // TODO Null?
		Try(expr: NiceExpression, t: [NodeType], v: [String], catches: [NiceStatement])
		Throw(value: NiceExpression)
		Assign(name: NiceExpression, value: NiceExpression)
		Assignop(name: NiceExpression, op: Token, value: NiceExpression)
		Dot(expr: NiceExpression, name: String)
		For(name: String, over: NiceExpression, by: NiceStatement)
		While(econd: NiceExpression, e: NiceStatement, pre: Bool)
		Increment(e: NiceExpression)
		Decrement(e: NiceExpression)
		Switch(expr: NiceExpression, cases: [[NiceExpression]], statements: [NiceStatement])
		Continue
		Break
	}

	// Returns a value
	enum NiceExpression {
		String(s: String)
		Int(s: String)
		Float(s: String)
		True
		False
		Ident(s: String)
		Null
		This
		Dot(expr: NiceExpression, name: String)
		Call(e: NiceExpression, args: [NiceExpression])
		New(e: NiceExpression, args: [NiceExpression])
		Binop(a: NiceExpression, op: Token, b: NiceExpression)
		Function(name: String, expr: NiceStatement, args: [String], defaults: [NiceExpression], types: [NodeType], returns: NodeType)
		Arrow(expr: NiceExpression, args: [String], defaults: [NiceExpression], types: [NodeType], returns: NodeType)
		Parenthesis(inner: NiceExpression)
		Object(names: [String], el: [NiceExpression], types: [NodeType])
		Array(values: [NiceExpression], valueType: NodeType)
		Map(keys: [NiceExpression], values: [NiceExpression], keyType: NodeType, valueType: NodeType)
		Unop(op: Token, postfix: Bool, e: NiceExpression)
		Elvis(nullable: Node, othewise: Node)
		If(econd: NiceExpression, eif: NiceExpression, eelse: NiceExpression) // TODO Null?
		Index(expr: NiceExpression, index: NiceExpression)
		Assignop(name: NiceExpression, op: Token, value: NiceExpression)
		NativeOperator(kind: NativeOperatorKind, args: [NiceExpression], name: String)
		Enum(type: String, tagName: String, tag: NiceExpression, args: [NiceExpression])
		Underscore
	}

	enum NativeOperatorKind : Int {
		Infix = 0
		Function = 1
		Prefix = 2
		Postfix = 3
	}
}
