// The Hexa Compiler
// Copyright (C) 2019  Oleg Petrenko
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

module {
	// See: `/docs/typer.md`
	class Typer {
		new () {}
		function fillFiles(collected: [Node]): Void {
			function fillModuleNamespace(m: Node) {
				var el = null
				var root: String? = null
				switch (m) {
					case Node.TModule(path, els):
					el = els
					root = path.join('.')
					case _: throw 'Unreachable #2'
				}

				if (namespaces[root] == null) {
					namespaces[root] = m
				} else {
					var els = null
					switch (namespaces[root]) {
						case Node.TModule(_, el): els = el
						case _: throw 'Unreachable #1'
					}
					while (el.length > 0) els.push(el.pop())
				}

				{
					var els = null
					switch (namespaces[root]) {
						case Node.TModule(_, el): els = el
						case _: throw 'Unreachable #4'
					}

					for (e in els) {
						var name = nameOfModuleItem(e)
						var found = false
						for (e in els) {
							if (nameOfModuleItem(e) == name) {
								if (found) throw ('Type `\(name)` already exists in module')
								if (!found) found = true
							}
						}
					}
				}
			}

			// Let's fill global namespaces first to avoid delayed expansion
			for (file in collected) {
				var didInit = false
				var lastOne = file[0]
				for (e in file) switch (e) {
					case Node.TModule(path, el):
						if (didInit) fail(
							'Modules should follow before expressions\n'
							+ positionOf(lastOne) + 'Expression is here',
						e)
						fillModuleNamespace(e)
					case _:
						lastOne = e
						didInit = true
				}
			}

			var intermediate = []

			// Fill intermediate non-existsing modules (module aaa.not_exists.bbb {})
			{
				var intermediateSubs = []
				for (ns in namespaces.keys()) {
					var path = ns.split('.')
					var namespace = path.shift()
					function check(namespace) {
						if (namespaces[namespace] == null && intermediate.indexOf(namespace) == -1) {
							intermediate.push(namespace)
						}
					}
					check(namespace)
					while (path.length > 0) {
						namespace += '.' + path.shift()
						check(namespace)
					}
				}

				for (path in intermediate) {
					var m = Node.TModule(path.split('.'), [])
					namespaces[path] = m
				}
			}

			function findBasicType(name: String): ClassType {
				let subj = findInNamespaceRoots(name)
				if (subj == null)
					fail('Cannot find basic type `\(name)`. This type should be a part of standard library of the compilation target.')
				return registerClassType(subj)
			}

			typeInt = findBasicType('Int').instantiate()
			typeBool = findBasicType('Bool').instantiate()
			typeFloat = findBasicType('Float').instantiate()
			typeString = findBasicType('String').instantiate()
			typeArray = findBasicType('Array')
			typeMap = findBasicType('Map')
			typeAny = findBasicType('Any').instantiate()
			typeVoid = findBasicType('Void').instantiate()

			// Fill module scopes of all files at first
			pushScope()
			for (file in collected) for (e in file) switch (e) {
				case Node.TModule(path, el):
					for (node in el) {
						parents.set(node, e)
						fill(node)
					}
				case _:
			}
			popScope()

			// Fill initialization code at files roots
			for (file in collected) {
				pushScope()
				for (e in file) switch (e) {
					case Node.TModule(path, el):
					case _: fill(e)
				}
				popScope()
			}
		}

		function registerClassType(node: Node): ClassType {
			if (let type = types.get(node)) {
				switch (type) {
					case Type.Class(t): return t
				}
			} else {
				let type = new ClassType()
				type.parent = node
				types.set(node, Type.Class(type))

				switch (node) {
					case Node.TClass(t, extend, implement, f, external):
						if (let ext = extend) toType(ext, node)
						for (impl in implement) toType(impl, node)
						pushScope()

						// Fill scopes
						for (field in f) {
							switch (field) {
								case Node.TFunction(name, _):
									if (type.fieldNames.includes(name))
										fail('Field `\(name)` already exists', field)
									type.fieldNames.push(name)
									if (name == 'new') type.constructor = type.fieldNames.length - 1
									addScope(name, field)
								case Node.TVar(name, _):
									if (type.fieldNames.includes(name))
										fail('Field `\(name)` already exists', field)
									type.fieldNames.push(name)
									addScope(name, field)
								case Node.TProperty(field, _, _):
									switch (field) {
										case Node.TVar(name, _):
											if (type.fieldNames.includes(name))
												fail('Field `\(name)` already exists', field)
											type.fieldNames.push(name)
											addScope(name, field)
									}
								case Node.TStatic(f): switch (f) {
									case Node.TFunction(name, _):
										if (type.fieldNames.includes(name))
											fail('Field `\(name)` already exists', field)
										type.fieldNames.push(name)
										type.fieldStatic[type.fieldNames.length - 1] = true
										addScope(name, field)
									case Node.TVar(name, _):
										if (type.fieldNames.includes(name))
											fail('Field `\(name)` already exists', field)
										type.fieldNames.push(name)
										type.fieldStatic[type.fieldNames.length - 1] = true
										addScope(name, field)
								}
								case _:
									fail('Wrong class field format', field)
							}
							parents.set(field, node)
						}

						// Fill expressions
						for (field in f) switch (field) {
							case Node.TFunction(name, expr, vars, rettype):
								if (name == 'new') type.constructor = type.fieldNames.length - 1
								if (external, expr != null) {
									if (name == 'new')
										fail('External class constructor `new()` cannot have a body', field)
									else
										fail('External class field `function \(name)` cannot have a body', field)
								}
								let _insideClassMethod = insideClassMethod
								let _allowSuper = allowSuper
								insideClassMethod = true
								allowSuper = (extend != null)
								if (!external) fillFunction(field, expr, vars, rettype)
								insideClassMethod = _insideClassMethod
								allowSuper = _allowSuper
							case Node.TVar(name, t, e, const):
								if (external, e != null)
									fail('External class field `var \(name)` cannot have expression', field)
								let _insideClassMethod = insideClassMethod
								insideClassMethod = true
								if (e != null) fillExpression(e)
								insideClassMethod = _insideClassMethod
								mixVarTypes(t, e, field)
							case Node.TProperty(field, _, _):
									switch (field) {
										case Node.TVar(name, t, e, const):
											if (external, e != null)
												fail('External class field `var \(name)` cannot have expression', field)
											let _insideClassMethod = insideClassMethod
											insideClassMethod = true
											if (e != null) fillExpression(e)
											insideClassMethod = _insideClassMethod
								}
							case Node.TStatic(f): switch (f) {
								case Node.TFunction(name, expr, vars, rettype):
									if (external, expr != null)
										fail('External class field `static function \(name)` cannot have a body', field)
									let _insideClassMethod = insideClassMethod
									insideClassMethod = false
									if (!external) fillFunction(f, expr, vars, rettype)
									insideClassMethod = _insideClassMethod
									types.set(field, types.get(f))
								case Node.TVar(name, t, e, const):
									if (external, e != null)
										fail('External class field `static var \(name)` cannot have expression', field)
									if (e != null) fillExpression(e)
									mixVarTypes(t, e, f)
									types.set(field, types.get(f))
							}
							case _:
								fail('Wrong class field format', node)
						}

						popScope()
					case _:
						fail('ClassType expects (declare) class node, but got ' + node, node)
				}

				return type
			}
		}

		function registerEnumType(node: Node): Type {
			if (let type = types.get(node)) {
				switch (type) {
					case Type.Enum(t): return t
				}
			} else {
				let type = new EnumType(node)
				type.parent = node
				types.set(node, Type.Enum(type))

				var tag = 0

				switch (node) {
					case Node.TEnum(t, f, valuesType):
					pushScope()

					// Check for incompatible tag format and fill scopes
					for (field in f) {
						switch (field) {
							// `enum E { A }`
							case Node.NodeTypeValue(t): switch (t) {
								case NodeType.Type(name):
									if (type.fieldNames.includes(name))
										throw Typer.fail('Field `\(name)` already exists', node)
									type.fieldNames.push(name)
									type.fieldEnumConstructor[type.fieldNames.length - 1] = true
									type.tagBindVars[type.fieldNames.length - 1] = []
									type.fieldType[type.fieldNames.length - 1] = Type.EnumInstance(this, tag)
									tag++
								case _:
									fail('Wrong enum constructor format, should be `Name`', node)
							}
							// `enum E { A(b: C) }`
							case Node.TCall(e, args, argNames):
								if (valuesType != null)
									throw Typer.fail('Cannot use `Value(args)` format for simple enum', node)
								switch (e) {
									case Node.NodeTypeValue(t): switch (t) {
										case NodeType.Type(name):
											if (type.fieldNames.includes(name))
												throw Typer.fail('Field `\(name)` already exists', node)
											type.fieldNames.push(name)
											type.fieldEnumConstructor[type.fieldNames.length - 1] = true
											let tagBindVars = []
											type.tagBindVars[type.fieldNames.length - 1] = tagBindVars

											for (i in args.length) {
												if (argNames[i] == null)
													fail('Enum constructor arguments should have names `E(name1: T, name2: T)', args[i])
												switch (args[i]) {
													case Node.NodeTypeValue(t):
														tagBindVars[i] = t
													case Node.TArray(el):
														switch (el[0]) {
															case Node.NodeTypeValue(t):
																tagBindVars[i] = NodeType.ParametricType("Array", [t])
															case Node.TArray(el):
																switch (el[0]) {
																	case Node.NodeTypeValue(t):
																		tagBindVars[i] = NodeType.ParametricType("Array", [NodeType.ParametricType("Array", [t])])
																	case _:
																}
															case _:
														}
													case _:
												}
											}
										case _:
											fail('Wrong enum constructor format, should be `Name(value: T)`', e)
									}
								}
							// `enum E { A = b }`
							case Node.TBinop(a, op, b):
								if (valuesType == null)
									fail('Cannot use `Value = value` format for complex enum', node)
								switch (a) {
									case Node.NodeTypeValue(t): switch (t) {
										case NodeType.Type(name):
											if (type.fieldNames.includes(name))
												fail('Field `\(name)` already exists', node)
											type.fieldNames.push(name)
											type.fieldEnumConstructor[type.fieldNames.length - 1] = true
									}
								}
							// `enum E { a }`
							case Node.TIdent(name):
								fail('Cannot use lowercase `\(name)` format for enum values', node)
							// `enum E { static ... }`
							case Node.TStatic(f): switch (f) {
								case Node.TFunction(name, _):
									if (type.fieldNames.includes(name))
										fail('Field `\(name)` already exists', node)
									type.fieldNames.push(name)
									type.fieldStatic[type.fieldNames.length - 1] = true
									addScope(name, field)
								case Node.TVar(name, _):
									if (type.fieldNames.includes(name))
										fail('Field `\(name)` already exists', node)
									type.fieldNames.push(name)
									type.fieldStatic[type.fieldNames.length - 1] = true
									addScope(name, field)
							}
							case _:
								fail('Wrong enum field format', field)
						}

						parents.set(field, node)
					}

					// Fill expressions
					for (field in f) switch (field) {
						case Node.TFunction(name, expr, vars, rettype):
							fillFunction(field, expr, vars, rettype)
						case Node.TVar(name, _):
						case Node.TStatic(f): switch (f) {
							case Node.TFunction(name, expr, vars, rettype):
								let _insideClassMethod = insideClassMethod
								insideClassMethod = false
								fillFunction(f, expr, vars, rettype)
								insideClassMethod = _insideClassMethod
								if (types.get(f) == null) fail('Function get no type: enum ' + DataHelper.nameOf(node) + ' static ' + name, f)
								types.set(field, types.get(f))
							case Node.TVar(name, t, e, const):
								if (e != null) fillExpression(e)
								mixVarTypes(t, e, f)
								types.set(field, types.get(f))
						}
						case Node.NodeTypeValue(_): // Ok
						case Node.TCall(_): // Ok
						case Node.TBinop(_): // TODO validate them
						case _:
							fail('Unknown enum field format', field)
					}
					popScope()
					case _:
						fail('EnumType expects (declare) enum node, but got ' + node, node)
				}

				return type
			}
		}

		static let never = '. This should never happen. Probably incomplete feature was used. Ping a compiler developer with a code sample.'

		static function fail(msg: String, node: Node = null) {
			let data = Project.data.get(node)
			if (data == null) {
				throw new CompilerError(Fail.TyperError, msg, 0, 0, "")
			}
			throw new CompilerError(Fail.TyperError, msg, data.line, data.column, data.fileName)
		}

		static function positionOf(node: Node) {
			let data = Project.data.get(node)
			if (data == null) return "[Unknown]: "
			return "[" + data.fileName + ":" + data.line + ":" + data.column + "]: "
		}

		function nameOfModuleItem(node: Node): String {
			switch (node) {
				case Node.TVar(name, _): return name
				case Node.TFunction(name, _):
					if (let named = name) return named
					else throw 'Module function should have a name'
				case Node.TPrivate(node): switch (node) {
					case Node.TClass(t, _): switch (t) {
						case NodeType.Type(name): return name
						case NodeType.ParametricType(name): return name
					}
				}
				case Node.TClass(t, _): switch (t) {
					case NodeType.Type(name): return name
					case NodeType.ParametricType(name): return name
				}
				case Node.TEnum(t, _): switch (t) {
					case NodeType.Type(name): return name
					case NodeType.ParametricType(name): return name
				}
				case Node.TTypeAlias(t, _): switch (t) {
					case NodeType.Type(name): return name
					case NodeType.ParametricType(name): return name
				}
				case _: throw 'Improper module item format ' + TestParser.stringify(node)
			}
		}

		function findInNamespaceRoots(name: String): Node {
			if (namespaces[name] != null) return namespaces[name]
			var m = namespaces['']
			var el = null
			switch (m) {
				case Node.TModule(_, els): el = els
				case _: return null // No root
			}
			for (e in el) if (name == nameOfModuleItem(e)) return e
			return null
		}

		// Scopes
		private let scopes: [[String : Node]] = [[:]]
		let parents: [Node : Node] = [:]
		private function pushScope() scopes.push(([:]))
		private function popScope() scopes.pop()
		private function addScope(name, node) scopes[scopes.length - 1].set(name, node)

		// Types
		private let types: [String : Type] = [:]
		private var typeString: Type? = null
		private var typeInt: Type? = null
		private var typeFloat: Type? = null
		private var typeBool: Type? = null
		private var typeArray: Type? = null // Type instantiators
		private var typeMap: Type? = null // Type instantiators
		private var typeAny: Type? = null
		private var typeVoid: Type? = null
		private var namespaces: [String : Node] = [:]

		// Stack
		var functionAllowedToThrow = false // @noThrow is *not* set
		var functionThrows = false // `throw` is happened
		var insideTry = false // `try { insideTry } catch (...) { ... }`
		var insideFunction = false // `function () { insideFunction }`
		var allowBreakAndContinue = false // Used in loops
		var functionReturnsNonVoid = false // `return something` is happened, ignoring `{ return }`
		var insideClassMethod = false // `class T { function () { insideClassMethod } }` non-static!
		var allowSuper = false // `class T extends C { function () { super() } }` non-static!

		// var to = from
		function unify(to: Type, from: Type, node: Node): Type {
			// Short path
			if (to == from) return to
			if (to == typeAny) return to

			// Nullability
			function isNullable(t: Type): Bool {
				switch (t) {
					case Type.UnknownNullable(_): return true
					case Type.Nullable(_): return true
				}
				return false
			}

			function unwrapNullable(t: Type): Type {
				switch (t) {
					case Type.UnknownNullable(handle): return handle.value
					case Type.Nullable(t): return t
				}
				return t
			}

			function instanceOfClass(t: Type): ClassType {
				switch (unwrapNullable(t)) {
					case Type.ClassInstance(t): return t
				}
				return null
			}

			var toNullable = isNullable(to)
			var fromNullable = isNullable(from)

			if (fromNullable, !toNullable)
				fail('Cannot assign nullable type to non-nullable', node)

			var toInstance = instanceOfClass(to)
			var fromInstance = instanceOfClass(from)
			if (toInstance == null || fromInstance == null) {
				return to ?? from
			}

			if (toInstance != fromInstance)
				fail('Incompatible types `\(Type.stringify(to))` and value of `\(Type.stringify(from))`', node)

			return to ?? from
		}

		function findType(name: String): Node? {
			for (i in scopes.length) {
				if (let subj = scopes[scopes.length - i - 1].get(name)) {
					return subj
				}
			}
			return findInNamespaceRoots(name)
		}

		function toType(t: NodeType, node: Node): Type {
			switch (t) {
				case NodeType.Type(name):
					let nodeType: Node = findType(name)
					if (types.get(nodeType) == null) switch (nodeType) {
						case Node.TClass(_): registerClassType(nodeType)
						case Node.TEnum(_): registerEnumType(nodeType)
					}
					switch (types.get(nodeType)) {
						case Type.Class(type):
							return type.instantiate()
						case null:
							fail('Cannot find type `\(name)`', node)
						case _:
					}
				case NodeType.ParametricType(name, params):
					let nodeType: Node = findType(name)
					if (types.get(nodeType) == null) switch (nodeType) {
						case Node.TClass(_): registerClassType(nodeType)
						case Node.TEnum(_): registerEnumType(nodeType)
					}
					switch (types.get(nodeType)) {
						case Type.Class(type):
							return type.instantiateGeneric([for (p in params) toType(p, node)])
						case null:
							fail('Cannot find type `\(name)`', node)
						case _:
					}
				case NodeType.Optional(t):
					return Type.Nullable(toType(t, node))
				case NodeType.Function(args, ret):
					return Type.Function([for (arg in args) toType(arg, node)], toType(ret, node), null)
				case NodeType.Object(names, el):
					let els = [for (e in el) toType(e, node)]
					return Type.Struct(names, els)
				case _:
					fail('Unsupported node type ' + t + never, node)
			}
		}

		// var node: NodeType = e
		function mixVarTypes(t: NodeType?, e: Node?, node: Node): Type {
			if (t != null, e != null) types.set(node, unify(toType(t, node), types.get(e), e))
			if (t == null, e != null) types.set(node, types.get(e))
			if (t == null, e == null) types.set(node, Type.UnknownNullable({value: null}))
			if (t != null, e == null) types.set(node, toType(t, node))
		}

		private function fillFunction(node, expr, vars, rettype, arrow = false): Void {
			pushScope()
			// Save stack
			let _insideFunction = insideFunction
			let _functionAllowedToThrow = functionAllowedToThrow
			let _functionThrows = functionThrows
			let _functionReturnsNonVoid = functionReturnsNonVoid
			let _insideTry = insideTry

			for (i in vars.length) {
				let v = vars[i]
				switch (v) {
					case Node.TVar(vname, t, e, const):
						if (e != null) fillExpression(e)
						if (t != null) types.set(v, toType(t, v))
						addScope(vname, v)
				}
			}

			if (rettype != null) toType(rettype, node)

			// Reset stack
			let atts = Project.mapAttributes.get(node)

			if (let noThrow = DataHelper.getAttribute(atts, 'noThrow')) {
				if (noThrow.values.length > 0) fail('Attribute `@noThrow` should have no parameters', node)
				functionAllowedToThrow = false
			} else functionAllowedToThrow = true

			if (let throws = DataHelper.getAttribute(atts, 'throws')) {
				if (functionAllowedToThrow == false) fail('Attribute `@noThrow` cannot be used with `@throws`', node)
				functionThrows = true
			} else functionThrows = false

			insideFunction = true
			insideTry = false
			functionReturnsNonVoid = false

			if (arrow, expr != null) fillExpression(expr)
			if (!arrow, expr != null) fill(expr)
			popScope()

			// Restore stack
			insideFunction = _insideFunction

			// Set function type
			types.set(node, Type.Function(args: [for (v in vars) types.get(v)], returns: rettype, lazyTypeCheck: node))
		}

		// Syntax tree traverse
		private function fill(node: Node): Void {
			switch (node) {
				// Types
				case Node.TClass(t, extend, implement, f, external):
					addScope(DataHelper.extractTypeName(t), node)
					registerClassType(node)

				case Node.TEnum(t, f, valuesType):
					addScope(DataHelper.extractTypeName(t), node)
					registerEnumType(node)

				case Node.TTypeAlias(alias, value):
					types.set(node, Type.Alias(null))
					addScope(nameOfModuleItem(node), node)

				// Statements do not return value
				case Node.TVars(e):
					for (ee in e) fill(ee)
				case Node.TBlock(el):
					pushScope()
					for (e in el) fill(e)
					popScope()

				case Node.TVar(name, t, e, const, external):
					if (e == null, const, !external)
						fail('Constant should have a value `let \(name) = value`', node)
					if (e != null, external)
						fail('External variable should not have a value `declare let \(name)`', node)
					if (t == null, external)
						fail('External variable should have a type `declare let \(name): T`', node)
					if (e != null) {
						pushScope()
						fillExpression(e)
						popScope()
					}

					mixVarTypes(t, e, node)

					addScope(name, node)

				case Node.TBinop(a, op, b):
					fillExpression(a)
					fillExpression(b)

					var parent: Node = parents.get(a)
					// `a = b`
					if (op == Token.OpAssign) switch (parent) {
						case null:
						case Node.TVar(name, _, _, const):
							if (const)
								fail(
									'Cannot reassign a constant `let \(name)`, redefine it as `var \(name)` to allow reassignment\n'
									+ positionOf(parent) + '`let \(name)` is defined here',
								node)
							types.set(node, unify(types.get(a), types.get(b), b))
						case Node.TIdent(name):
							fail('Cannot reassign case parameter `\(name)`', node)
						case Node.TFunction(name, _):
							fail('Cannot reassign a function `\(name)`', node)
						case Node.TClass(_):
							fail('Cannot reassign class', node)
						case Node.TEnum(_):
							fail('Cannot reassign enum', node)
						case Node.TFor(name, _):
							fail(
								'Cannot reassign iterator value `\(name)` of for loop\n'
								+ positionOf(parent) + '`for (\(name) in ...)` is defined here',
							node)
						case _: // Ok
					}
				case Node.TBreak:
					if (!allowBreakAndContinue)
						fail('Cannot use `break` outside of loop', node)

				case Node.TFor(name, over, by, range):
					pushScope()
					fillExpression(over)
					if (let range = range) fillExpression(range)
					if (let range = range) {
						fillExpression(range)
						// Ranges always integer for now
						types.set(node, toType(NodeType.Type("Int"), node))
					}
					addScope(name, node)
					let _allowBreakAndContinue = allowBreakAndContinue
					allowBreakAndContinue = true
					fill(by)
					allowBreakAndContinue = _allowBreakAndContinue
					popScope()

				case Node.TFunction(name, expr, vars, rettype, external):
					if (!external, expr == null)
						fail('Non-external function `\(name)` should have a body', node)
					if (external, rettype == null)
						fail('External function `\(name)` should have a returning type', node)
					addScope(name, node)
					fillFunction(node, expr, vars, rettype)
					if(false){

					// Save stack
					let _insideFunction = insideFunction
					// Reset stack
					insideFunction = true
					pushScope()
					if (expr != null) fill(expr)
					popScope()

					// Restore stack
					insideFunction = _insideFunction

					types.set(node, Type.Function(null, null))
				}

				case Node.TIf(econd, eif, eelse):
					var depth = 0
					for (e in econd) {
						switch (e) {
							case Node.TVar(_, t, _, const):
								if (!const)
									fail('Only if-let bindings supported', node)
								if (t != null)
									fail('Do not specify a type in if-let bindings', node)
								depth++
								pushScope()
								fill(e)
							case _:
								fillExpression(e)
						}
					}
					fill(eif)
					while (depth > 0) {
						depth--
						popScope()
					}

					if (eelse != null) fill(eelse)

				case Node.TSwitch(exprs, conds, guards, cases):
					for (e in exprs) { pushScope() fill(e) popScope() }

					var i = 0
					while (i < cases.length) {
						pushScope()
						var e = conds[i]
						// Fill case condition `case pattern:`
						var currentType = null
						var currentTag = null
						var currentTagBind = 0
						function follow(e: Node) {
							switch (e) {
								case Node.TDot(ex, name):
									fillExpression(e)
								case Node.TDotUpper(ex, name):
									fillExpression(e)
									switch (types.get(ex)) {
										case Type.Enum(type):
											currentType = type
											currentTag = name
									}
								case Node.TParenthesis(e): {fill(e)}
								case Node.TUnderscore: {}
								case Node.TNull: {}
								case Node.TBool(_): {}
								case Node.TInt(_): {}
								case Node.TString(_): {}
								case Node.TCall(ex, args, argNames): {
									follow(ex)
									currentTagBind = 0
									for (ee in args) {
										follow(ee)
										currentTagBind++
									}
								}
								case Node.TIdent(name): // bind var
								{
									if (name.charAt(0) == name.charAt(0).toUpperCase()) {fill(e)}
									else {
										addScope(name, e)

										// Find tag bind var and set it's type:
										if (currentType) {
											let indexOf = currentType.fieldNames.indexOf(currentTag)
											let type = currentType.tagBindVars[indexOf][currentTagBind]
											if (type) types.set(e, toType(type, e))
										}
									}
								}
								case Node.TBinop(a, op, b):
								if (op == Token.OpOr) {follow(a) follow(b)}
								else fail('' + e, e)
								case Node.TIf(econd, _, _):
									pushScope()
									fill(econd[0])
									popScope()
								case _:
									fail('' + e, e)
							}
						}
						follow(e)
						// Fill case result expression
						var e = cases[i]
						pushScope() fill(e) popScope()
						popScope()
						i++
					}

				case Node.TTry(e, t, v, ca):
					// Save stack
					let _insideTry = insideTry
					// Reset stack
					insideTry = true
					fill(e)
					// Restore stack
					insideTry = _insideTry

					for (i in ca.length) {
						pushScope()
						scopes[scopes.length - 1].set(DataHelper.varName(v[i]), v[i])
						fill(ca[i])
						popScope()
					}
				case Node.TWhile(econd, e, pre):
					fillExpression(econd)
					let _allowBreakAndContinue = allowBreakAndContinue
					allowBreakAndContinue = true
					fill(e)
					allowBreakAndContinue = _allowBreakAndContinue
					types.set(node, typeVoid)

				case Node.TIs(expr, t):
					fillExpression(expr)

				case Node.TContinue:
					types.set(node, typeVoid)
					if (!allowBreakAndContinue)
						fail('Cannot use `continue` outside of loop', node)

				// Expressions and errors
				case _:
					fillExpression(node)
			}
		}

		// Expressions return values
		function fillExpression(node) {
			switch (node) {
				case Node.TIdent(name):
					var subj = null
					for (i in scopes.length) {
						subj = scopes[scopes.length - i - 1].get(name)
						if (subj != null) {
							break
						}
					}

					if (subj == null) subj = findInNamespaceRoots(name)
					if (subj == null, name == 'const')
						fail('No variable named `const` found. Are you trying to use `const` as a keyword? Use `let varname` syntax instead.', node)
					if (subj == null)
						fail('Cannot find variable with name `\(name)`', node)
					if (parents.get(node) != null, parents.get(node) != subj)
						fail('Parent overwitten from \(parents.get(node)) to \(subj) for node \(node)' + never, node)
					parents.set(node, subj)
					if (let type = types.get(subj)) {
						types.set(node, type)
					}

				case Node.TArrow(expr, vars, rettype):
					fillFunction(node, expr, vars, rettype, arrow: true)
					if(false){
					pushScope()
					// Save stack
					let _insideFunction = insideFunction

					// Reset stack
					insideFunction = true
					fillExpression(expr)
					popScope()

					// Restore stack
					insideFunction = _insideFunction
				}
				case Node.TFunction(name, expr, vars, rettype, external):
					if (external)
						fail('External function `declare function \(name)` cannot be taken as a value', node)

					fillFunction(node, expr, vars, rettype)

					if(false){
					pushScope()
					addScope(name, node)

					// Save stack
					let _insideFunction = insideFunction

					// Reset stack
					insideFunction = true

					if (expr != null) fill(expr)
					popScope()

					// Restore stack
					insideFunction = _insideFunction
				}

				case Node.TArray(el):

					switch (el[0]) {
						case Node.TFor(name, over, by, range):
							if (el.length > 1)
								fail('Cannot use loop `for` within array of more than one element `[for(), ...]`', el[1])
							if (range != null)
								fail('Ranges `...range` are not supported here yet', range)

							pushScope()
							fillExpression(over)
							types.set(el[0], types.get(over))
							addScope(name, el[0])
							let _allowBreakAndContinue = allowBreakAndContinue
							allowBreakAndContinue = false
							fillExpression(by)
							allowBreakAndContinue = _allowBreakAndContinue
							popScope()

							types.set(node, typeArray.instantiateGeneric([types.get(by)]))
						case _:
							for (e in el) fillExpression(e)
							types.set(node, typeArray.instantiateGeneric([types.get(el[0])]))
					}

				case Node.TMap(keys, values):
					if (keys.length == 0) {
						types.set(node, typeMap.instantiateGeneric([
							Type.Unknown({value: null}),
							Type.Unknown({value: null})
						]))
						return
					}
					for (i in keys.length) {
						fillExpression(keys[i])
						fillExpression(values[i])
					}
					types.set(node,
						typeMap.instantiateGeneric([types.get(keys[0]), types.get(values[0])])
					)

				case Node.TAs(e, kind, t):
					let type = toType(t, node)
					fillExpression(e)
					types.set(node, type)

				case Node.TBlock(el):
					if (el.length == 0)
						fail('Cannot use empty block `{}` as a value, use `{:}` syntax to create empty object', node)
					pushScope()
					for (i in el.length) if (i < el.length - 1) {
						fill(el[i])
					}
					let latest = el[el.length - 1]
					fillExpression(latest)
					types.set(node, types.get(latest))
					popScope()

				case Node.TDot(e, n):
					switch (e) {
						case Node.TSuper(_):
							if (!allowSuper)
								fail('Cannot access `super` here', node)
						case _:
							fillExpression(e)
					}
					if (let etype = types.get(e)) switch (etype) {
						case Type.ClassInstance(type): // Non-static fields
							if (etype == typeAny) { return }
							let index = type.fieldNames.indexOf(n)
							if (index < 0)
								fail('Class `\(nameOfModuleItem(type.parent))` has no field `.\(n)`\nAvailable fields are: ' + type.fieldNames.join(', '), e ?? node)
							if (type.fieldStatic[index] == true)
								fail('Class `\(nameOfModuleItem(type.parent))` field `.\(n)` is static', node)
						case Type.Class(type): // Static fields
							let index = type.fieldNames.indexOf(n)
							if (index < 0)
								fail('Class `\(nameOfModuleItem(type.parent))` has no static field `.\(n)`\nAvailable fields are: ' + type.fieldNames.join(', '), node)
							if (type.fieldStatic[index] != true)
								fail('Class `\(nameOfModuleItem(type.parent))` field `.\(n)` is not static', node)
						case Type.Enum(type):
							let index = type.fieldNames.indexOf(n)
							if (index < 0)
								fail('Enum has no field `.\(n)`', node)
							if (type.fieldStatic[index] != true)
								fail('Enum field `.\(n)` is not static', node)
						case Type.Struct(names, els):
							let index = names.indexOf(n)
							if (index < 0) {
								var object = ''
								switch (e) {
									case Node.TIdent(name): object = ' `\(name)`'
									case _: {}
								}

								if (names.length == 0)
									fail('Object\(object) is empty `{:}` and has no fields. Create object with all fields defined upfront, like this: `obj = { \(n): value }`', node)
								if (names.length != 0)
									fail('Object\(object) has no field `.\(n)`\nAvailable fields are: ' + names.join(', '), node)
							}
							types.set(node, els[index])
						case _:
					}// else fail('Got node without type `\(e)`' + never, node)

				case Node.TDotUpper(e, n):
					switch (e) {
						case Node.TSuper(_):
							fail('Cannot access `super` here', node)
					}
					fillExpression(e)
					if (let type = types.get(e)) switch (type) {
						case Type.Class(type):
							let index = type.fieldNames.indexOf(n)
							if (index < 0)
								fail('Class has no field `.\(n)`', node)
							if (type.fieldStatic[index] != true)
								fail('Class field `.\(n)` is not static', node)
						case Type.Enum(type):
							let index = type.fieldNames.indexOf(n)
							if (index < 0)
								fail('Enum has no value constructor `.\(n)`', node)
							if (type.fieldEnumConstructor[index] != true)
								fail('Enum field `.\(n)` is not a value constructor', node)
							types.set(node, type.fieldType[index])
						case _:
					}// else fail('Got node without type `\(e)`' + never, node)

				case Node.NodeTypeValue(t): switch (t) {
					case NodeType.Type(name):
						var subj = null
						for (i in scopes.length) {
							subj = scopes[scopes.length - i - 1].get(name)
							if (subj != null) {
								break
							}
						}
						if (subj == null) subj = findInNamespaceRoots(name)
						if (subj == null)
							fail('Cannot find type with name `\(name)`', node)
						if (parents.get(node) != null, parents.get(node) != subj)
							fail('Parent overwitten from \(parents.get(node)) to \(subj) for node \(node)' + never, node)
						parents.set(node, subj)
						if (let type = types.get(subj)) {
							types.set(node, type)
						}// else fail('Cannot find type `\(name)` for \(subj)' + never, node)
					case NodeType.ParametricType(name, _):
						fail('Cannot use generic type `\(name)` as a value', node)
					case _:
						fail('Cannot use this type as a value', node)
				}

				case Node.TNew(path, t, el, names, values):
					let type = toType(t, node)
					for (e in el) fillExpression(e)
					switch (type) {
						case Type.ClassInstance(type):
							if (type.constructor == -1)
								fail('Cannot construct class without `new () {}` constructor', node)
						case _:
							fail('Constructor `new` may instantiate only classes', node)
					}

					types.set(node, type)

				case Node.TObject(names, el):
					for (name in names.length)
						if (names.indexOf(names[name]) != name)
							fail('Field `\(names[name])` already exists', node)

					for (e in el) fillExpression(e)
					let els = [for (e in el) types.get(e)]
					types.set(node, Type.Struct(names, els))

				case Node.TTry(e, t, v, ca):
					// Save stack
					let _insideTry = insideTry
					// Reset stack
					insideTry = true
					fillExpression(e)
					// Restore stack
					insideTry = _insideTry

					for (i in ca.length) {
						pushScope()
						scopes[scopes.length - 1].set(DataHelper.varName(v[i]), v[i])
						fill(ca[i])
						popScope()
					}
					types.set(node, types.get(e))

				case Node.TIf(econd, eif, eelse):
					if (econd.length > 1)
						fail('More than one condition is not yet supported', econd[1])
					switch (econd[0]) {
						case Node.TVar(_):
							fail('Variable bindings in conditions are not yet supported', econd[0])
					}
					if (eelse == null)
						fail('Expression `if` should have an `else` clause', eif)
					fillExpression(econd[0])
					fillExpression(eif)
					fillExpression(eelse)

				// Simple nodes
				case Node.TNull:
					types.set(node, Type.UnknownNullable({value:null}))

				case Node.TString(_):
					types.set(node, typeString)

				case Node.TBool(_):
					types.set(node, typeBool)

				case Node.TInt(_):
					types.set(node, typeInt)

				case Node.TFloat(_):
					types.set(node, typeFloat)

				case Node.TParenthesis(e):
					fillExpression(e)
					types.set(node, types.get(e))

				case Node.TElvis(a, b):
					fillExpression(a)
					fillExpression(b)
					types.set(node, types.get(b))

				case Node.TCall(e, el, elNames):
					// JavaScript evaluates arguments first
					for (e in el) fillExpression(e)
					switch (e) {
						case Node.TSuper(_):
							if (!allowSuper)
								fail('Cannot access `super` here', node)
						case Node.TModule(path, _):
							let p = path.length > 0? ' ' + path.join('.') + ' ' : ' '
							fail('Leading parenthesis "calls" a module like `module\(p){}(...)`, wrap it with `{(...)}`', node)
						case _:
				 			fillExpression(e)
				 	}
				 	switch (types.get(e)) {
				 		case Type.Function(args, returns):
				 			for (e in el) unify(args, types.get(e), e)
				 			types.set(node, returns)
				 		case null:
				 		case _:
				 	}

				case Node.TBinop(a, op, b):
					fill(a)
					fillExpression(b)

				case Node.TUnop(op, _, e):
					fillExpression(e)
					let mutates = op == Token.OpIncrement || op == Token.OpDecrement
					if (!mutates) { return }
					var parent: Node = parents.get(e)
					switch (parent) {
						case Node.TVar(name, _, _, const):
							if (const)
								fail(
									'Cannot change a constant `let \(name)`, redefine it as `var \(name)` to allow value changes\n'
									+ positionOf(parent) + '`let \(name)` is defined here',
								node)
						case Node.TFunction(name, _):
							fail('Cannot `\(Token.stringify(op))` a function `\(name)`', node)
						case Node.TFor(name, _):
							fail(
								'Cannot change iterator value `\(name)` of for loop\n'
								+ positionOf(parent) + '`for (\(name) in ...)` is defined here',
							node)
						case _: // Ok
					}

				case Node.TIndex(e, i):
					fillExpression(e)
					fillExpression(i)

				case Node.TAssignop(a, op, b):
					fillExpression(a)
					var parent: Node = parents.get(a)
					switch (parent) {
						case Node.TVar(name, _, _, const):
							if (const)
								fail(
									'Cannot change a constant `let \(name)`, redefine it as `var \(name)` to allow value changes\n'
									+ positionOf(parent) + '`let \(name)` is defined here',
								node)
						case Node.TFunction(name, _):
							fail('Cannot reassign a function `\(name)`', node)
						case Node.TFor(name, _):
							fail(
								'Cannot change iterator value `\(name)` of for loop\n'
								+ positionOf(parent) + '`for (\(name) in ...)` is defined here',
							node)
						case _: // Ok
					}
					fillExpression(b)

				case Node.TThrow(e):
					if (!insideFunction && !insideTry)
						fail('Cannot throw outside of `function` or `try`', node)
					if (insideFunction && !functionAllowedToThrow)
						fail('Cannot throw in a @noThrow function', node)
					if (insideFunction)
						functionThrows = true // Infer that function throws
					fillExpression(e)

				case Node.TThis:
					if (!insideClassMethod)
						fail('Cannot access `this` outside of class method', node)

				case Node.TSuper(_):
					fail('Cannot use `super` as value', node)

				case Node.TReturn(e):
					switch (e) {
						case Node.TVar(name, _, _, const):
							let prefix = const? 'let' : 'var'
							fail('This `return` tries to return a variable `\(prefix) \(name)`. Try to wrap it into braces like this `{ return } \(prefix) \(name)`', node)
						case Node.TReturn(_):
							fail('Cannot return another return. Try to wrap first `{ return } return 2` into braces', node)
					}
					if (!insideFunction)
						fail('Cannot use `return` outside of function', node)
					if (e != null) fillExpression(e)
					if (e != null) functionReturnsNonVoid = true

				// Errors
				case Node.TUnderscore:
					fail('Cannot use underscore `_` outside of case pattern', node)
				case Node.TExport(_):
					fail('Cannot use `export` here: only applicable to module declarations', node)
				case Node.TStatic(_):
					fail('Cannot use `static` here: only applicable to class fields', node)
				case Node.TPrivate(_):
					fail('Cannot use `private` here: only applicable to class fields and module declarations', node)
				case Node.TModule(_):
					fail('Modules should be at a file\' upper scope', node)

				// Not expressions
				case Node.TBreak:
					fail('Cannot use `break` as a value', node)
				case Node.TContinue:
					fail('Cannot use `continue` as a value', node)
				case Node.TClass(_):
					fail('Cannot use `class` as a value', node)
				case Node.TEnum(_):
					fail('Cannot use `enum` as a value', node)
				case Node.TTypeAlias(_):
					fail('Cannot use `declare` as a value', node)
				case Node.TVar(name, _, _, const):
					let prefix = const? 'let' : 'var'
					fail('Cannot use `\(prefix) \(name)` as a value', node)
				case Node.TSwitch(_):
					fail('Cannot use `switch` as a value', node)
				case Node.TWhile(_):
					fail('Cannot use `while` as a value', node)
				case Node.TFor(_):
					fail('Cannot use `for` as a value. To build array from loop, surround with `[for()]` brackets.', node)

				// Fails
				case null:
					fail('Got null node' + never, node)
				case _:
					fail('Unknown node expression kind to type ' + node + never, node)
			}
		}
	}

	enum Type {
		Unknown(handle: { value: Type })
		UnknownNullable(handle: { value: Type })
		Nullable(type: Type) // Non-void
		Class(type: ClassType) // Type of `class` node itself
		Enum(type: EnumType) // Type of `enum` node itself
		Alias(value: Type) // Type of `declare T = A` node itself
		ClassInstance(type: ClassType, generic: [Type]) // Instance of class (constructed with `new`)
		EnumInstance(type: EnumType, tag: Int) // Instance of enum value
		EnumConstructor(type: EnumType, tag: Int) // EnumType.EnumConstructor without call (...)
		SuperOf(type: ClassType) // `super` of current class (not parent)
		Function(args: [Type], returns: Type, lazyTypeCheck: Node)
		Struct(names: [String], types: [Type])

		static function stringify(node: Node): String {
			switch (node) {
				case Type.ClassInstance(type, generic):
					if (let gen = generic)
						return DataHelper.nameOf(type.parent) + '<' + [for (g in gen) Type.stringify(g)].join(', ') + '>'
					return DataHelper.nameOf(type.parent)
				case Type.Class(type):
					return DataHelper.nameOf(type.parent)
				case _: return '' + node
			}
		}
	}

	class ClassType {
		var parent: Node
		var owner: ModuleType = null // Non-null if in a module, not in a block
		let fieldNames: [String] = []
		let fieldStatic: [Bool] = []
		let protected: [Bool] = [] // `private`
		let immutable: [Bool] = [] // `let` or `function`
		var constructor = -1
		var indexKeyType = null
		var indexValueType = null
		new () {
		}

		// Non-generic `Type.ClassInstance`
		let instanceCache = Type.ClassInstance(this, null)
		function instantiate(): Type {
			return instanceCache
		}

		// Generic `Type.ClassInstance`
		let genericCache: [[Type]] = []
		function instantiateGeneric(params: [Type]): Type {
			/* So, how it works:
				genericCache is array of [type, param1, param2, ...]
				i.e. [0] element is a resulting cached Type to be returned
				[1...n] are parameters to compare
				Just storage optimization, basically
			*/

			for (cached in genericCache) {
				if (cached.length != (params.length + 1)) continue
				var found = true
				for (i in cached.length - 1) {
					if (params[i] != cached[i + 1]) {
						found = false
						break
					}
				}
				if (found) {
					let result = cached[0]
					return result
				}
			}

			let result = Type.ClassInstance(this, params)
			let cache = [result]
			for (param in params) cache.push(param)
			genericCache.push(cache)
			return result
		}
	}

	class EnumType {
		var parent: Node
		let fieldNames: [String] = []
		let tagBindVars: [[NodeType]] = []
		let fieldStatic: [Bool] = []
		let fieldEnumConstructor: [Bool] = []
		let fieldType: [Type] = []
		new () {
		}
	}

	class ModuleType {
	}
}
