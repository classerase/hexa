module {
	class TestLexer {
		static function test(): Void {
			log.trace('TestLexer begin', {fileName: 'TestLexer.hx', lineNumber: 26, className: 'TestLexer', methodName: 'test'})
			Lexer.init()
			TestLexer.compare('', {[]}, {[]})
			TestLexer.compare('\n', {[]}, {[]})
			TestLexer.compare('\n\n', {[]}, {[]})
			TestLexer.compare('\r\r\n\r\n\r\t', {[]}, {[]})
			TestLexer.compare(' ', {[]}, {[]})
			TestLexer.compare('  ', {[]}, {[]})
			TestLexer.compare('\t', {[]}, {[]})
			TestLexer.compare('\t\t', {[]}, {[]})
			TestLexer.compare('\t \t', {[]}, {[]})
			TestLexer.compare('123', {[(63 as! Token)]}, {['123']})
			TestLexer.compare(' 0 ', {[(63 as! Token)]}, {['0']})
			TestLexer.compare('0', {[(63 as! Token)]}, {['0']})
			TestLexer.compare('1 2 3', {[(63 as! Token), (63 as! Token), (63 as! Token)]}, {['1', '2', '3']})
			TestLexer.compare('0x1', {[(63 as! Token)]}, {['0x1']})
			TestLexer.compare('0x0', {[(63 as! Token)]}, {['0x0']})
			TestLexer.compare('0xF', {[(63 as! Token)]}, {['0xF']})
			TestLexer.compare('0xFA', {[(63 as! Token)]}, {['0xFA']})
			TestLexer.compare('0xFABCDEF', {[(63 as! Token)]}, {['0xFABCDEF']})
			TestLexer.compare('0x1F2A3B4C5D6E7F0', {[(63 as! Token)]}, {['0x1F2A3B4C5D6E7F0']})
			TestLexer.compare('0.123', {[(60 as! Token)]}, {['0.123']})
			TestLexer.compare('0.0', {[(60 as! Token)]}, {['0.0']})
			TestLexer.compare('\'s\'', {[(64 as! Token)]}, {['s']})
			TestLexer.compare('"s"', {[(64 as! Token)]}, {['s']})
			log.trace('TestLexer done', {fileName: 'TestLexer.hx', lineNumber: 64, className: 'TestLexer', methodName: 'test'})
		}

		private static function compare(input: String, expect: [Token], expectValue: [String], expectColumn: [Int]?, expectLine: [Int]?): Void {
			expect.push((0 as! Token))
			var output: lexer.Tokens = Lexer.tokenize(nodejs.Buffer.from(input), 'TEST')
			var pos: Int = 0
			{
				var _g: Int = 0
				while (_g < expect.length) {
					var ex: Token = expect[_g]
					_g++
					if (ex == (0 as! Token)) break
					function incorrect(text: String): Void {
						var got: String = token.Token_Impl_.stringify(output.token[pos], output.value[pos])
						log.trace('Incorrect token `' + got + '` in string `' + input + '` at index ' + pos, {fileName: 'TestLexer.hx', lineNumber: 83, className: 'TestLexer', methodName: 'compare'})
						log.trace(text, {fileName: 'TestLexer.hx', lineNumber: 84, className: 'TestLexer', methodName: 'compare'})
					}
					if (ex != output.token[pos]) {
						incorrect('Expected `' + token.Token_Impl_.stringify(ex) + '`')
						return {}
					}
					if (expectValue[pos] != output.value[pos]) {
						incorrect('Expected value `' + expectValue[pos] + '` but got `' + output.value[pos] + '`')
						return {}
					}
				}
			}
		}

	}
}
