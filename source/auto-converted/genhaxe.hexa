module {
	class GenHaxe {
		static var generateComments: Bool = false
		private static var id: Int = 0
		private static var tabs: String = ''
		private static var postfix: String = '___'
		private static var reserved: [String] = {['untyped', 'trace', 'abstract', 'public', 'extern']}
		private static var internalTypes: [String] = {[]}
		private static function rename(name: String): String {
			if (GenHaxe.reserved.indexOf(name) != -1) return name + '___'
			return name
		}

		private static function unblock(e: data.Node): data.Node {
			if (e.index == 9) {
				if ({ let data.Node.TBlock(value) = e value }.length == 1) {
					var e1: data.Node = { let data.Node.TBlock(value) = e value }[0]
					return e1
				} else return e
			} else return e
		}

		private static function pushTab(): Void {
			GenHaxe.tabs += '\t'
		}

		private static function popTab(): Void {
			GenHaxe.tabs = GenHaxe.tabs.substring(0, GenHaxe.tabs.length - 1)
		}

		private static function stringifyBlockExpression(node: data.Node): String {
			var r: String = ''
			switch (node.index) {
				case 11: if ({ let data.Node.TIf(value, _, _) = node value }.length == 1) {
					if ({ let data.Node.TIf(value, _, _) = node value }[0].index == 20) {
						let data.Node.TIf(_, _, eelse) = node
						let data.Node.TIf(_, eif, _) = node
						let data.Node.TVar(_, _, _, const) = { let data.Node.TIf(value, _, _) = node value }[0]
						let data.Node.TVar(_, _, expr, _) = { let data.Node.TIf(value, _, _) = node value }[0]
						let data.Node.TVar(_, t, _, _) = { let data.Node.TIf(value, _, _) = node value }[0]
						let data.Node.TVar(oname, _, _, _) = { let data.Node.TIf(value, _, _) = node value }[0]
						var cond: data.Node = { let data.Node.TIf(value, _, _) = node value }[0]
						r += '\n' + GenHaxe.tabs + '{\n'
						GenHaxe.tabs += '\t'
						GenHaxe.pushScope()
						GenHaxe.parentNames.set(cond, oname)
						r += GenHaxe.tabs + 'var ' + oname + ' = ' + GenHaxe.stringify(expr) + ';\n' + GenHaxe.tabs
						r += 'if(' + oname + ' != null) '
						r += @ast(ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenHaxe.hx:69: characters 16-19) }), pos => #pos(bootstrap/GenHaxe.hx:69: characters 15-20) },[{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenHaxe.hx:70: characters 21-24) },stringify), pos => #pos(bootstrap/GenHaxe.hx:70: characters 21-34) },[]), pos => #pos(bootstrap/GenHaxe.hx:70: characters 21-36) }]), pos => #pos(bootstrap/GenHaxe.hx:70: characters 5-36) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenHaxe.hx:70: characters 10-16) },[{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:70: characters 17-18) }]), pos => #pos(bootstrap/GenHaxe.hx:70: characters 10-19) }], pos => #pos(bootstrap/GenHaxe.hx:70: characters 5-36), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenHaxe.hx:71: characters 13-19) },[{ expr => EArrayDecl([{ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenHaxe.hx:71: characters 21-24) }]), pos => #pos(bootstrap/GenHaxe.hx:71: characters 20-25) }]), pos => #pos(bootstrap/GenHaxe.hx:71: characters 13-26) },stringify), pos => #pos(bootstrap/GenHaxe.hx:71: characters 13-36) },[]), pos => #pos(bootstrap/GenHaxe.hx:71: characters 13-38) }]), pos => #pos(bootstrap/GenHaxe.hx:71: characters 5-38) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:71: characters 10-11) }], pos => #pos(bootstrap/GenHaxe.hx:71: characters 5-38), guard => null }],null)) if (eif.index == 9) GenHaxe.stringify(eif) else GenHaxe.stringify(data.Node.TBlock({[eif]}))
						if (eelse != null) r += ' else ' + GenHaxe.stringifyBlockExpression(eelse) + ';'
						GenHaxe.tabs = GenHaxe.tabs.substring(0, GenHaxe.tabs.length - 1)
						GenHaxe.popScope()
						return r + '\n' + GenHaxe.tabs + '}'
					} else {
						let data.Node.TIf(_, _, eelse1) = node
						let data.Node.TIf(_, eif1, _) = node
						var econd: data.Node = { let data.Node.TIf(value, _, _) = node value }[0]
						r += 'if(' + GenHaxe.stringify(econd) + ') '
						r += @ast(ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenHaxe.hx:81: characters 16-19) }), pos => #pos(bootstrap/GenHaxe.hx:81: characters 15-20) },[{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenHaxe.hx:82: characters 22-25) },stringify), pos => #pos(bootstrap/GenHaxe.hx:82: characters 22-35) },[]), pos => #pos(bootstrap/GenHaxe.hx:82: characters 22-37) }]), pos => #pos(bootstrap/GenHaxe.hx:82: characters 6-37) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenHaxe.hx:82: characters 11-17) },[{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:82: characters 18-19) }]), pos => #pos(bootstrap/GenHaxe.hx:82: characters 11-20) }], pos => #pos(bootstrap/GenHaxe.hx:82: characters 6-37), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenHaxe.hx:83: characters 14-20) },[{ expr => EArrayDecl([{ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenHaxe.hx:83: characters 22-25) }]), pos => #pos(bootstrap/GenHaxe.hx:83: characters 21-26) }]), pos => #pos(bootstrap/GenHaxe.hx:83: characters 14-27) },stringify), pos => #pos(bootstrap/GenHaxe.hx:83: characters 14-37) },[]), pos => #pos(bootstrap/GenHaxe.hx:83: characters 14-39) }]), pos => #pos(bootstrap/GenHaxe.hx:83: characters 6-39) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:83: characters 11-12) }], pos => #pos(bootstrap/GenHaxe.hx:83: characters 6-39), guard => null }],null)) if (eif1.index == 9) GenHaxe.stringify(eif1) else GenHaxe.stringify(data.Node.TBlock({[eif1]}))
						if (eelse1 != null) r += ' else ' + GenHaxe.stringifyBlockExpression(eelse1) + ''
						return r
					}
				} else {
					let data.Node.TIf(_, _, eelse2) = node
					let data.Node.TIf(_, eif2, _) = node
					let data.Node.TIf(econd1, _, _) = node
					GenHaxe.tabs += '\t'
					r += '{\n' + GenHaxe.tabs
					if (eelse2 != null) {
						GenHaxe.addToScope('else' + '___')
						r += 'var else' + '___' + ' = function() ' + GenHaxe.stringify(eelse2) + '\n' + GenHaxe.tabs
					}
					var depth: Int = 0
					var econds: [data.Node] = econd1
					var i: Int = 0
					var condsstr: String = ''
					var constsstr: String = ''
					var addCond: String=>String = function(cond1: String): String {
						if (condsstr == '') return cond1 else return ' && ' + cond1
					}
					while (econds[i] != null) {
						var cond2: data.Node = econds[i]
						condsstr = ''
						constsstr = ''
						while (true) {
							var innercond: data.Node = econds[i]
							if (innercond.index == 20) {
								let data.Node.TVar(_, _, _, const1) = innercond
								let data.Node.TVar(_, _, expr1, _) = innercond
								let data.Node.TVar(_, t1, _, _) = innercond
								let data.Node.TVar(oname1, _, _, _) = innercond
								{
									log.trace('const for ' + oname1, {fileName: 'GenHaxe.hx', lineNumber: 116, className: 'GenHaxe', methodName: 'stringifyBlockExpression'})
									var name: String = GenHaxe.rename(oname1)
									GenHaxe.addToScope(name)
									GenHaxe.parentNames.set(cond2, name)
									constsstr += 'var ' + name + ' = ' + GenHaxe.stringify(expr1) + ';\n' + GenHaxe.tabs
									condsstr += addCond(name + ' != null')
								}
							} else condsstr += addCond(GenHaxe.stringify(innercond))
							if (econds[i + 1] != null) {
								var _g: data.Node = econds[i + 1]
								if (_g.index == 20) {
									let data.Node.TVar(_, _, _, const2) = _g
									let data.Node.TVar(_, _, expr2, _) = _g
									let data.Node.TVar(_, t2, _, _) = _g
									let data.Node.TVar(oname2, _, _, _) = _g
									break
								}
							}
							i++
							if (!(econds[i] != null)) break
						}
						r += constsstr
						r += 'if(' + condsstr + ') {'
						GenHaxe.tabs += '\t'
						r += '\n' + GenHaxe.tabs
						depth++
						i++
					}
					r += @ast(ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenHaxe.hx:137: characters 16-19) }), pos => #pos(bootstrap/GenHaxe.hx:137: characters 15-20) },[{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenHaxe.hx:138: characters 21-24) },stringify), pos => #pos(bootstrap/GenHaxe.hx:138: characters 21-34) },[]), pos => #pos(bootstrap/GenHaxe.hx:138: characters 21-36) }]), pos => #pos(bootstrap/GenHaxe.hx:138: characters 5-36) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenHaxe.hx:138: characters 10-16) },[{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:138: characters 17-18) }]), pos => #pos(bootstrap/GenHaxe.hx:138: characters 10-19) }], pos => #pos(bootstrap/GenHaxe.hx:138: characters 5-36), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenHaxe.hx:139: characters 13-19) },[{ expr => EArrayDecl([{ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenHaxe.hx:139: characters 21-24) }]), pos => #pos(bootstrap/GenHaxe.hx:139: characters 20-25) }]), pos => #pos(bootstrap/GenHaxe.hx:139: characters 13-26) },stringify), pos => #pos(bootstrap/GenHaxe.hx:139: characters 13-36) },[]), pos => #pos(bootstrap/GenHaxe.hx:139: characters 13-38) }]), pos => #pos(bootstrap/GenHaxe.hx:139: characters 5-38) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:139: characters 10-11) }], pos => #pos(bootstrap/GenHaxe.hx:139: characters 5-38), guard => null }],null)) if (eif2.index == 9) GenHaxe.stringify(eif2) else GenHaxe.stringify(data.Node.TBlock({[eif2]}))
					while (depth > 0) {
						GenHaxe.tabs = GenHaxe.tabs.substring(0, GenHaxe.tabs.length - 1)
						r += '\n' + GenHaxe.tabs + '}'
						if (eelse2 != null) r += ' else else' + '___' + '();'
						depth--
					}
					GenHaxe.tabs = GenHaxe.tabs.substring(0, GenHaxe.tabs.length - 1)
					r += '\n' + GenHaxe.tabs + '}'
					return r
				}

				case 19: {
					let data.Node.TFunction(_, _, vars, _) = node
					let data.Node.TFunction(_, expr3, _, _) = node
					let data.Node.TFunction(name1, _, _, _) = node
					var newname: String = GenHaxe.rename(name1)
					var _g1: [String] = []
					{
						var _g11: Int = 0
						while (_g11 < vars.length) {
							var v: data.Node = vars[_g11]
							_g11++
							var vars1: String
							switch (v.index) {
								case 1: {
									let data.Node.TIdent(name2) = v
									GenHaxe.parentNames.set(v, GenHaxe.rename(name2))
									vars1 = GenHaxe.parentNames.get(v)
								}

								case 12: if ({ let data.Node.TParenthesis(value) = v value } == null) vars1 = '' else throw new HaxeError(v)

								case 20: {
									let data.Node.TVar(name3, _, _, _) = v
									GenHaxe.parentNames.set(v, GenHaxe.rename(name3))
									vars1 = GenHaxe.parentNames.get(v)
								}
								
								case _: throw new HaxeError(v)
							}
							_g1.push(@ast(ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:154: characters 13-14) }), pos => #pos(bootstrap/GenHaxe.hx:154: characters 12-15) },[{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:156: characters 7-18) },set), pos => #pos(bootstrap/GenHaxe.hx:156: characters 7-22) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:156: characters 23-24) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:156: characters 26-30) },rename), pos => #pos(bootstrap/GenHaxe.hx:156: characters 26-37) },[]), pos => #pos(bootstrap/GenHaxe.hx:156: characters 26-39) }]), pos => #pos(bootstrap/GenHaxe.hx:156: characters 7-40) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:157: characters 7-18) },get), pos => #pos(bootstrap/GenHaxe.hx:157: characters 7-22) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:157: characters 23-24) }]), pos => #pos(bootstrap/GenHaxe.hx:157: characters 7-25) }]), pos => #pos(bootstrap/GenHaxe.hx:155: lines 155-157) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenHaxe.hx:155: characters 11-15) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:155: characters 16-20) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:155: characters 22-23) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:155: characters 25-26) }]), pos => #pos(bootstrap/GenHaxe.hx:155: characters 11-27) },{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenHaxe.hx:155: characters 29-35) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:155: characters 36-40) }]), pos => #pos(bootstrap/GenHaxe.hx:155: characters 29-41) }], pos => #pos(bootstrap/GenHaxe.hx:155: lines 155-157), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString()), pos => #pos(bootstrap/GenHaxe.hx:158: characters 31-33) }]), pos => #pos(bootstrap/GenHaxe.hx:158: characters 6-33) }, values => [{ expr => ECall({ expr => EConst(CIdent(TParenthesis)), pos => #pos(bootstrap/GenHaxe.hx:158: characters 11-23) },[{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:158: characters 24-28) }]), pos => #pos(bootstrap/GenHaxe.hx:158: characters 11-29) }], pos => #pos(bootstrap/GenHaxe.hx:158: characters 6-33), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:159: characters 20-21) }), pos => #pos(bootstrap/GenHaxe.hx:159: characters 14-19) }]), pos => #pos(bootstrap/GenHaxe.hx:159: characters 6-19) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:159: characters 11-12) }], pos => #pos(bootstrap/GenHaxe.hx:159: characters 6-19), guard => null }],null)) vars1)
						}
					}
					var vars2: String = _g1.join(', ')
					var funcbody: String = ''
					if (expr3 != null) {
						if (expr3.index == 9) {
							let data.Node.TBlock(el) = expr3
							funcbody = GenHaxe.stringify(expr3)
						} else {
							GenHaxe.pushScope()
							GenHaxe.tabs += '\t'
							funcbody = '{\n' + GenHaxe.tabs + 'return ' + GenHaxe.stringify(expr3) + ('\n\t' + GenHaxe.tabs + '}')
							GenHaxe.tabs = GenHaxe.tabs.substring(0, GenHaxe.tabs.length - 1)
							GenHaxe.popScope()
						}
					} else funcbody = '{}'
					return 'var ' + newname + ' = function(' + vars2 + ') ' + funcbody
				}
				
				case _: {
					log.trace(node, {fileName: 'GenHaxe.hx', lineNumber: 177, className: 'GenHaxe', methodName: 'stringifyBlockExpression'})
					return GenHaxe.stringify(node)
				}
			}
		}

		private static function getAtt(atts: [data.Attribute], atname: String): data.Attribute {
			log.trace(atts, {fileName: 'GenHaxe.hx', lineNumber: 183, className: 'GenHaxe', methodName: 'getAtt'})
			if (atts != null && atts.length > 0) {
				var _g: Int = 0
				while (_g < atts.length) {
					var att: data.Attribute = atts[_g]
					_g++
					if (att.name == atname) return att
				}
			}
			return null
		}

		private static var parentNames: nodejs.JSMap< data.Node, String > = new JSMap< data.Node, String >()
		private static var scopes: [nodejs.JSMap< String, Bool >] = {[new JSMap< String, Bool >()]}
		private static function pushScope(): Void {
			GenHaxe.scopes.push(new JSMap< String, Bool >())
		}

		private static function popScope(): Void {
			GenHaxe.scopes.pop()
		}

		private static function hasInScope(name: String): Bool {
			return GenHaxe.scopes[GenHaxe.scopes.length - 1].get(name) != null
		}

		private static function addToScope(name: String): Void {
			GenHaxe.scopes[GenHaxe.scopes.length - 1].set(name, true)
		}

		@has_untyped
		static function stringify(node: data.Node): String {
			var r: String = ''
			if (node == null) throw new HaxeError('Unable to print: node is null')
			var atts: [data.Attribute] = data.Project.mapAttributes.get(node)
			var a: String = ''
			if (atts != null && atts.length > 0) {
				var _g: Int = 0
				while (_g < atts.length) {
					var att: data.Attribute = atts[_g]
					_g++
					if (att.name == 'untyped') a += 'untyped '
				}
			}
			var tmp: String
			switch (@exhaustive node.index) {
				case 0: {
					let data.Node.TString(s) = node
					var s1: [String] = s.split('')
					var charsOut: [String] = []
					while (s1.length > 0) {
						var _g1: String = s1[0]
						switch (_g1) {
							case '\n': {
								charsOut.push('\\n')
								s1.shift()
							}

							case '\r': {
								charsOut.push('\\r')
								s1.shift()
							}

							case '"': {
								charsOut.push('\\"')
								s1.shift()
							}

							case '\\': {
								s1.shift()
								if (s1[0] == '"') {
									charsOut.push('\\"')
									s1.shift()
								} else charsOut.push('\\')
							}
							
							case _: {
								charsOut.push(s1[0])
								s1.shift()
							}
						}
					}
					tmp = '"' + charsOut.join('') + '"'
				}

				case 1: {
					let data.Node.TIdent(s2) = node
					log.trace('`' + s2 + '`', {fileName: 'GenHaxe.hx', lineNumber: 263, className: 'GenHaxe', methodName: 'stringify'})
					var source: data.Node = data.Project.mapNames.get(node)
					var n: String
					if (source == null) throw new HaxeError('Unmapped ' + Std.string(node)) else switch (source.index) {
						case 1: {
							let data.Node.TIdent(name) = source
							n = GenHaxe.parentNames.get(source)
						}

						case 19: {
							let data.Node.TFunction(name1, _, _, _) = source
							n = GenHaxe.rename(name1)
						}

						case 20: {
							let data.Node.TVar(name2, _, _, _) = source
							var n1: String = GenHaxe.parentNames.get(source)
							if (n1 == null) throw new HaxeError('TVar `' + name2 + '` parentNames null == ' + GenHaxe.parentNames.get(source))
							n = n1
						}

						case 22: {
							let data.Node.TClass(t, _, _, _, _) = source
							var name3: String = GenHaxe.rename(GenHaxe.extractTypeName(t))
							var externAtt: data.Attribute = GenHaxe.getAtt(data.Project.mapAttributes.get(source), 'extern')
							var n2: Bool = externAtt != null
							var rename: data.Attribute = GenHaxe.getAtt(data.Project.mapAttributes.get(source), 'native')
							if (rename != null) log.trace('Got @native!', {fileName: 'GenHaxe.hx', lineNumber: 289, className: 'GenHaxe', methodName: 'stringify'})
							if (rename != null) {
								var _g2: data.Node = rename.values[0]
								if (_g2 == null) n = name3 else if (_g2.index == 0) {
									let data.Node.TString(s3) = _g2
									n = s3
								} else n = name3
							} else n = name3
						}

						case 32: if ({ let data.Node.TEnum(value, _) = source value }.index == 0) {
							let data.NodeType.Type(name4) = { let data.Node.TEnum(value, _) = source value }
							n = name4
						} else throw new HaxeError('' + s2 + ' ' + Std.string(source))

						case 40: if ({ let data.Node.TStatic(value) = source value }.index == 20) {
							let data.Node.TVar(name5, _, _, _) = { let data.Node.TStatic(value) = source value }
							let data.Node.TStatic(f) = source
							var static_source: data.Node = data.Project.mapNames.get(source)
							switch (static_source.index) {
								case 22: {
									let data.Node.TClass(t1, _, _, _, _) = static_source
									n = GenHaxe.rename(GenHaxe.extractTypeName(t1)) + '.' + GenHaxe.rename(name5)
								}

								case 32: {
									let data.Node.TEnum(t2, _) = static_source
									n = GenHaxe.rename(GenHaxe.extractTypeName(t2)) + '.' + GenHaxe.rename(name5)
								}
								
								case _: throw new HaxeError('static_source is ' + Std.string(static_source))
							}
						} else throw new HaxeError('' + s2 + ' ' + Std.string(source))

						case 41: {
							let data.Node.TFor(name6, _, _) = source
							log.trace('`' + s2 + '`', {fileName: 'GenHaxe.hx', lineNumber: 268, className: 'GenHaxe', methodName: 'stringify'})
							n = GenHaxe.parentNames.get(source)
						}
						
						case _: throw new HaxeError('' + s2 + ' ' + Std.string(source))
					}
					tmp = n
				}

				case 2: {
					let data.Node.TBool(b) = node
					tmp = '' + (if (b == null) 'null' else '' + b)
				}

				case 3: tmp = 'this'

				case 4: tmp = 'super'

				case 5: {
					let data.Node.TInt(s4) = node
					tmp = s4
				}

				case 6: {
					let data.Node.TFloat(s5) = node
					tmp = s5
				}

				case 7: tmp = 'null'

				case 8: {
					let data.Node.TBinop(_, _, b1) = node
					let data.Node.TBinop(_, a1, _) = node
					let data.Node.TBinop(op, _, _) = node
					tmp = GenHaxe.stringify(a1) + ' ' + token.Token_Impl_.stringify(op) + ' ' + GenHaxe.stringify(b1)
				}

				case 9: if ({ let data.Node.TBlock(value) = node value }.length == 0) tmp = '{}' else {
					let data.Node.TBlock(elements) = node
					r = '{\n'
					GenHaxe.pushScope()
					GenHaxe.tabs += '\t'
					{
						var _g3: Int = 0
						while (_g3 < elements.length) {
							var element: data.Node = elements[_g3]
							_g3++
							{
								var code: String = GenHaxe.tabs + GenHaxe.stringifyBlockExpression(element) + ';\n'
								if (element.index != 9 && code.length < 256) log.trace('Generated block expression `' + code.trim() + '`', {fileName: 'GenHaxe.hx', lineNumber: 321, className: 'GenHaxe', methodName: 'stringify'})
								r += code
							}
						}
					}
					GenHaxe.tabs = GenHaxe.tabs.substring(0, GenHaxe.tabs.length - 1)
					GenHaxe.popScope()
					tmp = r + GenHaxe.tabs + '}'
				}

				case 10: if ({ let data.Node.TCall(value, _, _) = node value }.index == 1) switch ({ let data.Node.TIdent(value) = { let data.Node.TCall(value, _, _) = node value } value }) {
					case '__instanceof__': if ({ let data.Node.TCall(_, value, _) = node value }.length == 2) {
						let data.Node.TCall(_, _, argNames) = node
						var kind: data.Node = { let data.Node.TCall(_, value, _) = node value }[1]
						var of: data.Node = { let data.Node.TCall(_, value, _) = node value }[0]
						tmp = 'untyped __instanceof__(' + GenHaxe.stringify(of) + ', ' + GenHaxe.stringify(kind) + ')'
					} else {
						let data.Node.TCall(_, _, argNames1) = node
						let data.Node.TCall(e, _, _) = node
						let data.Node.TCall(_, el, _) = node
						var tmp1: String = GenHaxe.stringify(e) + '('
						var _g4: [String] = []
						{
							var _g11: Int = 0
							while (_g11 < el.length) {
								var e1: data.Node = el[_g11]
								_g11++
								_g4.push(GenHaxe.stringify(e1))
							}
						}
						tmp = tmp1 + _g4.join(', ') + ')'
					}

					case 'require': if ({ let data.Node.TCall(_, value, _) = node value }.length == 1) {
						let data.Node.TCall(_, _, argNames2) = node
						var container: data.Node = { let data.Node.TCall(_, value, _) = node value }[0]
						tmp = 'untyped require(' + GenHaxe.stringify(container) + ')'
					} else {
						let data.Node.TCall(_, _, argNames3) = node
						let data.Node.TCall(e2, _, _) = node
						let data.Node.TCall(_, el1, _) = node
						var tmp2: String = GenHaxe.stringify(e2) + '('
						var _g5: [String] = []
						{
							var _g12: Int = 0
							while (_g12 < el1.length) {
								var e3: data.Node = el1[_g12]
								_g12++
								_g5.push(GenHaxe.stringify(e3))
							}
						}
						tmp = tmp2 + _g5.join(', ') + ')'
					}
					
					case _: {
						let data.Node.TCall(_, _, argNames4) = node
						let data.Node.TCall(_, el2, _) = node
						let data.Node.TCall(e4, _, _) = node
						var tmp3: String = GenHaxe.stringify(e4) + '('
						var _g6: [String] = []
						{
							var _g13: Int = 0
							while (_g13 < el2.length) {
								var e5: data.Node = el2[_g13]
								_g13++
								_g6.push(GenHaxe.stringify(e5))
							}
						}
						tmp = tmp3 + _g6.join(', ') + ')'
					}
				} else {
					let data.Node.TCall(_, _, argNames5) = node
					let data.Node.TCall(_, el3, _) = node
					let data.Node.TCall(e6, _, _) = node
					var tmp4: String = GenHaxe.stringify(e6) + '('
					var _g7: [String] = []
					{
						var _g14: Int = 0
						while (_g14 < el3.length) {
							var e7: data.Node = el3[_g14]
							_g14++
							_g7.push(GenHaxe.stringify(e7))
						}
					}
					tmp = tmp4 + _g7.join(', ') + ')'
				}

				case 11: {
					let data.Node.TIf(_, _, eelse) = node
					let data.Node.TIf(_, eif, _) = node
					let data.Node.TIf(econd, _, _) = node
					var _g8: [String] = []
					{
						var _g15: Int = 0
						while (_g15 < econd.length) {
							var e8: data.Node = econd[_g15]
							_g15++
							_g8.push(GenHaxe.stringify(e8))
						}
					}
					r = '(' + _g8.join(' && ') + ')? (' + GenHaxe.stringify(eif)
					if (eelse != null) r += ') : (' + GenHaxe.stringify(eelse) + ')'
					tmp = r
				}

				case 12: {
					let data.Node.TParenthesis(e9) = node
					tmp = '(' + GenHaxe.stringify(e9) + ')'
				}

				case 13: if ({ let data.Node.TReturn(value) = node value } == null) tmp = 'return ' else if ({ let data.Node.TReturn(value) = node value }[1] == 9) {
					if ({ let data.Node?.TBlock(value) = { let data.Node.TReturn(value) = node value } value }.length == 0) tmp = 'return ' else {
						let data.Node.TReturn(e10) = node
						tmp = 'return ' + GenHaxe.stringify(e10)
					}
				} else {
					let data.Node.TReturn(e11) = node
					tmp = 'return ' + GenHaxe.stringify(e11)
				}

				case 14: {
					let data.Node.TThrow(e12) = node
					tmp = 'throw ' + GenHaxe.stringify(e12) + ''
				}

				case 15: tmp = 'break'

				case 16: tmp = 'continue'

				case 17: {
					let data.Node.TUnop(_, _, e13) = node
					let data.Node.TUnop(_, isPostfix, _) = node
					let data.Node.TUnop(op1, _, _) = node
					if (isPostfix) tmp = GenHaxe.stringify(e13) + token.Token_Impl_.stringify(op1) else tmp = token.Token_Impl_.stringify(op1) + GenHaxe.stringify(e13)
				}

				case 18: switch (@exhaustive { let data.Node.TWhile(_, _, value) = node value }) {
					case false: {
						let data.Node.TWhile(econd1, _, _) = node
						let data.Node.TWhile(_, e14, _) = node
						tmp = 'do{' + GenHaxe.stringify(e14) + '}while(' + GenHaxe.stringify(econd1) + ')'
					}

					case true: {
						let data.Node.TWhile(econd2, _, _) = node
						let data.Node.TWhile(_, e15, _) = node
						tmp = 'while(' + GenHaxe.stringify(econd2) + ') ' + GenHaxe.stringify(e15)
					}
				}

				case 19: {
					let data.Node.TFunction(_, _, vars, _) = node
					let data.Node.TFunction(_, expr, _, _) = node
					let data.Node.TFunction(name7, _, _, _) = node
					r = 'function'
					if (name7 != null) r += ' ' + GenHaxe.rename(name7)
					var _g16: [String] = []
					{
						var _g21: Int = 0
						while (_g21 < vars.length) {
							var v: data.Node = vars[_g21]
							_g21++
							var r1: String
							switch (v.index) {
								case 1: {
									let data.Node.TIdent(name8) = v
									GenHaxe.parentNames.set(v, GenHaxe.rename(name8))
									r1 = GenHaxe.parentNames.get(v)
								}

								case 12: if ({ let data.Node.TParenthesis(value) = v value } == null) r1 = '' else throw new HaxeError(v)

								case 20: {
									let data.Node.TVar(_, _, e16, _) = v
									let data.Node.TVar(_, t3, _, _) = v
									let data.Node.TVar(name9, _, _, _) = v
									GenHaxe.parentNames.set(v, GenHaxe.rename(name9))
									var code1: String = GenHaxe.parentNames.get(v)
									if (t3 != null && GenHaxe.extractTypeString(t3).length > 0) code1 += ': ' + GenHaxe.rename(GenHaxe.extractTypeString(t3))
									if (e16 != null) code1 += ' = ' + GenHaxe.stringify(e16)
									r1 = code1
								}
								
								case _: throw new HaxeError(v)
							}
							_g16.push(@ast(ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:402: characters 12-13) }), pos => #pos(bootstrap/GenHaxe.hx:402: characters 11-14) },[{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:404: characters 6-17) },set), pos => #pos(bootstrap/GenHaxe.hx:404: characters 6-21) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:404: characters 22-23) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:404: characters 25-29) },rename), pos => #pos(bootstrap/GenHaxe.hx:404: characters 25-36) },[]), pos => #pos(bootstrap/GenHaxe.hx:404: characters 25-38) }]), pos => #pos(bootstrap/GenHaxe.hx:404: characters 6-39) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:405: characters 6-17) },get), pos => #pos(bootstrap/GenHaxe.hx:405: characters 6-21) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:405: characters 22-23) }]), pos => #pos(bootstrap/GenHaxe.hx:405: characters 6-24) }]), pos => #pos(bootstrap/GenHaxe.hx:403: lines 403-405) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenHaxe.hx:403: characters 10-16) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:403: characters 17-21) }]), pos => #pos(bootstrap/GenHaxe.hx:403: characters 10-22) }], pos => #pos(bootstrap/GenHaxe.hx:403: lines 403-405), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:407: characters 6-17) },set), pos => #pos(bootstrap/GenHaxe.hx:407: characters 6-21) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:407: characters 22-23) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:407: characters 25-29) },rename), pos => #pos(bootstrap/GenHaxe.hx:407: characters 25-36) },[]), pos => #pos(bootstrap/GenHaxe.hx:407: characters 25-38) }]), pos => #pos(bootstrap/GenHaxe.hx:407: characters 6-39) },{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:408: characters 17-28) },get), pos => #pos(bootstrap/GenHaxe.hx:408: characters 17-32) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:408: characters 33-34) }]), pos => #pos(bootstrap/GenHaxe.hx:408: characters 17-35) }, name => code, type => null, ??? => #pos(bootstrap/GenHaxe.hx:408: characters 10-14) }]), pos => #pos(bootstrap/GenHaxe.hx:408: characters 6-36) },{ expr => EIf({ expr => EBinop(OpBoolAnd,{ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:409: characters 10-11) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:409: characters 15-19) }), pos => #pos(bootstrap/GenHaxe.hx:409: characters 10-19) },{ expr => EBinop(OpGt,{ expr => EField({ expr => ECall({ expr => EField({ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:409: characters 23-24) },extractTypeString), pos => #pos(bootstrap/GenHaxe.hx:409: characters 23-42) },[]), pos => #pos(bootstrap/GenHaxe.hx:409: characters 23-44) },length), pos => #pos(bootstrap/GenHaxe.hx:409: characters 23-51) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenHaxe.hx:409: characters 54-55) }), pos => #pos(bootstrap/GenHaxe.hx:409: characters 23-55) }), pos => #pos(bootstrap/GenHaxe.hx:409: characters 10-55) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:409: characters 57-61) },{ expr => EBinop(OpAdd,{ expr => EConst(CString(: )), pos => #pos(bootstrap/GenHaxe.hx:409: characters 65-69) },{ expr => ECall({ expr => EField({ expr => ECall({ expr => EField({ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:409: characters 72-73) },extractTypeString), pos => #pos(bootstrap/GenHaxe.hx:409: characters 72-91) },[]), pos => #pos(bootstrap/GenHaxe.hx:409: characters 72-93) },rename), pos => #pos(bootstrap/GenHaxe.hx:409: characters 72-100) },[]), pos => #pos(bootstrap/GenHaxe.hx:409: characters 72-102) }), pos => #pos(bootstrap/GenHaxe.hx:409: characters 65-102) }), pos => #pos(bootstrap/GenHaxe.hx:409: characters 57-102) },null), pos => #pos(bootstrap/GenHaxe.hx:409: characters 6-102) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:410: characters 10-11) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:410: characters 15-19) }), pos => #pos(bootstrap/GenHaxe.hx:410: characters 10-19) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:410: characters 21-25) },{ expr => EBinop(OpAdd,{ expr => EConst(CString( = )), pos => #pos(bootstrap/GenHaxe.hx:410: characters 29-34) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:410: characters 37-38) },stringify), pos => #pos(bootstrap/GenHaxe.hx:410: characters 37-48) },[]), pos => #pos(bootstrap/GenHaxe.hx:410: characters 37-50) }), pos => #pos(bootstrap/GenHaxe.hx:410: characters 29-50) }), pos => #pos(bootstrap/GenHaxe.hx:410: characters 21-50) },null), pos => #pos(bootstrap/GenHaxe.hx:410: characters 6-50) },{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:411: characters 6-10) }]), pos => #pos(bootstrap/GenHaxe.hx:406: lines 406-411) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenHaxe.hx:406: characters 10-14) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:406: characters 15-19) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:406: characters 21-22) },{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:406: characters 24-25) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:406: characters 27-28) }]), pos => #pos(bootstrap/GenHaxe.hx:406: characters 10-29) }], pos => #pos(bootstrap/GenHaxe.hx:406: lines 406-411), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString()), pos => #pos(bootstrap/GenHaxe.hx:412: characters 30-32) }]), pos => #pos(bootstrap/GenHaxe.hx:412: characters 5-32) }, values => [{ expr => ECall({ expr => EConst(CIdent(TParenthesis)), pos => #pos(bootstrap/GenHaxe.hx:412: characters 10-22) },[{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:412: characters 23-27) }]), pos => #pos(bootstrap/GenHaxe.hx:412: characters 10-28) }], pos => #pos(bootstrap/GenHaxe.hx:412: characters 5-32), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:413: characters 19-20) }), pos => #pos(bootstrap/GenHaxe.hx:413: characters 13-18) }]), pos => #pos(bootstrap/GenHaxe.hx:413: characters 5-18) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:413: characters 10-11) }], pos => #pos(bootstrap/GenHaxe.hx:413: characters 5-18), guard => null }],null)) r1)
						}
					}
					r += '(' + _g16.join(', ') + ') '
					if (expr != null) {
						if (expr.index == 9) {
							let data.Node.TBlock(el4) = expr
							r += GenHaxe.stringify(expr)
						} else {
							GenHaxe.pushScope()
							GenHaxe.tabs += '\t'
							r += '{\n' + GenHaxe.tabs
							if (name7 == null) r += 'return '
							r += GenHaxe.stringify(expr) + (';\n\t' + GenHaxe.tabs + '}')
							GenHaxe.tabs = GenHaxe.tabs.substring(0, GenHaxe.tabs.length - 1)
							GenHaxe.popScope()
						}
					} else r += '{}'
					tmp = r
				}

				case 20: {
					let data.Node.TVar(_, _, _, const) = node
					let data.Node.TVar(_, _, expr1, _) = node
					let data.Node.TVar(_, t4, _, _) = node
					let data.Node.TVar(oname, _, _, _) = node
					if (oname == null) throw new HaxeError('name is null for ' + Std.string(node))
					var es: String = ''
					if (expr1 != null) es = ' = ' + GenHaxe.stringify(expr1)
					var name10: String = GenHaxe.rename(oname)
					if (GenHaxe.hasInScope(oname)) name10 += ++GenHaxe.id + '___'
					GenHaxe.addToScope(oname)
					GenHaxe.parentNames.set(node, name10)
					if (name10 == null) throw new HaxeError('name is null for ' + Std.string(node))
					r = (if (const) 'var ' else 'var ') + name10 + es
					tmp = r
				}

				case 21: {
					let data.Node.TVars(e17) = node
					var _g9: [String] = []
					{
						var _g17: Int = 0
						while (_g17 < e17.length) {
							var e18: data.Node = e17[_g17]
							_g17++
							_g9.push(GenHaxe.stringify(e18))
						}
					}
					tmp = _g9.join('; ')
				}

				case 22: if ({ let data.Node.TClass(_, _, _, _, value) = node value } == true) {
					let data.Node.TClass(t5, _, _, _, _) = node
					let data.Node.TClass(_, ext, _, _, _) = node
					let data.Node.TClass(_, _, impl, _, _) = node
					let data.Node.TClass(_, _, _, fields, _) = node
					var cname: String = GenHaxe.extractTypeName(t5)
					var require: data.Attribute = GenHaxe.getAtt(data.Project.mapAttributes.get(node), 'require')
					if (require != null) {
						var _g10: data.Node = require.values[1]
						var _g18: data.Node = require.values[0]
						if (_g18.index == 0) {
							if (_g10 == null) {
								let data.Node.TString(s6) = _g18
								r += '@:jsRequire("' + s6 + '")'
							} else if (_g10.index == 0) {
								let data.Node.TString(s7) = _g18
								let data.Node.TString(f1) = _g10
								r += '@:jsRequire("' + s7 + '", "' + f1 + '")'
							} else throw new HaxeError('@require takes string as argument')
						} else throw new HaxeError('@require takes string as argument')
					}
					r += '/* extern class ' + cname + ' */'
					tmp = r
				} else {
					let data.Node.TClass(t6, _, _, _, _) = node
					let data.Node.TClass(_, ext1, _, _, _) = node
					let data.Node.TClass(_, _, impl1, _, _) = node
					let data.Node.TClass(_, _, _, fields1, _) = node
					let data.Node.TClass(_, _, _, _, external) = node
					var cname1: String = GenHaxe.extractTypeName(t6)
					r = (if (external) '/* extern class ' else 'class ') + cname1
					if (ext1 != null) r += ' extends ' + GenHaxe.extractTypeName(ext1)
					r += ' {\n'
					{
						var _g19: Int = 0
						while (_g19 < fields1.length) {
							var f2: data.Node = fields1[_g19]
							_g19++
							var code2: String = ''
							var isStatic: Bool = false
							var unmeta: data.Node=>data.Node = function(f3: data.Node): data.Node {
								return f3
							}
							f2 = unmeta(f2)
							if (f2.index == 40) {
								let data.Node.TStatic(field) = f2
								{
									f2 = field
									isStatic = true
								}
							}
							f2 = unmeta(f2)
							GenHaxe.tabs += '\t'
							switch (f2.index) {
								case 19: {
									let data.Node.TFunction(_, _, vars1, _) = f2
									let data.Node.TFunction(_, expr2, _, _) = f2
									let data.Node.TFunction(name11, _, _, _) = f2
									{
										if (name11 == 'new') code2 += 'public function new' else if (isStatic) code2 += 'public static function ' + GenHaxe.rename(name11) else code2 += 'public function ' + GenHaxe.rename(name11)
										var _g22: [String] = []
										{
											var _g31: Int = 0
											while (_g31 < vars1.length) {
												var v1: data.Node = vars1[_g31]
												_g31++
												var code3: String
												if (v1.index == 20) {
													let data.Node.TVar(name12, _, _, _) = v1
													var name13: String = GenHaxe.rename(name12)
													GenHaxe.parentNames.set(v1, name13)
													code3 = GenHaxe.parentNames.get(v1)
												} else throw new HaxeError(v1)
												_g22.push(@ast(ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:538: characters 16-17) }), pos => #pos(bootstrap/GenHaxe.hx:538: characters 15-18) },[{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:540: characters 20-24) },rename), pos => #pos(bootstrap/GenHaxe.hx:540: characters 20-31) },[]), pos => #pos(bootstrap/GenHaxe.hx:540: characters 20-33) }, name => name, type => null, ??? => #pos(bootstrap/GenHaxe.hx:540: characters 13-17) }]), pos => #pos(bootstrap/GenHaxe.hx:540: characters 9-34) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:541: characters 9-20) },set), pos => #pos(bootstrap/GenHaxe.hx:541: characters 9-24) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:541: characters 25-26) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:541: characters 28-32) }]), pos => #pos(bootstrap/GenHaxe.hx:541: characters 9-33) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:542: characters 9-20) },get), pos => #pos(bootstrap/GenHaxe.hx:542: characters 9-24) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:542: characters 25-26) }]), pos => #pos(bootstrap/GenHaxe.hx:542: characters 9-27) }]), pos => #pos(bootstrap/GenHaxe.hx:539: lines 539-542) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenHaxe.hx:539: characters 14-18) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:539: characters 19-23) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:539: characters 25-26) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:539: characters 28-29) }]), pos => #pos(bootstrap/GenHaxe.hx:539: characters 14-30) }], pos => #pos(bootstrap/GenHaxe.hx:539: lines 539-542), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:543: characters 23-24) }), pos => #pos(bootstrap/GenHaxe.hx:543: characters 17-22) }]), pos => #pos(bootstrap/GenHaxe.hx:543: characters 9-22) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:543: characters 14-15) }], pos => #pos(bootstrap/GenHaxe.hx:543: characters 9-22), guard => null }],null)) code3)
											}
										}
										code2 += '(' + _g22.join(', ') + ') '
										if (expr2 != null) {
											if (expr2.index == 9) {
												GenHaxe.tabs += '\t'
												code2 += GenHaxe.stringify(expr2)
												GenHaxe.tabs = GenHaxe.tabs.substring(0, GenHaxe.tabs.length - 1)
											} else {
												GenHaxe.tabs += '\t'
												code2 += '{\n' + GenHaxe.tabs + GenHaxe.stringify(expr2)
												GenHaxe.tabs = GenHaxe.tabs.substring(0, GenHaxe.tabs.length - 1)
												code2 += ';\n' + GenHaxe.tabs + '}'
											}
										} else code2 += '{}'
									}
								}

								case 20: {
									let data.Node.TVar(_, _, _, const1) = f2
									let data.Node.TVar(_, _, expr3, _) = f2
									let data.Node.TVar(_, t7, _, _) = f2
									let data.Node.TVar(name14, _, _, _) = f2
									{
										code2 += 'public static var ' + GenHaxe.rename(name14)
										if (expr3 != null) code2 += ' = ' + GenHaxe.stringify(expr3)
										code2 += ';'
									}
								}
								
								case _: code2 += '' + Std.string(f2)
							}
							code2 += '\n'
							GenHaxe.tabs = GenHaxe.tabs.substring(0, GenHaxe.tabs.length - 1)
							r += '\t' + code2
						}
					}
					r += '' + GenHaxe.tabs + '}' + (if (external) ' */' else '')
					tmp = r
				}

				case 23: {
					let data.Node.TTry(_, _, _, catches) = node
					let data.Node.TTry(_, _, v2, _) = node
					let data.Node.TTry(_, t8, _, _) = node
					let data.Node.TTry(expr4, _, _, _) = node
					r = 'try {\n' + GenHaxe.tabs + '\t'
					GenHaxe.tabs += '\t'
					if (expr4.index == 9) {
						let data.Node.TBlock(el5) = expr4
						var _g110: [String] = []
						{
							var _g23: Int = 0
							while (_g23 < el5.length) {
								var e19: data.Node = el5[_g23]
								_g23++
								_g110.push(GenHaxe.stringifyBlockExpression(e19))
							}
						}
						r += _g110.join(';\n' + GenHaxe.tabs)
					} else r += GenHaxe.stringify(expr4)
					GenHaxe.tabs = GenHaxe.tabs.substring(0, GenHaxe.tabs.length - 1)
					r += '\n' + GenHaxe.tabs + '} catch(' + data.DataHelper.varName(v2[0]) + (': Any) {\n' + GenHaxe.tabs + '\t')
					GenHaxe.tabs += '\t'
					GenHaxe.parentNames.set(v2[0], data.DataHelper.varName(v2[0]))
					{
						var _g20: data.Node = catches[0]
						if (_g20.index == 9) {
							if ({ let data.Node.TBlock(value) = _g20 value }.length != 0) {
								let data.Node.TBlock(el6) = _g20
								var _g111: [String] = []
								{
									var _g24: Int = 0
									while (_g24 < el6.length) {
										var e20: data.Node = el6[_g24]
										_g24++
										_g111.push(GenHaxe.stringifyBlockExpression(e20))
									}
								}
								r += _g111.join(';\n' + GenHaxe.tabs) + ';'
							}
						} else r += GenHaxe.stringify(catches[0])
					}
					GenHaxe.tabs = GenHaxe.tabs.substring(0, GenHaxe.tabs.length - 1)
					tmp = r + '\n' + GenHaxe.tabs + '}'
				}

				case 24: if ({ let data.Node.TDot(value, _) = node value }.index == 0) {
					if ({ let data.Node.TDot(_, value) = node value } == 'length') {
						let data.Node.TString(s8) = { let data.Node.TDot(value, _) = node value }
						tmp = '' + s8.length
					} else {
						let data.Node.TDot(expr5, _) = node
						let data.Node.TDot(_, name15) = node
						log.trace('.`' + name15 + '`', {fileName: 'GenHaxe.hx', lineNumber: 391, className: 'GenHaxe', methodName: 'stringify'})
						tmp = GenHaxe.stringify(expr5) + '.' + GenHaxe.rename(name15)
					}
				} else {
					let data.Node.TDot(_, name16) = node
					let data.Node.TDot(expr6, _) = node
					log.trace('.`' + name16 + '`', {fileName: 'GenHaxe.hx', lineNumber: 391, className: 'GenHaxe', methodName: 'stringify'})
					tmp = GenHaxe.stringify(expr6) + '.' + GenHaxe.rename(name16)
				}

				case 25: {
					let data.Node.TNew(_, _, _, values) = node
					let data.Node.TNew(_, _, names, _) = node
					let data.Node.TNew(_, args, _, _) = node
					let data.Node.TNew(t9, _, _, _) = node
					var tmp5: String = 'new ' + GenHaxe.extractTypeName(t9) + '('
					var _g25: [String] = []
					{
						var _g112: Int = 0
						while (_g112 < args.length) {
							var e21: data.Node = args[_g112]
							_g112++
							_g25.push(GenHaxe.stringify(e21))
						}
					}
					tmp = tmp5 + _g25.join(',') + ')'
				}

				case 26: if ({ let data.Node.TArray(value) = node value }.length == 1) {
					if ({ let data.Node.TArray(value) = node value }[0].index == 41) {
						let data.Node.TFor(_, _, expr7) = { let data.Node.TArray(value) = node value }[0]
						let data.Node.TFor(_, array, _) = { let data.Node.TArray(value) = node value }[0]
						let data.Node.TFor(oname1, _, _) = { let data.Node.TArray(value) = node value }[0]
						var f4: data.Node = { let data.Node.TArray(value) = node value }[0]
						GenHaxe.pushScope()
						log.trace(expr7, {fileName: 'GenHaxe.hx', lineNumber: 355, className: 'GenHaxe', methodName: 'stringify'})
						r += '((function(){'
						r += 'var return' + '___' + ' = [];'
						var name17: String = GenHaxe.rename(oname1)
						if (GenHaxe.hasInScope(name17)) name17 += '___' + ++GenHaxe.id
						GenHaxe.addToScope(name17)
						GenHaxe.parentNames.set(expr7, name17)
						GenHaxe.parentNames.set(f4, name17)
						r += 'for(' + name17 + ' in ' + GenHaxe.stringify(array) + ') '
						r += 'return' + '___' + '.push('
						r += GenHaxe.stringify(expr7)
						r += '); return' + '___' + ';'
						r += '})())'
						GenHaxe.popScope()
						tmp = r
					} else {
						let data.Node.TArray(el7) = node
						var _g26: [String] = []
						{
							var _g113: Int = 0
							while (_g113 < el7.length) {
								var e22: data.Node = el7[_g113]
								_g113++
								_g26.push(GenHaxe.stringify(e22))
							}
						}
						tmp = '[' + _g26.join(',') + ']'
					}
				} else {
					let data.Node.TArray(el8) = node
					var _g27: [String] = []
					{
						var _g114: Int = 0
						while (_g114 < el8.length) {
							var e23: data.Node = el8[_g114]
							_g114++
							_g27.push(GenHaxe.stringify(e23))
						}
					}
					tmp = '[' + _g27.join(',') + ']'
				}

				case 27: if ({ let data.Node.TMap(value, _) = node value }.length == 0) tmp = 'new Map()' else {
					let data.Node.TMap(_, values1) = node
					let data.Node.TMap(keys, _) = node
					var _g28: [String] = []
					{
						var _g29: Int = 0
						var _g115: Int = keys.length
						while (_g29 < _g115) {
							var i: Int = _g29++
							_g28.push('' + GenHaxe.stringify(keys[i]) + ' => ' + GenHaxe.stringify(values1[i]) + '')
						}
					}
					tmp = '[' + _g28.join(',') + ']'
				}

				case 28: {
					let data.Node.TIndex(_, index) = node
					let data.Node.TIndex(expr8, _) = node
					tmp = GenHaxe.stringify(expr8) + '[' + GenHaxe.stringify(index) + ']'
				}

				case 29: {
					let data.Node.TSwitch(_, _, cases) = node
					let data.Node.TSwitch(_, conds, _) = node
					let data.Node.TSwitch(exprs, _, _) = node
					r = 'switch ('
					r += GenHaxe.stringify(exprs[0])
					r += ') {\n'
					GenHaxe.tabs += '\t'
					{
						var _g116: Int = 0
						var _g30: Int = cases.length
						while (_g116 < _g30) {
							var i1: Int = _g116++
							var c: data.Node = cases[i1]
							r += GenHaxe.tabs
							{
								var _g210: Int = 0
								var _g32: [data.Node] = conds[i1]
								while (_g210 < _g32.length) {
									var c1: data.Node = _g32[_g210]
									_g210++
									r += 'case ' + GenHaxe.stringify(c1) + ':'
								}
							}
							r += ' {\n'
							r += GenHaxe.tabs + '\t' + GenHaxe.stringify(c) + ';\n'
							r += GenHaxe.tabs + '\t' + '\n' + ('' + GenHaxe.tabs + '}') + '\n'
						}
					}
					GenHaxe.tabs = GenHaxe.tabs.substring(0, GenHaxe.tabs.length - 1)
					tmp = r + GenHaxe.tabs + '}'
				}

				case 30: {
					let data.Node.TModule(_, el9) = node
					let data.Node.TModule(path, _) = node
					r = 'module ' + path.join('.') + ' {\n'
					GenHaxe.tabs += '\t'
					{
						var _g33: Int = 0
						while (_g33 < el9.length) {
							var e24: data.Node = el9[_g33]
							_g33++
							r += GenHaxe.tabs + GenHaxe.stringify(e24) + ';\n'
						}
					}
					GenHaxe.tabs = GenHaxe.tabs.substring(0, GenHaxe.tabs.length - 1)
					tmp = r + GenHaxe.tabs + '}'
				}

				case 31: if ({ let data.Node.TObject(value, _) = node value }.length == 0) tmp = '{}' else {
					let data.Node.TObject(_, el10) = node
					let data.Node.TObject(names1, _) = node
					var _g34: [String] = []
					{
						var _g211: Int = 0
						var _g117: Int = el10.length
						while (_g211 < _g117) {
							var i2: Int = _g211++
							_g34.push(GenHaxe.rename(names1[i2]) + ':' + GenHaxe.stringify(el10[i2]))
						}
					}
					tmp = '{' + _g34.join(', ') + '}'
				}

				case 32: {
					let data.Node.TEnum(_, fields2) = node
					let data.Node.TEnum(t10, _) = node
					r = '@:enum abstract ' + GenHaxe.extractTypeName(t10) + '(String)'
					r += ' {\n'
					GenHaxe.tabs += '\t'
					{
						var _g35: Int = 0
						while (_g35 < fields2.length) {
							var f5: data.Node = fields2[_g35]
							_g35++
							switch (f5.index) {
								case 1: {
									let data.Node.TIdent(name18) = f5
									r += GenHaxe.tabs + 'var ' + name18 + ' = {};\n'
								}

								case 8: if ({ let data.Node.TBinop(value, _, _) = f5 value } == 91) {
									if ({ let data.Node.TBinop(_, value, _) = f5 value }.index == 1) {
										let data.Node.TBinop(_, _, val) = f5
										let data.Node.TIdent(name19) = { let data.Node.TBinop(_, value, _) = f5 value }
										r += GenHaxe.tabs + 'var ' + name19 + ' = ' + GenHaxe.stringify(val) + ';\n'
									} else throw new HaxeError('!' + Std.string(f5))
								} else throw new HaxeError('!' + Std.string(f5))
								
								case _: throw new HaxeError('!' + Std.string(f5))
							}
						}
					}
					GenHaxe.tabs = GenHaxe.tabs.substring(0, GenHaxe.tabs.length - 1)
					tmp = r + GenHaxe.tabs + '}'
				}

				case 33: {
					let data.Node.TEnumExtract(_, _, name20) = node
					let data.Node.TEnumExtract(_, extract, _) = node
					let data.Node.TEnumExtract(tenum, _, _) = node
					tmp = '/*tenumxtract*/'
				}

				case 34: {
					let data.Node.TType(_, t11) = node
					let data.Node.TType(name21, _) = node
					tmp = ''
				}

				case 35: {
					let data.Node.TDeclare(_, node1) = node
					let data.Node.TDeclare(name22, _) = node
					if (node1.index == 19) {
						GenHaxe.parentNames.set(node1, name22)
						tmp = '//extern untyped ' + name22
					} else {
						GenHaxe.parentNames.set(node1, name22)
						tmp = '//extern ' + name22
					}
				}

				case 36: {
					let data.Node.TUsing(names2) = node
					tmp = '/*using ' + Std.string(names2) + '*/'
				}

				case 37: {
					let data.Node.TIs(_, t12) = node
					let data.Node.TIs(expr9, _) = node
					tmp = ''
				}

				case 38: {
					let data.Node.TAs(_, _, t13) = node
					let data.Node.TAs(_, kind, _) = node
					let data.Node.TAs(expr10, _, _) = node
					tmp = 'cast (' + GenHaxe.stringify(expr10) + ', ' + GenHaxe.extractTypeName(t13) + ')'
				}

				case 39: tmp = '_'

				case 40: {
					let data.Node.TStatic(field1) = node
					tmp = 'static ' + GenHaxe.stringify(field1)
				}

				case 41: {
					let data.Node.TFor(_, _, b2) = node
					let data.Node.TFor(_, a2, _) = node
					let data.Node.TFor(n3, _, _) = node
					var name23: String = GenHaxe.rename(n3)
					if (GenHaxe.hasInScope(name23)) name23 += ++GenHaxe.id + '___'
					GenHaxe.addToScope(name23)
					GenHaxe.parentNames.set(node, name23)
					tmp = 'for(' + GenHaxe.rename(name23) + ' in ' + GenHaxe.stringify(a2) + ') ' + GenHaxe.stringify(b2)
				}

				case 42: {
					let data.Node.TElvis(_, b3) = node
					let data.Node.TElvis(a3, _) = node
					tmp = '(' + GenHaxe.stringify(a3) + ').or(' + GenHaxe.stringify(b3) + ')'
				}

				case 43: {
					let data.Node.NodeTypeValue(type1) = node
					tmp = GenHaxe.extractTypeName(type1)
				}
			}
			return a + @ast(ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenHaxe.hx:218: characters 21-25) }), pos => #pos(bootstrap/GenHaxe.hx:218: characters 20-26) },[{ expr => { expr => EBlock([{ expr => EConst(CString(/*tenumxtract*/)), pos => #pos(bootstrap/GenHaxe.hx:220: characters 43-60) }]), pos => #pos(bootstrap/GenHaxe.hx:220: characters 2-60) }, values => [{ expr => ECall({ expr => EConst(CIdent(TEnumExtract)), pos => #pos(bootstrap/GenHaxe.hx:220: characters 7-19) },[{ expr => EConst(CIdent(tenum)), pos => #pos(bootstrap/GenHaxe.hx:220: characters 20-25) },{ expr => EConst(CIdent(extract)), pos => #pos(bootstrap/GenHaxe.hx:220: characters 27-34) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:220: characters 36-40) }]), pos => #pos(bootstrap/GenHaxe.hx:220: characters 7-41) }], pos => #pos(bootstrap/GenHaxe.hx:220: characters 2-60), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(/*using $names*/)), pos => #pos(bootstrap/GenHaxe.hx:222: characters 22-40) }]), pos => #pos(bootstrap/GenHaxe.hx:222: characters 2-40) }, values => [{ expr => ECall({ expr => EConst(CIdent(TUsing)), pos => #pos(bootstrap/GenHaxe.hx:222: characters 7-13) },[{ expr => EConst(CIdent(names)), pos => #pos(bootstrap/GenHaxe.hx:222: characters 14-19) }]), pos => #pos(bootstrap/GenHaxe.hx:222: characters 7-20) }], pos => #pos(bootstrap/GenHaxe.hx:222: characters 2-40), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:223: characters 22-23) },{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:223: characters 27-28) }), pos => #pos(bootstrap/GenHaxe.hx:223: characters 22-28) },{ expr => ECall({ expr => EConst(CIdent(stringify)), pos => #pos(bootstrap/GenHaxe.hx:223: characters 30-39) },[{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:223: characters 40-41) }]), pos => #pos(bootstrap/GenHaxe.hx:223: characters 30-42) }), pos => #pos(bootstrap/GenHaxe.hx:223: characters 18-42) }]), pos => #pos(bootstrap/GenHaxe.hx:223: characters 17-43) },join), pos => #pos(bootstrap/GenHaxe.hx:223: characters 17-48) },[{ expr => EConst(CString(; )), pos => #pos(bootstrap/GenHaxe.hx:223: characters 49-53) }]), pos => #pos(bootstrap/GenHaxe.hx:223: characters 17-54) }]), pos => #pos(bootstrap/GenHaxe.hx:223: characters 2-54) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVars)), pos => #pos(bootstrap/GenHaxe.hx:223: characters 7-12) },[{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:223: characters 13-14) }]), pos => #pos(bootstrap/GenHaxe.hx:223: characters 7-15) }], pos => #pos(bootstrap/GenHaxe.hx:223: characters 2-54), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:233: characters 11-12) },split), pos => #pos(bootstrap/GenHaxe.hx:233: characters 11-18) },[{ expr => EConst(CString()), pos => #pos(bootstrap/GenHaxe.hx:233: characters 19-21) }]), pos => #pos(bootstrap/GenHaxe.hx:233: characters 11-22) }, name => s, type => null, ??? => #pos(bootstrap/GenHaxe.hx:233: characters 7-8) }]), pos => #pos(bootstrap/GenHaxe.hx:233: characters 3-23) },{ expr => EVars([{ expr => { expr => EArrayDecl([]), pos => #pos(bootstrap/GenHaxe.hx:234: characters 18-20) }, name => charsOut, type => null, ??? => #pos(bootstrap/GenHaxe.hx:234: characters 7-15) }]), pos => #pos(bootstrap/GenHaxe.hx:234: characters 3-21) },{ expr => EWhile({ expr => EBinop(OpGt,{ expr => EField({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:235: characters 9-10) },length), pos => #pos(bootstrap/GenHaxe.hx:235: characters 9-17) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenHaxe.hx:235: characters 20-21) }), pos => #pos(bootstrap/GenHaxe.hx:235: characters 9-21) },{ expr => EBlock([{ expr => ESwitch({ expr => EParenthesis({ expr => EArray({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:237: characters 11-12) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenHaxe.hx:237: characters 13-14) }), pos => #pos(bootstrap/GenHaxe.hx:237: characters 11-15) }), pos => #pos(bootstrap/GenHaxe.hx:237: characters 10-16) },[{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(charsOut)), pos => #pos(bootstrap/GenHaxe.hx:239: characters 5-13) },push), pos => #pos(bootstrap/GenHaxe.hx:239: characters 5-18) },[{ expr => EConst(CString(\")), pos => #pos(bootstrap/GenHaxe.hx:239: characters 19-24) }]), pos => #pos(bootstrap/GenHaxe.hx:239: characters 5-25) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:240: characters 5-6) },shift), pos => #pos(bootstrap/GenHaxe.hx:240: characters 5-12) },[]), pos => #pos(bootstrap/GenHaxe.hx:240: characters 5-14) }]), pos => #pos(bootstrap/GenHaxe.hx:238: lines 238-240) }, values => [{ expr => EConst(CString(")), pos => #pos(bootstrap/GenHaxe.hx:238: characters 10-13) }], pos => #pos(bootstrap/GenHaxe.hx:238: lines 238-240), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(charsOut)), pos => #pos(bootstrap/GenHaxe.hx:242: characters 5-13) },push), pos => #pos(bootstrap/GenHaxe.hx:242: characters 5-18) },[{ expr => EConst(CString(\n)), pos => #pos(bootstrap/GenHaxe.hx:242: characters 19-24) }]), pos => #pos(bootstrap/GenHaxe.hx:242: characters 5-25) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:243: characters 5-6) },shift), pos => #pos(bootstrap/GenHaxe.hx:243: characters 5-12) },[]), pos => #pos(bootstrap/GenHaxe.hx:243: characters 5-14) }]), pos => #pos(bootstrap/GenHaxe.hx:241: lines 241-243) }, values => [{ expr => EConst(CString(
)), pos => #pos(bootstrap/GenHaxe.hx:241: characters 10-14) }], pos => #pos(bootstrap/GenHaxe.hx:241: lines 241-243), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(charsOut)), pos => #pos(bootstrap/GenHaxe.hx:245: characters 5-13) },push), pos => #pos(bootstrap/GenHaxe.hx:245: characters 5-18) },[{ expr => EConst(CString(\r)), pos => #pos(bootstrap/GenHaxe.hx:245: characters 19-24) }]), pos => #pos(bootstrap/GenHaxe.hx:245: characters 5-25) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:246: characters 5-6) },shift), pos => #pos(bootstrap/GenHaxe.hx:246: characters 5-12) },[]), pos => #pos(bootstrap/GenHaxe.hx:246: characters 5-14) }]), pos => #pos(bootstrap/GenHaxe.hx:244: lines 244-246) }, values => [{ expr => EConst(CString()), pos => #pos(bootstrap/GenHaxe.hx:244: characters 10-14) }], pos => #pos(bootstrap/GenHaxe.hx:244: lines 244-246), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:248: characters 5-6) },shift), pos => #pos(bootstrap/GenHaxe.hx:248: characters 5-12) },[]), pos => #pos(bootstrap/GenHaxe.hx:248: characters 5-14) },{ expr => EIf({ expr => EBinop(OpEq,{ expr => EArray({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:249: characters 8-9) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenHaxe.hx:249: characters 10-11) }), pos => #pos(bootstrap/GenHaxe.hx:249: characters 8-12) },{ expr => EConst(CString(")), pos => #pos(bootstrap/GenHaxe.hx:249: characters 16-19) }), pos => #pos(bootstrap/GenHaxe.hx:249: characters 8-19) },{ expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(charsOut)), pos => #pos(bootstrap/GenHaxe.hx:250: characters 6-14) },push), pos => #pos(bootstrap/GenHaxe.hx:250: characters 6-19) },[{ expr => EConst(CString(\")), pos => #pos(bootstrap/GenHaxe.hx:250: characters 20-25) }]), pos => #pos(bootstrap/GenHaxe.hx:250: characters 6-26) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:251: characters 6-7) },shift), pos => #pos(bootstrap/GenHaxe.hx:251: characters 6-13) },[]), pos => #pos(bootstrap/GenHaxe.hx:251: characters 6-15) }]), pos => #pos(bootstrap/GenHaxe.hx:249: lines 249-252) },{ expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(charsOut)), pos => #pos(bootstrap/GenHaxe.hx:253: characters 6-14) },push), pos => #pos(bootstrap/GenHaxe.hx:253: characters 6-19) },[{ expr => EConst(CString(\)), pos => #pos(bootstrap/GenHaxe.hx:253: characters 20-24) }]), pos => #pos(bootstrap/GenHaxe.hx:253: characters 6-25) }]), pos => #pos(bootstrap/GenHaxe.hx:252: lines 252-254) }), pos => #pos(bootstrap/GenHaxe.hx:249: lines 249-254) }]), pos => #pos(bootstrap/GenHaxe.hx:247: lines 247-254) }, values => [{ expr => EConst(CString(\)), pos => #pos(bootstrap/GenHaxe.hx:247: characters 10-14) }], pos => #pos(bootstrap/GenHaxe.hx:247: lines 247-254), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(charsOut)), pos => #pos(bootstrap/GenHaxe.hx:256: characters 5-13) },push), pos => #pos(bootstrap/GenHaxe.hx:256: characters 5-18) },[{ expr => EArray({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:256: characters 19-20) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenHaxe.hx:256: characters 21-22) }), pos => #pos(bootstrap/GenHaxe.hx:256: characters 19-23) }]), pos => #pos(bootstrap/GenHaxe.hx:256: characters 5-24) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:257: characters 5-6) },shift), pos => #pos(bootstrap/GenHaxe.hx:257: characters 5-12) },[]), pos => #pos(bootstrap/GenHaxe.hx:257: characters 5-14) }]), pos => #pos(bootstrap/GenHaxe.hx:255: lines 255-257) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:255: characters 10-11) }], pos => #pos(bootstrap/GenHaxe.hx:255: lines 255-257), guard => null }],null), pos => #pos(bootstrap/GenHaxe.hx:237: lines 237-258) }]), pos => #pos(bootstrap/GenHaxe.hx:236: lines 236-259) },true), pos => #pos(bootstrap/GenHaxe.hx:235: lines 235-259) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(")), pos => #pos(bootstrap/GenHaxe.hx:261: characters 3-6) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(charsOut)), pos => #pos(bootstrap/GenHaxe.hx:261: characters 9-17) },join), pos => #pos(bootstrap/GenHaxe.hx:261: characters 9-22) },[{ expr => EConst(CString()), pos => #pos(bootstrap/GenHaxe.hx:261: characters 23-25) }]), pos => #pos(bootstrap/GenHaxe.hx:261: characters 9-26) }), pos => #pos(bootstrap/GenHaxe.hx:261: characters 3-26) },{ expr => EConst(CString(")), pos => #pos(bootstrap/GenHaxe.hx:261: characters 29-32) }), pos => #pos(bootstrap/GenHaxe.hx:261: characters 3-32) }]), pos => #pos(bootstrap/GenHaxe.hx:227: lines 227-261) }, values => [{ expr => ECall({ expr => EConst(CIdent(TString)), pos => #pos(bootstrap/GenHaxe.hx:227: characters 7-14) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:227: characters 15-16) }]), pos => #pos(bootstrap/GenHaxe.hx:227: characters 7-17) }], pos => #pos(bootstrap/GenHaxe.hx:227: lines 227-261), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(trace)), pos => #pos(bootstrap/GenHaxe.hx:263: characters 3-8) },[{ expr => EConst(CString(`$s`)), pos => #pos(bootstrap/GenHaxe.hx:263: characters 9-15) }]), pos => #pos(bootstrap/GenHaxe.hx:263: characters 3-16) },{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EField({ expr => EConst(CIdent(Project)), pos => #pos(bootstrap/GenHaxe.hx:264: characters 16-23) },mapNames), pos => #pos(bootstrap/GenHaxe.hx:264: characters 16-32) },get), pos => #pos(bootstrap/GenHaxe.hx:264: characters 16-36) },[{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenHaxe.hx:264: characters 37-41) }]), pos => #pos(bootstrap/GenHaxe.hx:264: characters 16-42) }, name => source, type => null, ??? => #pos(bootstrap/GenHaxe.hx:264: characters 7-13) }]), pos => #pos(bootstrap/GenHaxe.hx:264: characters 3-43) },{ expr => EVars([{ expr => { expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenHaxe.hx:265: characters 18-24) }), pos => #pos(bootstrap/GenHaxe.hx:265: characters 17-25) },[{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CString(Unmapped $node)), pos => #pos(bootstrap/GenHaxe.hx:266: characters 21-37) }), pos => #pos(bootstrap/GenHaxe.hx:266: characters 15-20) }]), pos => #pos(bootstrap/GenHaxe.hx:266: characters 4-20) }, values => [{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:266: characters 9-13) }], pos => #pos(bootstrap/GenHaxe.hx:266: characters 4-20), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:267: characters 31-35) }]), pos => #pos(bootstrap/GenHaxe.hx:267: characters 4-35) }, values => [{ expr => ECall({ expr => EConst(CIdent(TEnum)), pos => #pos(bootstrap/GenHaxe.hx:267: characters 9-14) },[{ expr => ECall({ expr => EConst(CIdent(Type)), pos => #pos(bootstrap/GenHaxe.hx:267: characters 15-19) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:267: characters 20-24) }]), pos => #pos(bootstrap/GenHaxe.hx:267: characters 15-25) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:267: characters 27-28) }]), pos => #pos(bootstrap/GenHaxe.hx:267: characters 9-29) }], pos => #pos(bootstrap/GenHaxe.hx:267: characters 4-35), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(trace)), pos => #pos(bootstrap/GenHaxe.hx:268: characters 27-32) },[{ expr => EConst(CString(`$s`)), pos => #pos(bootstrap/GenHaxe.hx:268: characters 33-39) }]), pos => #pos(bootstrap/GenHaxe.hx:268: characters 27-40) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:268: characters 41-52) },get), pos => #pos(bootstrap/GenHaxe.hx:268: characters 41-56) },[{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenHaxe.hx:268: characters 57-63) }]), pos => #pos(bootstrap/GenHaxe.hx:268: characters 41-64) }]), pos => #pos(bootstrap/GenHaxe.hx:268: characters 4-64) }, values => [{ expr => ECall({ expr => EConst(CIdent(TFor)), pos => #pos(bootstrap/GenHaxe.hx:268: characters 9-13) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:268: characters 14-18) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:268: characters 20-21) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:268: characters 23-24) }]), pos => #pos(bootstrap/GenHaxe.hx:268: characters 9-25) }], pos => #pos(bootstrap/GenHaxe.hx:268: characters 4-64), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:269: characters 23-34) },get), pos => #pos(bootstrap/GenHaxe.hx:269: characters 23-38) },[{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenHaxe.hx:269: characters 39-45) }]), pos => #pos(bootstrap/GenHaxe.hx:269: characters 23-46) }]), pos => #pos(bootstrap/GenHaxe.hx:269: characters 4-46) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenHaxe.hx:269: characters 9-15) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:269: characters 16-20) }]), pos => #pos(bootstrap/GenHaxe.hx:269: characters 9-21) }], pos => #pos(bootstrap/GenHaxe.hx:269: characters 4-46), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:271: characters 13-24) },get), pos => #pos(bootstrap/GenHaxe.hx:271: characters 13-28) },[{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenHaxe.hx:271: characters 29-35) }]), pos => #pos(bootstrap/GenHaxe.hx:271: characters 13-36) }, name => n, type => null, ??? => #pos(bootstrap/GenHaxe.hx:271: characters 9-10) }]), pos => #pos(bootstrap/GenHaxe.hx:271: characters 5-37) },{ expr => EIf({ expr => EBinop(OpEq,{ expr => EConst(CIdent(n)), pos => #pos(bootstrap/GenHaxe.hx:272: characters 8-9) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:272: characters 11-15) }), pos => #pos(bootstrap/GenHaxe.hx:272: characters 8-15) },{ expr => EThrow({ expr => EBinop(OpAdd,{ expr => EConst(CString(TVar `$name` parentNames null == )), pos => #pos(bootstrap/GenHaxe.hx:272: characters 23-58) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:272: characters 59-70) },get), pos => #pos(bootstrap/GenHaxe.hx:272: characters 59-74) },[{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenHaxe.hx:272: characters 75-81) }]), pos => #pos(bootstrap/GenHaxe.hx:272: characters 59-82) }), pos => #pos(bootstrap/GenHaxe.hx:272: characters 23-82) }), pos => #pos(bootstrap/GenHaxe.hx:272: characters 17-22) },null), pos => #pos(bootstrap/GenHaxe.hx:272: characters 5-22) },{ expr => EConst(CIdent(n)), pos => #pos(bootstrap/GenHaxe.hx:273: characters 5-6) }]), pos => #pos(bootstrap/GenHaxe.hx:270: lines 270-273) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenHaxe.hx:270: characters 9-13) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:270: characters 14-18) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:270: characters 20-21) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:270: characters 23-24) }]), pos => #pos(bootstrap/GenHaxe.hx:270: characters 9-25) }], pos => #pos(bootstrap/GenHaxe.hx:270: lines 270-273), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EField({ expr => EConst(CIdent(Project)), pos => #pos(bootstrap/GenHaxe.hx:275: characters 25-32) },mapNames), pos => #pos(bootstrap/GenHaxe.hx:275: characters 25-41) },get), pos => #pos(bootstrap/GenHaxe.hx:275: characters 25-45) },[{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenHaxe.hx:275: characters 46-52) }]), pos => #pos(bootstrap/GenHaxe.hx:275: characters 25-53) }, name => static_source, type => null, ??? => #pos(bootstrap/GenHaxe.hx:275: characters 9-22) }]), pos => #pos(bootstrap/GenHaxe.hx:275: characters 5-54) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(static_source)), pos => #pos(bootstrap/GenHaxe.hx:276: characters 13-26) }), pos => #pos(bootstrap/GenHaxe.hx:276: characters 12-27) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => ECall({ expr => EField({ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:278: characters 7-8) },extractTypeName), pos => #pos(bootstrap/GenHaxe.hx:278: characters 7-24) },[]), pos => #pos(bootstrap/GenHaxe.hx:278: characters 7-26) },rename), pos => #pos(bootstrap/GenHaxe.hx:278: characters 7-33) },[]), pos => #pos(bootstrap/GenHaxe.hx:278: characters 7-35) },{ expr => EConst(CString(.)), pos => #pos(bootstrap/GenHaxe.hx:278: characters 38-41) }), pos => #pos(bootstrap/GenHaxe.hx:278: characters 7-41) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:278: characters 44-48) },rename), pos => #pos(bootstrap/GenHaxe.hx:278: characters 44-55) },[]), pos => #pos(bootstrap/GenHaxe.hx:278: characters 44-57) }), pos => #pos(bootstrap/GenHaxe.hx:278: characters 7-57) }]), pos => #pos(bootstrap/GenHaxe.hx:277: lines 277-278) }, values => [{ expr => ECall({ expr => EConst(CIdent(TClass)), pos => #pos(bootstrap/GenHaxe.hx:277: characters 11-17) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:277: characters 18-19) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:277: characters 21-22) }]), pos => #pos(bootstrap/GenHaxe.hx:277: characters 11-23) },{ expr => ECall({ expr => EConst(CIdent(TEnum)), pos => #pos(bootstrap/GenHaxe.hx:277: characters 25-30) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:277: characters 31-32) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:277: characters 33-34) }]), pos => #pos(bootstrap/GenHaxe.hx:277: characters 25-35) }], pos => #pos(bootstrap/GenHaxe.hx:277: lines 277-278), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CString(static_source is $static_source)), pos => #pos(bootstrap/GenHaxe.hx:279: characters 20-53) }), pos => #pos(bootstrap/GenHaxe.hx:279: characters 14-19) }]), pos => #pos(bootstrap/GenHaxe.hx:279: characters 6-19) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:279: characters 11-12) }], pos => #pos(bootstrap/GenHaxe.hx:279: characters 6-19), guard => null }],null), pos => #pos(bootstrap/GenHaxe.hx:276: lines 276-280) }]), pos => #pos(bootstrap/GenHaxe.hx:274: lines 274-280) }, values => [{ expr => ECall({ expr => EConst(CIdent(TStatic)), pos => #pos(bootstrap/GenHaxe.hx:274: characters 9-16) },[{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenHaxe.hx:274: characters 17-18) },{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenHaxe.hx:274: characters 21-25) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:274: characters 26-30) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:274: characters 32-33) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:274: characters 35-36) }]), pos => #pos(bootstrap/GenHaxe.hx:274: characters 21-37) }), pos => #pos(bootstrap/GenHaxe.hx:274: characters 17-37) }]), pos => #pos(bootstrap/GenHaxe.hx:274: characters 9-38) }], pos => #pos(bootstrap/GenHaxe.hx:274: lines 274-280), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:281: characters 29-33) },rename), pos => #pos(bootstrap/GenHaxe.hx:281: characters 29-40) },[]), pos => #pos(bootstrap/GenHaxe.hx:281: characters 29-42) }]), pos => #pos(bootstrap/GenHaxe.hx:281: characters 4-42) }, values => [{ expr => ECall({ expr => EConst(CIdent(TFunction)), pos => #pos(bootstrap/GenHaxe.hx:281: characters 9-18) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:281: characters 19-23) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:281: characters 25-26) }]), pos => #pos(bootstrap/GenHaxe.hx:281: characters 9-27) }], pos => #pos(bootstrap/GenHaxe.hx:281: characters 4-42), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => ECall({ expr => EField({ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:283: characters 16-17) },extractTypeName), pos => #pos(bootstrap/GenHaxe.hx:283: characters 16-33) },[]), pos => #pos(bootstrap/GenHaxe.hx:283: characters 16-35) },rename), pos => #pos(bootstrap/GenHaxe.hx:283: characters 16-42) },[]), pos => #pos(bootstrap/GenHaxe.hx:283: characters 16-44) }, name => name, type => null, ??? => #pos(bootstrap/GenHaxe.hx:283: characters 9-13) }]), pos => #pos(bootstrap/GenHaxe.hx:283: characters 5-45) },{ expr => EVars([{ expr => { expr => ECall({ expr => EConst(CIdent(getAtt)), pos => #pos(bootstrap/GenHaxe.hx:284: characters 21-27) },[{ expr => ECall({ expr => EField({ expr => EField({ expr => EConst(CIdent(Project)), pos => #pos(bootstrap/GenHaxe.hx:284: characters 28-35) },mapAttributes), pos => #pos(bootstrap/GenHaxe.hx:284: characters 28-49) },get), pos => #pos(bootstrap/GenHaxe.hx:284: characters 28-53) },[{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenHaxe.hx:284: characters 54-60) }]), pos => #pos(bootstrap/GenHaxe.hx:284: characters 28-61) },{ expr => EConst(CString(extern)), pos => #pos(bootstrap/GenHaxe.hx:284: characters 63-71) }]), pos => #pos(bootstrap/GenHaxe.hx:284: characters 21-72) }, name => externAtt, type => null, ??? => #pos(bootstrap/GenHaxe.hx:284: characters 9-18) }]), pos => #pos(bootstrap/GenHaxe.hx:284: characters 5-73) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(externAtt)), pos => #pos(bootstrap/GenHaxe.hx:285: characters 9-18) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:285: characters 22-26) }), pos => #pos(bootstrap/GenHaxe.hx:285: characters 9-26) },{ expr => EBlock([{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:286: characters 6-10) }]), pos => #pos(bootstrap/GenHaxe.hx:285: lines 285-287) },null), pos => #pos(bootstrap/GenHaxe.hx:285: lines 285-287) },{ expr => EVars([{ expr => { expr => ECall({ expr => EConst(CIdent(getAtt)), pos => #pos(bootstrap/GenHaxe.hx:288: characters 18-24) },[{ expr => ECall({ expr => EField({ expr => EField({ expr => EConst(CIdent(Project)), pos => #pos(bootstrap/GenHaxe.hx:288: characters 25-32) },mapAttributes), pos => #pos(bootstrap/GenHaxe.hx:288: characters 25-46) },get), pos => #pos(bootstrap/GenHaxe.hx:288: characters 25-50) },[{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenHaxe.hx:288: characters 51-57) }]), pos => #pos(bootstrap/GenHaxe.hx:288: characters 25-58) },{ expr => EConst(CString(native)), pos => #pos(bootstrap/GenHaxe.hx:288: characters 60-68) }]), pos => #pos(bootstrap/GenHaxe.hx:288: characters 18-69) }, name => rename, type => null, ??? => #pos(bootstrap/GenHaxe.hx:288: characters 9-15) }]), pos => #pos(bootstrap/GenHaxe.hx:288: characters 5-70) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(rename)), pos => #pos(bootstrap/GenHaxe.hx:289: characters 8-14) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:289: characters 18-22) }), pos => #pos(bootstrap/GenHaxe.hx:289: characters 8-22) },{ expr => ECall({ expr => EConst(CIdent(trace)), pos => #pos(bootstrap/GenHaxe.hx:289: characters 24-29) },[{ expr => EConst(CString(Got @native!)), pos => #pos(bootstrap/GenHaxe.hx:289: characters 30-44) }]), pos => #pos(bootstrap/GenHaxe.hx:289: characters 24-45) },null), pos => #pos(bootstrap/GenHaxe.hx:289: characters 5-45) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(rename)), pos => #pos(bootstrap/GenHaxe.hx:290: characters 8-14) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:290: characters 18-22) }), pos => #pos(bootstrap/GenHaxe.hx:290: characters 8-22) },{ expr => ESwitch({ expr => EParenthesis({ expr => EArray({ expr => EField({ expr => EConst(CIdent(rename)), pos => #pos(bootstrap/GenHaxe.hx:290: characters 32-38) },values), pos => #pos(bootstrap/GenHaxe.hx:290: characters 32-45) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenHaxe.hx:290: characters 46-47) }), pos => #pos(bootstrap/GenHaxe.hx:290: characters 32-48) }), pos => #pos(bootstrap/GenHaxe.hx:290: characters 31-49) },[{ expr => { expr => EBlock([{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:291: characters 17-21) }]), pos => #pos(bootstrap/GenHaxe.hx:291: characters 6-21) }, values => [{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:291: characters 11-15) }], pos => #pos(bootstrap/GenHaxe.hx:291: characters 6-21), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:292: characters 23-24) }]), pos => #pos(bootstrap/GenHaxe.hx:292: characters 6-24) }, values => [{ expr => ECall({ expr => EConst(CIdent(TString)), pos => #pos(bootstrap/GenHaxe.hx:292: characters 11-18) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:292: characters 19-20) }]), pos => #pos(bootstrap/GenHaxe.hx:292: characters 11-21) }], pos => #pos(bootstrap/GenHaxe.hx:292: characters 6-24), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:293: characters 14-18) }]), pos => #pos(bootstrap/GenHaxe.hx:293: characters 6-18) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:293: characters 11-12) }], pos => #pos(bootstrap/GenHaxe.hx:293: characters 6-18), guard => null }],null), pos => #pos(bootstrap/GenHaxe.hx:290: lines 290-294) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:294: characters 12-16) }), pos => #pos(bootstrap/GenHaxe.hx:290: lines 290-294) }]), pos => #pos(bootstrap/GenHaxe.hx:282: lines 282-294) }, values => [{ expr => ECall({ expr => EConst(CIdent(TClass)), pos => #pos(bootstrap/GenHaxe.hx:282: characters 9-15) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:282: characters 16-17) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:282: characters 19-20) }]), pos => #pos(bootstrap/GenHaxe.hx:282: characters 9-21) }], pos => #pos(bootstrap/GenHaxe.hx:282: lines 282-294), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EBinop(OpAdd,{ expr => EConst(CString($s )), pos => #pos(bootstrap/GenHaxe.hx:296: characters 10-15) },{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenHaxe.hx:296: characters 16-22) }), pos => #pos(bootstrap/GenHaxe.hx:296: characters 10-22) }), pos => #pos(bootstrap/GenHaxe.hx:296: characters 4-9) }]), pos => #pos(bootstrap/GenHaxe.hx:295: lines 295-296) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:295: characters 9-10) }], pos => #pos(bootstrap/GenHaxe.hx:295: lines 295-296), guard => null }],null), pos => #pos(bootstrap/GenHaxe.hx:265: lines 265-297) }, name => n, type => null, ??? => #pos(bootstrap/GenHaxe.hx:265: characters 7-8) }]), pos => #pos(bootstrap/GenHaxe.hx:265: lines 265-297) },{ expr => EConst(CIdent(n)), pos => #pos(bootstrap/GenHaxe.hx:298: characters 3-4) }]), pos => #pos(bootstrap/GenHaxe.hx:262: lines 262-298) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenHaxe.hx:262: characters 7-13) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:262: characters 14-15) }]), pos => #pos(bootstrap/GenHaxe.hx:262: characters 7-16) }], pos => #pos(bootstrap/GenHaxe.hx:262: lines 262-298), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString($b)), pos => #pos(bootstrap/GenHaxe.hx:299: characters 17-21) }]), pos => #pos(bootstrap/GenHaxe.hx:299: characters 2-21) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBool)), pos => #pos(bootstrap/GenHaxe.hx:299: characters 7-12) },[{ expr => EConst(CIdent(b)), pos => #pos(bootstrap/GenHaxe.hx:299: characters 13-14) }]), pos => #pos(bootstrap/GenHaxe.hx:299: characters 7-15) }], pos => #pos(bootstrap/GenHaxe.hx:299: characters 2-21), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(this)), pos => #pos(bootstrap/GenHaxe.hx:300: characters 14-20) }]), pos => #pos(bootstrap/GenHaxe.hx:300: characters 2-20) }, values => [{ expr => EConst(CIdent(TThis)), pos => #pos(bootstrap/GenHaxe.hx:300: characters 7-12) }], pos => #pos(bootstrap/GenHaxe.hx:300: characters 2-20), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(super)), pos => #pos(bootstrap/GenHaxe.hx:301: characters 15-22) }]), pos => #pos(bootstrap/GenHaxe.hx:301: characters 2-22) }, values => [{ expr => EConst(CIdent(TSuper)), pos => #pos(bootstrap/GenHaxe.hx:301: characters 7-13) }], pos => #pos(bootstrap/GenHaxe.hx:301: characters 2-22), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:302: characters 16-17) }]), pos => #pos(bootstrap/GenHaxe.hx:302: characters 2-17) }, values => [{ expr => ECall({ expr => EConst(CIdent(TInt)), pos => #pos(bootstrap/GenHaxe.hx:302: characters 7-11) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:302: characters 12-13) }]), pos => #pos(bootstrap/GenHaxe.hx:302: characters 7-14) }], pos => #pos(bootstrap/GenHaxe.hx:302: characters 2-17), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:303: characters 18-19) }]), pos => #pos(bootstrap/GenHaxe.hx:303: characters 2-19) }, values => [{ expr => ECall({ expr => EConst(CIdent(TFloat)), pos => #pos(bootstrap/GenHaxe.hx:303: characters 7-13) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:303: characters 14-15) }]), pos => #pos(bootstrap/GenHaxe.hx:303: characters 7-16) }], pos => #pos(bootstrap/GenHaxe.hx:303: characters 2-19), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(null)), pos => #pos(bootstrap/GenHaxe.hx:304: characters 14-20) }]), pos => #pos(bootstrap/GenHaxe.hx:304: characters 2-20) }, values => [{ expr => EConst(CIdent(TNull)), pos => #pos(bootstrap/GenHaxe.hx:304: characters 7-12) }], pos => #pos(bootstrap/GenHaxe.hx:304: characters 2-20), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(break)), pos => #pos(bootstrap/GenHaxe.hx:305: characters 15-22) }]), pos => #pos(bootstrap/GenHaxe.hx:305: characters 2-22) }, values => [{ expr => EConst(CIdent(TBreak)), pos => #pos(bootstrap/GenHaxe.hx:305: characters 7-13) }], pos => #pos(bootstrap/GenHaxe.hx:305: characters 2-22), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(continue)), pos => #pos(bootstrap/GenHaxe.hx:306: characters 18-28) }]), pos => #pos(bootstrap/GenHaxe.hx:306: characters 2-28) }, values => [{ expr => EConst(CIdent(TContinue)), pos => #pos(bootstrap/GenHaxe.hx:306: characters 7-16) }], pos => #pos(bootstrap/GenHaxe.hx:306: characters 2-28), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(a)), pos => #pos(bootstrap/GenHaxe.hx:308: characters 3-4) },stringify), pos => #pos(bootstrap/GenHaxe.hx:308: characters 3-14) },[]), pos => #pos(bootstrap/GenHaxe.hx:308: characters 3-16) },{ expr => EConst(CString( )), pos => #pos(bootstrap/GenHaxe.hx:308: characters 19-22) }), pos => #pos(bootstrap/GenHaxe.hx:308: characters 3-22) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(op)), pos => #pos(bootstrap/GenHaxe.hx:308: characters 25-27) },stringify), pos => #pos(bootstrap/GenHaxe.hx:308: characters 25-37) },[]), pos => #pos(bootstrap/GenHaxe.hx:308: characters 25-39) }), pos => #pos(bootstrap/GenHaxe.hx:308: characters 3-39) },{ expr => EConst(CString( )), pos => #pos(bootstrap/GenHaxe.hx:308: characters 42-45) }), pos => #pos(bootstrap/GenHaxe.hx:308: characters 3-45) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(b)), pos => #pos(bootstrap/GenHaxe.hx:308: characters 48-49) },stringify), pos => #pos(bootstrap/GenHaxe.hx:308: characters 48-59) },[]), pos => #pos(bootstrap/GenHaxe.hx:308: characters 48-61) }), pos => #pos(bootstrap/GenHaxe.hx:308: characters 3-61) }]), pos => #pos(bootstrap/GenHaxe.hx:307: lines 307-308) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBinop)), pos => #pos(bootstrap/GenHaxe.hx:307: characters 7-13) },[{ expr => EConst(CIdent(op)), pos => #pos(bootstrap/GenHaxe.hx:307: characters 14-16) },{ expr => EConst(CIdent(a)), pos => #pos(bootstrap/GenHaxe.hx:307: characters 18-19) },{ expr => EConst(CIdent(b)), pos => #pos(bootstrap/GenHaxe.hx:307: characters 21-22) }]), pos => #pos(bootstrap/GenHaxe.hx:307: characters 7-23) }], pos => #pos(bootstrap/GenHaxe.hx:307: lines 307-308), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString({})), pos => #pos(bootstrap/GenHaxe.hx:309: characters 19-23) }]), pos => #pos(bootstrap/GenHaxe.hx:309: characters 2-23) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenHaxe.hx:309: characters 7-13) },[{ expr => EArrayDecl([]), pos => #pos(bootstrap/GenHaxe.hx:309: characters 14-16) }]), pos => #pos(bootstrap/GenHaxe.hx:309: characters 7-17) }], pos => #pos(bootstrap/GenHaxe.hx:309: characters 2-23), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:311: characters 3-4) },{ expr => EConst(CString({
)), pos => #pos(bootstrap/GenHaxe.hx:311: characters 7-12) }), pos => #pos(bootstrap/GenHaxe.hx:311: characters 3-12) },{ expr => ECall({ expr => EConst(CIdent(pushScope)), pos => #pos(bootstrap/GenHaxe.hx:312: characters 3-12) },[]), pos => #pos(bootstrap/GenHaxe.hx:312: characters 3-14) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenHaxe.hx:313: characters 3-10) },[]), pos => #pos(bootstrap/GenHaxe.hx:313: characters 3-12) },{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(element)), pos => #pos(bootstrap/GenHaxe.hx:314: characters 8-15) },{ expr => EConst(CIdent(elements)), pos => #pos(bootstrap/GenHaxe.hx:314: characters 19-27) }), pos => #pos(bootstrap/GenHaxe.hx:314: characters 8-27) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(element)), pos => #pos(bootstrap/GenHaxe.hx:315: characters 11-18) }), pos => #pos(bootstrap/GenHaxe.hx:315: characters 10-19) },[{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenHaxe.hx:318: characters 17-21) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(element)), pos => #pos(bootstrap/GenHaxe.hx:318: characters 24-31) },stringifyBlockExpression), pos => #pos(bootstrap/GenHaxe.hx:318: characters 24-56) },[]), pos => #pos(bootstrap/GenHaxe.hx:318: characters 24-58) }), pos => #pos(bootstrap/GenHaxe.hx:318: characters 17-58) },{ expr => EConst(CString(;
)), pos => #pos(bootstrap/GenHaxe.hx:318: characters 61-66) }), pos => #pos(bootstrap/GenHaxe.hx:318: characters 17-66) }, name => code, type => null, ??? => #pos(bootstrap/GenHaxe.hx:318: characters 10-14) }]), pos => #pos(bootstrap/GenHaxe.hx:318: characters 6-67) },{ expr => EIf({ expr => EBinop(OpBoolAnd,{ expr => EUnop(OpNot,false,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(element)), pos => #pos(bootstrap/GenHaxe.hx:320: characters 10-17) },match), pos => #pos(bootstrap/GenHaxe.hx:320: characters 10-23) },[{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenHaxe.hx:320: characters 24-30) },[{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:320: characters 31-32) }]), pos => #pos(bootstrap/GenHaxe.hx:320: characters 24-33) }]), pos => #pos(bootstrap/GenHaxe.hx:320: characters 10-34) }), pos => #pos(bootstrap/GenHaxe.hx:320: characters 9-34) },{ expr => EBinop(OpLt,{ expr => EField({ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:320: characters 38-42) },length), pos => #pos(bootstrap/GenHaxe.hx:320: characters 38-49) },{ expr => EConst(CInt(256)), pos => #pos(bootstrap/GenHaxe.hx:320: characters 52-55) }), pos => #pos(bootstrap/GenHaxe.hx:320: characters 38-55) }), pos => #pos(bootstrap/GenHaxe.hx:320: characters 9-55) },{ expr => ECall({ expr => EConst(CIdent(trace)), pos => #pos(bootstrap/GenHaxe.hx:321: characters 6-11) },[{ expr => EConst(CString(Generated block expression `${untyped code.trim()}`)), pos => #pos(bootstrap/GenHaxe.hx:321: characters 12-65) }]), pos => #pos(bootstrap/GenHaxe.hx:321: characters 6-66) },null), pos => #pos(bootstrap/GenHaxe.hx:320: lines 320-321) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:322: characters 6-7) },{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:322: characters 11-15) }), pos => #pos(bootstrap/GenHaxe.hx:322: characters 6-15) }]), pos => #pos(bootstrap/GenHaxe.hx:317: lines 317-322) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:317: characters 10-11) }], pos => #pos(bootstrap/GenHaxe.hx:317: lines 317-322), guard => null }],null), pos => #pos(bootstrap/GenHaxe.hx:315: lines 315-323) }), pos => #pos(bootstrap/GenHaxe.hx:314: lines 314-323) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenHaxe.hx:324: characters 3-9) },[]), pos => #pos(bootstrap/GenHaxe.hx:324: characters 3-11) },{ expr => ECall({ expr => EConst(CIdent(popScope)), pos => #pos(bootstrap/GenHaxe.hx:325: characters 3-11) },[]), pos => #pos(bootstrap/GenHaxe.hx:325: characters 3-13) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:326: characters 3-4) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenHaxe.hx:326: characters 7-11) }), pos => #pos(bootstrap/GenHaxe.hx:326: characters 3-11) },{ expr => EConst(CString(})), pos => #pos(bootstrap/GenHaxe.hx:326: characters 14-17) }), pos => #pos(bootstrap/GenHaxe.hx:326: characters 3-17) }]), pos => #pos(bootstrap/GenHaxe.hx:310: lines 310-326) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenHaxe.hx:310: characters 7-13) },[{ expr => EConst(CIdent(elements)), pos => #pos(bootstrap/GenHaxe.hx:310: characters 14-22) }]), pos => #pos(bootstrap/GenHaxe.hx:310: characters 7-23) }], pos => #pos(bootstrap/GenHaxe.hx:310: lines 310-326), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(()), pos => #pos(bootstrap/GenHaxe.hx:330: characters 3-6) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(a)), pos => #pos(bootstrap/GenHaxe.hx:330: characters 9-10) },stringify), pos => #pos(bootstrap/GenHaxe.hx:330: characters 9-20) },[]), pos => #pos(bootstrap/GenHaxe.hx:330: characters 9-22) }), pos => #pos(bootstrap/GenHaxe.hx:330: characters 3-22) },{ expr => EConst(CString().or()), pos => #pos(bootstrap/GenHaxe.hx:330: characters 25-32) }), pos => #pos(bootstrap/GenHaxe.hx:330: characters 3-32) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(b)), pos => #pos(bootstrap/GenHaxe.hx:330: characters 35-36) },stringify), pos => #pos(bootstrap/GenHaxe.hx:330: characters 35-46) },[]), pos => #pos(bootstrap/GenHaxe.hx:330: characters 35-48) }), pos => #pos(bootstrap/GenHaxe.hx:330: characters 3-48) },{ expr => EConst(CString())), pos => #pos(bootstrap/GenHaxe.hx:330: characters 51-54) }), pos => #pos(bootstrap/GenHaxe.hx:330: characters 3-54) }]), pos => #pos(bootstrap/GenHaxe.hx:329: lines 329-330) }, values => [{ expr => ECall({ expr => EConst(CIdent(TElvis)), pos => #pos(bootstrap/GenHaxe.hx:329: characters 7-13) },[{ expr => EConst(CIdent(a)), pos => #pos(bootstrap/GenHaxe.hx:329: characters 14-15) },{ expr => EConst(CIdent(b)), pos => #pos(bootstrap/GenHaxe.hx:329: characters 17-18) }]), pos => #pos(bootstrap/GenHaxe.hx:329: characters 7-19) }], pos => #pos(bootstrap/GenHaxe.hx:329: lines 329-330), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(n)), pos => #pos(bootstrap/GenHaxe.hx:334: characters 14-15) },rename), pos => #pos(bootstrap/GenHaxe.hx:334: characters 14-22) },[]), pos => #pos(bootstrap/GenHaxe.hx:334: characters 14-24) }, name => name, type => null, ??? => #pos(bootstrap/GenHaxe.hx:334: characters 7-11) }]), pos => #pos(bootstrap/GenHaxe.hx:334: characters 3-25) },{ expr => EIf({ expr => ECall({ expr => EConst(CIdent(hasInScope)), pos => #pos(bootstrap/GenHaxe.hx:335: characters 6-16) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:335: characters 17-21) }]), pos => #pos(bootstrap/GenHaxe.hx:335: characters 6-22) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:335: characters 24-28) },{ expr => EBinop(OpAdd,{ expr => EParenthesis({ expr => EUnop(OpIncrement,false,{ expr => EConst(CIdent(id)), pos => #pos(bootstrap/GenHaxe.hx:335: characters 35-37) }), pos => #pos(bootstrap/GenHaxe.hx:335: characters 33-37) }), pos => #pos(bootstrap/GenHaxe.hx:335: characters 32-38) },{ expr => EConst(CIdent(postfix)), pos => #pos(bootstrap/GenHaxe.hx:335: characters 41-48) }), pos => #pos(bootstrap/GenHaxe.hx:335: characters 32-48) }), pos => #pos(bootstrap/GenHaxe.hx:335: characters 24-48) },null), pos => #pos(bootstrap/GenHaxe.hx:335: characters 3-48) },{ expr => ECall({ expr => EConst(CIdent(addToScope)), pos => #pos(bootstrap/GenHaxe.hx:336: characters 3-13) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:336: characters 14-18) }]), pos => #pos(bootstrap/GenHaxe.hx:336: characters 3-19) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:337: characters 3-14) },set), pos => #pos(bootstrap/GenHaxe.hx:337: characters 3-18) },[{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenHaxe.hx:337: characters 19-23) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:337: characters 25-29) }]), pos => #pos(bootstrap/GenHaxe.hx:337: characters 3-30) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(for()), pos => #pos(bootstrap/GenHaxe.hx:338: characters 3-9) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:338: characters 12-16) },rename), pos => #pos(bootstrap/GenHaxe.hx:338: characters 12-23) },[]), pos => #pos(bootstrap/GenHaxe.hx:338: characters 12-25) }), pos => #pos(bootstrap/GenHaxe.hx:338: characters 3-25) },{ expr => EConst(CString( in )), pos => #pos(bootstrap/GenHaxe.hx:338: characters 28-34) }), pos => #pos(bootstrap/GenHaxe.hx:338: characters 3-34) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(a)), pos => #pos(bootstrap/GenHaxe.hx:338: characters 37-38) },stringify), pos => #pos(bootstrap/GenHaxe.hx:338: characters 37-48) },[]), pos => #pos(bootstrap/GenHaxe.hx:338: characters 37-50) }), pos => #pos(bootstrap/GenHaxe.hx:338: characters 3-50) },{ expr => EConst(CString() )), pos => #pos(bootstrap/GenHaxe.hx:338: characters 53-57) }), pos => #pos(bootstrap/GenHaxe.hx:338: characters 3-57) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(b)), pos => #pos(bootstrap/GenHaxe.hx:339: characters 5-6) },stringify), pos => #pos(bootstrap/GenHaxe.hx:339: characters 5-16) },[]), pos => #pos(bootstrap/GenHaxe.hx:339: characters 5-18) }), pos => #pos(bootstrap/GenHaxe.hx:338: lines 338-339) }]), pos => #pos(bootstrap/GenHaxe.hx:333: lines 333-339) }, values => [{ expr => ECall({ expr => EConst(CIdent(TFor)), pos => #pos(bootstrap/GenHaxe.hx:333: characters 7-11) },[{ expr => EConst(CIdent(n)), pos => #pos(bootstrap/GenHaxe.hx:333: characters 12-13) },{ expr => EConst(CIdent(a)), pos => #pos(bootstrap/GenHaxe.hx:333: characters 15-16) },{ expr => EConst(CIdent(b)), pos => #pos(bootstrap/GenHaxe.hx:333: characters 18-19) }]), pos => #pos(bootstrap/GenHaxe.hx:333: characters 7-20) }], pos => #pos(bootstrap/GenHaxe.hx:333: lines 333-339), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(untyped __instanceof__()), pos => #pos(bootstrap/GenHaxe.hx:346: characters 3-28) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(of)), pos => #pos(bootstrap/GenHaxe.hx:346: characters 31-33) },stringify), pos => #pos(bootstrap/GenHaxe.hx:346: characters 31-43) },[]), pos => #pos(bootstrap/GenHaxe.hx:346: characters 31-45) }), pos => #pos(bootstrap/GenHaxe.hx:346: characters 3-45) },{ expr => EConst(CString(, )), pos => #pos(bootstrap/GenHaxe.hx:346: characters 48-52) }), pos => #pos(bootstrap/GenHaxe.hx:346: characters 3-52) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(type)), pos => #pos(bootstrap/GenHaxe.hx:346: characters 55-59) },stringify), pos => #pos(bootstrap/GenHaxe.hx:346: characters 55-69) },[]), pos => #pos(bootstrap/GenHaxe.hx:346: characters 55-71) }), pos => #pos(bootstrap/GenHaxe.hx:346: characters 3-71) },{ expr => EConst(CString())), pos => #pos(bootstrap/GenHaxe.hx:346: characters 74-77) }), pos => #pos(bootstrap/GenHaxe.hx:346: characters 3-77) }]), pos => #pos(bootstrap/GenHaxe.hx:345: lines 345-346) }, values => [{ expr => ECall({ expr => EConst(CIdent(TCall)), pos => #pos(bootstrap/GenHaxe.hx:345: characters 7-12) },[{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenHaxe.hx:345: characters 13-19) },[{ expr => EConst(CString(__instanceof__)), pos => #pos(bootstrap/GenHaxe.hx:345: characters 20-36) }]), pos => #pos(bootstrap/GenHaxe.hx:345: characters 13-37) },{ expr => EArrayDecl([{ expr => EConst(CIdent(of)), pos => #pos(bootstrap/GenHaxe.hx:345: characters 40-42) },{ expr => EConst(CIdent(type)), pos => #pos(bootstrap/GenHaxe.hx:345: characters 44-48) }]), pos => #pos(bootstrap/GenHaxe.hx:345: characters 39-49) },{ expr => EConst(CIdent(argNames)), pos => #pos(bootstrap/GenHaxe.hx:345: characters 51-59) }]), pos => #pos(bootstrap/GenHaxe.hx:345: characters 7-60) }], pos => #pos(bootstrap/GenHaxe.hx:345: lines 345-346), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(untyped require()), pos => #pos(bootstrap/GenHaxe.hx:347: characters 53-71) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(module)), pos => #pos(bootstrap/GenHaxe.hx:347: characters 74-80) },stringify), pos => #pos(bootstrap/GenHaxe.hx:347: characters 74-90) },[]), pos => #pos(bootstrap/GenHaxe.hx:347: characters 74-92) }), pos => #pos(bootstrap/GenHaxe.hx:347: characters 53-92) },{ expr => EConst(CString())), pos => #pos(bootstrap/GenHaxe.hx:347: characters 95-98) }), pos => #pos(bootstrap/GenHaxe.hx:347: characters 53-98) }]), pos => #pos(bootstrap/GenHaxe.hx:347: characters 2-98) }, values => [{ expr => ECall({ expr => EConst(CIdent(TCall)), pos => #pos(bootstrap/GenHaxe.hx:347: characters 7-12) },[{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenHaxe.hx:347: characters 13-19) },[{ expr => EConst(CString(require)), pos => #pos(bootstrap/GenHaxe.hx:347: characters 20-29) }]), pos => #pos(bootstrap/GenHaxe.hx:347: characters 13-30) },{ expr => EArrayDecl([{ expr => EConst(CIdent(module)), pos => #pos(bootstrap/GenHaxe.hx:347: characters 33-39) }]), pos => #pos(bootstrap/GenHaxe.hx:347: characters 32-40) },{ expr => EConst(CIdent(argNames)), pos => #pos(bootstrap/GenHaxe.hx:347: characters 42-50) }]), pos => #pos(bootstrap/GenHaxe.hx:347: characters 7-51) }], pos => #pos(bootstrap/GenHaxe.hx:347: characters 2-98), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:348: characters 31-32) },stringify), pos => #pos(bootstrap/GenHaxe.hx:348: characters 31-42) },[]), pos => #pos(bootstrap/GenHaxe.hx:348: characters 31-44) },{ expr => EConst(CString(()), pos => #pos(bootstrap/GenHaxe.hx:348: characters 47-50) }), pos => #pos(bootstrap/GenHaxe.hx:348: characters 31-50) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:348: characters 59-60) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenHaxe.hx:348: characters 64-66) }), pos => #pos(bootstrap/GenHaxe.hx:348: characters 59-66) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:348: characters 68-69) },stringify), pos => #pos(bootstrap/GenHaxe.hx:348: characters 68-79) },[]), pos => #pos(bootstrap/GenHaxe.hx:348: characters 68-81) }), pos => #pos(bootstrap/GenHaxe.hx:348: characters 54-81) }]), pos => #pos(bootstrap/GenHaxe.hx:348: characters 53-82) },join), pos => #pos(bootstrap/GenHaxe.hx:348: characters 53-87) },[{ expr => EConst(CString(, )), pos => #pos(bootstrap/GenHaxe.hx:348: characters 88-92) }]), pos => #pos(bootstrap/GenHaxe.hx:348: characters 53-93) }), pos => #pos(bootstrap/GenHaxe.hx:348: characters 31-93) },{ expr => EConst(CString())), pos => #pos(bootstrap/GenHaxe.hx:348: characters 96-99) }), pos => #pos(bootstrap/GenHaxe.hx:348: characters 31-99) }]), pos => #pos(bootstrap/GenHaxe.hx:348: characters 2-99) }, values => [{ expr => ECall({ expr => EConst(CIdent(TCall)), pos => #pos(bootstrap/GenHaxe.hx:348: characters 7-12) },[{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:348: characters 13-14) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenHaxe.hx:348: characters 16-18) },{ expr => EConst(CIdent(argNames)), pos => #pos(bootstrap/GenHaxe.hx:348: characters 20-28) }]), pos => #pos(bootstrap/GenHaxe.hx:348: characters 7-29) }], pos => #pos(bootstrap/GenHaxe.hx:348: characters 2-99), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(()), pos => #pos(bootstrap/GenHaxe.hx:349: characters 24-27) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:349: characters 30-31) },stringify), pos => #pos(bootstrap/GenHaxe.hx:349: characters 30-41) },[]), pos => #pos(bootstrap/GenHaxe.hx:349: characters 30-43) }), pos => #pos(bootstrap/GenHaxe.hx:349: characters 24-43) },{ expr => EConst(CString())), pos => #pos(bootstrap/GenHaxe.hx:349: characters 46-49) }), pos => #pos(bootstrap/GenHaxe.hx:349: characters 24-49) }]), pos => #pos(bootstrap/GenHaxe.hx:349: characters 2-49) }, values => [{ expr => ECall({ expr => EConst(CIdent(TParenthesis)), pos => #pos(bootstrap/GenHaxe.hx:349: characters 7-19) },[{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:349: characters 20-21) }]), pos => #pos(bootstrap/GenHaxe.hx:349: characters 7-22) }], pos => #pos(bootstrap/GenHaxe.hx:349: characters 2-49), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(return )), pos => #pos(bootstrap/GenHaxe.hx:350: characters 43-52) }]), pos => #pos(bootstrap/GenHaxe.hx:350: characters 2-52) }, values => [{ expr => ECall({ expr => EConst(CIdent(TReturn)), pos => #pos(bootstrap/GenHaxe.hx:350: characters 7-14) },[{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:350: characters 15-19) }]), pos => #pos(bootstrap/GenHaxe.hx:350: characters 7-20) },{ expr => ECall({ expr => EConst(CIdent(TReturn)), pos => #pos(bootstrap/GenHaxe.hx:350: characters 22-29) },[{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenHaxe.hx:350: characters 30-36) },[{ expr => EArrayDecl([]), pos => #pos(bootstrap/GenHaxe.hx:350: characters 37-39) }]), pos => #pos(bootstrap/GenHaxe.hx:350: characters 30-40) }]), pos => #pos(bootstrap/GenHaxe.hx:350: characters 22-41) }], pos => #pos(bootstrap/GenHaxe.hx:350: characters 2-52), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EConst(CString(return )), pos => #pos(bootstrap/GenHaxe.hx:351: characters 19-28) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:351: characters 31-32) },stringify), pos => #pos(bootstrap/GenHaxe.hx:351: characters 31-42) },[]), pos => #pos(bootstrap/GenHaxe.hx:351: characters 31-44) }), pos => #pos(bootstrap/GenHaxe.hx:351: characters 19-44) }]), pos => #pos(bootstrap/GenHaxe.hx:351: characters 2-44) }, values => [{ expr => ECall({ expr => EConst(CIdent(TReturn)), pos => #pos(bootstrap/GenHaxe.hx:351: characters 7-14) },[{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:351: characters 15-16) }]), pos => #pos(bootstrap/GenHaxe.hx:351: characters 7-17) }], pos => #pos(bootstrap/GenHaxe.hx:351: characters 2-44), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(throw )), pos => #pos(bootstrap/GenHaxe.hx:352: characters 18-26) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:352: characters 29-30) },stringify), pos => #pos(bootstrap/GenHaxe.hx:352: characters 29-40) },[]), pos => #pos(bootstrap/GenHaxe.hx:352: characters 29-42) }), pos => #pos(bootstrap/GenHaxe.hx:352: characters 18-42) },{ expr => EConst(CString()), pos => #pos(bootstrap/GenHaxe.hx:352: characters 45-47) }), pos => #pos(bootstrap/GenHaxe.hx:352: characters 18-47) }]), pos => #pos(bootstrap/GenHaxe.hx:352: characters 2-47) }, values => [{ expr => ECall({ expr => EConst(CIdent(TThrow)), pos => #pos(bootstrap/GenHaxe.hx:352: characters 7-13) },[{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:352: characters 14-15) }]), pos => #pos(bootstrap/GenHaxe.hx:352: characters 7-16) }], pos => #pos(bootstrap/GenHaxe.hx:352: characters 2-47), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(pushScope)), pos => #pos(bootstrap/GenHaxe.hx:354: characters 3-12) },[]), pos => #pos(bootstrap/GenHaxe.hx:354: characters 3-14) },{ expr => ECall({ expr => EConst(CIdent(trace)), pos => #pos(bootstrap/GenHaxe.hx:355: characters 3-8) },[{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:355: characters 9-13) }]), pos => #pos(bootstrap/GenHaxe.hx:355: characters 3-14) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:356: characters 3-4) },{ expr => EConst(CString(((function(){)), pos => #pos(bootstrap/GenHaxe.hx:356: characters 8-23) }), pos => #pos(bootstrap/GenHaxe.hx:356: characters 3-23) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:357: characters 3-4) },{ expr => EConst(CString(var return$postfix = [];)), pos => #pos(bootstrap/GenHaxe.hx:357: characters 8-34) }), pos => #pos(bootstrap/GenHaxe.hx:357: characters 3-34) },{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenHaxe.hx:358: characters 14-19) },rename), pos => #pos(bootstrap/GenHaxe.hx:358: characters 14-26) },[]), pos => #pos(bootstrap/GenHaxe.hx:358: characters 14-28) }, name => name, type => null, ??? => #pos(bootstrap/GenHaxe.hx:358: characters 7-11) }]), pos => #pos(bootstrap/GenHaxe.hx:358: characters 3-29) },{ expr => EIf({ expr => ECall({ expr => EConst(CIdent(hasInScope)), pos => #pos(bootstrap/GenHaxe.hx:359: characters 6-16) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:359: characters 17-21) }]), pos => #pos(bootstrap/GenHaxe.hx:359: characters 6-22) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:359: characters 24-28) },{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(postfix)), pos => #pos(bootstrap/GenHaxe.hx:359: characters 32-39) },{ expr => EParenthesis({ expr => EUnop(OpIncrement,false,{ expr => EConst(CIdent(id)), pos => #pos(bootstrap/GenHaxe.hx:359: characters 45-47) }), pos => #pos(bootstrap/GenHaxe.hx:359: characters 43-47) }), pos => #pos(bootstrap/GenHaxe.hx:359: characters 42-48) }), pos => #pos(bootstrap/GenHaxe.hx:359: characters 32-48) }), pos => #pos(bootstrap/GenHaxe.hx:359: characters 24-48) },null), pos => #pos(bootstrap/GenHaxe.hx:359: characters 3-48) },{ expr => ECall({ expr => EConst(CIdent(addToScope)), pos => #pos(bootstrap/GenHaxe.hx:360: characters 3-13) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:360: characters 14-18) }]), pos => #pos(bootstrap/GenHaxe.hx:360: characters 3-19) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:361: characters 3-14) },set), pos => #pos(bootstrap/GenHaxe.hx:361: characters 3-18) },[{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:361: characters 19-23) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:361: characters 25-29) }]), pos => #pos(bootstrap/GenHaxe.hx:361: characters 3-30) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:362: characters 3-14) },set), pos => #pos(bootstrap/GenHaxe.hx:362: characters 3-18) },[{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenHaxe.hx:362: characters 19-20) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:362: characters 22-26) }]), pos => #pos(bootstrap/GenHaxe.hx:362: characters 3-27) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:364: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(for()), pos => #pos(bootstrap/GenHaxe.hx:364: characters 8-14) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:364: characters 17-21) }), pos => #pos(bootstrap/GenHaxe.hx:364: characters 8-21) },{ expr => EConst(CString( in )), pos => #pos(bootstrap/GenHaxe.hx:364: characters 24-30) }), pos => #pos(bootstrap/GenHaxe.hx:364: characters 8-30) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(array)), pos => #pos(bootstrap/GenHaxe.hx:364: characters 33-38) },stringify), pos => #pos(bootstrap/GenHaxe.hx:364: characters 33-48) },[]), pos => #pos(bootstrap/GenHaxe.hx:364: characters 33-50) }), pos => #pos(bootstrap/GenHaxe.hx:364: characters 8-50) },{ expr => EConst(CString() )), pos => #pos(bootstrap/GenHaxe.hx:364: characters 53-57) }), pos => #pos(bootstrap/GenHaxe.hx:364: characters 8-57) }), pos => #pos(bootstrap/GenHaxe.hx:364: characters 3-57) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:365: characters 3-4) },{ expr => EConst(CString(return$postfix.push()), pos => #pos(bootstrap/GenHaxe.hx:365: characters 8-30) }), pos => #pos(bootstrap/GenHaxe.hx:365: characters 3-30) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:366: characters 3-4) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:366: characters 8-12) },stringify), pos => #pos(bootstrap/GenHaxe.hx:366: characters 8-22) },[]), pos => #pos(bootstrap/GenHaxe.hx:366: characters 8-24) }), pos => #pos(bootstrap/GenHaxe.hx:366: characters 3-24) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:367: characters 3-4) },{ expr => EConst(CString(); return$postfix;)), pos => #pos(bootstrap/GenHaxe.hx:367: characters 8-28) }), pos => #pos(bootstrap/GenHaxe.hx:367: characters 3-28) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:368: characters 3-4) },{ expr => EConst(CString(})()))), pos => #pos(bootstrap/GenHaxe.hx:368: characters 8-15) }), pos => #pos(bootstrap/GenHaxe.hx:368: characters 3-15) },{ expr => ECall({ expr => EConst(CIdent(popScope)), pos => #pos(bootstrap/GenHaxe.hx:369: characters 3-11) },[]), pos => #pos(bootstrap/GenHaxe.hx:369: characters 3-13) },{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:370: characters 3-4) }]), pos => #pos(bootstrap/GenHaxe.hx:353: lines 353-370) }, values => [{ expr => ECall({ expr => EConst(CIdent(TArray)), pos => #pos(bootstrap/GenHaxe.hx:353: characters 7-13) },[{ expr => EArrayDecl([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenHaxe.hx:353: characters 15-16) },{ expr => ECall({ expr => EConst(CIdent(TFor)), pos => #pos(bootstrap/GenHaxe.hx:353: characters 19-23) },[{ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenHaxe.hx:353: characters 24-29) },{ expr => EConst(CIdent(array)), pos => #pos(bootstrap/GenHaxe.hx:353: characters 31-36) },{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:353: characters 38-42) }]), pos => #pos(bootstrap/GenHaxe.hx:353: characters 19-43) }), pos => #pos(bootstrap/GenHaxe.hx:353: characters 15-43) }]), pos => #pos(bootstrap/GenHaxe.hx:353: characters 14-44) }]), pos => #pos(bootstrap/GenHaxe.hx:353: characters 7-45) }], pos => #pos(bootstrap/GenHaxe.hx:353: lines 353-370), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString([)), pos => #pos(bootstrap/GenHaxe.hx:372: characters 19-22) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:372: characters 31-32) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenHaxe.hx:372: characters 36-38) }), pos => #pos(bootstrap/GenHaxe.hx:372: characters 31-38) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:372: characters 40-41) },stringify), pos => #pos(bootstrap/GenHaxe.hx:372: characters 40-51) },[]), pos => #pos(bootstrap/GenHaxe.hx:372: characters 40-53) }), pos => #pos(bootstrap/GenHaxe.hx:372: characters 26-53) }]), pos => #pos(bootstrap/GenHaxe.hx:372: characters 25-54) },join), pos => #pos(bootstrap/GenHaxe.hx:372: characters 25-59) },[{ expr => EConst(CString(,)), pos => #pos(bootstrap/GenHaxe.hx:372: characters 60-63) }]), pos => #pos(bootstrap/GenHaxe.hx:372: characters 25-64) }), pos => #pos(bootstrap/GenHaxe.hx:372: characters 19-64) },{ expr => EConst(CString(])), pos => #pos(bootstrap/GenHaxe.hx:372: characters 67-70) }), pos => #pos(bootstrap/GenHaxe.hx:372: characters 19-70) }]), pos => #pos(bootstrap/GenHaxe.hx:372: characters 2-70) }, values => [{ expr => ECall({ expr => EConst(CIdent(TArray)), pos => #pos(bootstrap/GenHaxe.hx:372: characters 7-13) },[{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenHaxe.hx:372: characters 14-16) }]), pos => #pos(bootstrap/GenHaxe.hx:372: characters 7-17) }], pos => #pos(bootstrap/GenHaxe.hx:372: characters 2-70), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(new Map())), pos => #pos(bootstrap/GenHaxe.hx:373: characters 19-30) }]), pos => #pos(bootstrap/GenHaxe.hx:373: characters 2-30) }, values => [{ expr => ECall({ expr => EConst(CIdent(TMap)), pos => #pos(bootstrap/GenHaxe.hx:373: characters 7-11) },[{ expr => EArrayDecl([]), pos => #pos(bootstrap/GenHaxe.hx:373: characters 12-14) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:373: characters 15-16) }]), pos => #pos(bootstrap/GenHaxe.hx:373: characters 7-17) }], pos => #pos(bootstrap/GenHaxe.hx:373: characters 2-30), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString([)), pos => #pos(bootstrap/GenHaxe.hx:375: characters 3-6) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenHaxe.hx:376: characters 8-9) },{ expr => EBinop(OpInterval,{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenHaxe.hx:376: characters 13-17) },{ expr => EField({ expr => EConst(CIdent(keys)), pos => #pos(bootstrap/GenHaxe.hx:376: characters 17-21) },length), pos => #pos(bootstrap/GenHaxe.hx:376: characters 17-28) }), pos => #pos(bootstrap/GenHaxe.hx:376: characters 13-28) }), pos => #pos(bootstrap/GenHaxe.hx:376: characters 8-28) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString()), pos => #pos(bootstrap/GenHaxe.hx:376: characters 30-32) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(keys)), pos => #pos(bootstrap/GenHaxe.hx:376: characters 35-39) },{ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenHaxe.hx:376: characters 40-41) }), pos => #pos(bootstrap/GenHaxe.hx:376: characters 35-42) },stringify), pos => #pos(bootstrap/GenHaxe.hx:376: characters 35-52) },[]), pos => #pos(bootstrap/GenHaxe.hx:376: characters 35-54) }), pos => #pos(bootstrap/GenHaxe.hx:376: characters 30-54) },{ expr => EConst(CString( => )), pos => #pos(bootstrap/GenHaxe.hx:376: characters 56-62) }), pos => #pos(bootstrap/GenHaxe.hx:376: characters 30-62) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(values)), pos => #pos(bootstrap/GenHaxe.hx:376: characters 65-71) },{ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenHaxe.hx:376: characters 72-73) }), pos => #pos(bootstrap/GenHaxe.hx:376: characters 65-74) },stringify), pos => #pos(bootstrap/GenHaxe.hx:376: characters 65-84) },[]), pos => #pos(bootstrap/GenHaxe.hx:376: characters 65-86) }), pos => #pos(bootstrap/GenHaxe.hx:376: characters 30-86) },{ expr => EConst(CString()), pos => #pos(bootstrap/GenHaxe.hx:376: characters 89-91) }), pos => #pos(bootstrap/GenHaxe.hx:376: characters 30-91) }), pos => #pos(bootstrap/GenHaxe.hx:376: characters 4-91) }]), pos => #pos(bootstrap/GenHaxe.hx:376: characters 3-92) },join), pos => #pos(bootstrap/GenHaxe.hx:376: characters 3-97) },[{ expr => EConst(CString(,)), pos => #pos(bootstrap/GenHaxe.hx:376: characters 98-101) }]), pos => #pos(bootstrap/GenHaxe.hx:376: characters 3-102) }), pos => #pos(bootstrap/GenHaxe.hx:375: lines 375-376) },{ expr => EConst(CString(])), pos => #pos(bootstrap/GenHaxe.hx:377: characters 5-8) }), pos => #pos(bootstrap/GenHaxe.hx:375: lines 375-377) }]), pos => #pos(bootstrap/GenHaxe.hx:374: lines 374-377) }, values => [{ expr => ECall({ expr => EConst(CIdent(TMap)), pos => #pos(bootstrap/GenHaxe.hx:374: characters 7-11) },[{ expr => EConst(CIdent(keys)), pos => #pos(bootstrap/GenHaxe.hx:374: characters 12-16) },{ expr => EConst(CIdent(values)), pos => #pos(bootstrap/GenHaxe.hx:374: characters 17-23) }]), pos => #pos(bootstrap/GenHaxe.hx:374: characters 7-24) }], pos => #pos(bootstrap/GenHaxe.hx:374: lines 374-377), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:381: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(()), pos => #pos(bootstrap/GenHaxe.hx:381: characters 7-10) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:381: characters 18-19) },{ expr => EConst(CIdent(econd)), pos => #pos(bootstrap/GenHaxe.hx:381: characters 23-28) }), pos => #pos(bootstrap/GenHaxe.hx:381: characters 18-28) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:381: characters 30-31) },stringify), pos => #pos(bootstrap/GenHaxe.hx:381: characters 30-41) },[]), pos => #pos(bootstrap/GenHaxe.hx:381: characters 30-43) }), pos => #pos(bootstrap/GenHaxe.hx:381: characters 14-43) }]), pos => #pos(bootstrap/GenHaxe.hx:381: characters 13-44) },join), pos => #pos(bootstrap/GenHaxe.hx:381: characters 13-49) },[{ expr => EConst(CString( && )), pos => #pos(bootstrap/GenHaxe.hx:381: characters 50-56) }]), pos => #pos(bootstrap/GenHaxe.hx:381: characters 13-57) }), pos => #pos(bootstrap/GenHaxe.hx:381: characters 7-57) },{ expr => EConst(CString()? ()), pos => #pos(bootstrap/GenHaxe.hx:381: characters 60-66) }), pos => #pos(bootstrap/GenHaxe.hx:381: characters 7-66) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenHaxe.hx:381: characters 70-73) },stringify), pos => #pos(bootstrap/GenHaxe.hx:381: characters 70-83) },[]), pos => #pos(bootstrap/GenHaxe.hx:381: characters 70-85) }), pos => #pos(bootstrap/GenHaxe.hx:381: characters 7-85) }), pos => #pos(bootstrap/GenHaxe.hx:381: characters 3-85) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(eelse)), pos => #pos(bootstrap/GenHaxe.hx:382: characters 7-12) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:382: characters 16-20) }), pos => #pos(bootstrap/GenHaxe.hx:382: characters 7-20) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:382: characters 22-23) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString() : ()), pos => #pos(bootstrap/GenHaxe.hx:382: characters 27-34) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(eelse)), pos => #pos(bootstrap/GenHaxe.hx:382: characters 37-42) },stringify), pos => #pos(bootstrap/GenHaxe.hx:382: characters 37-52) },[]), pos => #pos(bootstrap/GenHaxe.hx:382: characters 37-54) }), pos => #pos(bootstrap/GenHaxe.hx:382: characters 27-54) },{ expr => EConst(CString())), pos => #pos(bootstrap/GenHaxe.hx:382: characters 57-60) }), pos => #pos(bootstrap/GenHaxe.hx:382: characters 27-60) }), pos => #pos(bootstrap/GenHaxe.hx:382: characters 22-60) },null), pos => #pos(bootstrap/GenHaxe.hx:382: characters 3-60) },{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:383: characters 3-4) }]), pos => #pos(bootstrap/GenHaxe.hx:379: lines 379-383) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIf)), pos => #pos(bootstrap/GenHaxe.hx:379: characters 7-10) },[{ expr => EConst(CIdent(econd)), pos => #pos(bootstrap/GenHaxe.hx:379: characters 11-16) },{ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenHaxe.hx:379: characters 18-21) },{ expr => EConst(CIdent(eelse)), pos => #pos(bootstrap/GenHaxe.hx:379: characters 23-28) }]), pos => #pos(bootstrap/GenHaxe.hx:379: characters 7-29) }], pos => #pos(bootstrap/GenHaxe.hx:379: lines 379-383), guard => null },{ expr => { expr => EBlock([{ expr => ETernary({ expr => EConst(CIdent(isPostfix)), pos => #pos(bootstrap/GenHaxe.hx:385: characters 32-41) },{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:385: characters 44-45) },stringify), pos => #pos(bootstrap/GenHaxe.hx:385: characters 44-55) },[]), pos => #pos(bootstrap/GenHaxe.hx:385: characters 44-57) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(op)), pos => #pos(bootstrap/GenHaxe.hx:385: characters 60-62) },stringify), pos => #pos(bootstrap/GenHaxe.hx:385: characters 60-72) },[]), pos => #pos(bootstrap/GenHaxe.hx:385: characters 60-74) }), pos => #pos(bootstrap/GenHaxe.hx:385: characters 44-74) },{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(op)), pos => #pos(bootstrap/GenHaxe.hx:385: characters 77-79) },stringify), pos => #pos(bootstrap/GenHaxe.hx:385: characters 77-89) },[]), pos => #pos(bootstrap/GenHaxe.hx:385: characters 77-91) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:385: characters 94-95) },stringify), pos => #pos(bootstrap/GenHaxe.hx:385: characters 94-105) },[]), pos => #pos(bootstrap/GenHaxe.hx:385: characters 94-107) }), pos => #pos(bootstrap/GenHaxe.hx:385: characters 77-107) }), pos => #pos(bootstrap/GenHaxe.hx:385: characters 32-107) }]), pos => #pos(bootstrap/GenHaxe.hx:385: characters 2-107) }, values => [{ expr => ECall({ expr => EConst(CIdent(TUnop)), pos => #pos(bootstrap/GenHaxe.hx:385: characters 7-12) },[{ expr => EConst(CIdent(op)), pos => #pos(bootstrap/GenHaxe.hx:385: characters 13-15) },{ expr => EConst(CIdent(isPostfix)), pos => #pos(bootstrap/GenHaxe.hx:385: characters 17-26) },{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:385: characters 28-29) }]), pos => #pos(bootstrap/GenHaxe.hx:385: characters 7-30) }], pos => #pos(bootstrap/GenHaxe.hx:385: characters 2-107), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(while()), pos => #pos(bootstrap/GenHaxe.hx:386: characters 31-39) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(econd)), pos => #pos(bootstrap/GenHaxe.hx:386: characters 42-47) },stringify), pos => #pos(bootstrap/GenHaxe.hx:386: characters 42-57) },[]), pos => #pos(bootstrap/GenHaxe.hx:386: characters 42-59) }), pos => #pos(bootstrap/GenHaxe.hx:386: characters 31-59) },{ expr => EConst(CString() )), pos => #pos(bootstrap/GenHaxe.hx:386: characters 62-66) }), pos => #pos(bootstrap/GenHaxe.hx:386: characters 31-66) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:386: characters 69-70) },stringify), pos => #pos(bootstrap/GenHaxe.hx:386: characters 69-80) },[]), pos => #pos(bootstrap/GenHaxe.hx:386: characters 69-82) }), pos => #pos(bootstrap/GenHaxe.hx:386: characters 31-82) }]), pos => #pos(bootstrap/GenHaxe.hx:386: characters 2-82) }, values => [{ expr => ECall({ expr => EConst(CIdent(TWhile)), pos => #pos(bootstrap/GenHaxe.hx:386: characters 7-13) },[{ expr => EConst(CIdent(econd)), pos => #pos(bootstrap/GenHaxe.hx:386: characters 14-19) },{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:386: characters 21-22) },{ expr => EConst(CIdent(true)), pos => #pos(bootstrap/GenHaxe.hx:386: characters 24-28) }]), pos => #pos(bootstrap/GenHaxe.hx:386: characters 7-29) }], pos => #pos(bootstrap/GenHaxe.hx:386: characters 2-82), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(do{)), pos => #pos(bootstrap/GenHaxe.hx:387: characters 32-37) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:387: characters 40-41) },stringify), pos => #pos(bootstrap/GenHaxe.hx:387: characters 40-51) },[]), pos => #pos(bootstrap/GenHaxe.hx:387: characters 40-53) }), pos => #pos(bootstrap/GenHaxe.hx:387: characters 32-53) },{ expr => EConst(CString(}while()), pos => #pos(bootstrap/GenHaxe.hx:387: characters 56-65) }), pos => #pos(bootstrap/GenHaxe.hx:387: characters 32-65) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(econd)), pos => #pos(bootstrap/GenHaxe.hx:387: characters 68-73) },stringify), pos => #pos(bootstrap/GenHaxe.hx:387: characters 68-83) },[]), pos => #pos(bootstrap/GenHaxe.hx:387: characters 68-85) }), pos => #pos(bootstrap/GenHaxe.hx:387: characters 32-85) },{ expr => EConst(CString())), pos => #pos(bootstrap/GenHaxe.hx:387: characters 88-91) }), pos => #pos(bootstrap/GenHaxe.hx:387: characters 32-91) }]), pos => #pos(bootstrap/GenHaxe.hx:387: characters 2-91) }, values => [{ expr => ECall({ expr => EConst(CIdent(TWhile)), pos => #pos(bootstrap/GenHaxe.hx:387: characters 7-13) },[{ expr => EConst(CIdent(econd)), pos => #pos(bootstrap/GenHaxe.hx:387: characters 14-19) },{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:387: characters 21-22) },{ expr => EConst(CIdent(false)), pos => #pos(bootstrap/GenHaxe.hx:387: characters 24-29) }]), pos => #pos(bootstrap/GenHaxe.hx:387: characters 7-30) }], pos => #pos(bootstrap/GenHaxe.hx:387: characters 2-91), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(extractTypeName)), pos => #pos(bootstrap/GenHaxe.hx:388: characters 28-43) },[{ expr => EConst(CIdent(type)), pos => #pos(bootstrap/GenHaxe.hx:388: characters 44-48) }]), pos => #pos(bootstrap/GenHaxe.hx:388: characters 28-49) }]), pos => #pos(bootstrap/GenHaxe.hx:388: characters 2-49) }, values => [{ expr => ECall({ expr => EConst(CIdent(NodeTypeValue)), pos => #pos(bootstrap/GenHaxe.hx:388: characters 7-20) },[{ expr => EConst(CIdent(type)), pos => #pos(bootstrap/GenHaxe.hx:388: characters 21-25) }]), pos => #pos(bootstrap/GenHaxe.hx:388: characters 7-26) }], pos => #pos(bootstrap/GenHaxe.hx:388: characters 2-49), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EConst(CString()), pos => #pos(bootstrap/GenHaxe.hx:389: characters 35-37) },{ expr => EField({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:389: characters 38-39) },length), pos => #pos(bootstrap/GenHaxe.hx:389: characters 38-46) }), pos => #pos(bootstrap/GenHaxe.hx:389: characters 35-46) }]), pos => #pos(bootstrap/GenHaxe.hx:389: characters 2-46) }, values => [{ expr => ECall({ expr => EConst(CIdent(TDot)), pos => #pos(bootstrap/GenHaxe.hx:389: characters 7-11) },[{ expr => ECall({ expr => EConst(CIdent(TString)), pos => #pos(bootstrap/GenHaxe.hx:389: characters 12-19) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:389: characters 20-21) }]), pos => #pos(bootstrap/GenHaxe.hx:389: characters 12-22) },{ expr => EConst(CString(length)), pos => #pos(bootstrap/GenHaxe.hx:389: characters 24-32) }]), pos => #pos(bootstrap/GenHaxe.hx:389: characters 7-33) }], pos => #pos(bootstrap/GenHaxe.hx:389: characters 2-46), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(trace)), pos => #pos(bootstrap/GenHaxe.hx:391: characters 2-7) },[{ expr => EConst(CString(.`$name`)), pos => #pos(bootstrap/GenHaxe.hx:391: characters 8-18) }]), pos => #pos(bootstrap/GenHaxe.hx:391: characters 2-19) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:392: characters 2-6) },stringify), pos => #pos(bootstrap/GenHaxe.hx:392: characters 2-16) },[]), pos => #pos(bootstrap/GenHaxe.hx:392: characters 2-18) },{ expr => EConst(CString(.)), pos => #pos(bootstrap/GenHaxe.hx:392: characters 21-24) }), pos => #pos(bootstrap/GenHaxe.hx:392: characters 2-24) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:392: characters 27-31) },rename), pos => #pos(bootstrap/GenHaxe.hx:392: characters 27-38) },[]), pos => #pos(bootstrap/GenHaxe.hx:392: characters 27-40) }), pos => #pos(bootstrap/GenHaxe.hx:392: characters 2-40) }]), pos => #pos(bootstrap/GenHaxe.hx:390: lines 390-392) }, values => [{ expr => ECall({ expr => EConst(CIdent(TDot)), pos => #pos(bootstrap/GenHaxe.hx:390: characters 7-11) },[{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:390: characters 12-16) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:390: characters 18-22) }]), pos => #pos(bootstrap/GenHaxe.hx:390: characters 7-23) }], pos => #pos(bootstrap/GenHaxe.hx:390: lines 390-392), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:393: characters 28-32) },stringify), pos => #pos(bootstrap/GenHaxe.hx:393: characters 28-42) },[]), pos => #pos(bootstrap/GenHaxe.hx:393: characters 28-44) },{ expr => EConst(CString([)), pos => #pos(bootstrap/GenHaxe.hx:393: characters 47-50) }), pos => #pos(bootstrap/GenHaxe.hx:393: characters 28-50) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(index)), pos => #pos(bootstrap/GenHaxe.hx:393: characters 53-58) },stringify), pos => #pos(bootstrap/GenHaxe.hx:393: characters 53-68) },[]), pos => #pos(bootstrap/GenHaxe.hx:393: characters 53-70) }), pos => #pos(bootstrap/GenHaxe.hx:393: characters 28-70) },{ expr => EConst(CString(])), pos => #pos(bootstrap/GenHaxe.hx:393: characters 73-76) }), pos => #pos(bootstrap/GenHaxe.hx:393: characters 28-76) }]), pos => #pos(bootstrap/GenHaxe.hx:393: characters 2-76) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIndex)), pos => #pos(bootstrap/GenHaxe.hx:393: characters 7-13) },[{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:393: characters 14-18) },{ expr => EConst(CIdent(index)), pos => #pos(bootstrap/GenHaxe.hx:393: characters 20-25) }]), pos => #pos(bootstrap/GenHaxe.hx:393: characters 7-26) }], pos => #pos(bootstrap/GenHaxe.hx:393: characters 2-76), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString()), pos => #pos(bootstrap/GenHaxe.hx:394: characters 21-23) }]), pos => #pos(bootstrap/GenHaxe.hx:394: characters 2-23) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIs)), pos => #pos(bootstrap/GenHaxe.hx:394: characters 7-10) },[{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:394: characters 11-15) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:394: characters 17-18) }]), pos => #pos(bootstrap/GenHaxe.hx:394: characters 7-19) }], pos => #pos(bootstrap/GenHaxe.hx:394: characters 2-23), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(cast ()), pos => #pos(bootstrap/GenHaxe.hx:396: characters 3-11) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:396: characters 14-18) },stringify), pos => #pos(bootstrap/GenHaxe.hx:396: characters 14-28) },[]), pos => #pos(bootstrap/GenHaxe.hx:396: characters 14-30) }), pos => #pos(bootstrap/GenHaxe.hx:396: characters 3-30) },{ expr => EConst(CString(, )), pos => #pos(bootstrap/GenHaxe.hx:396: characters 33-37) }), pos => #pos(bootstrap/GenHaxe.hx:396: characters 3-37) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:396: characters 40-41) },extractTypeName), pos => #pos(bootstrap/GenHaxe.hx:396: characters 40-57) },[]), pos => #pos(bootstrap/GenHaxe.hx:396: characters 40-59) }), pos => #pos(bootstrap/GenHaxe.hx:396: characters 3-59) },{ expr => EConst(CString())), pos => #pos(bootstrap/GenHaxe.hx:396: characters 62-65) }), pos => #pos(bootstrap/GenHaxe.hx:396: characters 3-65) }]), pos => #pos(bootstrap/GenHaxe.hx:395: lines 395-396) }, values => [{ expr => ECall({ expr => EConst(CIdent(TAs)), pos => #pos(bootstrap/GenHaxe.hx:395: characters 7-10) },[{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:395: characters 11-15) },{ expr => EConst(CIdent(kind)), pos => #pos(bootstrap/GenHaxe.hx:395: characters 17-21) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:395: characters 23-24) }]), pos => #pos(bootstrap/GenHaxe.hx:395: characters 7-25) }], pos => #pos(bootstrap/GenHaxe.hx:395: lines 395-396), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:398: characters 3-4) },{ expr => EConst(CString(function)), pos => #pos(bootstrap/GenHaxe.hx:398: characters 7-17) }), pos => #pos(bootstrap/GenHaxe.hx:398: characters 3-17) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:399: characters 6-10) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:399: characters 14-18) }), pos => #pos(bootstrap/GenHaxe.hx:399: characters 6-18) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:399: characters 20-21) },{ expr => EBinop(OpAdd,{ expr => EConst(CString( )), pos => #pos(bootstrap/GenHaxe.hx:399: characters 25-28) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:399: characters 31-35) },rename), pos => #pos(bootstrap/GenHaxe.hx:399: characters 31-42) },[]), pos => #pos(bootstrap/GenHaxe.hx:399: characters 31-44) }), pos => #pos(bootstrap/GenHaxe.hx:399: characters 25-44) }), pos => #pos(bootstrap/GenHaxe.hx:399: characters 20-44) },null), pos => #pos(bootstrap/GenHaxe.hx:399: characters 3-44) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:401: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(()), pos => #pos(bootstrap/GenHaxe.hx:401: characters 8-11) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:401: characters 19-20) },{ expr => EConst(CIdent(vars)), pos => #pos(bootstrap/GenHaxe.hx:401: characters 24-28) }), pos => #pos(bootstrap/GenHaxe.hx:401: characters 19-28) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:402: characters 12-13) }), pos => #pos(bootstrap/GenHaxe.hx:402: characters 11-14) },[{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:404: characters 6-17) },set), pos => #pos(bootstrap/GenHaxe.hx:404: characters 6-21) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:404: characters 22-23) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:404: characters 25-29) },rename), pos => #pos(bootstrap/GenHaxe.hx:404: characters 25-36) },[]), pos => #pos(bootstrap/GenHaxe.hx:404: characters 25-38) }]), pos => #pos(bootstrap/GenHaxe.hx:404: characters 6-39) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:405: characters 6-17) },get), pos => #pos(bootstrap/GenHaxe.hx:405: characters 6-21) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:405: characters 22-23) }]), pos => #pos(bootstrap/GenHaxe.hx:405: characters 6-24) }]), pos => #pos(bootstrap/GenHaxe.hx:403: lines 403-405) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenHaxe.hx:403: characters 10-16) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:403: characters 17-21) }]), pos => #pos(bootstrap/GenHaxe.hx:403: characters 10-22) }], pos => #pos(bootstrap/GenHaxe.hx:403: lines 403-405), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:407: characters 6-17) },set), pos => #pos(bootstrap/GenHaxe.hx:407: characters 6-21) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:407: characters 22-23) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:407: characters 25-29) },rename), pos => #pos(bootstrap/GenHaxe.hx:407: characters 25-36) },[]), pos => #pos(bootstrap/GenHaxe.hx:407: characters 25-38) }]), pos => #pos(bootstrap/GenHaxe.hx:407: characters 6-39) },{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:408: characters 17-28) },get), pos => #pos(bootstrap/GenHaxe.hx:408: characters 17-32) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:408: characters 33-34) }]), pos => #pos(bootstrap/GenHaxe.hx:408: characters 17-35) }, name => code, type => null, ??? => #pos(bootstrap/GenHaxe.hx:408: characters 10-14) }]), pos => #pos(bootstrap/GenHaxe.hx:408: characters 6-36) },{ expr => EIf({ expr => EBinop(OpBoolAnd,{ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:409: characters 10-11) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:409: characters 15-19) }), pos => #pos(bootstrap/GenHaxe.hx:409: characters 10-19) },{ expr => EBinop(OpGt,{ expr => EField({ expr => ECall({ expr => EField({ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:409: characters 23-24) },extractTypeString), pos => #pos(bootstrap/GenHaxe.hx:409: characters 23-42) },[]), pos => #pos(bootstrap/GenHaxe.hx:409: characters 23-44) },length), pos => #pos(bootstrap/GenHaxe.hx:409: characters 23-51) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenHaxe.hx:409: characters 54-55) }), pos => #pos(bootstrap/GenHaxe.hx:409: characters 23-55) }), pos => #pos(bootstrap/GenHaxe.hx:409: characters 10-55) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:409: characters 57-61) },{ expr => EBinop(OpAdd,{ expr => EConst(CString(: )), pos => #pos(bootstrap/GenHaxe.hx:409: characters 65-69) },{ expr => ECall({ expr => EField({ expr => ECall({ expr => EField({ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:409: characters 72-73) },extractTypeString), pos => #pos(bootstrap/GenHaxe.hx:409: characters 72-91) },[]), pos => #pos(bootstrap/GenHaxe.hx:409: characters 72-93) },rename), pos => #pos(bootstrap/GenHaxe.hx:409: characters 72-100) },[]), pos => #pos(bootstrap/GenHaxe.hx:409: characters 72-102) }), pos => #pos(bootstrap/GenHaxe.hx:409: characters 65-102) }), pos => #pos(bootstrap/GenHaxe.hx:409: characters 57-102) },null), pos => #pos(bootstrap/GenHaxe.hx:409: characters 6-102) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:410: characters 10-11) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:410: characters 15-19) }), pos => #pos(bootstrap/GenHaxe.hx:410: characters 10-19) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:410: characters 21-25) },{ expr => EBinop(OpAdd,{ expr => EConst(CString( = )), pos => #pos(bootstrap/GenHaxe.hx:410: characters 29-34) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:410: characters 37-38) },stringify), pos => #pos(bootstrap/GenHaxe.hx:410: characters 37-48) },[]), pos => #pos(bootstrap/GenHaxe.hx:410: characters 37-50) }), pos => #pos(bootstrap/GenHaxe.hx:410: characters 29-50) }), pos => #pos(bootstrap/GenHaxe.hx:410: characters 21-50) },null), pos => #pos(bootstrap/GenHaxe.hx:410: characters 6-50) },{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:411: characters 6-10) }]), pos => #pos(bootstrap/GenHaxe.hx:406: lines 406-411) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenHaxe.hx:406: characters 10-14) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:406: characters 15-19) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:406: characters 21-22) },{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:406: characters 24-25) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:406: characters 27-28) }]), pos => #pos(bootstrap/GenHaxe.hx:406: characters 10-29) }], pos => #pos(bootstrap/GenHaxe.hx:406: lines 406-411), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString()), pos => #pos(bootstrap/GenHaxe.hx:412: characters 30-32) }]), pos => #pos(bootstrap/GenHaxe.hx:412: characters 5-32) }, values => [{ expr => ECall({ expr => EConst(CIdent(TParenthesis)), pos => #pos(bootstrap/GenHaxe.hx:412: characters 10-22) },[{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:412: characters 23-27) }]), pos => #pos(bootstrap/GenHaxe.hx:412: characters 10-28) }], pos => #pos(bootstrap/GenHaxe.hx:412: characters 5-32), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:413: characters 19-20) }), pos => #pos(bootstrap/GenHaxe.hx:413: characters 13-18) }]), pos => #pos(bootstrap/GenHaxe.hx:413: characters 5-18) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:413: characters 10-11) }], pos => #pos(bootstrap/GenHaxe.hx:413: characters 5-18), guard => null }],null), pos => #pos(bootstrap/GenHaxe.hx:402: lines 402-414) }), pos => #pos(bootstrap/GenHaxe.hx:401: lines 401-414) }]), pos => #pos(bootstrap/GenHaxe.hx:401: lines 401-415) },join), pos => #pos(bootstrap/GenHaxe.hx:401: lines 401-415) },[{ expr => EConst(CString(, )), pos => #pos(bootstrap/GenHaxe.hx:415: characters 10-14) }]), pos => #pos(bootstrap/GenHaxe.hx:401: lines 401-415) }), pos => #pos(bootstrap/GenHaxe.hx:401: lines 401-415) },{ expr => EConst(CString() )), pos => #pos(bootstrap/GenHaxe.hx:415: characters 18-22) }), pos => #pos(bootstrap/GenHaxe.hx:401: lines 401-415) }), pos => #pos(bootstrap/GenHaxe.hx:401: lines 401-415) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:416: characters 7-11) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:416: characters 15-19) }), pos => #pos(bootstrap/GenHaxe.hx:416: characters 7-19) },{ expr => EBlock([{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:417: characters 12-16) }), pos => #pos(bootstrap/GenHaxe.hx:417: characters 11-17) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:418: characters 22-23) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:418: characters 27-31) },stringify), pos => #pos(bootstrap/GenHaxe.hx:418: characters 27-41) },[]), pos => #pos(bootstrap/GenHaxe.hx:418: characters 27-43) }), pos => #pos(bootstrap/GenHaxe.hx:418: characters 22-43) }]), pos => #pos(bootstrap/GenHaxe.hx:418: characters 5-43) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenHaxe.hx:418: characters 10-16) },[{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenHaxe.hx:418: characters 17-19) }]), pos => #pos(bootstrap/GenHaxe.hx:418: characters 10-20) }], pos => #pos(bootstrap/GenHaxe.hx:418: characters 5-43), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(pushScope)), pos => #pos(bootstrap/GenHaxe.hx:420: characters 6-15) },[]), pos => #pos(bootstrap/GenHaxe.hx:420: characters 6-17) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenHaxe.hx:421: characters 6-13) },[]), pos => #pos(bootstrap/GenHaxe.hx:421: characters 6-15) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:422: characters 6-7) },{ expr => EConst(CString({
$tabs)), pos => #pos(bootstrap/GenHaxe.hx:422: characters 11-21) }), pos => #pos(bootstrap/GenHaxe.hx:422: characters 6-21) },{ expr => EIf({ expr => EBinop(OpEq,{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:423: characters 10-14) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:423: characters 18-22) }), pos => #pos(bootstrap/GenHaxe.hx:423: characters 10-22) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:424: characters 7-8) },{ expr => EConst(CString(return )), pos => #pos(bootstrap/GenHaxe.hx:424: characters 12-21) }), pos => #pos(bootstrap/GenHaxe.hx:424: characters 7-21) },null), pos => #pos(bootstrap/GenHaxe.hx:423: lines 423-424) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:425: characters 6-7) },{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:425: characters 11-15) },stringify), pos => #pos(bootstrap/GenHaxe.hx:425: characters 11-25) },[]), pos => #pos(bootstrap/GenHaxe.hx:425: characters 11-27) },{ expr => EConst(CString(;
	$tabs})), pos => #pos(bootstrap/GenHaxe.hx:425: characters 28-41) }), pos => #pos(bootstrap/GenHaxe.hx:425: characters 11-41) }), pos => #pos(bootstrap/GenHaxe.hx:425: characters 6-41) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenHaxe.hx:426: characters 6-12) },[]), pos => #pos(bootstrap/GenHaxe.hx:426: characters 6-14) },{ expr => ECall({ expr => EConst(CIdent(popScope)), pos => #pos(bootstrap/GenHaxe.hx:427: characters 6-14) },[]), pos => #pos(bootstrap/GenHaxe.hx:427: characters 6-16) }]), pos => #pos(bootstrap/GenHaxe.hx:419: lines 419-427) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:419: characters 10-11) }], pos => #pos(bootstrap/GenHaxe.hx:419: lines 419-427), guard => null }],null), pos => #pos(bootstrap/GenHaxe.hx:417: lines 417-428) }]), pos => #pos(bootstrap/GenHaxe.hx:416: lines 416-429) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:430: characters 8-9) },{ expr => EConst(CString({})), pos => #pos(bootstrap/GenHaxe.hx:430: characters 13-17) }), pos => #pos(bootstrap/GenHaxe.hx:430: characters 8-17) }), pos => #pos(bootstrap/GenHaxe.hx:416: lines 416-430) },{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:432: characters 3-4) }]), pos => #pos(bootstrap/GenHaxe.hx:397: lines 397-432) }, values => [{ expr => ECall({ expr => EConst(CIdent(TFunction)), pos => #pos(bootstrap/GenHaxe.hx:397: characters 7-16) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:397: characters 17-21) },{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:397: characters 23-27) },{ expr => EConst(CIdent(vars)), pos => #pos(bootstrap/GenHaxe.hx:397: characters 29-33) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:397: characters 35-36) }]), pos => #pos(bootstrap/GenHaxe.hx:397: characters 7-37) }], pos => #pos(bootstrap/GenHaxe.hx:397: lines 397-432), guard => null },{ expr => { expr => EBlock([{ expr => EIf({ expr => EBinop(OpEq,{ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenHaxe.hx:434: characters 6-11) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:434: characters 15-19) }), pos => #pos(bootstrap/GenHaxe.hx:434: characters 6-19) },{ expr => EThrow({ expr => EConst(CString(name is null for $node)), pos => #pos(bootstrap/GenHaxe.hx:434: characters 27-51) }), pos => #pos(bootstrap/GenHaxe.hx:434: characters 21-26) },null), pos => #pos(bootstrap/GenHaxe.hx:434: characters 3-26) },{ expr => EVars([{ expr => { expr => EConst(CString()), pos => #pos(bootstrap/GenHaxe.hx:435: characters 12-14) }, name => es, type => null, ??? => #pos(bootstrap/GenHaxe.hx:435: characters 7-9) }]), pos => #pos(bootstrap/GenHaxe.hx:435: characters 3-15) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:436: characters 7-11) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:436: characters 15-19) }), pos => #pos(bootstrap/GenHaxe.hx:436: characters 7-19) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(es)), pos => #pos(bootstrap/GenHaxe.hx:436: characters 21-23) },{ expr => EBinop(OpAdd,{ expr => EConst(CString( = )), pos => #pos(bootstrap/GenHaxe.hx:436: characters 26-31) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:436: characters 34-38) },stringify), pos => #pos(bootstrap/GenHaxe.hx:436: characters 34-48) },[]), pos => #pos(bootstrap/GenHaxe.hx:436: characters 34-50) }), pos => #pos(bootstrap/GenHaxe.hx:436: characters 26-50) }), pos => #pos(bootstrap/GenHaxe.hx:436: characters 21-50) },null), pos => #pos(bootstrap/GenHaxe.hx:436: characters 3-50) },{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenHaxe.hx:437: characters 14-19) },rename), pos => #pos(bootstrap/GenHaxe.hx:437: characters 14-26) },[]), pos => #pos(bootstrap/GenHaxe.hx:437: characters 14-28) }, name => name, type => null, ??? => #pos(bootstrap/GenHaxe.hx:437: characters 7-11) }]), pos => #pos(bootstrap/GenHaxe.hx:437: characters 3-29) },{ expr => EIf({ expr => ECall({ expr => EConst(CIdent(hasInScope)), pos => #pos(bootstrap/GenHaxe.hx:438: characters 6-16) },[{ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenHaxe.hx:438: characters 17-22) }]), pos => #pos(bootstrap/GenHaxe.hx:438: characters 6-23) },{ expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:439: characters 4-8) },{ expr => EBinop(OpAdd,{ expr => EParenthesis({ expr => EUnop(OpIncrement,false,{ expr => EConst(CIdent(id)), pos => #pos(bootstrap/GenHaxe.hx:439: characters 15-17) }), pos => #pos(bootstrap/GenHaxe.hx:439: characters 13-17) }), pos => #pos(bootstrap/GenHaxe.hx:439: characters 12-18) },{ expr => EConst(CIdent(postfix)), pos => #pos(bootstrap/GenHaxe.hx:439: characters 21-28) }), pos => #pos(bootstrap/GenHaxe.hx:439: characters 12-28) }), pos => #pos(bootstrap/GenHaxe.hx:439: characters 4-28) }]), pos => #pos(bootstrap/GenHaxe.hx:438: lines 438-440) },null), pos => #pos(bootstrap/GenHaxe.hx:438: lines 438-440) },{ expr => ECall({ expr => EConst(CIdent(addToScope)), pos => #pos(bootstrap/GenHaxe.hx:441: characters 3-13) },[{ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenHaxe.hx:441: characters 14-19) }]), pos => #pos(bootstrap/GenHaxe.hx:441: characters 3-20) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:442: characters 3-14) },set), pos => #pos(bootstrap/GenHaxe.hx:442: characters 3-18) },[{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenHaxe.hx:442: characters 19-23) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:442: characters 25-29) }]), pos => #pos(bootstrap/GenHaxe.hx:442: characters 3-30) },{ expr => EIf({ expr => EBinop(OpEq,{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:443: characters 6-10) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:443: characters 14-18) }), pos => #pos(bootstrap/GenHaxe.hx:443: characters 6-18) },{ expr => EThrow({ expr => EConst(CString(name is null for $node)), pos => #pos(bootstrap/GenHaxe.hx:443: characters 26-50) }), pos => #pos(bootstrap/GenHaxe.hx:443: characters 20-25) },null), pos => #pos(bootstrap/GenHaxe.hx:443: characters 3-25) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:444: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EParenthesis({ expr => ETernary({ expr => EConst(CIdent(const)), pos => #pos(bootstrap/GenHaxe.hx:444: characters 8-13) },{ expr => EConst(CString(var )), pos => #pos(bootstrap/GenHaxe.hx:444: characters 14-20) },{ expr => EConst(CString(var )), pos => #pos(bootstrap/GenHaxe.hx:444: characters 21-27) }), pos => #pos(bootstrap/GenHaxe.hx:444: characters 8-27) }), pos => #pos(bootstrap/GenHaxe.hx:444: characters 7-28) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:444: characters 31-35) }), pos => #pos(bootstrap/GenHaxe.hx:444: characters 7-35) },{ expr => EConst(CIdent(es)), pos => #pos(bootstrap/GenHaxe.hx:444: characters 38-40) }), pos => #pos(bootstrap/GenHaxe.hx:444: characters 7-40) }), pos => #pos(bootstrap/GenHaxe.hx:444: characters 3-40) },{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:445: characters 3-4) }]), pos => #pos(bootstrap/GenHaxe.hx:433: lines 433-445) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenHaxe.hx:433: characters 7-11) },[{ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenHaxe.hx:433: characters 12-17) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:433: characters 19-20) },{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:433: characters 22-26) },{ expr => EConst(CIdent(const)), pos => #pos(bootstrap/GenHaxe.hx:433: characters 28-33) }]), pos => #pos(bootstrap/GenHaxe.hx:433: characters 7-34) }], pos => #pos(bootstrap/GenHaxe.hx:433: lines 433-445), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:447: characters 3-4) },{ expr => EConst(CString(try {
$tabs	)), pos => #pos(bootstrap/GenHaxe.hx:447: characters 7-23) }), pos => #pos(bootstrap/GenHaxe.hx:447: characters 3-23) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenHaxe.hx:448: characters 3-10) },[]), pos => #pos(bootstrap/GenHaxe.hx:448: characters 3-12) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:449: characters 10-14) }), pos => #pos(bootstrap/GenHaxe.hx:449: characters 9-15) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:450: characters 21-22) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:450: characters 31-32) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenHaxe.hx:450: characters 36-38) }), pos => #pos(bootstrap/GenHaxe.hx:450: characters 31-38) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:450: characters 40-41) },stringifyBlockExpression), pos => #pos(bootstrap/GenHaxe.hx:450: characters 40-66) },[]), pos => #pos(bootstrap/GenHaxe.hx:450: characters 40-68) }), pos => #pos(bootstrap/GenHaxe.hx:450: characters 27-68) }]), pos => #pos(bootstrap/GenHaxe.hx:450: characters 26-69) },join), pos => #pos(bootstrap/GenHaxe.hx:450: characters 26-74) },[{ expr => EBinop(OpAdd,{ expr => EConst(CString(;
)), pos => #pos(bootstrap/GenHaxe.hx:450: characters 75-80) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenHaxe.hx:450: characters 81-85) }), pos => #pos(bootstrap/GenHaxe.hx:450: characters 75-85) }]), pos => #pos(bootstrap/GenHaxe.hx:450: characters 26-86) }), pos => #pos(bootstrap/GenHaxe.hx:450: characters 21-86) }]), pos => #pos(bootstrap/GenHaxe.hx:450: characters 4-86) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenHaxe.hx:450: characters 9-15) },[{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenHaxe.hx:450: characters 16-18) }]), pos => #pos(bootstrap/GenHaxe.hx:450: characters 9-19) }], pos => #pos(bootstrap/GenHaxe.hx:450: characters 4-86), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:451: characters 12-13) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:451: characters 17-21) },stringify), pos => #pos(bootstrap/GenHaxe.hx:451: characters 17-31) },[]), pos => #pos(bootstrap/GenHaxe.hx:451: characters 17-33) }), pos => #pos(bootstrap/GenHaxe.hx:451: characters 12-33) }]), pos => #pos(bootstrap/GenHaxe.hx:451: characters 4-33) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:451: characters 9-10) }], pos => #pos(bootstrap/GenHaxe.hx:451: characters 4-33), guard => null }],null), pos => #pos(bootstrap/GenHaxe.hx:449: lines 449-452) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenHaxe.hx:454: characters 3-9) },[]), pos => #pos(bootstrap/GenHaxe.hx:454: characters 3-11) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:455: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(
)), pos => #pos(bootstrap/GenHaxe.hx:455: characters 8-12) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenHaxe.hx:455: characters 15-19) }), pos => #pos(bootstrap/GenHaxe.hx:455: characters 8-19) },{ expr => EConst(CString(} catch()), pos => #pos(bootstrap/GenHaxe.hx:455: characters 22-32) }), pos => #pos(bootstrap/GenHaxe.hx:455: characters 8-32) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:455: characters 33-34) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenHaxe.hx:455: characters 35-36) }), pos => #pos(bootstrap/GenHaxe.hx:455: characters 33-37) },varName), pos => #pos(bootstrap/GenHaxe.hx:455: characters 33-45) },[]), pos => #pos(bootstrap/GenHaxe.hx:455: characters 33-47) }), pos => #pos(bootstrap/GenHaxe.hx:455: characters 8-47) },{ expr => EConst(CString(: Any) {
$tabs	)), pos => #pos(bootstrap/GenHaxe.hx:455: characters 48-67) }), pos => #pos(bootstrap/GenHaxe.hx:455: characters 8-67) }), pos => #pos(bootstrap/GenHaxe.hx:455: characters 3-67) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenHaxe.hx:456: characters 3-10) },[]), pos => #pos(bootstrap/GenHaxe.hx:456: characters 3-12) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:457: characters 3-14) },set), pos => #pos(bootstrap/GenHaxe.hx:457: characters 3-18) },[{ expr => EArray({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:457: characters 19-20) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenHaxe.hx:457: characters 21-22) }), pos => #pos(bootstrap/GenHaxe.hx:457: characters 19-23) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:457: characters 25-26) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenHaxe.hx:457: characters 27-28) }), pos => #pos(bootstrap/GenHaxe.hx:457: characters 25-29) },varName), pos => #pos(bootstrap/GenHaxe.hx:457: characters 25-37) },[]), pos => #pos(bootstrap/GenHaxe.hx:457: characters 25-39) }]), pos => #pos(bootstrap/GenHaxe.hx:457: characters 3-40) },{ expr => ESwitch({ expr => EParenthesis({ expr => EArray({ expr => EConst(CIdent(catches)), pos => #pos(bootstrap/GenHaxe.hx:458: characters 10-17) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenHaxe.hx:458: characters 18-19) }), pos => #pos(bootstrap/GenHaxe.hx:458: characters 10-20) }), pos => #pos(bootstrap/GenHaxe.hx:458: characters 9-21) },[{ expr => { expr => EBlock([{ expr => EBlock([]), pos => #pos(bootstrap/GenHaxe.hx:459: characters 21-23) }]), pos => #pos(bootstrap/GenHaxe.hx:459: characters 4-23) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenHaxe.hx:459: characters 9-15) },[{ expr => EArrayDecl([]), pos => #pos(bootstrap/GenHaxe.hx:459: characters 16-18) }]), pos => #pos(bootstrap/GenHaxe.hx:459: characters 9-19) }], pos => #pos(bootstrap/GenHaxe.hx:459: characters 4-23), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:460: characters 21-22) },{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:460: characters 31-32) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenHaxe.hx:460: characters 36-38) }), pos => #pos(bootstrap/GenHaxe.hx:460: characters 31-38) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:460: characters 40-41) },stringifyBlockExpression), pos => #pos(bootstrap/GenHaxe.hx:460: characters 40-66) },[]), pos => #pos(bootstrap/GenHaxe.hx:460: characters 40-68) }), pos => #pos(bootstrap/GenHaxe.hx:460: characters 27-68) }]), pos => #pos(bootstrap/GenHaxe.hx:460: characters 26-69) },join), pos => #pos(bootstrap/GenHaxe.hx:460: characters 26-74) },[{ expr => EBinop(OpAdd,{ expr => EConst(CString(;
)), pos => #pos(bootstrap/GenHaxe.hx:460: characters 75-80) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenHaxe.hx:460: characters 81-85) }), pos => #pos(bootstrap/GenHaxe.hx:460: characters 75-85) }]), pos => #pos(bootstrap/GenHaxe.hx:460: characters 26-86) },{ expr => EConst(CString(;)), pos => #pos(bootstrap/GenHaxe.hx:460: characters 89-92) }), pos => #pos(bootstrap/GenHaxe.hx:460: characters 26-92) }), pos => #pos(bootstrap/GenHaxe.hx:460: characters 21-92) }]), pos => #pos(bootstrap/GenHaxe.hx:460: characters 4-92) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenHaxe.hx:460: characters 9-15) },[{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenHaxe.hx:460: characters 16-18) }]), pos => #pos(bootstrap/GenHaxe.hx:460: characters 9-19) }], pos => #pos(bootstrap/GenHaxe.hx:460: characters 4-92), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:461: characters 12-13) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(catches)), pos => #pos(bootstrap/GenHaxe.hx:461: characters 17-24) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenHaxe.hx:461: characters 25-26) }), pos => #pos(bootstrap/GenHaxe.hx:461: characters 17-27) },stringify), pos => #pos(bootstrap/GenHaxe.hx:461: characters 17-37) },[]), pos => #pos(bootstrap/GenHaxe.hx:461: characters 17-39) }), pos => #pos(bootstrap/GenHaxe.hx:461: characters 12-39) }]), pos => #pos(bootstrap/GenHaxe.hx:461: characters 4-39) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:461: characters 9-10) }], pos => #pos(bootstrap/GenHaxe.hx:461: characters 4-39), guard => null }],null), pos => #pos(bootstrap/GenHaxe.hx:458: lines 458-462) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenHaxe.hx:463: characters 3-9) },[]), pos => #pos(bootstrap/GenHaxe.hx:463: characters 3-11) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:464: characters 3-4) },{ expr => EConst(CString(
)), pos => #pos(bootstrap/GenHaxe.hx:464: characters 7-11) }), pos => #pos(bootstrap/GenHaxe.hx:464: characters 3-11) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenHaxe.hx:464: characters 14-18) }), pos => #pos(bootstrap/GenHaxe.hx:464: characters 3-18) },{ expr => EConst(CString(})), pos => #pos(bootstrap/GenHaxe.hx:464: characters 21-24) }), pos => #pos(bootstrap/GenHaxe.hx:464: characters 3-24) }]), pos => #pos(bootstrap/GenHaxe.hx:446: lines 446-464) }, values => [{ expr => ECall({ expr => EConst(CIdent(TTry)), pos => #pos(bootstrap/GenHaxe.hx:446: characters 7-11) },[{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:446: characters 12-16) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:446: characters 18-19) },{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:446: characters 21-22) },{ expr => EConst(CIdent(catches)), pos => #pos(bootstrap/GenHaxe.hx:446: characters 24-31) }]), pos => #pos(bootstrap/GenHaxe.hx:446: characters 7-32) }], pos => #pos(bootstrap/GenHaxe.hx:446: lines 446-464), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(new )), pos => #pos(bootstrap/GenHaxe.hx:466: characters 3-9) },{ expr => ECall({ expr => EConst(CIdent(extractTypeName)), pos => #pos(bootstrap/GenHaxe.hx:466: characters 12-27) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:466: characters 28-29) }]), pos => #pos(bootstrap/GenHaxe.hx:466: characters 12-30) }), pos => #pos(bootstrap/GenHaxe.hx:466: characters 3-30) },{ expr => EConst(CString(()), pos => #pos(bootstrap/GenHaxe.hx:466: characters 33-36) }), pos => #pos(bootstrap/GenHaxe.hx:466: characters 3-36) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:466: characters 45-46) },{ expr => EConst(CIdent(args)), pos => #pos(bootstrap/GenHaxe.hx:466: characters 50-54) }), pos => #pos(bootstrap/GenHaxe.hx:466: characters 45-54) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:466: characters 56-57) },stringify), pos => #pos(bootstrap/GenHaxe.hx:466: characters 56-67) },[]), pos => #pos(bootstrap/GenHaxe.hx:466: characters 56-69) }), pos => #pos(bootstrap/GenHaxe.hx:466: characters 40-69) }]), pos => #pos(bootstrap/GenHaxe.hx:466: characters 39-70) },join), pos => #pos(bootstrap/GenHaxe.hx:466: characters 39-75) },[{ expr => EConst(CString(,)), pos => #pos(bootstrap/GenHaxe.hx:466: characters 76-79) }]), pos => #pos(bootstrap/GenHaxe.hx:466: characters 39-80) }), pos => #pos(bootstrap/GenHaxe.hx:466: characters 3-80) },{ expr => EConst(CString())), pos => #pos(bootstrap/GenHaxe.hx:466: characters 83-86) }), pos => #pos(bootstrap/GenHaxe.hx:466: characters 3-86) }]), pos => #pos(bootstrap/GenHaxe.hx:465: lines 465-466) }, values => [{ expr => ECall({ expr => EConst(CIdent(TNew)), pos => #pos(bootstrap/GenHaxe.hx:465: characters 7-11) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:465: characters 12-13) },{ expr => EConst(CIdent(args)), pos => #pos(bootstrap/GenHaxe.hx:465: characters 15-19) },{ expr => EConst(CIdent(names)), pos => #pos(bootstrap/GenHaxe.hx:465: characters 21-26) },{ expr => EConst(CIdent(values)), pos => #pos(bootstrap/GenHaxe.hx:465: characters 28-34) }]), pos => #pos(bootstrap/GenHaxe.hx:465: characters 7-35) }], pos => #pos(bootstrap/GenHaxe.hx:465: lines 465-466), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:468: characters 3-4) },{ expr => EConst(CString(switch ()), pos => #pos(bootstrap/GenHaxe.hx:468: characters 7-17) }), pos => #pos(bootstrap/GenHaxe.hx:468: characters 3-17) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:469: characters 3-4) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(exprs)), pos => #pos(bootstrap/GenHaxe.hx:469: characters 8-13) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenHaxe.hx:469: characters 14-15) }), pos => #pos(bootstrap/GenHaxe.hx:469: characters 8-16) },stringify), pos => #pos(bootstrap/GenHaxe.hx:469: characters 8-26) },[]), pos => #pos(bootstrap/GenHaxe.hx:469: characters 8-28) }), pos => #pos(bootstrap/GenHaxe.hx:469: characters 3-28) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:470: characters 3-4) },{ expr => EConst(CString() {
)), pos => #pos(bootstrap/GenHaxe.hx:470: characters 8-15) }), pos => #pos(bootstrap/GenHaxe.hx:470: characters 3-15) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenHaxe.hx:471: characters 3-10) },[]), pos => #pos(bootstrap/GenHaxe.hx:471: characters 3-12) },{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenHaxe.hx:472: characters 8-9) },{ expr => EBinop(OpInterval,{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenHaxe.hx:472: characters 13-17) },{ expr => EField({ expr => EConst(CIdent(cases)), pos => #pos(bootstrap/GenHaxe.hx:472: characters 17-22) },length), pos => #pos(bootstrap/GenHaxe.hx:472: characters 17-29) }), pos => #pos(bootstrap/GenHaxe.hx:472: characters 13-29) }), pos => #pos(bootstrap/GenHaxe.hx:472: characters 8-29) },{ expr => EBlock([{ expr => EVars([{ expr => { expr => EArray({ expr => EConst(CIdent(cases)), pos => #pos(bootstrap/GenHaxe.hx:473: characters 12-17) },{ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenHaxe.hx:473: characters 18-19) }), pos => #pos(bootstrap/GenHaxe.hx:473: characters 12-20) }, name => c, type => null, ??? => #pos(bootstrap/GenHaxe.hx:473: characters 8-9) }]), pos => #pos(bootstrap/GenHaxe.hx:473: characters 4-21) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:474: characters 4-5) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenHaxe.hx:474: characters 9-13) }), pos => #pos(bootstrap/GenHaxe.hx:474: characters 4-13) },{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(c)), pos => #pos(bootstrap/GenHaxe.hx:475: characters 8-9) },{ expr => EArray({ expr => EConst(CIdent(conds)), pos => #pos(bootstrap/GenHaxe.hx:475: characters 13-18) },{ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenHaxe.hx:475: characters 19-20) }), pos => #pos(bootstrap/GenHaxe.hx:475: characters 13-21) }), pos => #pos(bootstrap/GenHaxe.hx:475: characters 8-21) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:476: characters 5-6) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(case )), pos => #pos(bootstrap/GenHaxe.hx:476: characters 10-17) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(c)), pos => #pos(bootstrap/GenHaxe.hx:476: characters 20-21) },stringify), pos => #pos(bootstrap/GenHaxe.hx:476: characters 20-31) },[]), pos => #pos(bootstrap/GenHaxe.hx:476: characters 20-33) }), pos => #pos(bootstrap/GenHaxe.hx:476: characters 10-33) },{ expr => EConst(CString(:)), pos => #pos(bootstrap/GenHaxe.hx:476: characters 36-39) }), pos => #pos(bootstrap/GenHaxe.hx:476: characters 10-39) }), pos => #pos(bootstrap/GenHaxe.hx:476: characters 5-39) }), pos => #pos(bootstrap/GenHaxe.hx:475: lines 475-476) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:477: characters 4-5) },{ expr => EConst(CString( {
)), pos => #pos(bootstrap/GenHaxe.hx:477: characters 9-15) }), pos => #pos(bootstrap/GenHaxe.hx:477: characters 4-15) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:478: characters 4-5) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenHaxe.hx:478: characters 9-13) },{ expr => EConst(CString(	)), pos => #pos(bootstrap/GenHaxe.hx:478: characters 16-20) }), pos => #pos(bootstrap/GenHaxe.hx:478: characters 9-20) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(c)), pos => #pos(bootstrap/GenHaxe.hx:478: characters 23-24) },stringify), pos => #pos(bootstrap/GenHaxe.hx:478: characters 23-34) },[]), pos => #pos(bootstrap/GenHaxe.hx:478: characters 23-36) }), pos => #pos(bootstrap/GenHaxe.hx:478: characters 9-36) },{ expr => EConst(CString(;
)), pos => #pos(bootstrap/GenHaxe.hx:478: characters 39-44) }), pos => #pos(bootstrap/GenHaxe.hx:478: characters 9-44) }), pos => #pos(bootstrap/GenHaxe.hx:478: characters 4-44) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:479: characters 4-5) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenHaxe.hx:479: characters 9-13) },{ expr => EConst(CString(	)), pos => #pos(bootstrap/GenHaxe.hx:479: characters 16-20) }), pos => #pos(bootstrap/GenHaxe.hx:479: characters 9-20) },{ expr => EConst(CString(
)), pos => #pos(bootstrap/GenHaxe.hx:479: characters 23-27) }), pos => #pos(bootstrap/GenHaxe.hx:479: characters 9-27) },{ expr => EConst(CString($tabs})), pos => #pos(bootstrap/GenHaxe.hx:479: characters 30-38) }), pos => #pos(bootstrap/GenHaxe.hx:479: characters 9-38) },{ expr => EConst(CString(
)), pos => #pos(bootstrap/GenHaxe.hx:479: characters 41-45) }), pos => #pos(bootstrap/GenHaxe.hx:479: characters 9-45) }), pos => #pos(bootstrap/GenHaxe.hx:479: characters 4-45) }]), pos => #pos(bootstrap/GenHaxe.hx:472: lines 472-480) }), pos => #pos(bootstrap/GenHaxe.hx:472: lines 472-480) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenHaxe.hx:481: characters 3-9) },[]), pos => #pos(bootstrap/GenHaxe.hx:481: characters 3-11) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:482: characters 3-4) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenHaxe.hx:482: characters 7-11) }), pos => #pos(bootstrap/GenHaxe.hx:482: characters 3-11) },{ expr => EConst(CString(})), pos => #pos(bootstrap/GenHaxe.hx:482: characters 14-17) }), pos => #pos(bootstrap/GenHaxe.hx:482: characters 3-17) }]), pos => #pos(bootstrap/GenHaxe.hx:467: lines 467-482) }, values => [{ expr => ECall({ expr => EConst(CIdent(TSwitch)), pos => #pos(bootstrap/GenHaxe.hx:467: characters 7-14) },[{ expr => EConst(CIdent(exprs)), pos => #pos(bootstrap/GenHaxe.hx:467: characters 15-20) },{ expr => EConst(CIdent(conds)), pos => #pos(bootstrap/GenHaxe.hx:467: characters 22-27) },{ expr => EConst(CIdent(cases)), pos => #pos(bootstrap/GenHaxe.hx:467: characters 29-34) }]), pos => #pos(bootstrap/GenHaxe.hx:467: characters 7-35) }], pos => #pos(bootstrap/GenHaxe.hx:467: lines 467-482), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EConst(CIdent(extractTypeName)), pos => #pos(bootstrap/GenHaxe.hx:485: characters 15-30) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:485: characters 31-32) }]), pos => #pos(bootstrap/GenHaxe.hx:485: characters 15-33) }, name => cname, type => null, ??? => #pos(bootstrap/GenHaxe.hx:485: characters 7-12) }]), pos => #pos(bootstrap/GenHaxe.hx:485: characters 3-34) },{ expr => EVars([{ expr => { expr => ECall({ expr => EConst(CIdent(getAtt)), pos => #pos(bootstrap/GenHaxe.hx:486: characters 17-23) },[{ expr => ECall({ expr => EField({ expr => EField({ expr => EConst(CIdent(Project)), pos => #pos(bootstrap/GenHaxe.hx:486: characters 24-31) },mapAttributes), pos => #pos(bootstrap/GenHaxe.hx:486: characters 24-45) },get), pos => #pos(bootstrap/GenHaxe.hx:486: characters 24-49) },[{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenHaxe.hx:486: characters 50-54) }]), pos => #pos(bootstrap/GenHaxe.hx:486: characters 24-55) },{ expr => EConst(CString(require)), pos => #pos(bootstrap/GenHaxe.hx:486: characters 57-66) }]), pos => #pos(bootstrap/GenHaxe.hx:486: characters 17-67) }, name => require, type => null, ??? => #pos(bootstrap/GenHaxe.hx:486: characters 7-14) }]), pos => #pos(bootstrap/GenHaxe.hx:486: characters 3-68) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(require)), pos => #pos(bootstrap/GenHaxe.hx:487: characters 6-13) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:487: characters 17-21) }), pos => #pos(bootstrap/GenHaxe.hx:487: characters 6-21) },{ expr => ESwitch({ expr => EArrayDecl([{ expr => EArray({ expr => EField({ expr => EConst(CIdent(require)), pos => #pos(bootstrap/GenHaxe.hx:487: characters 31-38) },values), pos => #pos(bootstrap/GenHaxe.hx:487: characters 31-45) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenHaxe.hx:487: characters 46-47) }), pos => #pos(bootstrap/GenHaxe.hx:487: characters 31-48) },{ expr => EArray({ expr => EField({ expr => EConst(CIdent(require)), pos => #pos(bootstrap/GenHaxe.hx:487: characters 50-57) },values), pos => #pos(bootstrap/GenHaxe.hx:487: characters 50-64) },{ expr => EConst(CInt(1)), pos => #pos(bootstrap/GenHaxe.hx:487: characters 65-66) }), pos => #pos(bootstrap/GenHaxe.hx:487: characters 50-67) }]), pos => #pos(bootstrap/GenHaxe.hx:487: characters 30-68) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:489: characters 4-5) },{ expr => EConst(CString(@:jsRequire("$s"))), pos => #pos(bootstrap/GenHaxe.hx:489: characters 9-28) }), pos => #pos(bootstrap/GenHaxe.hx:489: characters 4-28) }]), pos => #pos(bootstrap/GenHaxe.hx:488: lines 488-489) }, values => [{ expr => EArrayDecl([{ expr => ECall({ expr => EConst(CIdent(TString)), pos => #pos(bootstrap/GenHaxe.hx:488: characters 10-17) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:488: characters 18-19) }]), pos => #pos(bootstrap/GenHaxe.hx:488: characters 10-20) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:488: characters 22-26) }]), pos => #pos(bootstrap/GenHaxe.hx:488: characters 9-27) }], pos => #pos(bootstrap/GenHaxe.hx:488: lines 488-489), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:492: characters 4-5) },{ expr => EConst(CString(@:jsRequire("$s", "$f"))), pos => #pos(bootstrap/GenHaxe.hx:492: characters 9-34) }), pos => #pos(bootstrap/GenHaxe.hx:492: characters 4-34) }]), pos => #pos(bootstrap/GenHaxe.hx:491: lines 491-492) }, values => [{ expr => EArrayDecl([{ expr => ECall({ expr => EConst(CIdent(TString)), pos => #pos(bootstrap/GenHaxe.hx:491: characters 10-17) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenHaxe.hx:491: characters 18-19) }]), pos => #pos(bootstrap/GenHaxe.hx:491: characters 10-20) },{ expr => ECall({ expr => EConst(CIdent(TString)), pos => #pos(bootstrap/GenHaxe.hx:491: characters 22-29) },[{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenHaxe.hx:491: characters 30-31) }]), pos => #pos(bootstrap/GenHaxe.hx:491: characters 22-32) }]), pos => #pos(bootstrap/GenHaxe.hx:491: characters 9-33) }], pos => #pos(bootstrap/GenHaxe.hx:491: lines 491-492), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CString(@require takes string as argument)), pos => #pos(bootstrap/GenHaxe.hx:494: characters 18-53) }), pos => #pos(bootstrap/GenHaxe.hx:494: characters 12-17) }]), pos => #pos(bootstrap/GenHaxe.hx:494: characters 4-17) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:494: characters 9-10) }], pos => #pos(bootstrap/GenHaxe.hx:494: characters 4-17), guard => null }],null), pos => #pos(bootstrap/GenHaxe.hx:487: lines 487-495) },null), pos => #pos(bootstrap/GenHaxe.hx:487: lines 487-495) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:496: characters 3-4) },{ expr => EConst(CString(/* extern class $cname */)), pos => #pos(bootstrap/GenHaxe.hx:496: characters 8-35) }), pos => #pos(bootstrap/GenHaxe.hx:496: characters 3-35) }]), pos => #pos(bootstrap/GenHaxe.hx:483: lines 483-496) }, values => [{ expr => ECall({ expr => EConst(CIdent(TClass)), pos => #pos(bootstrap/GenHaxe.hx:483: characters 7-13) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:483: characters 14-15) },{ expr => EConst(CIdent(ext)), pos => #pos(bootstrap/GenHaxe.hx:483: characters 17-20) },{ expr => EConst(CIdent(impl)), pos => #pos(bootstrap/GenHaxe.hx:483: characters 22-26) },{ expr => EConst(CIdent(fields)), pos => #pos(bootstrap/GenHaxe.hx:483: characters 28-34) },{ expr => EConst(CIdent(true)), pos => #pos(bootstrap/GenHaxe.hx:483: characters 36-40) }]), pos => #pos(bootstrap/GenHaxe.hx:483: characters 7-41) }], pos => #pos(bootstrap/GenHaxe.hx:483: lines 483-496), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EConst(CIdent(extractTypeName)), pos => #pos(bootstrap/GenHaxe.hx:498: characters 15-30) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:498: characters 31-32) }]), pos => #pos(bootstrap/GenHaxe.hx:498: characters 15-33) }, name => cname, type => null, ??? => #pos(bootstrap/GenHaxe.hx:498: characters 7-12) }]), pos => #pos(bootstrap/GenHaxe.hx:498: characters 3-34) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:499: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EParenthesis({ expr => ETernary({ expr => EConst(CIdent(external)), pos => #pos(bootstrap/GenHaxe.hx:499: characters 8-16) },{ expr => EConst(CString(/* extern class )), pos => #pos(bootstrap/GenHaxe.hx:499: characters 17-35) },{ expr => EConst(CString(class )), pos => #pos(bootstrap/GenHaxe.hx:499: characters 38-46) }), pos => #pos(bootstrap/GenHaxe.hx:499: characters 8-46) }), pos => #pos(bootstrap/GenHaxe.hx:499: characters 7-47) },{ expr => EConst(CIdent(cname)), pos => #pos(bootstrap/GenHaxe.hx:499: characters 50-55) }), pos => #pos(bootstrap/GenHaxe.hx:499: characters 7-55) }), pos => #pos(bootstrap/GenHaxe.hx:499: characters 3-55) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(ext)), pos => #pos(bootstrap/GenHaxe.hx:500: characters 7-10) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:500: characters 14-18) }), pos => #pos(bootstrap/GenHaxe.hx:500: characters 7-18) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:500: characters 20-21) },{ expr => EBinop(OpAdd,{ expr => EConst(CString( extends )), pos => #pos(bootstrap/GenHaxe.hx:500: characters 25-36) },{ expr => ECall({ expr => EConst(CIdent(extractTypeName)), pos => #pos(bootstrap/GenHaxe.hx:500: characters 39-54) },[{ expr => EConst(CIdent(ext)), pos => #pos(bootstrap/GenHaxe.hx:500: characters 55-58) }]), pos => #pos(bootstrap/GenHaxe.hx:500: characters 39-59) }), pos => #pos(bootstrap/GenHaxe.hx:500: characters 25-59) }), pos => #pos(bootstrap/GenHaxe.hx:500: characters 20-59) },null), pos => #pos(bootstrap/GenHaxe.hx:500: characters 3-59) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:501: characters 3-4) },{ expr => EConst(CString( {
)), pos => #pos(bootstrap/GenHaxe.hx:501: characters 8-14) }), pos => #pos(bootstrap/GenHaxe.hx:501: characters 3-14) },{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenHaxe.hx:503: characters 8-9) },{ expr => EConst(CIdent(fields)), pos => #pos(bootstrap/GenHaxe.hx:503: characters 13-19) }), pos => #pos(bootstrap/GenHaxe.hx:503: characters 8-19) },{ expr => EBlock([{ expr => EVars([{ expr => { expr => EConst(CString()), pos => #pos(bootstrap/GenHaxe.hx:504: characters 15-17) }, name => code, type => null, ??? => #pos(bootstrap/GenHaxe.hx:504: characters 8-12) }]), pos => #pos(bootstrap/GenHaxe.hx:504: characters 4-18) },{ expr => EVars([{ expr => { expr => EConst(CIdent(false)), pos => #pos(bootstrap/GenHaxe.hx:505: characters 19-24) }, name => isStatic, type => null, ??? => #pos(bootstrap/GenHaxe.hx:505: characters 8-16) }]), pos => #pos(bootstrap/GenHaxe.hx:505: characters 4-25) },{ expr => EFunction(unmeta,{ args => [{ meta => [], name => f, type => null, ??? => #pos(bootstrap/GenHaxe.hx:507: characters 20-21), opt => false, value => null }], expr => { expr => EBlock([{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenHaxe.hx:508: characters 12-13) }), pos => #pos(bootstrap/GenHaxe.hx:508: characters 11-14) },[{ expr => { expr => EBlock([{ expr => EReturn({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenHaxe.hx:509: characters 21-22) }), pos => #pos(bootstrap/GenHaxe.hx:509: characters 14-22) }]), pos => #pos(bootstrap/GenHaxe.hx:509: characters 6-22) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:509: characters 11-12) }], pos => #pos(bootstrap/GenHaxe.hx:509: characters 6-22), guard => null }],null), pos => #pos(bootstrap/GenHaxe.hx:508: lines 508-510) }]), pos => #pos(bootstrap/GenHaxe.hx:507: lines 507-511) }, params => [], ret => null }), pos => #pos(bootstrap/GenHaxe.hx:507: lines 507-511) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenHaxe.hx:513: characters 4-5) },{ expr => ECall({ expr => EConst(CIdent(unmeta)), pos => #pos(bootstrap/GenHaxe.hx:513: characters 8-14) },[{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenHaxe.hx:513: characters 15-16) }]), pos => #pos(bootstrap/GenHaxe.hx:513: characters 8-17) }), pos => #pos(bootstrap/GenHaxe.hx:513: characters 4-17) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenHaxe.hx:515: characters 11-12) }), pos => #pos(bootstrap/GenHaxe.hx:515: characters 10-13) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenHaxe.hx:516: characters 26-27) },{ expr => EConst(CIdent(field)), pos => #pos(bootstrap/GenHaxe.hx:516: characters 30-35) }), pos => #pos(bootstrap/GenHaxe.hx:516: characters 26-35) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(isStatic)), pos => #pos(bootstrap/GenHaxe.hx:516: characters 37-45) },{ expr => EConst(CIdent(true)), pos => #pos(bootstrap/GenHaxe.hx:516: characters 48-52) }), pos => #pos(bootstrap/GenHaxe.hx:516: characters 37-52) }]), pos => #pos(bootstrap/GenHaxe.hx:516: characters 5-52) }, values => [{ expr => ECall({ expr => EConst(CIdent(TStatic)), pos => #pos(bootstrap/GenHaxe.hx:516: characters 10-17) },[{ expr => EConst(CIdent(field)), pos => #pos(bootstrap/GenHaxe.hx:516: characters 18-23) }]), pos => #pos(bootstrap/GenHaxe.hx:516: characters 10-24) }], pos => #pos(bootstrap/GenHaxe.hx:516: characters 5-52), guard => null },{ expr => { expr => EBlock([{ expr => EBlock([]), pos => #pos(bootstrap/GenHaxe.hx:517: characters 13-15) }]), pos => #pos(bootstrap/GenHaxe.hx:517: characters 5-15) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:517: characters 10-11) }], pos => #pos(bootstrap/GenHaxe.hx:517: characters 5-15), guard => null }],null), pos => #pos(bootstrap/GenHaxe.hx:515: lines 515-518) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenHaxe.hx:521: characters 4-5) },{ expr => ECall({ expr => EConst(CIdent(unmeta)), pos => #pos(bootstrap/GenHaxe.hx:521: characters 8-14) },[{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenHaxe.hx:521: characters 15-16) }]), pos => #pos(bootstrap/GenHaxe.hx:521: characters 8-17) }), pos => #pos(bootstrap/GenHaxe.hx:521: characters 4-17) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenHaxe.hx:522: characters 4-11) },[]), pos => #pos(bootstrap/GenHaxe.hx:522: characters 4-13) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenHaxe.hx:523: characters 11-12) }), pos => #pos(bootstrap/GenHaxe.hx:523: characters 10-13) },[{ expr => { expr => EBlock([{ expr => EBlock([{ expr => EIf({ expr => EBinop(OpEq,{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:526: characters 10-14) },{ expr => EConst(CString(new)), pos => #pos(bootstrap/GenHaxe.hx:526: characters 18-23) }), pos => #pos(bootstrap/GenHaxe.hx:526: characters 10-23) },{ expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:527: characters 8-12) },{ expr => EConst(CString(public function new)), pos => #pos(bootstrap/GenHaxe.hx:527: characters 16-37) }), pos => #pos(bootstrap/GenHaxe.hx:527: characters 8-37) }]), pos => #pos(bootstrap/GenHaxe.hx:526: lines 526-528) },{ expr => EIf({ expr => EConst(CIdent(isStatic)), pos => #pos(bootstrap/GenHaxe.hx:528: characters 17-25) },{ expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:529: characters 8-12) },{ expr => EBinop(OpAdd,{ expr => EConst(CString(public static function )), pos => #pos(bootstrap/GenHaxe.hx:529: characters 16-41) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:529: characters 42-46) },rename), pos => #pos(bootstrap/GenHaxe.hx:529: characters 42-53) },[]), pos => #pos(bootstrap/GenHaxe.hx:529: characters 42-55) }), pos => #pos(bootstrap/GenHaxe.hx:529: characters 16-55) }), pos => #pos(bootstrap/GenHaxe.hx:529: characters 8-55) }]), pos => #pos(bootstrap/GenHaxe.hx:528: lines 528-530) },{ expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:531: characters 8-12) },{ expr => EBinop(OpAdd,{ expr => EConst(CString(public function )), pos => #pos(bootstrap/GenHaxe.hx:531: characters 16-34) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:531: characters 35-39) },rename), pos => #pos(bootstrap/GenHaxe.hx:531: characters 35-46) },[]), pos => #pos(bootstrap/GenHaxe.hx:531: characters 35-48) }), pos => #pos(bootstrap/GenHaxe.hx:531: characters 16-48) }), pos => #pos(bootstrap/GenHaxe.hx:531: characters 8-48) }]), pos => #pos(bootstrap/GenHaxe.hx:530: lines 530-532) }), pos => #pos(bootstrap/GenHaxe.hx:528: lines 528-532) }), pos => #pos(bootstrap/GenHaxe.hx:526: lines 526-532) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:537: characters 7-11) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(()), pos => #pos(bootstrap/GenHaxe.hx:537: characters 15-18) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:537: characters 26-27) },{ expr => EConst(CIdent(vars)), pos => #pos(bootstrap/GenHaxe.hx:537: characters 31-35) }), pos => #pos(bootstrap/GenHaxe.hx:537: characters 26-35) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:538: characters 16-17) }), pos => #pos(bootstrap/GenHaxe.hx:538: characters 15-18) },[{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:540: characters 20-24) },rename), pos => #pos(bootstrap/GenHaxe.hx:540: characters 20-31) },[]), pos => #pos(bootstrap/GenHaxe.hx:540: characters 20-33) }, name => name, type => null, ??? => #pos(bootstrap/GenHaxe.hx:540: characters 13-17) }]), pos => #pos(bootstrap/GenHaxe.hx:540: characters 9-34) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:541: characters 9-20) },set), pos => #pos(bootstrap/GenHaxe.hx:541: characters 9-24) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:541: characters 25-26) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:541: characters 28-32) }]), pos => #pos(bootstrap/GenHaxe.hx:541: characters 9-33) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:542: characters 9-20) },get), pos => #pos(bootstrap/GenHaxe.hx:542: characters 9-24) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:542: characters 25-26) }]), pos => #pos(bootstrap/GenHaxe.hx:542: characters 9-27) }]), pos => #pos(bootstrap/GenHaxe.hx:539: lines 539-542) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenHaxe.hx:539: characters 14-18) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:539: characters 19-23) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:539: characters 25-26) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:539: characters 28-29) }]), pos => #pos(bootstrap/GenHaxe.hx:539: characters 14-30) }], pos => #pos(bootstrap/GenHaxe.hx:539: lines 539-542), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenHaxe.hx:543: characters 23-24) }), pos => #pos(bootstrap/GenHaxe.hx:543: characters 17-22) }]), pos => #pos(bootstrap/GenHaxe.hx:543: characters 9-22) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:543: characters 14-15) }], pos => #pos(bootstrap/GenHaxe.hx:543: characters 9-22), guard => null }],null), pos => #pos(bootstrap/GenHaxe.hx:538: lines 538-544) }), pos => #pos(bootstrap/GenHaxe.hx:537: lines 537-544) }]), pos => #pos(bootstrap/GenHaxe.hx:537: lines 537-545) },join), pos => #pos(bootstrap/GenHaxe.hx:537: lines 537-545) },[{ expr => EConst(CString(, )), pos => #pos(bootstrap/GenHaxe.hx:545: characters 14-18) }]), pos => #pos(bootstrap/GenHaxe.hx:537: lines 537-545) }), pos => #pos(bootstrap/GenHaxe.hx:537: lines 537-545) },{ expr => EConst(CString() )), pos => #pos(bootstrap/GenHaxe.hx:545: characters 22-26) }), pos => #pos(bootstrap/GenHaxe.hx:537: lines 537-545) }), pos => #pos(bootstrap/GenHaxe.hx:537: lines 537-545) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:546: characters 11-15) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:546: characters 19-23) }), pos => #pos(bootstrap/GenHaxe.hx:546: characters 11-23) },{ expr => EBlock([{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:547: characters 16-20) }), pos => #pos(bootstrap/GenHaxe.hx:547: characters 15-21) },[{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenHaxe.hx:549: characters 9-16) },[]), pos => #pos(bootstrap/GenHaxe.hx:549: characters 9-18) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:550: characters 9-13) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:550: characters 17-21) },stringify), pos => #pos(bootstrap/GenHaxe.hx:550: characters 17-31) },[]), pos => #pos(bootstrap/GenHaxe.hx:550: characters 17-33) }), pos => #pos(bootstrap/GenHaxe.hx:550: characters 9-33) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenHaxe.hx:551: characters 9-15) },[]), pos => #pos(bootstrap/GenHaxe.hx:551: characters 9-17) }]), pos => #pos(bootstrap/GenHaxe.hx:548: lines 548-551) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenHaxe.hx:548: characters 14-20) },[{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:548: characters 21-22) }]), pos => #pos(bootstrap/GenHaxe.hx:548: characters 14-23) }], pos => #pos(bootstrap/GenHaxe.hx:548: lines 548-551), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenHaxe.hx:553: characters 10-17) },[]), pos => #pos(bootstrap/GenHaxe.hx:553: characters 10-19) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:554: characters 10-14) },{ expr => EBinop(OpAdd,{ expr => EConst(CString({
$tabs)), pos => #pos(bootstrap/GenHaxe.hx:554: characters 18-28) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:554: characters 31-35) },stringify), pos => #pos(bootstrap/GenHaxe.hx:554: characters 31-45) },[]), pos => #pos(bootstrap/GenHaxe.hx:554: characters 31-47) }), pos => #pos(bootstrap/GenHaxe.hx:554: characters 18-47) }), pos => #pos(bootstrap/GenHaxe.hx:554: characters 10-47) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenHaxe.hx:555: characters 10-16) },[]), pos => #pos(bootstrap/GenHaxe.hx:555: characters 10-18) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:556: characters 10-14) },{ expr => EConst(CString(;
$tabs})), pos => #pos(bootstrap/GenHaxe.hx:556: characters 18-29) }), pos => #pos(bootstrap/GenHaxe.hx:556: characters 10-29) }]), pos => #pos(bootstrap/GenHaxe.hx:552: lines 552-556) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:552: characters 14-15) }], pos => #pos(bootstrap/GenHaxe.hx:552: lines 552-556), guard => null }],null), pos => #pos(bootstrap/GenHaxe.hx:547: lines 547-557) }]), pos => #pos(bootstrap/GenHaxe.hx:546: lines 546-558) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:559: characters 12-16) },{ expr => EConst(CString({})), pos => #pos(bootstrap/GenHaxe.hx:559: characters 20-24) }), pos => #pos(bootstrap/GenHaxe.hx:559: characters 12-24) }), pos => #pos(bootstrap/GenHaxe.hx:546: lines 546-559) }]), pos => #pos(bootstrap/GenHaxe.hx:525: lines 525-560) }]), pos => #pos(bootstrap/GenHaxe.hx:524: lines 524-560) }, values => [{ expr => ECall({ expr => EConst(CIdent(TFunction)), pos => #pos(bootstrap/GenHaxe.hx:524: characters 10-19) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:524: characters 20-24) },{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:524: characters 26-30) },{ expr => EConst(CIdent(vars)), pos => #pos(bootstrap/GenHaxe.hx:524: characters 32-36) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:524: characters 38-39) }]), pos => #pos(bootstrap/GenHaxe.hx:524: characters 10-40) }], pos => #pos(bootstrap/GenHaxe.hx:524: lines 524-560), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:564: characters 6-10) },{ expr => EBinop(OpAdd,{ expr => EConst(CString(public static var )), pos => #pos(bootstrap/GenHaxe.hx:564: characters 14-34) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:564: characters 37-41) },rename), pos => #pos(bootstrap/GenHaxe.hx:564: characters 37-48) },[]), pos => #pos(bootstrap/GenHaxe.hx:564: characters 37-50) }), pos => #pos(bootstrap/GenHaxe.hx:564: characters 14-50) }), pos => #pos(bootstrap/GenHaxe.hx:564: characters 6-50) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:565: characters 9-13) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenHaxe.hx:565: characters 17-21) }), pos => #pos(bootstrap/GenHaxe.hx:565: characters 9-21) },{ expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:566: characters 7-11) },{ expr => EBinop(OpAdd,{ expr => EConst(CString( = )), pos => #pos(bootstrap/GenHaxe.hx:566: characters 15-20) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:566: characters 23-27) },stringify), pos => #pos(bootstrap/GenHaxe.hx:566: characters 23-37) },[]), pos => #pos(bootstrap/GenHaxe.hx:566: characters 23-39) }), pos => #pos(bootstrap/GenHaxe.hx:566: characters 15-39) }), pos => #pos(bootstrap/GenHaxe.hx:566: characters 7-39) }]), pos => #pos(bootstrap/GenHaxe.hx:565: lines 565-567) },null), pos => #pos(bootstrap/GenHaxe.hx:565: lines 565-567) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:568: characters 6-10) },{ expr => EConst(CString(;)), pos => #pos(bootstrap/GenHaxe.hx:568: characters 14-17) }), pos => #pos(bootstrap/GenHaxe.hx:568: characters 6-17) }]), pos => #pos(bootstrap/GenHaxe.hx:561: lines 561-568) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenHaxe.hx:561: characters 10-14) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:561: characters 15-19) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:561: characters 21-22) },{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenHaxe.hx:561: characters 24-28) },{ expr => EConst(CIdent(const)), pos => #pos(bootstrap/GenHaxe.hx:561: characters 30-35) }]), pos => #pos(bootstrap/GenHaxe.hx:561: characters 10-36) }], pos => #pos(bootstrap/GenHaxe.hx:561: lines 561-568), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:569: characters 13-17) },{ expr => EBinop(OpAdd,{ expr => EConst(CString()), pos => #pos(bootstrap/GenHaxe.hx:569: characters 21-23) },{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenHaxe.hx:569: characters 24-25) }), pos => #pos(bootstrap/GenHaxe.hx:569: characters 21-25) }), pos => #pos(bootstrap/GenHaxe.hx:569: characters 13-25) }]), pos => #pos(bootstrap/GenHaxe.hx:569: characters 5-25) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:569: characters 10-11) }], pos => #pos(bootstrap/GenHaxe.hx:569: characters 5-25), guard => null }],null), pos => #pos(bootstrap/GenHaxe.hx:523: lines 523-570) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:571: characters 4-8) },{ expr => EConst(CString(
)), pos => #pos(bootstrap/GenHaxe.hx:571: characters 12-16) }), pos => #pos(bootstrap/GenHaxe.hx:571: characters 4-16) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenHaxe.hx:572: characters 4-10) },[]), pos => #pos(bootstrap/GenHaxe.hx:572: characters 4-12) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:575: characters 4-5) },{ expr => EBinop(OpAdd,{ expr => EConst(CString(	)), pos => #pos(bootstrap/GenHaxe.hx:575: characters 9-13) },{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenHaxe.hx:575: characters 16-20) }), pos => #pos(bootstrap/GenHaxe.hx:575: characters 9-20) }), pos => #pos(bootstrap/GenHaxe.hx:575: characters 4-20) }]), pos => #pos(bootstrap/GenHaxe.hx:503: lines 503-577) }), pos => #pos(bootstrap/GenHaxe.hx:503: lines 503-577) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:578: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString()), pos => #pos(bootstrap/GenHaxe.hx:578: characters 8-10) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenHaxe.hx:578: characters 13-17) }), pos => #pos(bootstrap/GenHaxe.hx:578: characters 8-17) },{ expr => EConst(CString(})), pos => #pos(bootstrap/GenHaxe.hx:578: characters 20-23) }), pos => #pos(bootstrap/GenHaxe.hx:578: characters 8-23) },{ expr => EParenthesis({ expr => ETernary({ expr => EConst(CIdent(external)), pos => #pos(bootstrap/GenHaxe.hx:578: characters 27-35) },{ expr => EConst(CString( */)), pos => #pos(bootstrap/GenHaxe.hx:578: characters 36-41) },{ expr => EConst(CString()), pos => #pos(bootstrap/GenHaxe.hx:578: characters 42-44) }), pos => #pos(bootstrap/GenHaxe.hx:578: characters 27-44) }), pos => #pos(bootstrap/GenHaxe.hx:578: characters 26-45) }), pos => #pos(bootstrap/GenHaxe.hx:578: characters 8-45) }), pos => #pos(bootstrap/GenHaxe.hx:578: characters 3-45) },{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:580: characters 3-4) }]), pos => #pos(bootstrap/GenHaxe.hx:497: lines 497-580) }, values => [{ expr => ECall({ expr => EConst(CIdent(TClass)), pos => #pos(bootstrap/GenHaxe.hx:497: characters 7-13) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:497: characters 14-15) },{ expr => EConst(CIdent(ext)), pos => #pos(bootstrap/GenHaxe.hx:497: characters 17-20) },{ expr => EConst(CIdent(impl)), pos => #pos(bootstrap/GenHaxe.hx:497: characters 22-26) },{ expr => EConst(CIdent(fields)), pos => #pos(bootstrap/GenHaxe.hx:497: characters 28-34) },{ expr => EConst(CIdent(external)), pos => #pos(bootstrap/GenHaxe.hx:497: characters 36-44) }]), pos => #pos(bootstrap/GenHaxe.hx:497: characters 7-45) }], pos => #pos(bootstrap/GenHaxe.hx:497: lines 497-580), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:583: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(module )), pos => #pos(bootstrap/GenHaxe.hx:583: characters 7-16) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(path)), pos => #pos(bootstrap/GenHaxe.hx:583: characters 19-23) },join), pos => #pos(bootstrap/GenHaxe.hx:583: characters 19-28) },[{ expr => EConst(CString(.)), pos => #pos(bootstrap/GenHaxe.hx:583: characters 29-32) }]), pos => #pos(bootstrap/GenHaxe.hx:583: characters 19-33) }), pos => #pos(bootstrap/GenHaxe.hx:583: characters 7-33) },{ expr => EConst(CString( {
)), pos => #pos(bootstrap/GenHaxe.hx:583: characters 36-42) }), pos => #pos(bootstrap/GenHaxe.hx:583: characters 7-42) }), pos => #pos(bootstrap/GenHaxe.hx:583: characters 3-42) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenHaxe.hx:584: characters 3-10) },[]), pos => #pos(bootstrap/GenHaxe.hx:584: characters 3-12) },{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:585: characters 8-9) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenHaxe.hx:585: characters 13-15) }), pos => #pos(bootstrap/GenHaxe.hx:585: characters 8-15) },{ expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:586: characters 4-5) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenHaxe.hx:586: characters 9-13) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenHaxe.hx:586: characters 16-17) },stringify), pos => #pos(bootstrap/GenHaxe.hx:586: characters 16-27) },[]), pos => #pos(bootstrap/GenHaxe.hx:586: characters 16-29) }), pos => #pos(bootstrap/GenHaxe.hx:586: characters 9-29) },{ expr => EConst(CString(;
)), pos => #pos(bootstrap/GenHaxe.hx:586: characters 32-37) }), pos => #pos(bootstrap/GenHaxe.hx:586: characters 9-37) }), pos => #pos(bootstrap/GenHaxe.hx:586: characters 4-37) }]), pos => #pos(bootstrap/GenHaxe.hx:585: lines 585-587) }), pos => #pos(bootstrap/GenHaxe.hx:585: lines 585-587) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenHaxe.hx:588: characters 3-9) },[]), pos => #pos(bootstrap/GenHaxe.hx:588: characters 3-11) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:589: characters 3-4) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenHaxe.hx:589: characters 7-11) }), pos => #pos(bootstrap/GenHaxe.hx:589: characters 3-11) },{ expr => EConst(CString(})), pos => #pos(bootstrap/GenHaxe.hx:589: characters 14-17) }), pos => #pos(bootstrap/GenHaxe.hx:589: characters 3-17) }]), pos => #pos(bootstrap/GenHaxe.hx:582: lines 582-589) }, values => [{ expr => ECall({ expr => EConst(CIdent(TModule)), pos => #pos(bootstrap/GenHaxe.hx:582: characters 7-14) },[{ expr => EConst(CIdent(path)), pos => #pos(bootstrap/GenHaxe.hx:582: characters 15-19) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenHaxe.hx:582: characters 21-23) }]), pos => #pos(bootstrap/GenHaxe.hx:582: characters 7-24) }], pos => #pos(bootstrap/GenHaxe.hx:582: lines 582-589), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString({})), pos => #pos(bootstrap/GenHaxe.hx:590: characters 23-27) }]), pos => #pos(bootstrap/GenHaxe.hx:590: characters 2-27) }, values => [{ expr => ECall({ expr => EConst(CIdent(TObject)), pos => #pos(bootstrap/GenHaxe.hx:590: characters 7-14) },[{ expr => EArrayDecl([]), pos => #pos(bootstrap/GenHaxe.hx:590: characters 15-17) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:590: characters 19-20) }]), pos => #pos(bootstrap/GenHaxe.hx:590: characters 7-21) }], pos => #pos(bootstrap/GenHaxe.hx:590: characters 2-27), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString({)), pos => #pos(bootstrap/GenHaxe.hx:591: characters 27-30) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenHaxe.hx:591: characters 39-40) },{ expr => EBinop(OpInterval,{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenHaxe.hx:591: characters 44-48) },{ expr => EField({ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenHaxe.hx:591: characters 48-50) },length), pos => #pos(bootstrap/GenHaxe.hx:591: characters 48-57) }), pos => #pos(bootstrap/GenHaxe.hx:591: characters 44-57) }), pos => #pos(bootstrap/GenHaxe.hx:591: characters 39-57) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(names)), pos => #pos(bootstrap/GenHaxe.hx:591: characters 59-64) },{ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenHaxe.hx:591: characters 65-66) }), pos => #pos(bootstrap/GenHaxe.hx:591: characters 59-67) },rename), pos => #pos(bootstrap/GenHaxe.hx:591: characters 59-74) },[]), pos => #pos(bootstrap/GenHaxe.hx:591: characters 59-76) },{ expr => EConst(CString(:)), pos => #pos(bootstrap/GenHaxe.hx:591: characters 79-82) }), pos => #pos(bootstrap/GenHaxe.hx:591: characters 59-82) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenHaxe.hx:591: characters 85-87) },{ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenHaxe.hx:591: characters 88-89) }), pos => #pos(bootstrap/GenHaxe.hx:591: characters 85-90) },stringify), pos => #pos(bootstrap/GenHaxe.hx:591: characters 85-100) },[]), pos => #pos(bootstrap/GenHaxe.hx:591: characters 85-102) }), pos => #pos(bootstrap/GenHaxe.hx:591: characters 59-102) }), pos => #pos(bootstrap/GenHaxe.hx:591: characters 34-102) }]), pos => #pos(bootstrap/GenHaxe.hx:591: characters 33-103) },join), pos => #pos(bootstrap/GenHaxe.hx:591: characters 33-108) },[{ expr => EConst(CString(, )), pos => #pos(bootstrap/GenHaxe.hx:591: characters 109-113) }]), pos => #pos(bootstrap/GenHaxe.hx:591: characters 33-114) }), pos => #pos(bootstrap/GenHaxe.hx:591: characters 27-114) },{ expr => EConst(CString(})), pos => #pos(bootstrap/GenHaxe.hx:591: characters 117-120) }), pos => #pos(bootstrap/GenHaxe.hx:591: characters 27-120) }]), pos => #pos(bootstrap/GenHaxe.hx:591: characters 2-120) }, values => [{ expr => ECall({ expr => EConst(CIdent(TObject)), pos => #pos(bootstrap/GenHaxe.hx:591: characters 7-14) },[{ expr => EConst(CIdent(names)), pos => #pos(bootstrap/GenHaxe.hx:591: characters 15-20) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenHaxe.hx:591: characters 22-24) }]), pos => #pos(bootstrap/GenHaxe.hx:591: characters 7-25) }], pos => #pos(bootstrap/GenHaxe.hx:591: characters 2-120), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EConst(CString(static )), pos => #pos(bootstrap/GenHaxe.hx:593: characters 23-32) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(field)), pos => #pos(bootstrap/GenHaxe.hx:593: characters 35-40) },stringify), pos => #pos(bootstrap/GenHaxe.hx:593: characters 35-50) },[]), pos => #pos(bootstrap/GenHaxe.hx:593: characters 35-52) }), pos => #pos(bootstrap/GenHaxe.hx:593: characters 23-52) }]), pos => #pos(bootstrap/GenHaxe.hx:593: characters 2-52) }, values => [{ expr => ECall({ expr => EConst(CIdent(TStatic)), pos => #pos(bootstrap/GenHaxe.hx:593: characters 7-14) },[{ expr => EConst(CIdent(field)), pos => #pos(bootstrap/GenHaxe.hx:593: characters 15-20) }]), pos => #pos(bootstrap/GenHaxe.hx:593: characters 7-21) }], pos => #pos(bootstrap/GenHaxe.hx:593: characters 2-52), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:598: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(@:enum abstract )), pos => #pos(bootstrap/GenHaxe.hx:598: characters 7-25) },{ expr => ECall({ expr => EConst(CIdent(extractTypeName)), pos => #pos(bootstrap/GenHaxe.hx:598: characters 28-43) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:598: characters 44-45) }]), pos => #pos(bootstrap/GenHaxe.hx:598: characters 28-46) }), pos => #pos(bootstrap/GenHaxe.hx:598: characters 7-46) },{ expr => EConst(CString((String))), pos => #pos(bootstrap/GenHaxe.hx:598: characters 49-59) }), pos => #pos(bootstrap/GenHaxe.hx:598: characters 7-59) }), pos => #pos(bootstrap/GenHaxe.hx:598: characters 3-59) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:599: characters 3-4) },{ expr => EConst(CString( {
)), pos => #pos(bootstrap/GenHaxe.hx:599: characters 8-14) }), pos => #pos(bootstrap/GenHaxe.hx:599: characters 3-14) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenHaxe.hx:600: characters 3-10) },[]), pos => #pos(bootstrap/GenHaxe.hx:600: characters 3-12) },{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenHaxe.hx:601: characters 8-9) },{ expr => EConst(CIdent(fields)), pos => #pos(bootstrap/GenHaxe.hx:601: characters 13-19) }), pos => #pos(bootstrap/GenHaxe.hx:601: characters 8-19) },{ expr => EBlock([{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenHaxe.hx:602: characters 11-12) }), pos => #pos(bootstrap/GenHaxe.hx:602: characters 10-13) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:604: characters 5-6) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenHaxe.hx:604: characters 10-14) },{ expr => EConst(CString(var )), pos => #pos(bootstrap/GenHaxe.hx:604: characters 17-23) }), pos => #pos(bootstrap/GenHaxe.hx:604: characters 10-23) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:604: characters 26-30) }), pos => #pos(bootstrap/GenHaxe.hx:604: characters 10-30) },{ expr => EConst(CString( = )), pos => #pos(bootstrap/GenHaxe.hx:604: characters 33-38) }), pos => #pos(bootstrap/GenHaxe.hx:604: characters 10-38) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(val)), pos => #pos(bootstrap/GenHaxe.hx:604: characters 41-44) },stringify), pos => #pos(bootstrap/GenHaxe.hx:604: characters 41-54) },[]), pos => #pos(bootstrap/GenHaxe.hx:604: characters 41-56) }), pos => #pos(bootstrap/GenHaxe.hx:604: characters 10-56) },{ expr => EConst(CString(;
)), pos => #pos(bootstrap/GenHaxe.hx:604: characters 59-64) }), pos => #pos(bootstrap/GenHaxe.hx:604: characters 10-64) }), pos => #pos(bootstrap/GenHaxe.hx:604: characters 5-64) }]), pos => #pos(bootstrap/GenHaxe.hx:603: lines 603-604) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBinop)), pos => #pos(bootstrap/GenHaxe.hx:603: characters 10-16) },[{ expr => EConst(CIdent(OpAssign)), pos => #pos(bootstrap/GenHaxe.hx:603: characters 17-25) },{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenHaxe.hx:603: characters 27-33) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:603: characters 34-38) }]), pos => #pos(bootstrap/GenHaxe.hx:603: characters 27-39) },{ expr => EConst(CIdent(val)), pos => #pos(bootstrap/GenHaxe.hx:603: characters 41-44) }]), pos => #pos(bootstrap/GenHaxe.hx:603: characters 10-45) }], pos => #pos(bootstrap/GenHaxe.hx:603: lines 603-604), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:607: characters 5-6) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenHaxe.hx:607: characters 10-14) },{ expr => EConst(CString(var )), pos => #pos(bootstrap/GenHaxe.hx:607: characters 17-23) }), pos => #pos(bootstrap/GenHaxe.hx:607: characters 10-23) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:607: characters 26-30) }), pos => #pos(bootstrap/GenHaxe.hx:607: characters 10-30) },{ expr => EConst(CString( = {};
)), pos => #pos(bootstrap/GenHaxe.hx:607: characters 33-43) }), pos => #pos(bootstrap/GenHaxe.hx:607: characters 10-43) }), pos => #pos(bootstrap/GenHaxe.hx:607: characters 5-43) }]), pos => #pos(bootstrap/GenHaxe.hx:605: lines 605-607) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenHaxe.hx:605: characters 10-16) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:605: characters 17-21) }]), pos => #pos(bootstrap/GenHaxe.hx:605: characters 10-22) }], pos => #pos(bootstrap/GenHaxe.hx:605: lines 605-607), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EBinop(OpAdd,{ expr => EConst(CString(!)), pos => #pos(bootstrap/GenHaxe.hx:608: characters 19-22) },{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenHaxe.hx:608: characters 25-26) }), pos => #pos(bootstrap/GenHaxe.hx:608: characters 19-26) }), pos => #pos(bootstrap/GenHaxe.hx:608: characters 13-18) }]), pos => #pos(bootstrap/GenHaxe.hx:608: characters 5-18) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:608: characters 10-11) }], pos => #pos(bootstrap/GenHaxe.hx:608: characters 5-18), guard => null }],null), pos => #pos(bootstrap/GenHaxe.hx:602: lines 602-609) }]), pos => #pos(bootstrap/GenHaxe.hx:601: lines 601-610) }), pos => #pos(bootstrap/GenHaxe.hx:601: lines 601-610) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenHaxe.hx:611: characters 3-9) },[]), pos => #pos(bootstrap/GenHaxe.hx:611: characters 3-11) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenHaxe.hx:612: characters 3-4) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenHaxe.hx:612: characters 7-11) }), pos => #pos(bootstrap/GenHaxe.hx:612: characters 3-11) },{ expr => EConst(CString(})), pos => #pos(bootstrap/GenHaxe.hx:612: characters 14-17) }), pos => #pos(bootstrap/GenHaxe.hx:612: characters 3-17) }]), pos => #pos(bootstrap/GenHaxe.hx:596: lines 596-612) }, values => [{ expr => ECall({ expr => EConst(CIdent(TEnum)), pos => #pos(bootstrap/GenHaxe.hx:596: characters 7-12) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:596: characters 13-14) },{ expr => EConst(CIdent(fields)), pos => #pos(bootstrap/GenHaxe.hx:596: characters 16-22) }]), pos => #pos(bootstrap/GenHaxe.hx:596: characters 7-23) }], pos => #pos(bootstrap/GenHaxe.hx:596: lines 596-612), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString()), pos => #pos(bootstrap/GenHaxe.hx:613: characters 23-25) }]), pos => #pos(bootstrap/GenHaxe.hx:613: characters 2-25) }, values => [{ expr => ECall({ expr => EConst(CIdent(TType)), pos => #pos(bootstrap/GenHaxe.hx:613: characters 7-12) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:613: characters 13-17) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenHaxe.hx:613: characters 19-20) }]), pos => #pos(bootstrap/GenHaxe.hx:613: characters 7-21) }], pos => #pos(bootstrap/GenHaxe.hx:613: characters 2-25), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(_)), pos => #pos(bootstrap/GenHaxe.hx:614: characters 20-23) }]), pos => #pos(bootstrap/GenHaxe.hx:614: characters 2-23) }, values => [{ expr => EConst(CIdent(TUnderscore)), pos => #pos(bootstrap/GenHaxe.hx:614: characters 7-18) }], pos => #pos(bootstrap/GenHaxe.hx:614: characters 2-23), guard => null },{ expr => { expr => EBlock([{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenHaxe.hx:616: characters 11-15) }), pos => #pos(bootstrap/GenHaxe.hx:616: characters 10-16) },[{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:617: characters 23-34) },set), pos => #pos(bootstrap/GenHaxe.hx:617: characters 23-38) },[{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenHaxe.hx:617: characters 39-43) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:617: characters 45-49) }]), pos => #pos(bootstrap/GenHaxe.hx:617: characters 23-50) },{ expr => EConst(CString(//extern untyped $name)), pos => #pos(bootstrap/GenHaxe.hx:617: characters 52-76) }]), pos => #pos(bootstrap/GenHaxe.hx:617: characters 4-76) }, values => [{ expr => ECall({ expr => EConst(CIdent(TFunction)), pos => #pos(bootstrap/GenHaxe.hx:617: characters 9-18) },[{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:617: characters 19-20) }]), pos => #pos(bootstrap/GenHaxe.hx:617: characters 9-21) }], pos => #pos(bootstrap/GenHaxe.hx:617: characters 4-76), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenHaxe.hx:618: characters 12-23) },set), pos => #pos(bootstrap/GenHaxe.hx:618: characters 12-27) },[{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenHaxe.hx:618: characters 28-32) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:618: characters 34-38) }]), pos => #pos(bootstrap/GenHaxe.hx:618: characters 12-39) },{ expr => EConst(CString(//extern $name)), pos => #pos(bootstrap/GenHaxe.hx:618: characters 41-57) }]), pos => #pos(bootstrap/GenHaxe.hx:618: characters 4-57) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenHaxe.hx:618: characters 9-10) }], pos => #pos(bootstrap/GenHaxe.hx:618: characters 4-57), guard => null }],null), pos => #pos(bootstrap/GenHaxe.hx:616: lines 616-619) }]), pos => #pos(bootstrap/GenHaxe.hx:615: lines 615-619) }, values => [{ expr => ECall({ expr => EConst(CIdent(TDeclare)), pos => #pos(bootstrap/GenHaxe.hx:615: characters 7-15) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenHaxe.hx:615: characters 16-20) },{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenHaxe.hx:615: characters 22-26) }]), pos => #pos(bootstrap/GenHaxe.hx:615: characters 7-27) }], pos => #pos(bootstrap/GenHaxe.hx:615: lines 615-619), guard => null }],null)) tmp
		}

		private static function unwrapBlock(e: data.Node): data.Node {
			if (e.index == 9) {
				if ({ let data.Node.TBlock(value) = e value }.length == 1) {
					var e1: data.Node = { let data.Node.TBlock(value) = e value }[0]
					return e1
				} else {
					let data.Node.TBlock(el) = e
					throw new HaxeError('Unwrapped block has multiple expressions')
				}
			} else return e
		}

		static function extractTypeName(t: data.NodeType): String {
			switch (t.index) {
				case 0: {
					let data.NodeType.Type(name) = t
					return name
				}

				case 1: {
					let data.NodeType.ParamentricType(name1, _) = t
					return name1
				}
				
				case _: throw new HaxeError('Type has no name: ' + Std.string(t))
			}
		}

		static function extractTypeString(t: data.NodeType): String {
			switch (t.index) {
				case 0: {
					let data.NodeType.Type(name) = t
					return name
				}

				case 1: {
					let data.NodeType.ParamentricType(name1, _) = t
					return name1
				}
				
				case _: return ''
			}
		}

		static function generatePackageJson(pack: main.Package): String {
			var jspackage: {author: String, description: String, license: String, main: String, name: String, version: String} = {name: pack.main, version: pack.main, description: pack.description, main: pack.main, author: pack.author, license: pack.license}
			return haxe.json.Json.stringify(jspackage, null, '\t')
		}

		static function stringifyMain(node: data.Node): String {
			var r: String = ''
			var main: String = ''
			GenHaxe.tabs = null
			if (node.index == 9) {
				let data.Node.TBlock(el) = node
				{
					var _g: Int = 0
					while (_g < el.length) {
						var e: data.Node = el[_g]
						_g++
						switch (e.index) {
							case 22, 32, 34: {
								var temptabs: String = GenHaxe.tabs
								GenHaxe.tabs = ''
								GenHaxe.internalTypes.push(GenHaxe.stringifyBlockExpression(e))
								GenHaxe.tabs = temptabs
							}

							case 35: {
								let data.Node.TDeclare(_, source) = e
								let data.Node.TDeclare(name, _) = e
								{
									var temptabs1: String = GenHaxe.tabs
									GenHaxe.tabs = ''
									var externAtt: data.Attribute = GenHaxe.getAtt(data.Project.mapAttributes.get(source), 'extern')
									if (externAtt != null) GenHaxe.internalTypes.push('extern ' + GenHaxe.stringify(source)) else GenHaxe.internalTypes.push('// extern ' + name)
									GenHaxe.stringifyBlockExpression(e)
									GenHaxe.tabs = temptabs1
								}
							}

							case 36: {}
							
							case _: {
								GenHaxe.tabs = if (GenHaxe.tabs == null) '\t\t' else GenHaxe.tabs
								main += '\t\t' + GenHaxe.stringifyBlockExpression(e) + ';\r\n'
							}
						}
					}
				}
			} else throw new HaxeError('' + Std.string(node))
			var currentPackage: String = ''
			if (currentPackage != '') r += 'package ' + currentPackage + ';\r\n'
			r += '\r\nusing Main.__Main__;\r\n\r\n'
			r += 'typedef Any = Dynamic;\r\n\r\n'
			r += GenHaxe.internalTypes.join('\r\n\r\n')
			r += '\r\n\r\nclass __Main__ {\r\n'
			r += '\tstatic function main() {\r\n'
			r += main
			r += '\t}\r\n}\r\n'
			return r
		}

	}
}
