module {
	@coreApi
	declare class Array< array.T > {
		var length: Int
		function concat(a: [array.T]): [array.T]
		function join(sep: String): String
		function pop(): array.T?
		function push(x: array.T): Int
		function reverse(): Void
		function shift(): array.T?
		function slice(pos: Int, end?: Int?): [array.T]
		function sort(f: (array.T, array.T)=>Int): Void
		function splice(pos: Int, len: Int): [array.T]
		function toString(): String
		function unshift(x: array.T): Void
		@has_untyped
		function insert(pos: Int, x: array.T): Void {
			this.splice(pos, 0, x)
		}

		function remove(x: array.T): Bool {
			return HxOverrides.remove(this, x)
		}

		function indexOf(x: array.T, fromIndex?: Int?): Int
		function lastIndexOf(x: array.T, fromIndex?: Int?): Int
		@has_untyped
		function copy(): [array.T] {
			return this.slice()
		}

		function map(f: array.T=>array.S): [array.S]
		function filter(f: array.T=>Bool): [array.T]
		@has_untyped
		@runtime
		function iterator(): stdtypes.Iterator< array.T > {
			return HxOverrides.iter(this)
		}

		new()
	}
}
