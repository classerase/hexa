module {
	@coreApi
	declare class Array< T > {
		var length: Int
		function concat(a: [T]): [T]
		function join(sep: String): String
		function pop(): T?
		function push(x: T): Int
		function reverse(): Void
		function shift(): T?
		function slice(pos: Int, end: Int?): [T]
		function sort(f: (T, T)=>Int): Void
		function splice(pos: Int, len: Int): [T]
		function toString(): String
		function unshift(x: T): Void
		@has_untyped
		function insert(pos: Int, x: T): Void {
			this.splice(pos, 0, x)
		}

		function remove(x: T): Bool {
			return HxOverrides.remove(this, x)
		}

		function indexOf(x: T, fromIndex: Int?): Int
		function lastIndexOf(x: T, fromIndex: Int?): Int
		@has_untyped
		function copy(): [T] {
			return this.slice()
		}

		function map(f: T=>array.S): [array.S]
		function filter(f: T=>Bool): [T]
		@has_untyped
		@runtime
		function iterator(): stdtypes.Iterator< T > {
			return HxOverrides.iter(this)
		}

		new()
	}
}
