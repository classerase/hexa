module {
	@multiType(@followWithAbstracts K)
	@inline
	class Map< K, V > {
		var value: map.IMap< K, V >
		@extern
		@impl
		static function _new(): [K:V]
		@impl
		static function set(this1: map.IMap< K, V >, key: K, value: V): Void {
			this1.set(key, value)
		}

		@impl
		@arrayAccess
		static function get(this1: map.IMap< K, V >, key: K): V? {
			return this1.get(key)
		}

		@impl
		static function exists(this1: map.IMap< K, V >, key: K): Bool {
			return this1.exists(key)
		}

		@impl
		static function remove(this1: map.IMap< K, V >, key: K): Bool {
			return this1.remove(key)
		}

		@impl
		static function keys(this1: map.IMap< K, V >): stdtypes.Iterator< K > {
			return this1.keys()
		}

		@impl
		static function iterator(this1: map.IMap< K, V >): stdtypes.Iterator< V > {
			return this1.iterator()
		}

		@impl
		static function toString(this1: map.IMap< K, V >): String {
			return this1.toString()
		}

		@impl
		@arrayAccess
		@noCompletion
		static function arrayWrite(this1: map.IMap< K, V >, k: K, v: V): V {
			this1.set(k, v)
			return v
		}

		@impl
		@to
		private static function toStringMap(t: map.IMap< K, V >): haxe.ds.stringmap.StringMap< V > {
			return new StringMap< V >()
		}

		@impl
		@to
		private static function toIntMap(t: map.IMap< K, V >): haxe.ds.intmap.IntMap< V > {
			return new IntMap< V >()
		}

		@impl
		@to
		private static function toEnumValueMapMap(t: map.IMap< K, V >): haxe.ds.enumvaluemap.EnumValueMap< K, V > {
			return new EnumValueMap< K, V >()
		}

		@impl
		@to
		private static function toObjectMap(t: map.IMap< K, V >): haxe.ds.objectmap.ObjectMap< K, V > {
			return new ObjectMap< K, V >()
		}

		@from
		private static function fromStringMap(map: haxe.ds.stringmap.StringMap< V >): [String:V] {
			return (map as! [String:V])
		}

		@from
		private static function fromIntMap(map: haxe.ds.intmap.IntMap< V >): [Int:V] {
			return (map as! [Int:V])
		}

		@from
		private static function fromObjectMap(map: haxe.ds.objectmap.ObjectMap< K, V >): [K:V] {
			return (map as! [K:V])
		}

	}
}
