module {
	class GenC extends generator.GeneratorHelper {
		private static var nowrap: Bool = true
		private static var id: Int = 0
		private static var tabs: String = ''
		private static function rename(name: String): String {
			if(name != 'WinMain') return '$' + name
			return name
		}

		private static function unblock(e: data.Node): data.Node {
			if(e.index == 9) {
				if({ let data.Node.TBlock(value) = e value }.length == 1) {
					var e1: data.Node = { let data.Node.TBlock(value) = e value }[0]
					return e1
				} else return e
			} else return e
		}

		private static function pushTab(): Void {
			GenC.tabs += '\t'
		}

		private static function popTab(): Void {
			GenC.tabs = GenC.tabs.substring(0, GenC.tabs.length - 1)
		}

		private static function stringifyBlockExpression(node: data.Node): String {
			var r: String = ''
			if(node.index == 11) {
				let data.Node.TIf(_, _, eelse) = node
				let data.Node.TIf(_, eif, _) = node
				let data.Node.TIf(econd, _, _) = node
				r += 'if(' + GenC.stringify(econd[0]) + ') '
				r += @ast(ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenC.hx:53: characters 17-20) }), pos => #pos(bootstrap/GenC.hx:53: characters 16-21) },[{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenC.hx:54: characters 22-25) },stringify), pos => #pos(bootstrap/GenC.hx:54: characters 22-35) },[]), pos => #pos(bootstrap/GenC.hx:54: characters 22-37) }]), pos => #pos(bootstrap/GenC.hx:54: characters 6-37) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenC.hx:54: characters 11-17) },[{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:54: characters 18-19) }]), pos => #pos(bootstrap/GenC.hx:54: characters 11-20) }], pos => #pos(bootstrap/GenC.hx:54: characters 6-37), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenC.hx:55: characters 14-20) },[{ expr => EArrayDecl([{ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenC.hx:55: characters 22-25) }]), pos => #pos(bootstrap/GenC.hx:55: characters 21-26) }]), pos => #pos(bootstrap/GenC.hx:55: characters 14-27) },stringify), pos => #pos(bootstrap/GenC.hx:55: characters 14-37) },[]), pos => #pos(bootstrap/GenC.hx:55: characters 14-39) }]), pos => #pos(bootstrap/GenC.hx:55: characters 6-39) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:55: characters 11-12) }], pos => #pos(bootstrap/GenC.hx:55: characters 6-39), guard => null }],null)) if(eif.index == 9) GenC.stringify(eif) else GenC.stringify(data.Node.TBlock({[eif]}))
				if(eelse != null) r += ' else ' + GenC.stringifyBlockExpression(eelse)
				return r
			} else return GenC.stringify(node)
		}

		private static function getAtt(atts: [data.Attribute], atname: String): data.Attribute {
			log.trace(atts, {fileName: 'GenC.hx', lineNumber: 64, className: 'GenC', methodName: 'getAtt'})
			if(atts != null && atts.length > 0) {
				var _g: Int = 0
				while(_g < atts.length) {
					var att: data.Attribute = atts[_g]
					_g++
					if(att.name == atname) return att
				}
			}
			return null
		}

		private static var parentNames: [data.Node:String] = new EnumValueMap< data.Node, String >()
		private static var scopes: [[String:Bool]] = {[new StringMap< Bool >()]}
		private static function pushScope(): Void {
			GenC.scopes.push(new StringMap< Bool >())
		}

		private static function popScope(): [String:Bool] {
			return GenC.scopes.pop()
		}

		private static function hasInScope(name: String): Bool {
			var _this: haxe.ds.stringmap.StringMap< Bool > = ((GenC.scopes[GenC.scopes.length - 1] as! map.IMap< String, Bool >) as! haxe.ds.stringmap.StringMap< Bool >)
			return (if(__js__('__map_reserved')[name] != null) _this.getReserved(name) else _this.h[(name as! Int)]) != null
		}

		private static function addToScope(name: String): Void {
			var _this: haxe.ds.stringmap.StringMap< Bool > = ((GenC.scopes[GenC.scopes.length - 1] as! map.IMap< String, Bool >) as! haxe.ds.stringmap.StringMap< Bool >)
			if(__js__('__map_reserved')[name] != null) _this.setReserved(name, true) else _this.h[(name as! Int)] = true
		}

		static function stringifyMain(node: data.Node, target: Any): String {
			GenC.nowrap = true
			var r: String = ''
			if(target.include.length > 0) r += '#include ' + Std.string(target.include.join('\r\n#include ')) + '\r\n\r\n'
			r += '// Hexa declarations\r\n'
			r += '#define Int int\r\n'
			r += '\r\n'
			r += GenC.stringify(node)
			return r
		}

		static function stringify(node: data.Node): String {
			var r: String = ''
			if(node == null) throw new HaxeError('Unable to print: node is null')
			var atts: [data.Attribute] = data.Project.mapAttributes.get(node)
			var a: String = ''
			if(atts != null && atts.length > 0) {
				var _g: Int = 0
				while(_g < atts.length) {
					var att: data.Attribute = atts[_g]
					_g++
					a += '/* @' + att.name + '*/ '
				}
			}
			var tmp: String
			switch (@exhaustive node.index) {
				case 0: {
					let data.Node.TString(s) = node
					tmp = 'L"' + s.split('\n').join('\\n').split('\r').join('\\r').split('"').join('\\"') + '"'
				}

				case 1: {
					let data.Node.TIdent(s1) = node
					log.trace('`' + s1 + '`', {fileName: 'GenC.hx', lineNumber: 123, className: 'GenC', methodName: 'stringify'})
					var source: data.Node = data.Project.mapNames.get(node)
					var n: String
					if(source == null) throw new HaxeError('Unmapped ' + Std.string(node)) else switch (source.index) {
						case 1: {
							let data.Node.TIdent(name) = source
							n = ((GenC.parentNames as! map.IMap< data.Node, String >) as! map.IMap< data.Node, String >).get(source)
						}

						case 19: {
							let data.Node.TFunction(name1, _, _, _) = source
							n = GenC.rename(name1)
						}

						case 20: {
							let data.Node.TVar(name2, _, _, _) = source
							var n1: String? = ((GenC.parentNames as! map.IMap< data.Node, String >) as! map.IMap< data.Node, String >).get(source)
							if(n1 == null) throw new HaxeError('TVar ' + name2 + ' parentNames null == ' + ((GenC.parentNames as! map.IMap< data.Node, String >) as! map.IMap< data.Node, String >).get(source))
							n = n1
						}

						case 22: {
							let data.Node.TClass(t, _, _, _, _) = source
							var rename: data.Attribute = GenC.getAtt(data.Project.mapAttributes.get(source), 'native')
							var name3: String = GenC.rename(GenC.extractTypeName(t))
							if(rename != null) log.trace('Got @native!', {fileName: 'GenC.hx', lineNumber: 146, className: 'GenC', methodName: 'stringify'})
							if(rename != null) {
								var _g1: data.Node = rename.values[0]
								if(_g1 == null) n = name3 else if(_g1.index == 0) {
									let data.Node.TString(s2) = _g1
									n = s2
								} else n = name3
							} else n = name3
						}

						case 32: if({ let data.Node.TEnum(value, _) = source value }.index == 0) {
							let data.NodeType.Type(name4) = { let data.Node.TEnum(value, _) = source value }
							n = name4
						} else throw new HaxeError('' + s1 + ' ' + Std.string(source))

						case 40: if({ let data.Node.TStatic(value) = source value }.index == 20) {
							let data.Node.TVar(name5, _, _, _) = { let data.Node.TStatic(value) = source value }
							let data.Node.TStatic(f) = source
							var static_source: data.Node = data.Project.mapNames.get(source)
							switch (static_source.index) {
								case 22: {
									let data.Node.TClass(t1, _, _, _, _) = static_source
									n = GenC.rename(GenC.extractTypeName(t1)) + '.' + GenC.rename(name5)
								}

								case 32: {
									let data.Node.TEnum(t2, _) = static_source
									n = GenC.rename(GenC.extractTypeName(t2)) + '.' + GenC.rename(name5)
								}
								
								case _: throw new HaxeError('static_source is ' + Std.string(static_source))
							}
						} else throw new HaxeError('' + s1 + ' ' + Std.string(source))

						case 41: {
							let data.Node.TFor(name6, _, _) = source
							n = ((GenC.parentNames as! map.IMap< data.Node, String >) as! map.IMap< data.Node, String >).get(source)
						}
						
						case _: throw new HaxeError('' + s1 + ' ' + Std.string(source))
					}
					if(data.Project.isExternal.get(source) == true) n = ((GenC.parentNames as! map.IMap< data.Node, String >) as! map.IMap< data.Node, String >).get(source)
					if(s1 == 'BeginPaint') log.trace('BeginPaint --> ' + n + ', parent -> ' + Std.string(source), {fileName: 'GenC.hx', lineNumber: 156, className: 'GenC', methodName: 'stringify'})
					tmp = n
				}

				case 2: switch (@exhaustive { let data.Node.TBool(value) = node value }) {
					case false: tmp = '0'

					case true: tmp = '1'
				}

				case 3: tmp = 'this'

				case 4: tmp = 'super'

				case 5: {
					let data.Node.TInt(s3) = node
					tmp = s3
				}

				case 6: {
					let data.Node.TFloat(s4) = node
					tmp = s4
				}

				case 7: tmp = 'NULL'

				case 8: {
					let data.Node.TBinop(_, _, b) = node
					let data.Node.TBinop(_, a1, _) = node
					let data.Node.TBinop(op, _, _) = node
					tmp = GenC.stringify(a1) + token.Token_Impl_.stringify(op) + GenC.stringify(b)
				}

				case 9: {
					let data.Node.TBlock(el) = node
					var wrap: Bool = !GenC.nowrap
					GenC.nowrap = false
					if(wrap) r = '{\n'
					GenC.pushScope()
					if(wrap) GenC.tabs += '\t'
					{
						var _g2: Int = 0
						while(_g2 < el.length) {
							var e: data.Node = el[_g2]
							_g2++
							r += GenC.tabs + GenC.stringifyBlockExpression(e) + ';\n'
						}
					}
					if(wrap) GenC.tabs = GenC.tabs.substring(0, GenC.tabs.length - 1)
					GenC.popScope()
					r += GenC.tabs
					if(wrap) r += '}'
					tmp = r
				}

				case 10: if({ let data.Node.TCall(value, _, _) = node value }.index == 1) switch ({ let data.Node.TIdent(value) = { let data.Node.TCall(value, _, _) = node value } value }) {
					case '__instanceof__': if({ let data.Node.TCall(_, value, _) = node value }.length == 2) {
						let data.Node.TCall(_, _, argNames) = node
						var kind: data.Node = { let data.Node.TCall(_, value, _) = node value }[1]
						var of: data.Node = { let data.Node.TCall(_, value, _) = node value }[0]
						tmp = GenC.stringify(of) + ' instanceof ' + GenC.stringify(kind)
					} else {
						let data.Node.TCall(_, _, argNames1) = node
						let data.Node.TCall(e1, _, _) = node
						let data.Node.TCall(_, el1, _) = node
						var tmp1: String = GenC.stringify(e1) + '('
						var _g3: [String] = {[]}
						{
							var _g11: Int = 0
							while(_g11 < el1.length) {
								var e2: data.Node = el1[_g11]
								_g11++
								_g3.push(GenC.stringify(e2))
							}
						}
						tmp = tmp1 + _g3.join(',') + ')'
					}

					case '__typeof__': if({ let data.Node.TCall(_, value, _) = node value }.length == 1) {
						let data.Node.TCall(_, _, argNames2) = node
						var of1: data.Node = { let data.Node.TCall(_, value, _) = node value }[0]
						tmp = 'typeof ' + GenC.stringify(of1)
					} else {
						let data.Node.TCall(_, _, argNames3) = node
						let data.Node.TCall(e3, _, _) = node
						let data.Node.TCall(_, el2, _) = node
						var tmp2: String = GenC.stringify(e3) + '('
						var _g4: [String] = {[]}
						{
							var _g12: Int = 0
							while(_g12 < el2.length) {
								var e4: data.Node = el2[_g12]
								_g12++
								_g4.push(GenC.stringify(e4))
							}
						}
						tmp = tmp2 + _g4.join(',') + ')'
					}

					case 'refof': if({ let data.Node.TCall(_, value, _) = node value }.length == 1) {
						let data.Node.TCall(_, _, argNames4) = node
						var of2: data.Node = { let data.Node.TCall(_, value, _) = node value }[0]
						tmp = '(&' + GenC.stringify(of2) + ')'
					} else {
						let data.Node.TCall(_, _, argNames5) = node
						let data.Node.TCall(e5, _, _) = node
						let data.Node.TCall(_, el3, _) = node
						var tmp3: String = GenC.stringify(e5) + '('
						var _g5: [String] = {[]}
						{
							var _g13: Int = 0
							while(_g13 < el3.length) {
								var e6: data.Node = el3[_g13]
								_g13++
								_g5.push(GenC.stringify(e6))
							}
						}
						tmp = tmp3 + _g5.join(',') + ')'
					}
					
					case _: {
						let data.Node.TCall(_, _, argNames6) = node
						let data.Node.TCall(_, el4, _) = node
						let data.Node.TCall(e7, _, _) = node
						var tmp4: String = GenC.stringify(e7) + '('
						var _g6: [String] = {[]}
						{
							var _g14: Int = 0
							while(_g14 < el4.length) {
								var e8: data.Node = el4[_g14]
								_g14++
								_g6.push(GenC.stringify(e8))
							}
						}
						tmp = tmp4 + _g6.join(',') + ')'
					}
				} else {
					let data.Node.TCall(_, _, argNames7) = node
					let data.Node.TCall(_, el5, _) = node
					let data.Node.TCall(e9, _, _) = node
					var tmp5: String = GenC.stringify(e9) + '('
					var _g7: [String] = {[]}
					{
						var _g15: Int = 0
						while(_g15 < el5.length) {
							var e10: data.Node = el5[_g15]
							_g15++
							_g7.push(GenC.stringify(e10))
						}
					}
					tmp = tmp5 + _g7.join(',') + ')'
				}

				case 11: {
					let data.Node.TIf(_, _, eelse) = node
					let data.Node.TIf(_, eif, _) = node
					let data.Node.TIf(econd, _, _) = node
					var _g8: [String] = {[]}
					{
						var _g16: Int = 0
						while(_g16 < econd.length) {
							var e11: data.Node = econd[_g16]
							_g16++
							_g8.push(GenC.stringify(e11))
						}
					}
					r = 'if(' + _g8.join(' && ') + ') ' + GenC.stringify(eif)
					if(eelse != null) r += ' else ' + GenC.stringify(eelse)
					tmp = r
				}

				case 12: {
					let data.Node.TParenthesis(e12) = node
					tmp = '(' + GenC.stringify(e12) + ')'
				}

				case 13: if({ let data.Node.TReturn(value) = node value } == null) tmp = 'return' else if({ let data.Node.TReturn(value) = node value }[1] == 9) {
					if({ let data.Node?.TBlock(value) = { let data.Node.TReturn(value) = node value } value }.length == 0) tmp = 'return' else {
						let data.Node.TReturn(e13) = node
						tmp = 'return ' + GenC.stringify(e13)
					}
				} else {
					let data.Node.TReturn(e14) = node
					tmp = 'return ' + GenC.stringify(e14)
				}

				case 14: {
					let data.Node.TThrow(e15) = node
					tmp = 'throw ' + GenC.stringify(e15) + ''
				}

				case 15: tmp = 'break'

				case 16: tmp = 'continue'

				case 17: {
					let data.Node.TUnop(_, _, e16) = node
					let data.Node.TUnop(_, postfix, _) = node
					let data.Node.TUnop(op1, _, _) = node
					if(postfix) tmp = GenC.stringify(e16) + token.Token_Impl_.stringify(op1) else tmp = token.Token_Impl_.stringify(op1) + GenC.stringify(e16)
				}

				case 18: switch (@exhaustive { let data.Node.TWhile(_, _, value) = node value }) {
					case false: {
						let data.Node.TWhile(econd1, _, _) = node
						let data.Node.TWhile(_, e17, _) = node
						tmp = 'do{' + GenC.stringify(e17) + '}while(' + GenC.stringify(econd1) + ')'
					}

					case true: {
						let data.Node.TWhile(econd2, _, _) = node
						let data.Node.TWhile(_, e18, _) = node
						tmp = 'while(' + GenC.stringify(econd2) + ') ' + GenC.stringify(e18)
					}
				}

				case 19: {
					let data.Node.TFunction(_, _, _, rettype) = node
					let data.Node.TFunction(_, _, vars, _) = node
					let data.Node.TFunction(_, expr, _, _) = node
					let data.Node.TFunction(name7, _, _, _) = node
					r += GenC.extractTypeName(rettype)
					r += ' CALLBACK'
					if(name7 != null) r += ' ' + GenC.rename(name7)
					var _g17: [String] = {[]}
					{
						var _g21: Int = 0
						while(_g21 < vars.length) {
							var v: data.Node = vars[_g21]
							_g21++
							var r1: String
							switch (v.index) {
								case 1: {
									let data.Node.TIdent(name8) = v
									var name9: String = GenC.rename(name8)
									((GenC.parentNames as! map.IMap< data.Node, String >) as! map.IMap< data.Node, String >).set(v, name9)
									r1 = name9
								}

								case 12: if({ let data.Node.TParenthesis(value) = v value } == null) r1 = '' else throw new HaxeError(v)

								case 20: {
									let data.Node.TVar(_, t3, _, _) = v
									let data.Node.TVar(name10, _, _, _) = v
									var name11: String = GenC.rename(name10)
									((GenC.parentNames as! map.IMap< data.Node, String >) as! map.IMap< data.Node, String >).set(v, name11)
									r1 = GenC.extractTypeName(t3) + ' ' + name11 + ' lol'
								}
								
								case _: throw new HaxeError(v)
							}
							_g17.push(@ast(ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:247: characters 12-13) }), pos => #pos(bootstrap/GenC.hx:247: characters 11-14) },[{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:249: characters 17-21) },rename), pos => #pos(bootstrap/GenC.hx:249: characters 17-28) },[]), pos => #pos(bootstrap/GenC.hx:249: characters 17-30) }, name => name, type => null, ??? => #pos(bootstrap/GenC.hx:249: characters 10-14) }]), pos => #pos(bootstrap/GenC.hx:249: characters 6-31) },{ expr => EBinop(OpAssign,{ expr => EArray({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenC.hx:250: characters 6-17) },{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:250: characters 18-19) }), pos => #pos(bootstrap/GenC.hx:250: characters 6-20) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:250: characters 23-27) }), pos => #pos(bootstrap/GenC.hx:250: characters 6-27) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:251: characters 6-7) },extractTypeName), pos => #pos(bootstrap/GenC.hx:251: characters 6-23) },[]), pos => #pos(bootstrap/GenC.hx:251: characters 6-25) },{ expr => EConst(CString( )), pos => #pos(bootstrap/GenC.hx:251: characters 28-31) }), pos => #pos(bootstrap/GenC.hx:251: characters 6-31) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:251: characters 34-38) }), pos => #pos(bootstrap/GenC.hx:251: characters 6-38) },{ expr => EConst(CString( lol)), pos => #pos(bootstrap/GenC.hx:251: characters 41-47) }), pos => #pos(bootstrap/GenC.hx:251: characters 6-47) }]), pos => #pos(bootstrap/GenC.hx:248: lines 248-251) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenC.hx:248: characters 10-14) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:248: characters 15-19) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:248: characters 21-22) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:248: characters 24-25) }]), pos => #pos(bootstrap/GenC.hx:248: characters 10-26) }], pos => #pos(bootstrap/GenC.hx:248: lines 248-251), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:253: characters 17-21) },rename), pos => #pos(bootstrap/GenC.hx:253: characters 17-28) },[]), pos => #pos(bootstrap/GenC.hx:253: characters 17-30) }, name => name, type => null, ??? => #pos(bootstrap/GenC.hx:253: characters 10-14) }]), pos => #pos(bootstrap/GenC.hx:253: characters 6-31) },{ expr => EBinop(OpAssign,{ expr => EArray({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenC.hx:254: characters 6-17) },{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:254: characters 18-19) }), pos => #pos(bootstrap/GenC.hx:254: characters 6-20) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:254: characters 23-27) }), pos => #pos(bootstrap/GenC.hx:254: characters 6-27) }]), pos => #pos(bootstrap/GenC.hx:252: lines 252-254) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenC.hx:252: characters 10-16) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:252: characters 17-21) }]), pos => #pos(bootstrap/GenC.hx:252: characters 10-22) }], pos => #pos(bootstrap/GenC.hx:252: lines 252-254), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString()), pos => #pos(bootstrap/GenC.hx:256: characters 30-32) }]), pos => #pos(bootstrap/GenC.hx:256: characters 5-32) }, values => [{ expr => ECall({ expr => EConst(CIdent(TParenthesis)), pos => #pos(bootstrap/GenC.hx:256: characters 10-22) },[{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:256: characters 23-27) }]), pos => #pos(bootstrap/GenC.hx:256: characters 10-28) }], pos => #pos(bootstrap/GenC.hx:256: characters 5-32), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:257: characters 19-20) }), pos => #pos(bootstrap/GenC.hx:257: characters 13-18) }]), pos => #pos(bootstrap/GenC.hx:257: characters 5-18) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:257: characters 10-11) }], pos => #pos(bootstrap/GenC.hx:257: characters 5-18), guard => null }],null)) r1)
						}
					}
					r += '(' + _g17.join(', ') + ') '
					if(expr != null) {
						if(expr.index == 9) {
							let data.Node.TBlock(el6) = expr
							r += GenC.stringify(expr)
						} else {
							GenC.pushScope()
							GenC.tabs += '\t'
							r += '{\n' + GenC.tabs + GenC.stringify(expr) + ('\n\t' + GenC.tabs + '}')
							GenC.tabs = GenC.tabs.substring(0, GenC.tabs.length - 1)
							GenC.popScope()
						}
					} else r += '{}'
					tmp = r
				}

				case 20: {
					let data.Node.TVar(_, _, _, const) = node
					let data.Node.TVar(_, _, expr1, _) = node
					let data.Node.TVar(_, t4, _, _) = node
					let data.Node.TVar(oname, _, _, _) = node
					if(oname == null) throw new HaxeError('name is null for ' + Std.string(node))
					var es: String = ''
					if(expr1.index == 20) {
						let data.Node.TVar(_, _, exp1, _) = expr1
						let data.Node.TVar(_, t11, _, _) = expr1
						let data.Node.TVar(oname1, _, _, _) = expr1
						var a2: Int = 1
					}
					if(expr1 != null) es = ' = ' + GenC.stringify(expr1)
					GenC.addToScope(oname)
					var name12: String = GenC.rename(oname)
					if(GenC.hasInScope(oname)) name12 += '$' + ++GenC.id
					((GenC.parentNames as! map.IMap< data.Node, String >) as! map.IMap< data.Node, String >).set(node, name12)
					if(name12 == null) throw new HaxeError('name is null for ' + Std.string(node))
					if(((GenC.parentNames as! map.IMap< data.Node, String >) as! map.IMap< data.Node, String >).get(node) == null) throw new HaxeError('parentNames[node] is null for ' + Std.string(node))
					if(t4 != null) r = GenC.extractTypeName(t4)
					if(t4 == null) r = 'auto'
					r += ' ' + name12 + es
					tmp = r
				}

				case 21: {
					let data.Node.TVars(e19) = node
					var _g9: [String] = {[]}
					{
						var _g18: Int = 0
						while(_g18 < e19.length) {
							var e20: data.Node = e19[_g18]
							_g18++
							_g9.push(GenC.stringify(e20))
						}
					}
					tmp = _g9.join('; ')
				}

				case 22: if({ let data.Node.TClass(_, _, _, _, value) = node value } == true) {
					let data.Node.TClass(t5, _, _, _, _) = node
					let data.Node.TClass(_, ext, _, _, _) = node
					let data.Node.TClass(_, _, impl, _, _) = node
					let data.Node.TClass(_, _, _, fields, _) = node
					var cname: String = GenC.extractTypeName(t5)
					var require: data.Attribute = GenC.getAtt(data.Project.mapAttributes.get(node), 'require')
					if(require != null) {
						var _g10: data.Node = require.values[1]
						var _g19: data.Node = require.values[0]
						if(_g19.index == 0) {
							if(_g10 == null) {
								let data.Node.TString(s5) = _g19
								r += 'const ' + cname + ' = require("' + s5 + '");\n' + GenC.tabs
							} else if(_g10.index == 0) {
								let data.Node.TString(s6) = _g19
								let data.Node.TString(f1) = _g10
								r += 'const ' + cname + ' = require("' + s6 + '").' + f1 + ';\n' + GenC.tabs
							} else throw new HaxeError('@require takes string as argument')
						} else throw new HaxeError('@require takes string as argument')
					}
					r += '/* declare class ' + cname + ' */'
					tmp = r
				} else {
					let data.Node.TClass(t6, _, _, _, _) = node
					let data.Node.TClass(_, ext1, _, _, _) = node
					let data.Node.TClass(_, _, impl1, _, _) = node
					let data.Node.TClass(_, _, _, fields1, _) = node
					let data.Node.TClass(_, _, _, _, external) = node
					var cname1: String = GenC.extractTypeName(t6)
					r = (if(external) '/* declare class ' else 'class ') + cname1
					if(ext1 != null) r += ' extends ' + GenC.extractTypeName(ext1)
					r += ' {\n'
					var after: [String] = {[]}
					{
						var _g20: Int = 0
						while(_g20 < fields1.length) {
							var f2: data.Node = fields1[_g20]
							_g20++
							var code: String = ''
							var statics: Bool = false
							var unmeta: data.Node=>data.Node = function(f3: data.Node): data.Node {
								return f3
							}
							f2 = unmeta(f2)
							if(f2.index == 40) {
								let data.Node.TStatic(field) = f2
								{
									f2 = field
									statics = true
								}
							}
							f2 = unmeta(f2)
							switch (f2.index) {
								case 19: {
									let data.Node.TFunction(_, _, _, rettype1) = f2
									let data.Node.TFunction(_, _, vars1, _) = f2
									let data.Node.TFunction(_, expr2, _, _) = f2
									let data.Node.TFunction(name13, _, _, _) = f2
									{
										if(name13 == 'new') name13 = 'constructor'
										if(statics) code += cname1 + '.' + GenC.rename(name13) + ' = function' else code += '\t' + GenC.rename(name13)
										var _g22: [String] = {[]}
										{
											var _g31: Int = 0
											while(_g31 < vars1.length) {
												var v1: data.Node = vars1[_g31]
												_g31++
												var code1: String
												if(v1.index == 20) {
													let data.Node.TVar(name14, _, _, _) = v1
													var name15: String = GenC.rename(name14)
													((GenC.parentNames as! map.IMap< data.Node, String >) as! map.IMap< data.Node, String >).set(v1, name15)
													code1 = name15
												} else throw new HaxeError(v1)
												_g22.push(@ast(ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:369: characters 16-17) }), pos => #pos(bootstrap/GenC.hx:369: characters 15-18) },[{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:371: characters 20-24) },rename), pos => #pos(bootstrap/GenC.hx:371: characters 20-31) },[]), pos => #pos(bootstrap/GenC.hx:371: characters 20-33) }, name => name, type => null, ??? => #pos(bootstrap/GenC.hx:371: characters 13-17) }]), pos => #pos(bootstrap/GenC.hx:371: characters 9-34) },{ expr => EBinop(OpAssign,{ expr => EArray({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenC.hx:372: characters 9-20) },{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:372: characters 21-22) }), pos => #pos(bootstrap/GenC.hx:372: characters 9-23) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:372: characters 26-30) }), pos => #pos(bootstrap/GenC.hx:372: characters 9-30) }]), pos => #pos(bootstrap/GenC.hx:370: lines 370-372) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenC.hx:370: characters 14-18) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:370: characters 19-23) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:370: characters 25-26) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:370: characters 28-29) }]), pos => #pos(bootstrap/GenC.hx:370: characters 14-30) }], pos => #pos(bootstrap/GenC.hx:370: lines 370-372), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:373: characters 23-24) }), pos => #pos(bootstrap/GenC.hx:373: characters 17-22) }]), pos => #pos(bootstrap/GenC.hx:373: characters 9-22) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:373: characters 14-15) }], pos => #pos(bootstrap/GenC.hx:373: characters 9-22), guard => null }],null)) code1)
											}
										}
										code += '(' + _g22.join(', ') + ') '
										if(expr2 != null) {
											if(expr2.index == 9) {
												let data.Node.TBlock(el7) = expr2
												{
													GenC.tabs += '\t'
													code += GenC.stringify(expr2)
													GenC.tabs = GenC.tabs.substring(0, GenC.tabs.length - 1)
												}
											} else {
												GenC.tabs += '\t'
												code += '{\n' + GenC.tabs + GenC.stringify(expr2)
												GenC.tabs = GenC.tabs.substring(0, GenC.tabs.length - 1)
												code += '\n' + GenC.tabs + '}'
											}
										} else code += '{}'
									}
								}

								case 20: {
									let data.Node.TVar(_, _, expr3, _) = f2
									let data.Node.TVar(_, t7, _, _) = f2
									let data.Node.TVar(name16, _, _, _) = f2
									code += cname1 + '.' + GenC.rename(name16) + ' = ' + GenC.stringify(expr3)
								}
								
								case _: code += '' + Std.string(f2)
							}
							if(statics) after.push(GenC.tabs + code) else r += '\t' + code
						}
					}
					r += '\n' + GenC.tabs + '}' + (if(external) ' */' else '')
					r += '\n' + after.join(';\n')
					tmp = r
				}

				case 23: {
					let data.Node.TTry(_, _, _, catches) = node
					let data.Node.TTry(_, _, v2, _) = node
					let data.Node.TTry(_, t8, _, _) = node
					let data.Node.TTry(expr4, _, _, _) = node
					r = 'try {\n' + GenC.tabs + '\t'
					GenC.tabs += '\t'
					if(expr4.index == 9) {
						let data.Node.TBlock(el8) = expr4
						var _g110: [String] = {[]}
						{
							var _g23: Int = 0
							while(_g23 < el8.length) {
								var e21: data.Node = el8[_g23]
								_g23++
								_g110.push(GenC.stringifyBlockExpression(e21))
							}
						}
						r += _g110.join(';\n' + GenC.tabs)
					} else r += GenC.stringify(expr4)
					GenC.tabs = GenC.tabs.substring(0, GenC.tabs.length - 1)
					r += '\n' + GenC.tabs + '} catch(' + data.DataHelper.varName(v2[0]) + (') {\n' + GenC.tabs + '\t')
					GenC.tabs += '\t'
					{
						var this1: map.IMap< data.Node, String > = GenC.parentNames
						var value: String = data.DataHelper.varName(v2[0])
						(this1 as! map.IMap< data.Node, String >).set(v2[0], value)
					}
					{
						var _g24: data.Node = catches[0]
						if(_g24.index == 9) {
							let data.Node.TBlock(el9) = _g24
							var _g111: [String] = {[]}
							{
								var _g25: Int = 0
								while(_g25 < el9.length) {
									var e22: data.Node = el9[_g25]
									_g25++
									_g111.push(GenC.stringify(e22))
								}
							}
							r += _g111.join(';\n' + GenC.tabs)
						} else r += GenC.stringify(catches[0])
					}
					GenC.tabs = GenC.tabs.substring(0, GenC.tabs.length - 1)
					tmp = r + '\n' + GenC.tabs + '}'
				}

				case 24: if({ let data.Node.TDot(value, _) = node value }.index == 0) {
					if({ let data.Node.TDot(_, value) = node value } == 'length') {
						let data.Node.TString(s7) = { let data.Node.TDot(value, _) = node value }
						tmp = '' + s7.length
					} else {
						let data.Node.TDot(expr5, _) = node
						let data.Node.TDot(_, name17) = node
						log.trace('.`' + name17 + '`', {fileName: 'GenC.hx', lineNumber: 227, className: 'GenC', methodName: 'stringify'})
						var parent: data.Node = data.Project.mapNames.get(expr5)
						if(parent.index == 32) {
							let data.Node.TEnum(_, fields2) = parent
							var v3: String = ''
							{
								var _g26: Int = 0
								while(_g26 < fields2.length) {
									var f4: data.Node = fields2[_g26]
									_g26++
									if(f4.index == 8) {
										if({ let data.Node.TBinop(value, _, _) = f4 value } == 91) {
											if({ let data.Node.TBinop(_, value, _) = f4 value }.index == 1) {
												if({ let data.Node.TBinop(_, _, value) = f4 value }.index == 5) {
													let data.Node.TIdent(n2) = { let data.Node.TBinop(_, value, _) = f4 value }
													let data.Node.TInt(value1) = { let data.Node.TBinop(_, _, value) = f4 value }
													if(name17 == n2) v3 = '' + value1
												} else throw new HaxeError('' + Std.string(f4))
											} else throw new HaxeError('' + Std.string(f4))
										} else throw new HaxeError('' + Std.string(f4))
									} else throw new HaxeError('' + Std.string(f4))
								}
							}
							tmp = v3
						} else tmp = GenC.stringify(expr5) + '.' + name17
					}
				} else {
					let data.Node.TDot(_, name18) = node
					let data.Node.TDot(expr6, _) = node
					log.trace('.`' + name18 + '`', {fileName: 'GenC.hx', lineNumber: 227, className: 'GenC', methodName: 'stringify'})
					var parent1: data.Node = data.Project.mapNames.get(expr6)
					if(parent1.index == 32) {
						let data.Node.TEnum(_, fields3) = parent1
						var v4: String = ''
						{
							var _g27: Int = 0
							while(_g27 < fields3.length) {
								var f5: data.Node = fields3[_g27]
								_g27++
								if(f5.index == 8) {
									if({ let data.Node.TBinop(value, _, _) = f5 value } == 91) {
										if({ let data.Node.TBinop(_, value, _) = f5 value }.index == 1) {
											if({ let data.Node.TBinop(_, _, value) = f5 value }.index == 5) {
												let data.Node.TIdent(n3) = { let data.Node.TBinop(_, value, _) = f5 value }
												let data.Node.TInt(value2) = { let data.Node.TBinop(_, _, value) = f5 value }
												if(name18 == n3) v4 = '' + value2
											} else throw new HaxeError('' + Std.string(f5))
										} else throw new HaxeError('' + Std.string(f5))
									} else throw new HaxeError('' + Std.string(f5))
								} else throw new HaxeError('' + Std.string(f5))
							}
						}
						tmp = v4
					} else tmp = GenC.stringify(expr6) + '.' + name18
				}

				case 25: {
					let data.Node.TNew(_, _, _, values) = node
					let data.Node.TNew(_, _, names, _) = node
					let data.Node.TNew(_, args, _, _) = node
					let data.Node.TNew(t9, _, _, _) = node
					var tmp6: String = 'new ' + GenC.extractTypeName(t9) + '('
					var _g28: [String] = {[]}
					{
						var _g112: Int = 0
						while(_g112 < args.length) {
							var e23: data.Node = args[_g112]
							_g112++
							_g28.push(GenC.stringify(e23))
						}
					}
					tmp = tmp6 + _g28.join(',') + ')'
				}

				case 26: {
					let data.Node.TArray(el10) = node
					var _g29: [String] = {[]}
					{
						var _g113: Int = 0
						while(_g113 < el10.length) {
							var e24: data.Node = el10[_g113]
							_g113++
							_g29.push(GenC.stringify(e24))
						}
					}
					tmp = '[' + _g29.join(',') + ']'
				}

				case 27: if({ let data.Node.TMap(value, _) = node value }.length == 0) tmp = 'new Map()' else {
					let data.Node.TMap(_, values1) = node
					let data.Node.TMap(keys, _) = node
					var _g30: [String] = {[]}
					{
						var _g210: Int = 0
						var _g114: Int = keys.length
						while(_g210 < _g114) {
							var i: Int = _g210++
							_g30.push('[' + GenC.stringify(keys[i]) + ',' + GenC.stringify(values1[i]) + ']')
						}
					}
					tmp = 'new Map([' + _g30.join(',') + '])'
				}

				case 28: {
					let data.Node.TIndex(_, index) = node
					let data.Node.TIndex(expr7, _) = node
					tmp = GenC.stringify(expr7) + '[' + GenC.stringify(index) + ']'
				}

				case 29: {
					let data.Node.TSwitch(_, _, cases) = node
					let data.Node.TSwitch(_, conds, _) = node
					let data.Node.TSwitch(exprs, _, _) = node
					r = 'switch ('
					r += GenC.stringify(exprs[0])
					r += ') {\n'
					GenC.tabs += '\t'
					{
						var _g115: Int = 0
						var _g32: Int = cases.length
						while(_g115 < _g32) {
							var i1: Int = _g115++
							var c: data.Node = cases[i1]
							r += GenC.tabs
							{
								var _g211: Int = 0
								var _g33: [data.Node] = conds[i1]
								while(_g211 < _g33.length) {
									var c1: data.Node = _g33[_g211]
									_g211++
									if(c1.index == 39) r += 'default:' else r += 'case ' + GenC.stringify(c1) + ':'
								}
							}
							r += ' {\n'
							r += GenC.tabs + '\t' + GenC.stringify(c) + ';\n'
							r += GenC.tabs + ('\tbreak;\n' + GenC.tabs + ';}\n')
						}
					}
					GenC.tabs = GenC.tabs.substring(0, GenC.tabs.length - 1)
					tmp = r + GenC.tabs + '}'
				}

				case 30: {
					let data.Node.TModule(_, el11) = node
					let data.Node.TModule(path, _) = node
					r = 'module ' + path.join('.') + ' {\n'
					GenC.tabs += '\t'
					{
						var _g34: Int = 0
						while(_g34 < el11.length) {
							var e25: data.Node = el11[_g34]
							_g34++
							r += GenC.tabs + GenC.stringify(e25) + ';\n'
						}
					}
					GenC.tabs = GenC.tabs.substring(0, GenC.tabs.length - 1)
					tmp = r + GenC.tabs + '}'
				}

				case 31: if({ let data.Node.TObject(value, _) = node value }.length == 0) tmp = '{}' else {
					let data.Node.TObject(_, el12) = node
					let data.Node.TObject(names1, _) = node
					var _g35: [String] = {[]}
					{
						var _g212: Int = 0
						var _g116: Int = el12.length
						while(_g212 < _g116) {
							var i2: Int = _g212++
							_g35.push(GenC.rename(names1[i2]) + ':' + GenC.stringify(el12[i2]))
						}
					}
					tmp = '{' + _g35.join(',') + '}'
				}

				case 32: {
					let data.Node.TEnum(_, fields4) = node
					let data.Node.TEnum(t10, _) = node
					r = '/*const ' + GenC.extractTypeName(t10)
					r += ' = {\n'
					GenC.tabs += '\t'
					{
						var _g36: Int = 0
						while(_g36 < fields4.length) {
							var f6: data.Node = fields4[_g36]
							_g36++
							switch (f6.index) {
								case 1: {
									let data.Node.TIdent(name19) = f6
									r += GenC.tabs + name19 + ':{},\n'
								}

								case 8: if({ let data.Node.TBinop(value, _, _) = f6 value } == 91) {
									if({ let data.Node.TBinop(_, value, _) = f6 value }.index == 1) {
										let data.Node.TBinop(_, _, val) = f6
										let data.Node.TIdent(name20) = { let data.Node.TBinop(_, value, _) = f6 value }
										r += GenC.tabs + name20 + ':' + GenC.stringify(val) + ',\n'
									} else throw new HaxeError('!' + Std.string(f6))
								} else throw new HaxeError('!' + Std.string(f6))
								
								case _: throw new HaxeError('!' + Std.string(f6))
							}
						}
					}
					GenC.tabs = GenC.tabs.substring(0, GenC.tabs.length - 1)
					tmp = r + GenC.tabs + '}*/'
				}

				case 33: {
					let data.Node.TEnumExtract(_, _, name21) = node
					let data.Node.TEnumExtract(_, extract, _) = node
					let data.Node.TEnumExtract(tenum, _, _) = node
					tmp = '/*tenumxtract*/'
				}

				case 34: {
					let data.Node.TType(_, t12) = node
					let data.Node.TType(name22, _) = node
					tmp = ''
				}

				case 35: {
					let data.Node.TDeclare(_, node1) = node
					let data.Node.TDeclare(name23, _) = node
					((GenC.parentNames as! map.IMap< data.Node, String >) as! map.IMap< data.Node, String >).set(node1, name23)
					data.Project.isExternal.set(node1, true)
					tmp = '//declare ' + name23
				}

				case 36: {
					let data.Node.TUsing(names2) = node
					tmp = '/*using ' + Std.string(names2) + '*/'
				}

				case 37: {
					let data.Node.TIs(_, t13) = node
					let data.Node.TIs(expr8, _) = node
					tmp = ''
				}

				case 38: {
					let data.Node.TAs(_, _, t14) = node
					let data.Node.TAs(_, kind, _) = node
					let data.Node.TAs(expr9, _, _) = node
					tmp = '((' + GenC.extractTypeName(t14) + ')(' + GenC.stringify(expr9) + '))'
				}

				case 39: tmp = '_'

				case 40: {
					let data.Node.TStatic(field1) = node
					tmp = 'static ' + GenC.stringify(field1)
				}

				case 41: {
					let data.Node.TFor(_, _, b1) = node
					let data.Node.TFor(_, a3, _) = node
					let data.Node.TFor(n4, _, _) = node
					var name24: String = GenC.rename(n4)
					if(GenC.hasInScope(name24)) name24 += '$' + ++GenC.id
					GenC.addToScope(name24)
					((GenC.parentNames as! map.IMap< data.Node, String >) as! map.IMap< data.Node, String >).set(node, name24)
					tmp = 'for(const ' + GenC.rename(name24) + ' of ' + GenC.stringify(a3) + ') ' + GenC.stringify(b1)
				}

				case 42: {
					let data.Node.TElvis(_, b2) = node
					let data.Node.TElvis(a4, _) = node
					tmp = GenC.stringify(a4) + '||' + GenC.stringify(b2)
				}

				case 43: {
					let data.Node.NodeTypeValue(type1) = node
					tmp = GenC.extractTypeName(type1)
				}
			}
			return a + @ast(ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenC.hx:108: characters 21-25) }), pos => #pos(bootstrap/GenC.hx:108: characters 20-26) },[{ expr => { expr => EBlock([{ expr => EConst(CString(/*tenumxtract*/)), pos => #pos(bootstrap/GenC.hx:110: characters 43-60) }]), pos => #pos(bootstrap/GenC.hx:110: characters 2-60) }, values => [{ expr => ECall({ expr => EConst(CIdent(TEnumExtract)), pos => #pos(bootstrap/GenC.hx:110: characters 7-19) },[{ expr => EConst(CIdent(tenum)), pos => #pos(bootstrap/GenC.hx:110: characters 20-25) },{ expr => EConst(CIdent(extract)), pos => #pos(bootstrap/GenC.hx:110: characters 27-34) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:110: characters 36-40) }]), pos => #pos(bootstrap/GenC.hx:110: characters 7-41) }], pos => #pos(bootstrap/GenC.hx:110: characters 2-60), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(/*using $names*/)), pos => #pos(bootstrap/GenC.hx:112: characters 22-40) }]), pos => #pos(bootstrap/GenC.hx:112: characters 2-40) }, values => [{ expr => ECall({ expr => EConst(CIdent(TUsing)), pos => #pos(bootstrap/GenC.hx:112: characters 7-13) },[{ expr => EConst(CIdent(names)), pos => #pos(bootstrap/GenC.hx:112: characters 14-19) }]), pos => #pos(bootstrap/GenC.hx:112: characters 7-20) }], pos => #pos(bootstrap/GenC.hx:112: characters 2-40), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:113: characters 22-23) },{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:113: characters 27-28) }), pos => #pos(bootstrap/GenC.hx:113: characters 22-28) },{ expr => ECall({ expr => EConst(CIdent(stringify)), pos => #pos(bootstrap/GenC.hx:113: characters 30-39) },[{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:113: characters 40-41) }]), pos => #pos(bootstrap/GenC.hx:113: characters 30-42) }), pos => #pos(bootstrap/GenC.hx:113: characters 18-42) }]), pos => #pos(bootstrap/GenC.hx:113: characters 17-43) },join), pos => #pos(bootstrap/GenC.hx:113: characters 17-48) },[{ expr => EConst(CString(; )), pos => #pos(bootstrap/GenC.hx:113: characters 49-53) }]), pos => #pos(bootstrap/GenC.hx:113: characters 17-54) }]), pos => #pos(bootstrap/GenC.hx:113: characters 2-54) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVars)), pos => #pos(bootstrap/GenC.hx:113: characters 7-12) },[{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:113: characters 13-14) }]), pos => #pos(bootstrap/GenC.hx:113: characters 7-15) }], pos => #pos(bootstrap/GenC.hx:113: characters 2-54), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(L")), pos => #pos(bootstrap/GenC.hx:116: characters 19-24) },{ expr => ECall({ expr => EField({ expr => ECall({ expr => EField({ expr => ECall({ expr => EField({ expr => ECall({ expr => EField({ expr => ECall({ expr => EField({ expr => ECall({ expr => EField({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenC.hx:117: characters 2-3) },split), pos => #pos(bootstrap/GenC.hx:117: lines 117-118) },[{ expr => EConst(CString(
)), pos => #pos(bootstrap/GenC.hx:118: characters 9-13) }]), pos => #pos(bootstrap/GenC.hx:117: lines 117-118) },join), pos => #pos(bootstrap/GenC.hx:117: lines 117-118) },[{ expr => EConst(CString(\n)), pos => #pos(bootstrap/GenC.hx:118: characters 20-25) }]), pos => #pos(bootstrap/GenC.hx:117: lines 117-118) },split), pos => #pos(bootstrap/GenC.hx:117: lines 117-119) },[{ expr => EConst(CString()), pos => #pos(bootstrap/GenC.hx:119: characters 9-13) }]), pos => #pos(bootstrap/GenC.hx:117: lines 117-119) },join), pos => #pos(bootstrap/GenC.hx:117: lines 117-119) },[{ expr => EConst(CString(\r)), pos => #pos(bootstrap/GenC.hx:119: characters 20-25) }]), pos => #pos(bootstrap/GenC.hx:117: lines 117-119) },split), pos => #pos(bootstrap/GenC.hx:117: lines 117-120) },[{ expr => EConst(CString(")), pos => #pos(bootstrap/GenC.hx:120: characters 9-13) }]), pos => #pos(bootstrap/GenC.hx:117: lines 117-120) },join), pos => #pos(bootstrap/GenC.hx:117: lines 117-120) },[{ expr => EConst(CString(\")), pos => #pos(bootstrap/GenC.hx:120: characters 20-26) }]), pos => #pos(bootstrap/GenC.hx:117: lines 117-120) }), pos => #pos(bootstrap/GenC.hx:116: lines 116-120) },{ expr => EConst(CString(")), pos => #pos(bootstrap/GenC.hx:121: characters 3-7) }), pos => #pos(bootstrap/GenC.hx:116: lines 116-121) }]), pos => #pos(bootstrap/GenC.hx:116: lines 116-121) }, values => [{ expr => ECall({ expr => EConst(CIdent(TString)), pos => #pos(bootstrap/GenC.hx:116: characters 7-14) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenC.hx:116: characters 15-16) }]), pos => #pos(bootstrap/GenC.hx:116: characters 7-17) }], pos => #pos(bootstrap/GenC.hx:116: lines 116-121), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(trace)), pos => #pos(bootstrap/GenC.hx:123: characters 3-8) },[{ expr => EConst(CString(`$s`)), pos => #pos(bootstrap/GenC.hx:123: characters 9-15) }]), pos => #pos(bootstrap/GenC.hx:123: characters 3-16) },{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EField({ expr => EConst(CIdent(Project)), pos => #pos(bootstrap/GenC.hx:125: characters 16-23) },mapNames), pos => #pos(bootstrap/GenC.hx:125: characters 16-32) },get), pos => #pos(bootstrap/GenC.hx:125: characters 16-36) },[{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenC.hx:125: characters 37-41) }]), pos => #pos(bootstrap/GenC.hx:125: characters 16-42) }, name => source, type => null, ??? => #pos(bootstrap/GenC.hx:125: characters 7-13) }]), pos => #pos(bootstrap/GenC.hx:125: characters 3-43) },{ expr => EVars([{ expr => { expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenC.hx:126: characters 18-24) }), pos => #pos(bootstrap/GenC.hx:126: characters 17-25) },[{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CString(Unmapped $node)), pos => #pos(bootstrap/GenC.hx:127: characters 21-37) }), pos => #pos(bootstrap/GenC.hx:127: characters 15-20) }]), pos => #pos(bootstrap/GenC.hx:127: characters 4-20) }, values => [{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:127: characters 9-13) }], pos => #pos(bootstrap/GenC.hx:127: characters 4-20), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:128: characters 31-35) }]), pos => #pos(bootstrap/GenC.hx:128: characters 4-35) }, values => [{ expr => ECall({ expr => EConst(CIdent(TEnum)), pos => #pos(bootstrap/GenC.hx:128: characters 9-14) },[{ expr => ECall({ expr => EConst(CIdent(Type)), pos => #pos(bootstrap/GenC.hx:128: characters 15-19) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:128: characters 20-24) }]), pos => #pos(bootstrap/GenC.hx:128: characters 15-25) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:128: characters 27-28) }]), pos => #pos(bootstrap/GenC.hx:128: characters 9-29) }], pos => #pos(bootstrap/GenC.hx:128: characters 4-35), guard => null },{ expr => { expr => EBlock([{ expr => EArray({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenC.hx:129: characters 27-38) },{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenC.hx:129: characters 39-45) }), pos => #pos(bootstrap/GenC.hx:129: characters 27-46) }]), pos => #pos(bootstrap/GenC.hx:129: characters 4-46) }, values => [{ expr => ECall({ expr => EConst(CIdent(TFor)), pos => #pos(bootstrap/GenC.hx:129: characters 9-13) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:129: characters 14-18) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:129: characters 20-21) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:129: characters 23-24) }]), pos => #pos(bootstrap/GenC.hx:129: characters 9-25) }], pos => #pos(bootstrap/GenC.hx:129: characters 4-46), guard => null },{ expr => { expr => EBlock([{ expr => EArray({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenC.hx:130: characters 23-34) },{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenC.hx:130: characters 35-41) }), pos => #pos(bootstrap/GenC.hx:130: characters 23-42) }]), pos => #pos(bootstrap/GenC.hx:130: characters 4-42) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenC.hx:130: characters 9-15) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:130: characters 16-20) }]), pos => #pos(bootstrap/GenC.hx:130: characters 9-21) }], pos => #pos(bootstrap/GenC.hx:130: characters 4-42), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => EArray({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenC.hx:132: characters 13-24) },{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenC.hx:132: characters 25-31) }), pos => #pos(bootstrap/GenC.hx:132: characters 13-32) }, name => n, type => null, ??? => #pos(bootstrap/GenC.hx:132: characters 9-10) }]), pos => #pos(bootstrap/GenC.hx:132: characters 5-33) },{ expr => EIf({ expr => EBinop(OpEq,{ expr => EConst(CIdent(n)), pos => #pos(bootstrap/GenC.hx:133: characters 8-9) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:133: characters 11-15) }), pos => #pos(bootstrap/GenC.hx:133: characters 8-15) },{ expr => EThrow({ expr => EBinop(OpAdd,{ expr => EConst(CString(TVar $name parentNames null == )), pos => #pos(bootstrap/GenC.hx:133: characters 23-56) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenC.hx:133: characters 57-68) },get), pos => #pos(bootstrap/GenC.hx:133: characters 57-72) },[{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenC.hx:133: characters 73-79) }]), pos => #pos(bootstrap/GenC.hx:133: characters 57-80) }), pos => #pos(bootstrap/GenC.hx:133: characters 23-80) }), pos => #pos(bootstrap/GenC.hx:133: characters 17-22) },null), pos => #pos(bootstrap/GenC.hx:133: characters 5-22) },{ expr => EConst(CIdent(n)), pos => #pos(bootstrap/GenC.hx:134: characters 5-6) }]), pos => #pos(bootstrap/GenC.hx:131: lines 131-134) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenC.hx:131: characters 9-13) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:131: characters 14-18) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:131: characters 20-21) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:131: characters 23-24) }]), pos => #pos(bootstrap/GenC.hx:131: characters 9-25) }], pos => #pos(bootstrap/GenC.hx:131: lines 131-134), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EField({ expr => EConst(CIdent(Project)), pos => #pos(bootstrap/GenC.hx:136: characters 24-31) },mapNames), pos => #pos(bootstrap/GenC.hx:136: characters 24-40) },get), pos => #pos(bootstrap/GenC.hx:136: characters 24-44) },[{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenC.hx:136: characters 45-51) }]), pos => #pos(bootstrap/GenC.hx:136: characters 24-52) }, name => static_source, type => null, ??? => #pos(bootstrap/GenC.hx:136: characters 8-21) }]), pos => #pos(bootstrap/GenC.hx:136: characters 4-53) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(static_source)), pos => #pos(bootstrap/GenC.hx:137: characters 12-25) }), pos => #pos(bootstrap/GenC.hx:137: characters 11-26) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => ECall({ expr => EField({ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:139: characters 6-7) },extractTypeName), pos => #pos(bootstrap/GenC.hx:139: characters 6-23) },[]), pos => #pos(bootstrap/GenC.hx:139: characters 6-25) },rename), pos => #pos(bootstrap/GenC.hx:139: characters 6-32) },[]), pos => #pos(bootstrap/GenC.hx:139: characters 6-34) },{ expr => EConst(CString(.)), pos => #pos(bootstrap/GenC.hx:139: characters 37-40) }), pos => #pos(bootstrap/GenC.hx:139: characters 6-40) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:139: characters 43-47) },rename), pos => #pos(bootstrap/GenC.hx:139: characters 43-54) },[]), pos => #pos(bootstrap/GenC.hx:139: characters 43-56) }), pos => #pos(bootstrap/GenC.hx:139: characters 6-56) }]), pos => #pos(bootstrap/GenC.hx:138: lines 138-139) }, values => [{ expr => ECall({ expr => EConst(CIdent(TClass)), pos => #pos(bootstrap/GenC.hx:138: characters 10-16) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:138: characters 17-18) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:138: characters 20-21) }]), pos => #pos(bootstrap/GenC.hx:138: characters 10-22) },{ expr => ECall({ expr => EConst(CIdent(TEnum)), pos => #pos(bootstrap/GenC.hx:138: characters 24-29) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:138: characters 30-31) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:138: characters 32-33) }]), pos => #pos(bootstrap/GenC.hx:138: characters 24-34) }], pos => #pos(bootstrap/GenC.hx:138: lines 138-139), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CString(static_source is $static_source)), pos => #pos(bootstrap/GenC.hx:140: characters 19-52) }), pos => #pos(bootstrap/GenC.hx:140: characters 13-18) }]), pos => #pos(bootstrap/GenC.hx:140: characters 5-18) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:140: characters 10-11) }], pos => #pos(bootstrap/GenC.hx:140: characters 5-18), guard => null }],null), pos => #pos(bootstrap/GenC.hx:137: lines 137-141) }]), pos => #pos(bootstrap/GenC.hx:135: lines 135-141) }, values => [{ expr => ECall({ expr => EConst(CIdent(TStatic)), pos => #pos(bootstrap/GenC.hx:135: characters 9-16) },[{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenC.hx:135: characters 17-18) },{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenC.hx:135: characters 21-25) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:135: characters 26-30) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:135: characters 32-33) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:135: characters 35-36) }]), pos => #pos(bootstrap/GenC.hx:135: characters 21-37) }), pos => #pos(bootstrap/GenC.hx:135: characters 17-37) }]), pos => #pos(bootstrap/GenC.hx:135: characters 9-38) }], pos => #pos(bootstrap/GenC.hx:135: lines 135-141), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:142: characters 29-33) },rename), pos => #pos(bootstrap/GenC.hx:142: characters 29-40) },[]), pos => #pos(bootstrap/GenC.hx:142: characters 29-42) }]), pos => #pos(bootstrap/GenC.hx:142: characters 4-42) }, values => [{ expr => ECall({ expr => EConst(CIdent(TFunction)), pos => #pos(bootstrap/GenC.hx:142: characters 9-18) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:142: characters 19-23) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:142: characters 25-26) }]), pos => #pos(bootstrap/GenC.hx:142: characters 9-27) }], pos => #pos(bootstrap/GenC.hx:142: characters 4-42), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EConst(CIdent(getAtt)), pos => #pos(bootstrap/GenC.hx:144: characters 18-24) },[{ expr => ECall({ expr => EField({ expr => EField({ expr => EConst(CIdent(Project)), pos => #pos(bootstrap/GenC.hx:144: characters 25-32) },mapAttributes), pos => #pos(bootstrap/GenC.hx:144: characters 25-46) },get), pos => #pos(bootstrap/GenC.hx:144: characters 25-50) },[{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenC.hx:144: characters 51-57) }]), pos => #pos(bootstrap/GenC.hx:144: characters 25-58) },{ expr => EConst(CString(native)), pos => #pos(bootstrap/GenC.hx:144: characters 60-68) }]), pos => #pos(bootstrap/GenC.hx:144: characters 18-69) }, name => rename, type => null, ??? => #pos(bootstrap/GenC.hx:144: characters 9-15) }]), pos => #pos(bootstrap/GenC.hx:144: characters 5-70) },{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => ECall({ expr => EField({ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:145: characters 16-17) },extractTypeName), pos => #pos(bootstrap/GenC.hx:145: characters 16-33) },[]), pos => #pos(bootstrap/GenC.hx:145: characters 16-35) },rename), pos => #pos(bootstrap/GenC.hx:145: characters 16-42) },[]), pos => #pos(bootstrap/GenC.hx:145: characters 16-44) }, name => name, type => null, ??? => #pos(bootstrap/GenC.hx:145: characters 9-13) }]), pos => #pos(bootstrap/GenC.hx:145: characters 5-45) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(rename)), pos => #pos(bootstrap/GenC.hx:146: characters 8-14) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:146: characters 18-22) }), pos => #pos(bootstrap/GenC.hx:146: characters 8-22) },{ expr => ECall({ expr => EConst(CIdent(trace)), pos => #pos(bootstrap/GenC.hx:146: characters 24-29) },[{ expr => EConst(CString(Got @native!)), pos => #pos(bootstrap/GenC.hx:146: characters 30-44) }]), pos => #pos(bootstrap/GenC.hx:146: characters 24-45) },null), pos => #pos(bootstrap/GenC.hx:146: characters 5-45) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(rename)), pos => #pos(bootstrap/GenC.hx:147: characters 8-14) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:147: characters 18-22) }), pos => #pos(bootstrap/GenC.hx:147: characters 8-22) },{ expr => ESwitch({ expr => EParenthesis({ expr => EArray({ expr => EField({ expr => EConst(CIdent(rename)), pos => #pos(bootstrap/GenC.hx:147: characters 32-38) },values), pos => #pos(bootstrap/GenC.hx:147: characters 32-45) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenC.hx:147: characters 46-47) }), pos => #pos(bootstrap/GenC.hx:147: characters 32-48) }), pos => #pos(bootstrap/GenC.hx:147: characters 31-49) },[{ expr => { expr => EBlock([{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:148: characters 17-21) }]), pos => #pos(bootstrap/GenC.hx:148: characters 6-21) }, values => [{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:148: characters 11-15) }], pos => #pos(bootstrap/GenC.hx:148: characters 6-21), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenC.hx:149: characters 23-24) }]), pos => #pos(bootstrap/GenC.hx:149: characters 6-24) }, values => [{ expr => ECall({ expr => EConst(CIdent(TString)), pos => #pos(bootstrap/GenC.hx:149: characters 11-18) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenC.hx:149: characters 19-20) }]), pos => #pos(bootstrap/GenC.hx:149: characters 11-21) }], pos => #pos(bootstrap/GenC.hx:149: characters 6-24), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:150: characters 14-18) }]), pos => #pos(bootstrap/GenC.hx:150: characters 6-18) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:150: characters 11-12) }], pos => #pos(bootstrap/GenC.hx:150: characters 6-18), guard => null }],null), pos => #pos(bootstrap/GenC.hx:147: lines 147-151) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:151: characters 12-16) }), pos => #pos(bootstrap/GenC.hx:147: lines 147-151) }]), pos => #pos(bootstrap/GenC.hx:143: lines 143-151) }, values => [{ expr => ECall({ expr => EConst(CIdent(TClass)), pos => #pos(bootstrap/GenC.hx:143: characters 9-15) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:143: characters 16-17) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:143: characters 19-20) }]), pos => #pos(bootstrap/GenC.hx:143: characters 9-21) }], pos => #pos(bootstrap/GenC.hx:143: lines 143-151), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EBinop(OpAdd,{ expr => EConst(CString($s )), pos => #pos(bootstrap/GenC.hx:153: characters 10-15) },{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenC.hx:153: characters 16-22) }), pos => #pos(bootstrap/GenC.hx:153: characters 10-22) }), pos => #pos(bootstrap/GenC.hx:153: characters 4-9) }]), pos => #pos(bootstrap/GenC.hx:152: lines 152-153) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:152: characters 9-10) }], pos => #pos(bootstrap/GenC.hx:152: lines 152-153), guard => null }],null), pos => #pos(bootstrap/GenC.hx:126: lines 126-154) }, name => n, type => null, ??? => #pos(bootstrap/GenC.hx:126: characters 7-8) }]), pos => #pos(bootstrap/GenC.hx:126: lines 126-154) },{ expr => EIf({ expr => EBinop(OpEq,{ expr => ECall({ expr => EField({ expr => EField({ expr => EConst(CIdent(Project)), pos => #pos(bootstrap/GenC.hx:155: characters 6-13) },isExternal), pos => #pos(bootstrap/GenC.hx:155: characters 6-24) },get), pos => #pos(bootstrap/GenC.hx:155: characters 6-28) },[{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenC.hx:155: characters 29-35) }]), pos => #pos(bootstrap/GenC.hx:155: characters 6-36) },{ expr => EConst(CIdent(true)), pos => #pos(bootstrap/GenC.hx:155: characters 40-44) }), pos => #pos(bootstrap/GenC.hx:155: characters 6-44) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(n)), pos => #pos(bootstrap/GenC.hx:155: characters 46-47) },{ expr => EArray({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenC.hx:155: characters 50-61) },{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenC.hx:155: characters 62-68) }), pos => #pos(bootstrap/GenC.hx:155: characters 50-69) }), pos => #pos(bootstrap/GenC.hx:155: characters 46-69) },null), pos => #pos(bootstrap/GenC.hx:155: characters 3-69) },{ expr => EIf({ expr => EBinop(OpEq,{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenC.hx:156: characters 6-7) },{ expr => EConst(CString(BeginPaint)), pos => #pos(bootstrap/GenC.hx:156: characters 11-23) }), pos => #pos(bootstrap/GenC.hx:156: characters 6-23) },{ expr => ECall({ expr => EConst(CIdent(trace)), pos => #pos(bootstrap/GenC.hx:156: characters 25-30) },[{ expr => EConst(CString(BeginPaint --> $n, parent -> $source)), pos => #pos(bootstrap/GenC.hx:156: characters 31-69) }]), pos => #pos(bootstrap/GenC.hx:156: characters 25-70) },null), pos => #pos(bootstrap/GenC.hx:156: characters 3-70) },{ expr => EConst(CIdent(n)), pos => #pos(bootstrap/GenC.hx:157: characters 3-4) }]), pos => #pos(bootstrap/GenC.hx:122: lines 122-157) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenC.hx:122: characters 7-13) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenC.hx:122: characters 14-15) }]), pos => #pos(bootstrap/GenC.hx:122: characters 7-16) }], pos => #pos(bootstrap/GenC.hx:122: lines 122-157), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(1)), pos => #pos(bootstrap/GenC.hx:158: characters 20-23) }]), pos => #pos(bootstrap/GenC.hx:158: characters 2-23) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBool)), pos => #pos(bootstrap/GenC.hx:158: characters 7-12) },[{ expr => EConst(CIdent(true)), pos => #pos(bootstrap/GenC.hx:158: characters 13-17) }]), pos => #pos(bootstrap/GenC.hx:158: characters 7-18) }], pos => #pos(bootstrap/GenC.hx:158: characters 2-23), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(0)), pos => #pos(bootstrap/GenC.hx:159: characters 21-24) }]), pos => #pos(bootstrap/GenC.hx:159: characters 2-24) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBool)), pos => #pos(bootstrap/GenC.hx:159: characters 7-12) },[{ expr => EConst(CIdent(false)), pos => #pos(bootstrap/GenC.hx:159: characters 13-18) }]), pos => #pos(bootstrap/GenC.hx:159: characters 7-19) }], pos => #pos(bootstrap/GenC.hx:159: characters 2-24), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(this)), pos => #pos(bootstrap/GenC.hx:160: characters 14-20) }]), pos => #pos(bootstrap/GenC.hx:160: characters 2-20) }, values => [{ expr => EConst(CIdent(TThis)), pos => #pos(bootstrap/GenC.hx:160: characters 7-12) }], pos => #pos(bootstrap/GenC.hx:160: characters 2-20), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(super)), pos => #pos(bootstrap/GenC.hx:161: characters 15-22) }]), pos => #pos(bootstrap/GenC.hx:161: characters 2-22) }, values => [{ expr => EConst(CIdent(TSuper)), pos => #pos(bootstrap/GenC.hx:161: characters 7-13) }], pos => #pos(bootstrap/GenC.hx:161: characters 2-22), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenC.hx:162: characters 16-17) }]), pos => #pos(bootstrap/GenC.hx:162: characters 2-17) }, values => [{ expr => ECall({ expr => EConst(CIdent(TInt)), pos => #pos(bootstrap/GenC.hx:162: characters 7-11) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenC.hx:162: characters 12-13) }]), pos => #pos(bootstrap/GenC.hx:162: characters 7-14) }], pos => #pos(bootstrap/GenC.hx:162: characters 2-17), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenC.hx:163: characters 18-19) }]), pos => #pos(bootstrap/GenC.hx:163: characters 2-19) }, values => [{ expr => ECall({ expr => EConst(CIdent(TFloat)), pos => #pos(bootstrap/GenC.hx:163: characters 7-13) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenC.hx:163: characters 14-15) }]), pos => #pos(bootstrap/GenC.hx:163: characters 7-16) }], pos => #pos(bootstrap/GenC.hx:163: characters 2-19), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(NULL)), pos => #pos(bootstrap/GenC.hx:164: characters 14-20) }]), pos => #pos(bootstrap/GenC.hx:164: characters 2-20) }, values => [{ expr => EConst(CIdent(TNull)), pos => #pos(bootstrap/GenC.hx:164: characters 7-12) }], pos => #pos(bootstrap/GenC.hx:164: characters 2-20), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(break)), pos => #pos(bootstrap/GenC.hx:165: characters 15-22) }]), pos => #pos(bootstrap/GenC.hx:165: characters 2-22) }, values => [{ expr => EConst(CIdent(TBreak)), pos => #pos(bootstrap/GenC.hx:165: characters 7-13) }], pos => #pos(bootstrap/GenC.hx:165: characters 2-22), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(continue)), pos => #pos(bootstrap/GenC.hx:166: characters 18-28) }]), pos => #pos(bootstrap/GenC.hx:166: characters 2-28) }, values => [{ expr => EConst(CIdent(TContinue)), pos => #pos(bootstrap/GenC.hx:166: characters 7-16) }], pos => #pos(bootstrap/GenC.hx:166: characters 2-28), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(a)), pos => #pos(bootstrap/GenC.hx:170: characters 3-4) },stringify), pos => #pos(bootstrap/GenC.hx:170: characters 3-14) },[]), pos => #pos(bootstrap/GenC.hx:170: characters 3-16) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(op)), pos => #pos(bootstrap/GenC.hx:170: characters 19-21) },stringify), pos => #pos(bootstrap/GenC.hx:170: characters 19-31) },[]), pos => #pos(bootstrap/GenC.hx:170: characters 19-33) }), pos => #pos(bootstrap/GenC.hx:170: characters 3-33) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(b)), pos => #pos(bootstrap/GenC.hx:170: characters 36-37) },stringify), pos => #pos(bootstrap/GenC.hx:170: characters 36-47) },[]), pos => #pos(bootstrap/GenC.hx:170: characters 36-49) }), pos => #pos(bootstrap/GenC.hx:170: characters 3-49) }]), pos => #pos(bootstrap/GenC.hx:169: lines 169-170) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBinop)), pos => #pos(bootstrap/GenC.hx:169: characters 7-13) },[{ expr => EConst(CIdent(op)), pos => #pos(bootstrap/GenC.hx:169: characters 14-16) },{ expr => EConst(CIdent(a)), pos => #pos(bootstrap/GenC.hx:169: characters 18-19) },{ expr => EConst(CIdent(b)), pos => #pos(bootstrap/GenC.hx:169: characters 21-22) }]), pos => #pos(bootstrap/GenC.hx:169: characters 7-23) }], pos => #pos(bootstrap/GenC.hx:169: lines 169-170), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => EUnop(OpNot,false,{ expr => EConst(CIdent(nowrap)), pos => #pos(bootstrap/GenC.hx:172: characters 15-21) }), pos => #pos(bootstrap/GenC.hx:172: characters 14-21) }, name => wrap, type => null, ??? => #pos(bootstrap/GenC.hx:172: characters 7-11) }]), pos => #pos(bootstrap/GenC.hx:172: characters 3-22) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(nowrap)), pos => #pos(bootstrap/GenC.hx:173: characters 3-9) },{ expr => EConst(CIdent(false)), pos => #pos(bootstrap/GenC.hx:173: characters 12-17) }), pos => #pos(bootstrap/GenC.hx:173: characters 3-17) },{ expr => EIf({ expr => EConst(CIdent(wrap)), pos => #pos(bootstrap/GenC.hx:174: characters 6-10) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:174: characters 12-13) },{ expr => EConst(CString({
)), pos => #pos(bootstrap/GenC.hx:174: characters 16-21) }), pos => #pos(bootstrap/GenC.hx:174: characters 12-21) },null), pos => #pos(bootstrap/GenC.hx:174: characters 3-21) },{ expr => ECall({ expr => EConst(CIdent(pushScope)), pos => #pos(bootstrap/GenC.hx:175: characters 3-12) },[]), pos => #pos(bootstrap/GenC.hx:175: characters 3-14) },{ expr => EIf({ expr => EConst(CIdent(wrap)), pos => #pos(bootstrap/GenC.hx:176: characters 6-10) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenC.hx:176: characters 12-19) },[]), pos => #pos(bootstrap/GenC.hx:176: characters 12-21) },null), pos => #pos(bootstrap/GenC.hx:176: characters 3-21) },{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:177: characters 8-9) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenC.hx:177: characters 13-15) }), pos => #pos(bootstrap/GenC.hx:177: characters 8-15) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:178: characters 11-12) }), pos => #pos(bootstrap/GenC.hx:178: characters 10-13) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:180: characters 13-14) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenC.hx:180: characters 18-22) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:180: characters 25-26) },stringifyBlockExpression), pos => #pos(bootstrap/GenC.hx:180: characters 25-51) },[]), pos => #pos(bootstrap/GenC.hx:180: characters 25-53) }), pos => #pos(bootstrap/GenC.hx:180: characters 18-53) },{ expr => EConst(CString(;
)), pos => #pos(bootstrap/GenC.hx:180: characters 56-61) }), pos => #pos(bootstrap/GenC.hx:180: characters 18-61) }), pos => #pos(bootstrap/GenC.hx:180: characters 13-61) }]), pos => #pos(bootstrap/GenC.hx:180: characters 5-61) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:180: characters 10-11) }], pos => #pos(bootstrap/GenC.hx:180: characters 5-61), guard => null }],null), pos => #pos(bootstrap/GenC.hx:178: lines 178-181) }), pos => #pos(bootstrap/GenC.hx:177: lines 177-181) },{ expr => EIf({ expr => EConst(CIdent(wrap)), pos => #pos(bootstrap/GenC.hx:182: characters 6-10) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenC.hx:182: characters 12-18) },[]), pos => #pos(bootstrap/GenC.hx:182: characters 12-20) },null), pos => #pos(bootstrap/GenC.hx:182: characters 3-20) },{ expr => ECall({ expr => EConst(CIdent(popScope)), pos => #pos(bootstrap/GenC.hx:183: characters 3-11) },[]), pos => #pos(bootstrap/GenC.hx:183: characters 3-13) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:184: characters 3-4) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenC.hx:184: characters 8-12) }), pos => #pos(bootstrap/GenC.hx:184: characters 3-12) },{ expr => EIf({ expr => EConst(CIdent(wrap)), pos => #pos(bootstrap/GenC.hx:185: characters 6-10) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:185: characters 12-13) },{ expr => EConst(CString(})), pos => #pos(bootstrap/GenC.hx:185: characters 17-20) }), pos => #pos(bootstrap/GenC.hx:185: characters 12-20) },null), pos => #pos(bootstrap/GenC.hx:185: characters 3-20) },{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:186: characters 3-4) }]), pos => #pos(bootstrap/GenC.hx:171: lines 171-186) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenC.hx:171: characters 7-13) },[{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenC.hx:171: characters 14-16) }]), pos => #pos(bootstrap/GenC.hx:171: characters 7-17) }], pos => #pos(bootstrap/GenC.hx:171: lines 171-186), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(a)), pos => #pos(bootstrap/GenC.hx:188: characters 21-22) },stringify), pos => #pos(bootstrap/GenC.hx:188: characters 21-32) },[]), pos => #pos(bootstrap/GenC.hx:188: characters 21-34) },{ expr => EConst(CString(||)), pos => #pos(bootstrap/GenC.hx:188: characters 37-41) }), pos => #pos(bootstrap/GenC.hx:188: characters 21-41) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(b)), pos => #pos(bootstrap/GenC.hx:188: characters 44-45) },stringify), pos => #pos(bootstrap/GenC.hx:188: characters 44-55) },[]), pos => #pos(bootstrap/GenC.hx:188: characters 44-57) }), pos => #pos(bootstrap/GenC.hx:188: characters 21-57) }]), pos => #pos(bootstrap/GenC.hx:188: characters 2-57) }, values => [{ expr => ECall({ expr => EConst(CIdent(TElvis)), pos => #pos(bootstrap/GenC.hx:188: characters 7-13) },[{ expr => EConst(CIdent(a)), pos => #pos(bootstrap/GenC.hx:188: characters 14-15) },{ expr => EConst(CIdent(b)), pos => #pos(bootstrap/GenC.hx:188: characters 17-18) }]), pos => #pos(bootstrap/GenC.hx:188: characters 7-19) }], pos => #pos(bootstrap/GenC.hx:188: characters 2-57), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(n)), pos => #pos(bootstrap/GenC.hx:190: characters 14-15) },rename), pos => #pos(bootstrap/GenC.hx:190: characters 14-22) },[]), pos => #pos(bootstrap/GenC.hx:190: characters 14-24) }, name => name, type => null, ??? => #pos(bootstrap/GenC.hx:190: characters 7-11) }]), pos => #pos(bootstrap/GenC.hx:190: characters 3-25) },{ expr => EIf({ expr => ECall({ expr => EConst(CIdent(hasInScope)), pos => #pos(bootstrap/GenC.hx:191: characters 6-16) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:191: characters 17-21) }]), pos => #pos(bootstrap/GenC.hx:191: characters 6-22) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:191: characters 24-28) },{ expr => EBinop(OpAdd,{ expr => EConst(CString($$)), pos => #pos(bootstrap/GenC.hx:191: characters 32-36) },{ expr => EParenthesis({ expr => EUnop(OpIncrement,false,{ expr => EConst(CIdent(id)), pos => #pos(bootstrap/GenC.hx:191: characters 42-44) }), pos => #pos(bootstrap/GenC.hx:191: characters 40-44) }), pos => #pos(bootstrap/GenC.hx:191: characters 39-45) }), pos => #pos(bootstrap/GenC.hx:191: characters 32-45) }), pos => #pos(bootstrap/GenC.hx:191: characters 24-45) },null), pos => #pos(bootstrap/GenC.hx:191: characters 3-45) },{ expr => ECall({ expr => EConst(CIdent(addToScope)), pos => #pos(bootstrap/GenC.hx:192: characters 3-13) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:192: characters 14-18) }]), pos => #pos(bootstrap/GenC.hx:192: characters 3-19) },{ expr => EBinop(OpAssign,{ expr => EArray({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenC.hx:193: characters 3-14) },{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenC.hx:193: characters 15-19) }), pos => #pos(bootstrap/GenC.hx:193: characters 3-20) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:193: characters 23-27) }), pos => #pos(bootstrap/GenC.hx:193: characters 3-27) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(for(const )), pos => #pos(bootstrap/GenC.hx:194: characters 3-15) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:194: characters 18-22) },rename), pos => #pos(bootstrap/GenC.hx:194: characters 18-29) },[]), pos => #pos(bootstrap/GenC.hx:194: characters 18-31) }), pos => #pos(bootstrap/GenC.hx:194: characters 3-31) },{ expr => EConst(CString( of )), pos => #pos(bootstrap/GenC.hx:194: characters 34-40) }), pos => #pos(bootstrap/GenC.hx:194: characters 3-40) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(a)), pos => #pos(bootstrap/GenC.hx:194: characters 43-44) },stringify), pos => #pos(bootstrap/GenC.hx:194: characters 43-54) },[]), pos => #pos(bootstrap/GenC.hx:194: characters 43-56) }), pos => #pos(bootstrap/GenC.hx:194: characters 3-56) },{ expr => EConst(CString() )), pos => #pos(bootstrap/GenC.hx:194: characters 59-63) }), pos => #pos(bootstrap/GenC.hx:194: characters 3-63) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(b)), pos => #pos(bootstrap/GenC.hx:195: characters 5-6) },stringify), pos => #pos(bootstrap/GenC.hx:195: characters 5-16) },[]), pos => #pos(bootstrap/GenC.hx:195: characters 5-18) }), pos => #pos(bootstrap/GenC.hx:194: lines 194-195) }]), pos => #pos(bootstrap/GenC.hx:189: lines 189-195) }, values => [{ expr => ECall({ expr => EConst(CIdent(TFor)), pos => #pos(bootstrap/GenC.hx:189: characters 7-11) },[{ expr => EConst(CIdent(n)), pos => #pos(bootstrap/GenC.hx:189: characters 12-13) },{ expr => EConst(CIdent(a)), pos => #pos(bootstrap/GenC.hx:189: characters 15-16) },{ expr => EConst(CIdent(b)), pos => #pos(bootstrap/GenC.hx:189: characters 18-19) }]), pos => #pos(bootstrap/GenC.hx:189: characters 7-20) }], pos => #pos(bootstrap/GenC.hx:189: lines 189-195), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(of)), pos => #pos(bootstrap/GenC.hx:199: characters 3-5) },stringify), pos => #pos(bootstrap/GenC.hx:199: characters 3-15) },[]), pos => #pos(bootstrap/GenC.hx:199: characters 3-17) },{ expr => EConst(CString( instanceof )), pos => #pos(bootstrap/GenC.hx:199: characters 20-34) }), pos => #pos(bootstrap/GenC.hx:199: characters 3-34) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(type)), pos => #pos(bootstrap/GenC.hx:199: characters 37-41) },stringify), pos => #pos(bootstrap/GenC.hx:199: characters 37-51) },[]), pos => #pos(bootstrap/GenC.hx:199: characters 37-53) }), pos => #pos(bootstrap/GenC.hx:199: characters 3-53) }]), pos => #pos(bootstrap/GenC.hx:198: lines 198-199) }, values => [{ expr => ECall({ expr => EConst(CIdent(TCall)), pos => #pos(bootstrap/GenC.hx:198: characters 7-12) },[{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenC.hx:198: characters 13-19) },[{ expr => EConst(CString(__instanceof__)), pos => #pos(bootstrap/GenC.hx:198: characters 20-36) }]), pos => #pos(bootstrap/GenC.hx:198: characters 13-37) },{ expr => EArrayDecl([{ expr => EConst(CIdent(of)), pos => #pos(bootstrap/GenC.hx:198: characters 40-42) },{ expr => EConst(CIdent(type)), pos => #pos(bootstrap/GenC.hx:198: characters 44-48) }]), pos => #pos(bootstrap/GenC.hx:198: characters 39-49) },{ expr => EConst(CIdent(argNames)), pos => #pos(bootstrap/GenC.hx:198: characters 51-59) }]), pos => #pos(bootstrap/GenC.hx:198: characters 7-60) }], pos => #pos(bootstrap/GenC.hx:198: lines 198-199), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EConst(CString(typeof )), pos => #pos(bootstrap/GenC.hx:201: characters 3-12) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(of)), pos => #pos(bootstrap/GenC.hx:201: characters 15-17) },stringify), pos => #pos(bootstrap/GenC.hx:201: characters 15-27) },[]), pos => #pos(bootstrap/GenC.hx:201: characters 15-29) }), pos => #pos(bootstrap/GenC.hx:201: characters 3-29) }]), pos => #pos(bootstrap/GenC.hx:200: lines 200-201) }, values => [{ expr => ECall({ expr => EConst(CIdent(TCall)), pos => #pos(bootstrap/GenC.hx:200: characters 7-12) },[{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenC.hx:200: characters 13-19) },[{ expr => EConst(CString(__typeof__)), pos => #pos(bootstrap/GenC.hx:200: characters 20-32) }]), pos => #pos(bootstrap/GenC.hx:200: characters 13-33) },{ expr => EArrayDecl([{ expr => EConst(CIdent(of)), pos => #pos(bootstrap/GenC.hx:200: characters 36-38) }]), pos => #pos(bootstrap/GenC.hx:200: characters 35-39) },{ expr => EConst(CIdent(argNames)), pos => #pos(bootstrap/GenC.hx:200: characters 41-49) }]), pos => #pos(bootstrap/GenC.hx:200: characters 7-50) }], pos => #pos(bootstrap/GenC.hx:200: lines 200-201), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString((&)), pos => #pos(bootstrap/GenC.hx:203: characters 3-7) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(of)), pos => #pos(bootstrap/GenC.hx:203: characters 10-12) },stringify), pos => #pos(bootstrap/GenC.hx:203: characters 10-22) },[]), pos => #pos(bootstrap/GenC.hx:203: characters 10-24) }), pos => #pos(bootstrap/GenC.hx:203: characters 3-24) },{ expr => EConst(CString())), pos => #pos(bootstrap/GenC.hx:203: characters 27-30) }), pos => #pos(bootstrap/GenC.hx:203: characters 3-30) }]), pos => #pos(bootstrap/GenC.hx:202: lines 202-203) }, values => [{ expr => ECall({ expr => EConst(CIdent(TCall)), pos => #pos(bootstrap/GenC.hx:202: characters 7-12) },[{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenC.hx:202: characters 13-19) },[{ expr => EConst(CString(refof)), pos => #pos(bootstrap/GenC.hx:202: characters 20-27) }]), pos => #pos(bootstrap/GenC.hx:202: characters 13-28) },{ expr => EArrayDecl([{ expr => EConst(CIdent(of)), pos => #pos(bootstrap/GenC.hx:202: characters 31-33) }]), pos => #pos(bootstrap/GenC.hx:202: characters 30-34) },{ expr => EConst(CIdent(argNames)), pos => #pos(bootstrap/GenC.hx:202: characters 36-44) }]), pos => #pos(bootstrap/GenC.hx:202: characters 7-45) }], pos => #pos(bootstrap/GenC.hx:202: lines 202-203), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:205: characters 31-32) },stringify), pos => #pos(bootstrap/GenC.hx:205: characters 31-42) },[]), pos => #pos(bootstrap/GenC.hx:205: characters 31-44) },{ expr => EConst(CString(()), pos => #pos(bootstrap/GenC.hx:205: characters 47-50) }), pos => #pos(bootstrap/GenC.hx:205: characters 31-50) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:205: characters 59-60) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenC.hx:205: characters 64-66) }), pos => #pos(bootstrap/GenC.hx:205: characters 59-66) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:205: characters 68-69) },stringify), pos => #pos(bootstrap/GenC.hx:205: characters 68-79) },[]), pos => #pos(bootstrap/GenC.hx:205: characters 68-81) }), pos => #pos(bootstrap/GenC.hx:205: characters 54-81) }]), pos => #pos(bootstrap/GenC.hx:205: characters 53-82) },join), pos => #pos(bootstrap/GenC.hx:205: characters 53-87) },[{ expr => EConst(CString(,)), pos => #pos(bootstrap/GenC.hx:205: characters 88-91) }]), pos => #pos(bootstrap/GenC.hx:205: characters 53-92) }), pos => #pos(bootstrap/GenC.hx:205: characters 31-92) },{ expr => EConst(CString())), pos => #pos(bootstrap/GenC.hx:205: characters 95-98) }), pos => #pos(bootstrap/GenC.hx:205: characters 31-98) }]), pos => #pos(bootstrap/GenC.hx:205: characters 2-98) }, values => [{ expr => ECall({ expr => EConst(CIdent(TCall)), pos => #pos(bootstrap/GenC.hx:205: characters 7-12) },[{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:205: characters 13-14) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenC.hx:205: characters 16-18) },{ expr => EConst(CIdent(argNames)), pos => #pos(bootstrap/GenC.hx:205: characters 20-28) }]), pos => #pos(bootstrap/GenC.hx:205: characters 7-29) }], pos => #pos(bootstrap/GenC.hx:205: characters 2-98), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(()), pos => #pos(bootstrap/GenC.hx:206: characters 24-27) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:206: characters 30-31) },stringify), pos => #pos(bootstrap/GenC.hx:206: characters 30-41) },[]), pos => #pos(bootstrap/GenC.hx:206: characters 30-43) }), pos => #pos(bootstrap/GenC.hx:206: characters 24-43) },{ expr => EConst(CString())), pos => #pos(bootstrap/GenC.hx:206: characters 46-49) }), pos => #pos(bootstrap/GenC.hx:206: characters 24-49) }]), pos => #pos(bootstrap/GenC.hx:206: characters 2-49) }, values => [{ expr => ECall({ expr => EConst(CIdent(TParenthesis)), pos => #pos(bootstrap/GenC.hx:206: characters 7-19) },[{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:206: characters 20-21) }]), pos => #pos(bootstrap/GenC.hx:206: characters 7-22) }], pos => #pos(bootstrap/GenC.hx:206: characters 2-49), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(return)), pos => #pos(bootstrap/GenC.hx:207: characters 43-51) }]), pos => #pos(bootstrap/GenC.hx:207: characters 2-51) }, values => [{ expr => ECall({ expr => EConst(CIdent(TReturn)), pos => #pos(bootstrap/GenC.hx:207: characters 7-14) },[{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:207: characters 15-19) }]), pos => #pos(bootstrap/GenC.hx:207: characters 7-20) },{ expr => ECall({ expr => EConst(CIdent(TReturn)), pos => #pos(bootstrap/GenC.hx:207: characters 22-29) },[{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenC.hx:207: characters 30-36) },[{ expr => EArrayDecl([]), pos => #pos(bootstrap/GenC.hx:207: characters 37-39) }]), pos => #pos(bootstrap/GenC.hx:207: characters 30-40) }]), pos => #pos(bootstrap/GenC.hx:207: characters 22-41) }], pos => #pos(bootstrap/GenC.hx:207: characters 2-51), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EConst(CString(return )), pos => #pos(bootstrap/GenC.hx:208: characters 19-28) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:208: characters 31-32) },stringify), pos => #pos(bootstrap/GenC.hx:208: characters 31-42) },[]), pos => #pos(bootstrap/GenC.hx:208: characters 31-44) }), pos => #pos(bootstrap/GenC.hx:208: characters 19-44) }]), pos => #pos(bootstrap/GenC.hx:208: characters 2-44) }, values => [{ expr => ECall({ expr => EConst(CIdent(TReturn)), pos => #pos(bootstrap/GenC.hx:208: characters 7-14) },[{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:208: characters 15-16) }]), pos => #pos(bootstrap/GenC.hx:208: characters 7-17) }], pos => #pos(bootstrap/GenC.hx:208: characters 2-44), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(throw )), pos => #pos(bootstrap/GenC.hx:209: characters 18-26) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:209: characters 29-30) },stringify), pos => #pos(bootstrap/GenC.hx:209: characters 29-40) },[]), pos => #pos(bootstrap/GenC.hx:209: characters 29-42) }), pos => #pos(bootstrap/GenC.hx:209: characters 18-42) },{ expr => EConst(CString()), pos => #pos(bootstrap/GenC.hx:209: characters 45-47) }), pos => #pos(bootstrap/GenC.hx:209: characters 18-47) }]), pos => #pos(bootstrap/GenC.hx:209: characters 2-47) }, values => [{ expr => ECall({ expr => EConst(CIdent(TThrow)), pos => #pos(bootstrap/GenC.hx:209: characters 7-13) },[{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:209: characters 14-15) }]), pos => #pos(bootstrap/GenC.hx:209: characters 7-16) }], pos => #pos(bootstrap/GenC.hx:209: characters 2-47), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString([)), pos => #pos(bootstrap/GenC.hx:210: characters 19-22) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:210: characters 31-32) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenC.hx:210: characters 36-38) }), pos => #pos(bootstrap/GenC.hx:210: characters 31-38) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:210: characters 40-41) },stringify), pos => #pos(bootstrap/GenC.hx:210: characters 40-51) },[]), pos => #pos(bootstrap/GenC.hx:210: characters 40-53) }), pos => #pos(bootstrap/GenC.hx:210: characters 26-53) }]), pos => #pos(bootstrap/GenC.hx:210: characters 25-54) },join), pos => #pos(bootstrap/GenC.hx:210: characters 25-59) },[{ expr => EConst(CString(,)), pos => #pos(bootstrap/GenC.hx:210: characters 60-63) }]), pos => #pos(bootstrap/GenC.hx:210: characters 25-64) }), pos => #pos(bootstrap/GenC.hx:210: characters 19-64) },{ expr => EConst(CString(])), pos => #pos(bootstrap/GenC.hx:210: characters 67-70) }), pos => #pos(bootstrap/GenC.hx:210: characters 19-70) }]), pos => #pos(bootstrap/GenC.hx:210: characters 2-70) }, values => [{ expr => ECall({ expr => EConst(CIdent(TArray)), pos => #pos(bootstrap/GenC.hx:210: characters 7-13) },[{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenC.hx:210: characters 14-16) }]), pos => #pos(bootstrap/GenC.hx:210: characters 7-17) }], pos => #pos(bootstrap/GenC.hx:210: characters 2-70), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(new Map())), pos => #pos(bootstrap/GenC.hx:211: characters 19-30) }]), pos => #pos(bootstrap/GenC.hx:211: characters 2-30) }, values => [{ expr => ECall({ expr => EConst(CIdent(TMap)), pos => #pos(bootstrap/GenC.hx:211: characters 7-11) },[{ expr => EArrayDecl([]), pos => #pos(bootstrap/GenC.hx:211: characters 12-14) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:211: characters 15-16) }]), pos => #pos(bootstrap/GenC.hx:211: characters 7-17) }], pos => #pos(bootstrap/GenC.hx:211: characters 2-30), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(new Map([)), pos => #pos(bootstrap/GenC.hx:213: characters 3-14) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenC.hx:214: characters 8-9) },{ expr => EBinop(OpInterval,{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenC.hx:214: characters 13-17) },{ expr => EField({ expr => EConst(CIdent(keys)), pos => #pos(bootstrap/GenC.hx:214: characters 17-21) },length), pos => #pos(bootstrap/GenC.hx:214: characters 17-28) }), pos => #pos(bootstrap/GenC.hx:214: characters 13-28) }), pos => #pos(bootstrap/GenC.hx:214: characters 8-28) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString([)), pos => #pos(bootstrap/GenC.hx:214: characters 30-33) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(keys)), pos => #pos(bootstrap/GenC.hx:214: characters 36-40) },{ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenC.hx:214: characters 41-42) }), pos => #pos(bootstrap/GenC.hx:214: characters 36-43) },stringify), pos => #pos(bootstrap/GenC.hx:214: characters 36-53) },[]), pos => #pos(bootstrap/GenC.hx:214: characters 36-55) }), pos => #pos(bootstrap/GenC.hx:214: characters 30-55) },{ expr => EConst(CString(,)), pos => #pos(bootstrap/GenC.hx:214: characters 57-60) }), pos => #pos(bootstrap/GenC.hx:214: characters 30-60) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(values)), pos => #pos(bootstrap/GenC.hx:214: characters 63-69) },{ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenC.hx:214: characters 70-71) }), pos => #pos(bootstrap/GenC.hx:214: characters 63-72) },stringify), pos => #pos(bootstrap/GenC.hx:214: characters 63-82) },[]), pos => #pos(bootstrap/GenC.hx:214: characters 63-84) }), pos => #pos(bootstrap/GenC.hx:214: characters 30-84) },{ expr => EConst(CString(])), pos => #pos(bootstrap/GenC.hx:214: characters 87-90) }), pos => #pos(bootstrap/GenC.hx:214: characters 30-90) }), pos => #pos(bootstrap/GenC.hx:214: characters 4-90) }]), pos => #pos(bootstrap/GenC.hx:214: characters 3-91) },join), pos => #pos(bootstrap/GenC.hx:214: characters 3-96) },[{ expr => EConst(CString(,)), pos => #pos(bootstrap/GenC.hx:214: characters 97-100) }]), pos => #pos(bootstrap/GenC.hx:214: characters 3-101) }), pos => #pos(bootstrap/GenC.hx:213: lines 213-214) },{ expr => EConst(CString(]))), pos => #pos(bootstrap/GenC.hx:215: characters 5-9) }), pos => #pos(bootstrap/GenC.hx:213: lines 213-215) }]), pos => #pos(bootstrap/GenC.hx:212: lines 212-215) }, values => [{ expr => ECall({ expr => EConst(CIdent(TMap)), pos => #pos(bootstrap/GenC.hx:212: characters 7-11) },[{ expr => EConst(CIdent(keys)), pos => #pos(bootstrap/GenC.hx:212: characters 12-16) },{ expr => EConst(CIdent(values)), pos => #pos(bootstrap/GenC.hx:212: characters 17-23) }]), pos => #pos(bootstrap/GenC.hx:212: characters 7-24) }], pos => #pos(bootstrap/GenC.hx:212: lines 212-215), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:218: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(if()), pos => #pos(bootstrap/GenC.hx:218: characters 7-12) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:218: characters 20-21) },{ expr => EConst(CIdent(econd)), pos => #pos(bootstrap/GenC.hx:218: characters 25-30) }), pos => #pos(bootstrap/GenC.hx:218: characters 20-30) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:218: characters 32-33) },stringify), pos => #pos(bootstrap/GenC.hx:218: characters 32-43) },[]), pos => #pos(bootstrap/GenC.hx:218: characters 32-45) }), pos => #pos(bootstrap/GenC.hx:218: characters 16-45) }]), pos => #pos(bootstrap/GenC.hx:218: characters 15-46) },join), pos => #pos(bootstrap/GenC.hx:218: characters 15-51) },[{ expr => EConst(CString( && )), pos => #pos(bootstrap/GenC.hx:218: characters 52-58) }]), pos => #pos(bootstrap/GenC.hx:218: characters 15-59) }), pos => #pos(bootstrap/GenC.hx:218: characters 7-59) },{ expr => EConst(CString() )), pos => #pos(bootstrap/GenC.hx:218: characters 62-66) }), pos => #pos(bootstrap/GenC.hx:218: characters 7-66) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenC.hx:218: characters 70-73) },stringify), pos => #pos(bootstrap/GenC.hx:218: characters 70-83) },[]), pos => #pos(bootstrap/GenC.hx:218: characters 70-85) }), pos => #pos(bootstrap/GenC.hx:218: characters 7-85) }), pos => #pos(bootstrap/GenC.hx:218: characters 3-85) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(eelse)), pos => #pos(bootstrap/GenC.hx:219: characters 7-12) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:219: characters 16-20) }), pos => #pos(bootstrap/GenC.hx:219: characters 7-20) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:219: characters 22-23) },{ expr => EBinop(OpAdd,{ expr => EConst(CString( else )), pos => #pos(bootstrap/GenC.hx:219: characters 27-35) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(eelse)), pos => #pos(bootstrap/GenC.hx:219: characters 38-43) },stringify), pos => #pos(bootstrap/GenC.hx:219: characters 38-53) },[]), pos => #pos(bootstrap/GenC.hx:219: characters 38-55) }), pos => #pos(bootstrap/GenC.hx:219: characters 27-55) }), pos => #pos(bootstrap/GenC.hx:219: characters 22-55) },null), pos => #pos(bootstrap/GenC.hx:219: characters 3-55) },{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:220: characters 3-4) }]), pos => #pos(bootstrap/GenC.hx:217: lines 217-220) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIf)), pos => #pos(bootstrap/GenC.hx:217: characters 7-10) },[{ expr => EConst(CIdent(econd)), pos => #pos(bootstrap/GenC.hx:217: characters 11-16) },{ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenC.hx:217: characters 18-21) },{ expr => EConst(CIdent(eelse)), pos => #pos(bootstrap/GenC.hx:217: characters 23-28) }]), pos => #pos(bootstrap/GenC.hx:217: characters 7-29) }], pos => #pos(bootstrap/GenC.hx:217: lines 217-220), guard => null },{ expr => { expr => EBlock([{ expr => ETernary({ expr => EConst(CIdent(postfix)), pos => #pos(bootstrap/GenC.hx:221: characters 30-37) },{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:221: characters 40-41) },stringify), pos => #pos(bootstrap/GenC.hx:221: characters 40-51) },[]), pos => #pos(bootstrap/GenC.hx:221: characters 40-53) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(op)), pos => #pos(bootstrap/GenC.hx:221: characters 56-58) },stringify), pos => #pos(bootstrap/GenC.hx:221: characters 56-68) },[]), pos => #pos(bootstrap/GenC.hx:221: characters 56-70) }), pos => #pos(bootstrap/GenC.hx:221: characters 40-70) },{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(op)), pos => #pos(bootstrap/GenC.hx:221: characters 73-75) },stringify), pos => #pos(bootstrap/GenC.hx:221: characters 73-85) },[]), pos => #pos(bootstrap/GenC.hx:221: characters 73-87) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:221: characters 90-91) },stringify), pos => #pos(bootstrap/GenC.hx:221: characters 90-101) },[]), pos => #pos(bootstrap/GenC.hx:221: characters 90-103) }), pos => #pos(bootstrap/GenC.hx:221: characters 73-103) }), pos => #pos(bootstrap/GenC.hx:221: characters 30-103) }]), pos => #pos(bootstrap/GenC.hx:221: characters 2-103) }, values => [{ expr => ECall({ expr => EConst(CIdent(TUnop)), pos => #pos(bootstrap/GenC.hx:221: characters 7-12) },[{ expr => EConst(CIdent(op)), pos => #pos(bootstrap/GenC.hx:221: characters 13-15) },{ expr => EConst(CIdent(postfix)), pos => #pos(bootstrap/GenC.hx:221: characters 17-24) },{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:221: characters 26-27) }]), pos => #pos(bootstrap/GenC.hx:221: characters 7-28) }], pos => #pos(bootstrap/GenC.hx:221: characters 2-103), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(while()), pos => #pos(bootstrap/GenC.hx:222: characters 31-39) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(econd)), pos => #pos(bootstrap/GenC.hx:222: characters 42-47) },stringify), pos => #pos(bootstrap/GenC.hx:222: characters 42-57) },[]), pos => #pos(bootstrap/GenC.hx:222: characters 42-59) }), pos => #pos(bootstrap/GenC.hx:222: characters 31-59) },{ expr => EConst(CString() )), pos => #pos(bootstrap/GenC.hx:222: characters 62-66) }), pos => #pos(bootstrap/GenC.hx:222: characters 31-66) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:222: characters 69-70) },stringify), pos => #pos(bootstrap/GenC.hx:222: characters 69-80) },[]), pos => #pos(bootstrap/GenC.hx:222: characters 69-82) }), pos => #pos(bootstrap/GenC.hx:222: characters 31-82) }]), pos => #pos(bootstrap/GenC.hx:222: characters 2-82) }, values => [{ expr => ECall({ expr => EConst(CIdent(TWhile)), pos => #pos(bootstrap/GenC.hx:222: characters 7-13) },[{ expr => EConst(CIdent(econd)), pos => #pos(bootstrap/GenC.hx:222: characters 14-19) },{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:222: characters 21-22) },{ expr => EConst(CIdent(true)), pos => #pos(bootstrap/GenC.hx:222: characters 24-28) }]), pos => #pos(bootstrap/GenC.hx:222: characters 7-29) }], pos => #pos(bootstrap/GenC.hx:222: characters 2-82), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(do{)), pos => #pos(bootstrap/GenC.hx:223: characters 32-37) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:223: characters 40-41) },stringify), pos => #pos(bootstrap/GenC.hx:223: characters 40-51) },[]), pos => #pos(bootstrap/GenC.hx:223: characters 40-53) }), pos => #pos(bootstrap/GenC.hx:223: characters 32-53) },{ expr => EConst(CString(}while()), pos => #pos(bootstrap/GenC.hx:223: characters 56-65) }), pos => #pos(bootstrap/GenC.hx:223: characters 32-65) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(econd)), pos => #pos(bootstrap/GenC.hx:223: characters 68-73) },stringify), pos => #pos(bootstrap/GenC.hx:223: characters 68-83) },[]), pos => #pos(bootstrap/GenC.hx:223: characters 68-85) }), pos => #pos(bootstrap/GenC.hx:223: characters 32-85) },{ expr => EConst(CString())), pos => #pos(bootstrap/GenC.hx:223: characters 88-91) }), pos => #pos(bootstrap/GenC.hx:223: characters 32-91) }]), pos => #pos(bootstrap/GenC.hx:223: characters 2-91) }, values => [{ expr => ECall({ expr => EConst(CIdent(TWhile)), pos => #pos(bootstrap/GenC.hx:223: characters 7-13) },[{ expr => EConst(CIdent(econd)), pos => #pos(bootstrap/GenC.hx:223: characters 14-19) },{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:223: characters 21-22) },{ expr => EConst(CIdent(false)), pos => #pos(bootstrap/GenC.hx:223: characters 24-29) }]), pos => #pos(bootstrap/GenC.hx:223: characters 7-30) }], pos => #pos(bootstrap/GenC.hx:223: characters 2-91), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(extractTypeName)), pos => #pos(bootstrap/GenC.hx:224: characters 28-43) },[{ expr => EConst(CIdent(type)), pos => #pos(bootstrap/GenC.hx:224: characters 44-48) }]), pos => #pos(bootstrap/GenC.hx:224: characters 28-49) }]), pos => #pos(bootstrap/GenC.hx:224: characters 2-49) }, values => [{ expr => ECall({ expr => EConst(CIdent(NodeTypeValue)), pos => #pos(bootstrap/GenC.hx:224: characters 7-20) },[{ expr => EConst(CIdent(type)), pos => #pos(bootstrap/GenC.hx:224: characters 21-25) }]), pos => #pos(bootstrap/GenC.hx:224: characters 7-26) }], pos => #pos(bootstrap/GenC.hx:224: characters 2-49), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EConst(CString()), pos => #pos(bootstrap/GenC.hx:225: characters 35-37) },{ expr => EField({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenC.hx:225: characters 38-39) },length), pos => #pos(bootstrap/GenC.hx:225: characters 38-46) }), pos => #pos(bootstrap/GenC.hx:225: characters 35-46) }]), pos => #pos(bootstrap/GenC.hx:225: characters 2-46) }, values => [{ expr => ECall({ expr => EConst(CIdent(TDot)), pos => #pos(bootstrap/GenC.hx:225: characters 7-11) },[{ expr => ECall({ expr => EConst(CIdent(TString)), pos => #pos(bootstrap/GenC.hx:225: characters 12-19) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenC.hx:225: characters 20-21) }]), pos => #pos(bootstrap/GenC.hx:225: characters 12-22) },{ expr => EConst(CString(length)), pos => #pos(bootstrap/GenC.hx:225: characters 24-32) }]), pos => #pos(bootstrap/GenC.hx:225: characters 7-33) }], pos => #pos(bootstrap/GenC.hx:225: characters 2-46), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(trace)), pos => #pos(bootstrap/GenC.hx:227: characters 3-8) },[{ expr => EConst(CString(.`$name`)), pos => #pos(bootstrap/GenC.hx:227: characters 9-19) }]), pos => #pos(bootstrap/GenC.hx:227: characters 3-20) },{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EField({ expr => EConst(CIdent(Project)), pos => #pos(bootstrap/GenC.hx:228: characters 16-23) },mapNames), pos => #pos(bootstrap/GenC.hx:228: characters 16-32) },get), pos => #pos(bootstrap/GenC.hx:228: characters 16-36) },[{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:228: characters 37-41) }]), pos => #pos(bootstrap/GenC.hx:228: characters 16-42) }, name => parent, type => null, ??? => #pos(bootstrap/GenC.hx:228: characters 7-13) }]), pos => #pos(bootstrap/GenC.hx:228: characters 3-43) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(parent)), pos => #pos(bootstrap/GenC.hx:229: characters 10-16) }), pos => #pos(bootstrap/GenC.hx:229: characters 9-17) },[{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => EConst(CString()), pos => #pos(bootstrap/GenC.hx:231: characters 13-15) }, name => v, type => null, ??? => #pos(bootstrap/GenC.hx:231: characters 9-10) }]), pos => #pos(bootstrap/GenC.hx:231: characters 5-16) },{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenC.hx:232: characters 9-10) },{ expr => EConst(CIdent(fields)), pos => #pos(bootstrap/GenC.hx:232: characters 14-20) }), pos => #pos(bootstrap/GenC.hx:232: characters 9-20) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenC.hx:232: characters 30-31) }), pos => #pos(bootstrap/GenC.hx:232: characters 29-32) },[{ expr => { expr => EBlock([{ expr => EIf({ expr => EBinop(OpEq,{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:233: characters 56-60) },{ expr => EConst(CIdent(n)), pos => #pos(bootstrap/GenC.hx:233: characters 64-65) }), pos => #pos(bootstrap/GenC.hx:233: characters 56-65) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:233: characters 67-68) },{ expr => EBinop(OpAdd,{ expr => EConst(CString()), pos => #pos(bootstrap/GenC.hx:233: characters 71-73) },{ expr => EConst(CIdent(value)), pos => #pos(bootstrap/GenC.hx:233: characters 76-81) }), pos => #pos(bootstrap/GenC.hx:233: characters 71-81) }), pos => #pos(bootstrap/GenC.hx:233: characters 67-81) },null), pos => #pos(bootstrap/GenC.hx:233: characters 53-81) }]), pos => #pos(bootstrap/GenC.hx:233: characters 6-81) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBinop)), pos => #pos(bootstrap/GenC.hx:233: characters 11-17) },[{ expr => EConst(CIdent(OpAssign)), pos => #pos(bootstrap/GenC.hx:233: characters 18-26) },{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenC.hx:233: characters 28-34) },[{ expr => EConst(CIdent(n)), pos => #pos(bootstrap/GenC.hx:233: characters 35-36) }]), pos => #pos(bootstrap/GenC.hx:233: characters 28-37) },{ expr => ECall({ expr => EConst(CIdent(TInt)), pos => #pos(bootstrap/GenC.hx:233: characters 39-43) },[{ expr => EConst(CIdent(value)), pos => #pos(bootstrap/GenC.hx:233: characters 44-49) }]), pos => #pos(bootstrap/GenC.hx:233: characters 39-50) }]), pos => #pos(bootstrap/GenC.hx:233: characters 11-51) }], pos => #pos(bootstrap/GenC.hx:233: characters 6-81), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EBinop(OpAdd,{ expr => EConst(CString()), pos => #pos(bootstrap/GenC.hx:234: characters 20-22) },{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenC.hx:234: characters 23-24) }), pos => #pos(bootstrap/GenC.hx:234: characters 20-24) }), pos => #pos(bootstrap/GenC.hx:234: characters 14-19) }]), pos => #pos(bootstrap/GenC.hx:234: characters 6-19) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:234: characters 11-12) }], pos => #pos(bootstrap/GenC.hx:234: characters 6-19), guard => null }],null), pos => #pos(bootstrap/GenC.hx:232: lines 232-235) }), pos => #pos(bootstrap/GenC.hx:232: lines 232-235) },{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:236: characters 5-6) }]), pos => #pos(bootstrap/GenC.hx:230: lines 230-236) }, values => [{ expr => ECall({ expr => EConst(CIdent(TEnum)), pos => #pos(bootstrap/GenC.hx:230: characters 9-14) },[{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:230: characters 15-16) },{ expr => EConst(CIdent(fields)), pos => #pos(bootstrap/GenC.hx:230: characters 18-24) }]), pos => #pos(bootstrap/GenC.hx:230: characters 9-25) }], pos => #pos(bootstrap/GenC.hx:230: lines 230-236), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:237: characters 12-16) },stringify), pos => #pos(bootstrap/GenC.hx:237: characters 12-26) },[]), pos => #pos(bootstrap/GenC.hx:237: characters 12-28) },{ expr => EConst(CString(.)), pos => #pos(bootstrap/GenC.hx:237: characters 31-34) }), pos => #pos(bootstrap/GenC.hx:237: characters 12-34) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:237: characters 37-41) }), pos => #pos(bootstrap/GenC.hx:237: characters 12-41) }]), pos => #pos(bootstrap/GenC.hx:237: characters 4-41) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:237: characters 9-10) }], pos => #pos(bootstrap/GenC.hx:237: characters 4-41), guard => null }],null), pos => #pos(bootstrap/GenC.hx:229: lines 229-238) }]), pos => #pos(bootstrap/GenC.hx:226: lines 226-238) }, values => [{ expr => ECall({ expr => EConst(CIdent(TDot)), pos => #pos(bootstrap/GenC.hx:226: characters 7-11) },[{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:226: characters 12-16) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:226: characters 18-22) }]), pos => #pos(bootstrap/GenC.hx:226: characters 7-23) }], pos => #pos(bootstrap/GenC.hx:226: lines 226-238), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:239: characters 28-32) },stringify), pos => #pos(bootstrap/GenC.hx:239: characters 28-42) },[]), pos => #pos(bootstrap/GenC.hx:239: characters 28-44) },{ expr => EConst(CString([)), pos => #pos(bootstrap/GenC.hx:239: characters 47-50) }), pos => #pos(bootstrap/GenC.hx:239: characters 28-50) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(index)), pos => #pos(bootstrap/GenC.hx:239: characters 53-58) },stringify), pos => #pos(bootstrap/GenC.hx:239: characters 53-68) },[]), pos => #pos(bootstrap/GenC.hx:239: characters 53-70) }), pos => #pos(bootstrap/GenC.hx:239: characters 28-70) },{ expr => EConst(CString(])), pos => #pos(bootstrap/GenC.hx:239: characters 73-76) }), pos => #pos(bootstrap/GenC.hx:239: characters 28-76) }]), pos => #pos(bootstrap/GenC.hx:239: characters 2-76) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIndex)), pos => #pos(bootstrap/GenC.hx:239: characters 7-13) },[{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:239: characters 14-18) },{ expr => EConst(CIdent(index)), pos => #pos(bootstrap/GenC.hx:239: characters 20-25) }]), pos => #pos(bootstrap/GenC.hx:239: characters 7-26) }], pos => #pos(bootstrap/GenC.hx:239: characters 2-76), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString()), pos => #pos(bootstrap/GenC.hx:240: characters 21-23) }]), pos => #pos(bootstrap/GenC.hx:240: characters 2-23) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIs)), pos => #pos(bootstrap/GenC.hx:240: characters 7-10) },[{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:240: characters 11-15) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:240: characters 17-18) }]), pos => #pos(bootstrap/GenC.hx:240: characters 7-19) }], pos => #pos(bootstrap/GenC.hx:240: characters 2-23), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString((()), pos => #pos(bootstrap/GenC.hx:241: characters 27-31) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:241: characters 32-33) },extractTypeName), pos => #pos(bootstrap/GenC.hx:241: characters 32-49) },[]), pos => #pos(bootstrap/GenC.hx:241: characters 32-51) }), pos => #pos(bootstrap/GenC.hx:241: characters 27-51) },{ expr => EConst(CString()()), pos => #pos(bootstrap/GenC.hx:241: characters 52-56) }), pos => #pos(bootstrap/GenC.hx:241: characters 27-56) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:241: characters 59-63) },stringify), pos => #pos(bootstrap/GenC.hx:241: characters 59-73) },[]), pos => #pos(bootstrap/GenC.hx:241: characters 59-75) }), pos => #pos(bootstrap/GenC.hx:241: characters 27-75) },{ expr => EConst(CString()))), pos => #pos(bootstrap/GenC.hx:241: characters 78-82) }), pos => #pos(bootstrap/GenC.hx:241: characters 27-82) }]), pos => #pos(bootstrap/GenC.hx:241: characters 2-82) }, values => [{ expr => ECall({ expr => EConst(CIdent(TAs)), pos => #pos(bootstrap/GenC.hx:241: characters 7-10) },[{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:241: characters 11-15) },{ expr => EConst(CIdent(kind)), pos => #pos(bootstrap/GenC.hx:241: characters 17-21) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:241: characters 23-24) }]), pos => #pos(bootstrap/GenC.hx:241: characters 7-25) }], pos => #pos(bootstrap/GenC.hx:241: characters 2-82), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:243: characters 3-4) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(rettype)), pos => #pos(bootstrap/GenC.hx:243: characters 8-15) },extractTypeName), pos => #pos(bootstrap/GenC.hx:243: characters 8-31) },[]), pos => #pos(bootstrap/GenC.hx:243: characters 8-33) }), pos => #pos(bootstrap/GenC.hx:243: characters 3-33) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:244: characters 3-4) },{ expr => EConst(CString( CALLBACK)), pos => #pos(bootstrap/GenC.hx:244: characters 8-19) }), pos => #pos(bootstrap/GenC.hx:244: characters 3-19) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:245: characters 6-10) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:245: characters 14-18) }), pos => #pos(bootstrap/GenC.hx:245: characters 6-18) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:245: characters 20-21) },{ expr => EBinop(OpAdd,{ expr => EConst(CString( )), pos => #pos(bootstrap/GenC.hx:245: characters 25-28) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:245: characters 31-35) },rename), pos => #pos(bootstrap/GenC.hx:245: characters 31-42) },[]), pos => #pos(bootstrap/GenC.hx:245: characters 31-44) }), pos => #pos(bootstrap/GenC.hx:245: characters 25-44) }), pos => #pos(bootstrap/GenC.hx:245: characters 20-44) },null), pos => #pos(bootstrap/GenC.hx:245: characters 3-44) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:246: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(()), pos => #pos(bootstrap/GenC.hx:246: characters 8-11) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:246: characters 19-20) },{ expr => EConst(CIdent(vars)), pos => #pos(bootstrap/GenC.hx:246: characters 24-28) }), pos => #pos(bootstrap/GenC.hx:246: characters 19-28) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:247: characters 12-13) }), pos => #pos(bootstrap/GenC.hx:247: characters 11-14) },[{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:249: characters 17-21) },rename), pos => #pos(bootstrap/GenC.hx:249: characters 17-28) },[]), pos => #pos(bootstrap/GenC.hx:249: characters 17-30) }, name => name, type => null, ??? => #pos(bootstrap/GenC.hx:249: characters 10-14) }]), pos => #pos(bootstrap/GenC.hx:249: characters 6-31) },{ expr => EBinop(OpAssign,{ expr => EArray({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenC.hx:250: characters 6-17) },{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:250: characters 18-19) }), pos => #pos(bootstrap/GenC.hx:250: characters 6-20) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:250: characters 23-27) }), pos => #pos(bootstrap/GenC.hx:250: characters 6-27) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:251: characters 6-7) },extractTypeName), pos => #pos(bootstrap/GenC.hx:251: characters 6-23) },[]), pos => #pos(bootstrap/GenC.hx:251: characters 6-25) },{ expr => EConst(CString( )), pos => #pos(bootstrap/GenC.hx:251: characters 28-31) }), pos => #pos(bootstrap/GenC.hx:251: characters 6-31) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:251: characters 34-38) }), pos => #pos(bootstrap/GenC.hx:251: characters 6-38) },{ expr => EConst(CString( lol)), pos => #pos(bootstrap/GenC.hx:251: characters 41-47) }), pos => #pos(bootstrap/GenC.hx:251: characters 6-47) }]), pos => #pos(bootstrap/GenC.hx:248: lines 248-251) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenC.hx:248: characters 10-14) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:248: characters 15-19) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:248: characters 21-22) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:248: characters 24-25) }]), pos => #pos(bootstrap/GenC.hx:248: characters 10-26) }], pos => #pos(bootstrap/GenC.hx:248: lines 248-251), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:253: characters 17-21) },rename), pos => #pos(bootstrap/GenC.hx:253: characters 17-28) },[]), pos => #pos(bootstrap/GenC.hx:253: characters 17-30) }, name => name, type => null, ??? => #pos(bootstrap/GenC.hx:253: characters 10-14) }]), pos => #pos(bootstrap/GenC.hx:253: characters 6-31) },{ expr => EBinop(OpAssign,{ expr => EArray({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenC.hx:254: characters 6-17) },{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:254: characters 18-19) }), pos => #pos(bootstrap/GenC.hx:254: characters 6-20) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:254: characters 23-27) }), pos => #pos(bootstrap/GenC.hx:254: characters 6-27) }]), pos => #pos(bootstrap/GenC.hx:252: lines 252-254) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenC.hx:252: characters 10-16) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:252: characters 17-21) }]), pos => #pos(bootstrap/GenC.hx:252: characters 10-22) }], pos => #pos(bootstrap/GenC.hx:252: lines 252-254), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString()), pos => #pos(bootstrap/GenC.hx:256: characters 30-32) }]), pos => #pos(bootstrap/GenC.hx:256: characters 5-32) }, values => [{ expr => ECall({ expr => EConst(CIdent(TParenthesis)), pos => #pos(bootstrap/GenC.hx:256: characters 10-22) },[{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:256: characters 23-27) }]), pos => #pos(bootstrap/GenC.hx:256: characters 10-28) }], pos => #pos(bootstrap/GenC.hx:256: characters 5-32), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:257: characters 19-20) }), pos => #pos(bootstrap/GenC.hx:257: characters 13-18) }]), pos => #pos(bootstrap/GenC.hx:257: characters 5-18) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:257: characters 10-11) }], pos => #pos(bootstrap/GenC.hx:257: characters 5-18), guard => null }],null), pos => #pos(bootstrap/GenC.hx:247: lines 247-258) }), pos => #pos(bootstrap/GenC.hx:246: lines 246-258) }]), pos => #pos(bootstrap/GenC.hx:246: lines 246-259) },join), pos => #pos(bootstrap/GenC.hx:246: lines 246-259) },[{ expr => EConst(CString(, )), pos => #pos(bootstrap/GenC.hx:259: characters 10-14) }]), pos => #pos(bootstrap/GenC.hx:246: lines 246-259) }), pos => #pos(bootstrap/GenC.hx:246: lines 246-259) },{ expr => EConst(CString() )), pos => #pos(bootstrap/GenC.hx:259: characters 18-22) }), pos => #pos(bootstrap/GenC.hx:246: lines 246-259) }), pos => #pos(bootstrap/GenC.hx:246: lines 246-259) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:260: characters 7-11) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:260: characters 15-19) }), pos => #pos(bootstrap/GenC.hx:260: characters 7-19) },{ expr => EBlock([{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:261: characters 12-16) }), pos => #pos(bootstrap/GenC.hx:261: characters 11-17) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:262: characters 22-23) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:262: characters 27-31) },stringify), pos => #pos(bootstrap/GenC.hx:262: characters 27-41) },[]), pos => #pos(bootstrap/GenC.hx:262: characters 27-43) }), pos => #pos(bootstrap/GenC.hx:262: characters 22-43) }]), pos => #pos(bootstrap/GenC.hx:262: characters 5-43) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenC.hx:262: characters 10-16) },[{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenC.hx:262: characters 17-19) }]), pos => #pos(bootstrap/GenC.hx:262: characters 10-20) }], pos => #pos(bootstrap/GenC.hx:262: characters 5-43), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(pushScope)), pos => #pos(bootstrap/GenC.hx:264: characters 6-15) },[]), pos => #pos(bootstrap/GenC.hx:264: characters 6-17) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenC.hx:265: characters 6-13) },[]), pos => #pos(bootstrap/GenC.hx:265: characters 6-15) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:266: characters 6-7) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString({
$tabs)), pos => #pos(bootstrap/GenC.hx:266: characters 11-21) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:266: characters 22-26) },stringify), pos => #pos(bootstrap/GenC.hx:266: characters 22-36) },[]), pos => #pos(bootstrap/GenC.hx:266: characters 22-38) }), pos => #pos(bootstrap/GenC.hx:266: characters 11-38) },{ expr => EConst(CString(
	$tabs})), pos => #pos(bootstrap/GenC.hx:266: characters 39-51) }), pos => #pos(bootstrap/GenC.hx:266: characters 11-51) }), pos => #pos(bootstrap/GenC.hx:266: characters 6-51) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenC.hx:267: characters 6-12) },[]), pos => #pos(bootstrap/GenC.hx:267: characters 6-14) },{ expr => ECall({ expr => EConst(CIdent(popScope)), pos => #pos(bootstrap/GenC.hx:268: characters 6-14) },[]), pos => #pos(bootstrap/GenC.hx:268: characters 6-16) }]), pos => #pos(bootstrap/GenC.hx:263: lines 263-268) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:263: characters 10-11) }], pos => #pos(bootstrap/GenC.hx:263: lines 263-268), guard => null }],null), pos => #pos(bootstrap/GenC.hx:261: lines 261-269) }]), pos => #pos(bootstrap/GenC.hx:260: lines 260-270) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:271: characters 8-9) },{ expr => EConst(CString({})), pos => #pos(bootstrap/GenC.hx:271: characters 13-17) }), pos => #pos(bootstrap/GenC.hx:271: characters 8-17) }), pos => #pos(bootstrap/GenC.hx:260: lines 260-271) },{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:272: characters 3-4) }]), pos => #pos(bootstrap/GenC.hx:242: lines 242-272) }, values => [{ expr => ECall({ expr => EConst(CIdent(TFunction)), pos => #pos(bootstrap/GenC.hx:242: characters 7-16) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:242: characters 17-21) },{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:242: characters 23-27) },{ expr => EConst(CIdent(vars)), pos => #pos(bootstrap/GenC.hx:242: characters 29-33) },{ expr => EConst(CIdent(rettype)), pos => #pos(bootstrap/GenC.hx:242: characters 35-42) }]), pos => #pos(bootstrap/GenC.hx:242: characters 7-43) }], pos => #pos(bootstrap/GenC.hx:242: lines 242-272), guard => null },{ expr => { expr => EBlock([{ expr => EIf({ expr => EBinop(OpEq,{ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenC.hx:274: characters 6-11) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:274: characters 15-19) }), pos => #pos(bootstrap/GenC.hx:274: characters 6-19) },{ expr => EThrow({ expr => EConst(CString(name is null for $node)), pos => #pos(bootstrap/GenC.hx:274: characters 27-51) }), pos => #pos(bootstrap/GenC.hx:274: characters 21-26) },null), pos => #pos(bootstrap/GenC.hx:274: characters 3-26) },{ expr => EVars([{ expr => { expr => EConst(CString()), pos => #pos(bootstrap/GenC.hx:275: characters 12-14) }, name => es, type => null, ??? => #pos(bootstrap/GenC.hx:275: characters 7-9) }]), pos => #pos(bootstrap/GenC.hx:275: characters 3-15) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:276: characters 10-14) }), pos => #pos(bootstrap/GenC.hx:276: characters 9-15) },[{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => EConst(CInt(1)), pos => #pos(bootstrap/GenC.hx:278: characters 13-14) }, name => a, type => null, ??? => #pos(bootstrap/GenC.hx:278: characters 9-10) }]), pos => #pos(bootstrap/GenC.hx:278: characters 5-15) }]), pos => #pos(bootstrap/GenC.hx:277: lines 277-278) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenC.hx:277: characters 9-13) },[{ expr => EConst(CIdent(oname1)), pos => #pos(bootstrap/GenC.hx:277: characters 14-20) },{ expr => EConst(CIdent(t1)), pos => #pos(bootstrap/GenC.hx:277: characters 22-24) },{ expr => EConst(CIdent(exp1)), pos => #pos(bootstrap/GenC.hx:277: characters 26-30) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:277: characters 32-33) }]), pos => #pos(bootstrap/GenC.hx:277: characters 9-34) }], pos => #pos(bootstrap/GenC.hx:277: lines 277-278), guard => null },{ expr => null, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:279: characters 9-10) }], pos => #pos(bootstrap/GenC.hx:279: characters 4-10), guard => null }],null), pos => #pos(bootstrap/GenC.hx:276: lines 276-280) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:281: characters 7-11) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:281: characters 15-19) }), pos => #pos(bootstrap/GenC.hx:281: characters 7-19) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(es)), pos => #pos(bootstrap/GenC.hx:281: characters 21-23) },{ expr => EBinop(OpAdd,{ expr => EConst(CString( = )), pos => #pos(bootstrap/GenC.hx:281: characters 26-31) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:281: characters 34-38) },stringify), pos => #pos(bootstrap/GenC.hx:281: characters 34-48) },[]), pos => #pos(bootstrap/GenC.hx:281: characters 34-50) }), pos => #pos(bootstrap/GenC.hx:281: characters 26-50) }), pos => #pos(bootstrap/GenC.hx:281: characters 21-50) },null), pos => #pos(bootstrap/GenC.hx:281: characters 3-50) },{ expr => ECall({ expr => EConst(CIdent(addToScope)), pos => #pos(bootstrap/GenC.hx:282: characters 3-13) },[{ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenC.hx:282: characters 14-19) }]), pos => #pos(bootstrap/GenC.hx:282: characters 3-20) },{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenC.hx:283: characters 14-19) },rename), pos => #pos(bootstrap/GenC.hx:283: characters 14-26) },[]), pos => #pos(bootstrap/GenC.hx:283: characters 14-28) }, name => name, type => null, ??? => #pos(bootstrap/GenC.hx:283: characters 7-11) }]), pos => #pos(bootstrap/GenC.hx:283: characters 3-29) },{ expr => EIf({ expr => ECall({ expr => EConst(CIdent(hasInScope)), pos => #pos(bootstrap/GenC.hx:284: characters 6-16) },[{ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenC.hx:284: characters 17-22) }]), pos => #pos(bootstrap/GenC.hx:284: characters 6-23) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:284: characters 25-29) },{ expr => EBinop(OpAdd,{ expr => EConst(CString($$)), pos => #pos(bootstrap/GenC.hx:284: characters 33-37) },{ expr => EParenthesis({ expr => EUnop(OpIncrement,false,{ expr => EConst(CIdent(id)), pos => #pos(bootstrap/GenC.hx:284: characters 43-45) }), pos => #pos(bootstrap/GenC.hx:284: characters 41-45) }), pos => #pos(bootstrap/GenC.hx:284: characters 40-46) }), pos => #pos(bootstrap/GenC.hx:284: characters 33-46) }), pos => #pos(bootstrap/GenC.hx:284: characters 25-46) },null), pos => #pos(bootstrap/GenC.hx:284: characters 3-46) },{ expr => EBinop(OpAssign,{ expr => EArray({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenC.hx:285: characters 3-14) },{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenC.hx:285: characters 15-19) }), pos => #pos(bootstrap/GenC.hx:285: characters 3-20) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:285: characters 23-27) }), pos => #pos(bootstrap/GenC.hx:285: characters 3-27) },{ expr => EIf({ expr => EBinop(OpEq,{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:286: characters 6-10) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:286: characters 14-18) }), pos => #pos(bootstrap/GenC.hx:286: characters 6-18) },{ expr => EThrow({ expr => EConst(CString(name is null for $node)), pos => #pos(bootstrap/GenC.hx:286: characters 26-50) }), pos => #pos(bootstrap/GenC.hx:286: characters 20-25) },null), pos => #pos(bootstrap/GenC.hx:286: characters 3-25) },{ expr => EIf({ expr => EBinop(OpEq,{ expr => EArray({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenC.hx:287: characters 6-17) },{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenC.hx:287: characters 18-22) }), pos => #pos(bootstrap/GenC.hx:287: characters 6-23) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:287: characters 27-31) }), pos => #pos(bootstrap/GenC.hx:287: characters 6-31) },{ expr => EThrow({ expr => EConst(CString(parentNames[node] is null for $node)), pos => #pos(bootstrap/GenC.hx:287: characters 39-76) }), pos => #pos(bootstrap/GenC.hx:287: characters 33-38) },null), pos => #pos(bootstrap/GenC.hx:287: characters 3-38) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:288: characters 6-7) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:288: characters 11-15) }), pos => #pos(bootstrap/GenC.hx:288: characters 6-15) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:288: characters 17-18) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:288: characters 21-22) },extractTypeName), pos => #pos(bootstrap/GenC.hx:288: characters 21-38) },[]), pos => #pos(bootstrap/GenC.hx:288: characters 21-40) }), pos => #pos(bootstrap/GenC.hx:288: characters 17-40) },null), pos => #pos(bootstrap/GenC.hx:288: characters 3-40) },{ expr => EIf({ expr => EBinop(OpEq,{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:289: characters 6-7) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:289: characters 11-15) }), pos => #pos(bootstrap/GenC.hx:289: characters 6-15) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:289: characters 17-18) },{ expr => EConst(CString(auto)), pos => #pos(bootstrap/GenC.hx:289: characters 21-27) }), pos => #pos(bootstrap/GenC.hx:289: characters 17-27) },null), pos => #pos(bootstrap/GenC.hx:289: characters 3-27) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:290: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString( )), pos => #pos(bootstrap/GenC.hx:290: characters 8-11) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:290: characters 14-18) }), pos => #pos(bootstrap/GenC.hx:290: characters 8-18) },{ expr => EConst(CIdent(es)), pos => #pos(bootstrap/GenC.hx:290: characters 21-23) }), pos => #pos(bootstrap/GenC.hx:290: characters 8-23) }), pos => #pos(bootstrap/GenC.hx:290: characters 3-23) },{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:291: characters 3-4) }]), pos => #pos(bootstrap/GenC.hx:273: lines 273-291) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenC.hx:273: characters 7-11) },[{ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenC.hx:273: characters 12-17) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:273: characters 19-20) },{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:273: characters 22-26) },{ expr => EConst(CIdent(const)), pos => #pos(bootstrap/GenC.hx:273: characters 28-33) }]), pos => #pos(bootstrap/GenC.hx:273: characters 7-34) }], pos => #pos(bootstrap/GenC.hx:273: lines 273-291), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:293: characters 3-4) },{ expr => EConst(CString(try {
$tabs	)), pos => #pos(bootstrap/GenC.hx:293: characters 7-23) }), pos => #pos(bootstrap/GenC.hx:293: characters 3-23) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenC.hx:294: characters 3-10) },[]), pos => #pos(bootstrap/GenC.hx:294: characters 3-12) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:295: characters 10-14) }), pos => #pos(bootstrap/GenC.hx:295: characters 9-15) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:296: characters 21-22) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:296: characters 31-32) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenC.hx:296: characters 36-38) }), pos => #pos(bootstrap/GenC.hx:296: characters 31-38) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:296: characters 40-41) },stringifyBlockExpression), pos => #pos(bootstrap/GenC.hx:296: characters 40-66) },[]), pos => #pos(bootstrap/GenC.hx:296: characters 40-68) }), pos => #pos(bootstrap/GenC.hx:296: characters 27-68) }]), pos => #pos(bootstrap/GenC.hx:296: characters 26-69) },join), pos => #pos(bootstrap/GenC.hx:296: characters 26-74) },[{ expr => EBinop(OpAdd,{ expr => EConst(CString(;
)), pos => #pos(bootstrap/GenC.hx:296: characters 75-80) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenC.hx:296: characters 81-85) }), pos => #pos(bootstrap/GenC.hx:296: characters 75-85) }]), pos => #pos(bootstrap/GenC.hx:296: characters 26-86) }), pos => #pos(bootstrap/GenC.hx:296: characters 21-86) }]), pos => #pos(bootstrap/GenC.hx:296: characters 4-86) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenC.hx:296: characters 9-15) },[{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenC.hx:296: characters 16-18) }]), pos => #pos(bootstrap/GenC.hx:296: characters 9-19) }], pos => #pos(bootstrap/GenC.hx:296: characters 4-86), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:297: characters 12-13) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:297: characters 17-21) },stringify), pos => #pos(bootstrap/GenC.hx:297: characters 17-31) },[]), pos => #pos(bootstrap/GenC.hx:297: characters 17-33) }), pos => #pos(bootstrap/GenC.hx:297: characters 12-33) }]), pos => #pos(bootstrap/GenC.hx:297: characters 4-33) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:297: characters 9-10) }], pos => #pos(bootstrap/GenC.hx:297: characters 4-33), guard => null }],null), pos => #pos(bootstrap/GenC.hx:295: lines 295-298) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenC.hx:300: characters 3-9) },[]), pos => #pos(bootstrap/GenC.hx:300: characters 3-11) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:301: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(
)), pos => #pos(bootstrap/GenC.hx:301: characters 8-12) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenC.hx:301: characters 15-19) }), pos => #pos(bootstrap/GenC.hx:301: characters 8-19) },{ expr => EConst(CString(} catch()), pos => #pos(bootstrap/GenC.hx:301: characters 22-32) }), pos => #pos(bootstrap/GenC.hx:301: characters 8-32) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:301: characters 33-34) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenC.hx:301: characters 35-36) }), pos => #pos(bootstrap/GenC.hx:301: characters 33-37) },varName), pos => #pos(bootstrap/GenC.hx:301: characters 33-45) },[]), pos => #pos(bootstrap/GenC.hx:301: characters 33-47) }), pos => #pos(bootstrap/GenC.hx:301: characters 8-47) },{ expr => EConst(CString() {
$tabs	)), pos => #pos(bootstrap/GenC.hx:301: characters 48-62) }), pos => #pos(bootstrap/GenC.hx:301: characters 8-62) }), pos => #pos(bootstrap/GenC.hx:301: characters 3-62) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenC.hx:302: characters 3-10) },[]), pos => #pos(bootstrap/GenC.hx:302: characters 3-12) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenC.hx:303: characters 3-14) },set), pos => #pos(bootstrap/GenC.hx:303: characters 3-18) },[{ expr => EArray({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:303: characters 19-20) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenC.hx:303: characters 21-22) }), pos => #pos(bootstrap/GenC.hx:303: characters 19-23) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:303: characters 25-26) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenC.hx:303: characters 27-28) }), pos => #pos(bootstrap/GenC.hx:303: characters 25-29) },varName), pos => #pos(bootstrap/GenC.hx:303: characters 25-37) },[]), pos => #pos(bootstrap/GenC.hx:303: characters 25-39) }]), pos => #pos(bootstrap/GenC.hx:303: characters 3-40) },{ expr => ESwitch({ expr => EParenthesis({ expr => EArray({ expr => EConst(CIdent(catches)), pos => #pos(bootstrap/GenC.hx:304: characters 10-17) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenC.hx:304: characters 18-19) }), pos => #pos(bootstrap/GenC.hx:304: characters 10-20) }), pos => #pos(bootstrap/GenC.hx:304: characters 9-21) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:305: characters 21-22) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:305: characters 31-32) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenC.hx:305: characters 36-38) }), pos => #pos(bootstrap/GenC.hx:305: characters 31-38) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:305: characters 40-41) },stringify), pos => #pos(bootstrap/GenC.hx:305: characters 40-51) },[]), pos => #pos(bootstrap/GenC.hx:305: characters 40-53) }), pos => #pos(bootstrap/GenC.hx:305: characters 27-53) }]), pos => #pos(bootstrap/GenC.hx:305: characters 26-54) },join), pos => #pos(bootstrap/GenC.hx:305: characters 26-59) },[{ expr => EBinop(OpAdd,{ expr => EConst(CString(;
)), pos => #pos(bootstrap/GenC.hx:305: characters 60-65) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenC.hx:305: characters 66-70) }), pos => #pos(bootstrap/GenC.hx:305: characters 60-70) }]), pos => #pos(bootstrap/GenC.hx:305: characters 26-71) }), pos => #pos(bootstrap/GenC.hx:305: characters 21-71) }]), pos => #pos(bootstrap/GenC.hx:305: characters 4-71) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenC.hx:305: characters 9-15) },[{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenC.hx:305: characters 16-18) }]), pos => #pos(bootstrap/GenC.hx:305: characters 9-19) }], pos => #pos(bootstrap/GenC.hx:305: characters 4-71), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:306: characters 12-13) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(catches)), pos => #pos(bootstrap/GenC.hx:306: characters 17-24) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenC.hx:306: characters 25-26) }), pos => #pos(bootstrap/GenC.hx:306: characters 17-27) },stringify), pos => #pos(bootstrap/GenC.hx:306: characters 17-37) },[]), pos => #pos(bootstrap/GenC.hx:306: characters 17-39) }), pos => #pos(bootstrap/GenC.hx:306: characters 12-39) }]), pos => #pos(bootstrap/GenC.hx:306: characters 4-39) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:306: characters 9-10) }], pos => #pos(bootstrap/GenC.hx:306: characters 4-39), guard => null }],null), pos => #pos(bootstrap/GenC.hx:304: lines 304-307) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenC.hx:308: characters 3-9) },[]), pos => #pos(bootstrap/GenC.hx:308: characters 3-11) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:309: characters 3-4) },{ expr => EConst(CString(
)), pos => #pos(bootstrap/GenC.hx:309: characters 7-11) }), pos => #pos(bootstrap/GenC.hx:309: characters 3-11) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenC.hx:309: characters 14-18) }), pos => #pos(bootstrap/GenC.hx:309: characters 3-18) },{ expr => EConst(CString(})), pos => #pos(bootstrap/GenC.hx:309: characters 21-24) }), pos => #pos(bootstrap/GenC.hx:309: characters 3-24) }]), pos => #pos(bootstrap/GenC.hx:292: lines 292-309) }, values => [{ expr => ECall({ expr => EConst(CIdent(TTry)), pos => #pos(bootstrap/GenC.hx:292: characters 7-11) },[{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:292: characters 12-16) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:292: characters 18-19) },{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:292: characters 21-22) },{ expr => EConst(CIdent(catches)), pos => #pos(bootstrap/GenC.hx:292: characters 24-31) }]), pos => #pos(bootstrap/GenC.hx:292: characters 7-32) }], pos => #pos(bootstrap/GenC.hx:292: lines 292-309), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(new )), pos => #pos(bootstrap/GenC.hx:310: characters 37-43) },{ expr => ECall({ expr => EConst(CIdent(extractTypeName)), pos => #pos(bootstrap/GenC.hx:310: characters 46-61) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:310: characters 62-63) }]), pos => #pos(bootstrap/GenC.hx:310: characters 46-64) }), pos => #pos(bootstrap/GenC.hx:310: characters 37-64) },{ expr => EConst(CString(()), pos => #pos(bootstrap/GenC.hx:310: characters 67-70) }), pos => #pos(bootstrap/GenC.hx:310: characters 37-70) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:310: characters 79-80) },{ expr => EConst(CIdent(args)), pos => #pos(bootstrap/GenC.hx:310: characters 84-88) }), pos => #pos(bootstrap/GenC.hx:310: characters 79-88) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:310: characters 90-91) },stringify), pos => #pos(bootstrap/GenC.hx:310: characters 90-101) },[]), pos => #pos(bootstrap/GenC.hx:310: characters 90-103) }), pos => #pos(bootstrap/GenC.hx:310: characters 74-103) }]), pos => #pos(bootstrap/GenC.hx:310: characters 73-104) },join), pos => #pos(bootstrap/GenC.hx:310: characters 73-109) },[{ expr => EConst(CString(,)), pos => #pos(bootstrap/GenC.hx:310: characters 110-113) }]), pos => #pos(bootstrap/GenC.hx:310: characters 73-114) }), pos => #pos(bootstrap/GenC.hx:310: characters 37-114) },{ expr => EConst(CString())), pos => #pos(bootstrap/GenC.hx:310: characters 117-120) }), pos => #pos(bootstrap/GenC.hx:310: characters 37-120) }]), pos => #pos(bootstrap/GenC.hx:310: characters 2-120) }, values => [{ expr => ECall({ expr => EConst(CIdent(TNew)), pos => #pos(bootstrap/GenC.hx:310: characters 7-11) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:310: characters 12-13) },{ expr => EConst(CIdent(args)), pos => #pos(bootstrap/GenC.hx:310: characters 15-19) },{ expr => EConst(CIdent(names)), pos => #pos(bootstrap/GenC.hx:310: characters 21-26) },{ expr => EConst(CIdent(values)), pos => #pos(bootstrap/GenC.hx:310: characters 28-34) }]), pos => #pos(bootstrap/GenC.hx:310: characters 7-35) }], pos => #pos(bootstrap/GenC.hx:310: characters 2-120), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:312: characters 3-4) },{ expr => EConst(CString(switch ()), pos => #pos(bootstrap/GenC.hx:312: characters 7-17) }), pos => #pos(bootstrap/GenC.hx:312: characters 3-17) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:313: characters 3-4) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(exprs)), pos => #pos(bootstrap/GenC.hx:313: characters 8-13) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenC.hx:313: characters 14-15) }), pos => #pos(bootstrap/GenC.hx:313: characters 8-16) },stringify), pos => #pos(bootstrap/GenC.hx:313: characters 8-26) },[]), pos => #pos(bootstrap/GenC.hx:313: characters 8-28) }), pos => #pos(bootstrap/GenC.hx:313: characters 3-28) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:314: characters 3-4) },{ expr => EConst(CString() {
)), pos => #pos(bootstrap/GenC.hx:314: characters 8-15) }), pos => #pos(bootstrap/GenC.hx:314: characters 3-15) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenC.hx:315: characters 3-10) },[]), pos => #pos(bootstrap/GenC.hx:315: characters 3-12) },{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenC.hx:316: characters 8-9) },{ expr => EBinop(OpInterval,{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenC.hx:316: characters 13-17) },{ expr => EField({ expr => EConst(CIdent(cases)), pos => #pos(bootstrap/GenC.hx:316: characters 17-22) },length), pos => #pos(bootstrap/GenC.hx:316: characters 17-29) }), pos => #pos(bootstrap/GenC.hx:316: characters 13-29) }), pos => #pos(bootstrap/GenC.hx:316: characters 8-29) },{ expr => EBlock([{ expr => EVars([{ expr => { expr => EArray({ expr => EConst(CIdent(cases)), pos => #pos(bootstrap/GenC.hx:317: characters 12-17) },{ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenC.hx:317: characters 18-19) }), pos => #pos(bootstrap/GenC.hx:317: characters 12-20) }, name => c, type => null, ??? => #pos(bootstrap/GenC.hx:317: characters 8-9) }]), pos => #pos(bootstrap/GenC.hx:317: characters 4-21) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:318: characters 4-5) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenC.hx:318: characters 9-13) }), pos => #pos(bootstrap/GenC.hx:318: characters 4-13) },{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(c)), pos => #pos(bootstrap/GenC.hx:319: characters 8-9) },{ expr => EArray({ expr => EConst(CIdent(conds)), pos => #pos(bootstrap/GenC.hx:319: characters 13-18) },{ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenC.hx:319: characters 19-20) }), pos => #pos(bootstrap/GenC.hx:319: characters 13-21) }), pos => #pos(bootstrap/GenC.hx:319: characters 8-21) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(c)), pos => #pos(bootstrap/GenC.hx:319: characters 31-32) }), pos => #pos(bootstrap/GenC.hx:319: characters 30-33) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:320: characters 23-24) },{ expr => EConst(CString(default:)), pos => #pos(bootstrap/GenC.hx:320: characters 28-38) }), pos => #pos(bootstrap/GenC.hx:320: characters 23-38) }]), pos => #pos(bootstrap/GenC.hx:320: characters 5-38) }, values => [{ expr => EConst(CIdent(TUnderscore)), pos => #pos(bootstrap/GenC.hx:320: characters 10-21) }], pos => #pos(bootstrap/GenC.hx:320: characters 5-38), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:321: characters 13-14) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(case )), pos => #pos(bootstrap/GenC.hx:321: characters 18-25) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(c)), pos => #pos(bootstrap/GenC.hx:321: characters 28-29) },stringify), pos => #pos(bootstrap/GenC.hx:321: characters 28-39) },[]), pos => #pos(bootstrap/GenC.hx:321: characters 28-41) }), pos => #pos(bootstrap/GenC.hx:321: characters 18-41) },{ expr => EConst(CString(:)), pos => #pos(bootstrap/GenC.hx:321: characters 44-47) }), pos => #pos(bootstrap/GenC.hx:321: characters 18-47) }), pos => #pos(bootstrap/GenC.hx:321: characters 13-47) }]), pos => #pos(bootstrap/GenC.hx:321: characters 5-47) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:321: characters 10-11) }], pos => #pos(bootstrap/GenC.hx:321: characters 5-47), guard => null }],null), pos => #pos(bootstrap/GenC.hx:319: lines 319-322) }), pos => #pos(bootstrap/GenC.hx:319: lines 319-322) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:323: characters 4-5) },{ expr => EConst(CString( {
)), pos => #pos(bootstrap/GenC.hx:323: characters 9-15) }), pos => #pos(bootstrap/GenC.hx:323: characters 4-15) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:324: characters 4-5) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenC.hx:324: characters 9-13) },{ expr => EConst(CString(	)), pos => #pos(bootstrap/GenC.hx:324: characters 16-20) }), pos => #pos(bootstrap/GenC.hx:324: characters 9-20) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(c)), pos => #pos(bootstrap/GenC.hx:324: characters 23-24) },stringify), pos => #pos(bootstrap/GenC.hx:324: characters 23-34) },[]), pos => #pos(bootstrap/GenC.hx:324: characters 23-36) }), pos => #pos(bootstrap/GenC.hx:324: characters 9-36) },{ expr => EConst(CString(;
)), pos => #pos(bootstrap/GenC.hx:324: characters 39-44) }), pos => #pos(bootstrap/GenC.hx:324: characters 9-44) }), pos => #pos(bootstrap/GenC.hx:324: characters 4-44) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:325: characters 4-5) },{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenC.hx:325: characters 9-13) },{ expr => EConst(CString(	break;
$tabs;}
)), pos => #pos(bootstrap/GenC.hx:325: characters 16-37) }), pos => #pos(bootstrap/GenC.hx:325: characters 9-37) }), pos => #pos(bootstrap/GenC.hx:325: characters 4-37) }]), pos => #pos(bootstrap/GenC.hx:316: lines 316-326) }), pos => #pos(bootstrap/GenC.hx:316: lines 316-326) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenC.hx:327: characters 3-9) },[]), pos => #pos(bootstrap/GenC.hx:327: characters 3-11) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:328: characters 3-4) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenC.hx:328: characters 7-11) }), pos => #pos(bootstrap/GenC.hx:328: characters 3-11) },{ expr => EConst(CString(})), pos => #pos(bootstrap/GenC.hx:328: characters 14-17) }), pos => #pos(bootstrap/GenC.hx:328: characters 3-17) }]), pos => #pos(bootstrap/GenC.hx:311: lines 311-328) }, values => [{ expr => ECall({ expr => EConst(CIdent(TSwitch)), pos => #pos(bootstrap/GenC.hx:311: characters 7-14) },[{ expr => EConst(CIdent(exprs)), pos => #pos(bootstrap/GenC.hx:311: characters 15-20) },{ expr => EConst(CIdent(conds)), pos => #pos(bootstrap/GenC.hx:311: characters 22-27) },{ expr => EConst(CIdent(cases)), pos => #pos(bootstrap/GenC.hx:311: characters 29-34) }]), pos => #pos(bootstrap/GenC.hx:311: characters 7-35) }], pos => #pos(bootstrap/GenC.hx:311: lines 311-328), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EConst(CIdent(extractTypeName)), pos => #pos(bootstrap/GenC.hx:330: characters 15-30) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:330: characters 31-32) }]), pos => #pos(bootstrap/GenC.hx:330: characters 15-33) }, name => cname, type => null, ??? => #pos(bootstrap/GenC.hx:330: characters 7-12) }]), pos => #pos(bootstrap/GenC.hx:330: characters 3-34) },{ expr => EVars([{ expr => { expr => ECall({ expr => EConst(CIdent(getAtt)), pos => #pos(bootstrap/GenC.hx:331: characters 17-23) },[{ expr => ECall({ expr => EField({ expr => EField({ expr => EConst(CIdent(Project)), pos => #pos(bootstrap/GenC.hx:331: characters 24-31) },mapAttributes), pos => #pos(bootstrap/GenC.hx:331: characters 24-45) },get), pos => #pos(bootstrap/GenC.hx:331: characters 24-49) },[{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenC.hx:331: characters 50-54) }]), pos => #pos(bootstrap/GenC.hx:331: characters 24-55) },{ expr => EConst(CString(require)), pos => #pos(bootstrap/GenC.hx:331: characters 57-66) }]), pos => #pos(bootstrap/GenC.hx:331: characters 17-67) }, name => require, type => null, ??? => #pos(bootstrap/GenC.hx:331: characters 7-14) }]), pos => #pos(bootstrap/GenC.hx:331: characters 3-68) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(require)), pos => #pos(bootstrap/GenC.hx:332: characters 6-13) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:332: characters 17-21) }), pos => #pos(bootstrap/GenC.hx:332: characters 6-21) },{ expr => ESwitch({ expr => EArrayDecl([{ expr => EArray({ expr => EField({ expr => EConst(CIdent(require)), pos => #pos(bootstrap/GenC.hx:332: characters 31-38) },values), pos => #pos(bootstrap/GenC.hx:332: characters 31-45) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenC.hx:332: characters 46-47) }), pos => #pos(bootstrap/GenC.hx:332: characters 31-48) },{ expr => EArray({ expr => EField({ expr => EConst(CIdent(require)), pos => #pos(bootstrap/GenC.hx:332: characters 50-57) },values), pos => #pos(bootstrap/GenC.hx:332: characters 50-64) },{ expr => EConst(CInt(1)), pos => #pos(bootstrap/GenC.hx:332: characters 65-66) }), pos => #pos(bootstrap/GenC.hx:332: characters 50-67) }]), pos => #pos(bootstrap/GenC.hx:332: characters 30-68) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:333: characters 29-30) },{ expr => EConst(CString(const $cname = require("$s");
$tabs)), pos => #pos(bootstrap/GenC.hx:333: characters 34-72) }), pos => #pos(bootstrap/GenC.hx:333: characters 29-72) }]), pos => #pos(bootstrap/GenC.hx:333: characters 4-72) }, values => [{ expr => EArrayDecl([{ expr => ECall({ expr => EConst(CIdent(TString)), pos => #pos(bootstrap/GenC.hx:333: characters 10-17) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenC.hx:333: characters 18-19) }]), pos => #pos(bootstrap/GenC.hx:333: characters 10-20) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:333: characters 22-26) }]), pos => #pos(bootstrap/GenC.hx:333: characters 9-27) }], pos => #pos(bootstrap/GenC.hx:333: characters 4-72), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:334: characters 35-36) },{ expr => EConst(CString(const $cname = require("$s").$f;
$tabs)), pos => #pos(bootstrap/GenC.hx:334: characters 40-81) }), pos => #pos(bootstrap/GenC.hx:334: characters 35-81) }]), pos => #pos(bootstrap/GenC.hx:334: characters 4-81) }, values => [{ expr => EArrayDecl([{ expr => ECall({ expr => EConst(CIdent(TString)), pos => #pos(bootstrap/GenC.hx:334: characters 10-17) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenC.hx:334: characters 18-19) }]), pos => #pos(bootstrap/GenC.hx:334: characters 10-20) },{ expr => ECall({ expr => EConst(CIdent(TString)), pos => #pos(bootstrap/GenC.hx:334: characters 22-29) },[{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenC.hx:334: characters 30-31) }]), pos => #pos(bootstrap/GenC.hx:334: characters 22-32) }]), pos => #pos(bootstrap/GenC.hx:334: characters 9-33) }], pos => #pos(bootstrap/GenC.hx:334: characters 4-81), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CString(@require takes string as argument)), pos => #pos(bootstrap/GenC.hx:335: characters 18-53) }), pos => #pos(bootstrap/GenC.hx:335: characters 12-17) }]), pos => #pos(bootstrap/GenC.hx:335: characters 4-17) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:335: characters 9-10) }], pos => #pos(bootstrap/GenC.hx:335: characters 4-17), guard => null }],null), pos => #pos(bootstrap/GenC.hx:332: lines 332-336) },null), pos => #pos(bootstrap/GenC.hx:332: lines 332-336) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:337: characters 3-4) },{ expr => EConst(CString(/* declare class $cname */)), pos => #pos(bootstrap/GenC.hx:337: characters 8-36) }), pos => #pos(bootstrap/GenC.hx:337: characters 3-36) }]), pos => #pos(bootstrap/GenC.hx:329: lines 329-337) }, values => [{ expr => ECall({ expr => EConst(CIdent(TClass)), pos => #pos(bootstrap/GenC.hx:329: characters 7-13) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:329: characters 14-15) },{ expr => EConst(CIdent(ext)), pos => #pos(bootstrap/GenC.hx:329: characters 17-20) },{ expr => EConst(CIdent(impl)), pos => #pos(bootstrap/GenC.hx:329: characters 22-26) },{ expr => EConst(CIdent(fields)), pos => #pos(bootstrap/GenC.hx:329: characters 28-34) },{ expr => EConst(CIdent(true)), pos => #pos(bootstrap/GenC.hx:329: characters 36-40) }]), pos => #pos(bootstrap/GenC.hx:329: characters 7-41) }], pos => #pos(bootstrap/GenC.hx:329: lines 329-337), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EConst(CIdent(extractTypeName)), pos => #pos(bootstrap/GenC.hx:339: characters 15-30) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:339: characters 31-32) }]), pos => #pos(bootstrap/GenC.hx:339: characters 15-33) }, name => cname, type => null, ??? => #pos(bootstrap/GenC.hx:339: characters 7-12) }]), pos => #pos(bootstrap/GenC.hx:339: characters 3-34) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:340: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EParenthesis({ expr => ETernary({ expr => EConst(CIdent(external)), pos => #pos(bootstrap/GenC.hx:340: characters 8-16) },{ expr => EConst(CString(/* declare class )), pos => #pos(bootstrap/GenC.hx:340: characters 17-36) },{ expr => EConst(CString(class )), pos => #pos(bootstrap/GenC.hx:340: characters 39-47) }), pos => #pos(bootstrap/GenC.hx:340: characters 8-47) }), pos => #pos(bootstrap/GenC.hx:340: characters 7-48) },{ expr => EConst(CIdent(cname)), pos => #pos(bootstrap/GenC.hx:340: characters 51-56) }), pos => #pos(bootstrap/GenC.hx:340: characters 7-56) }), pos => #pos(bootstrap/GenC.hx:340: characters 3-56) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(ext)), pos => #pos(bootstrap/GenC.hx:341: characters 7-10) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:341: characters 14-18) }), pos => #pos(bootstrap/GenC.hx:341: characters 7-18) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:341: characters 20-21) },{ expr => EBinop(OpAdd,{ expr => EConst(CString( extends )), pos => #pos(bootstrap/GenC.hx:341: characters 25-36) },{ expr => ECall({ expr => EConst(CIdent(extractTypeName)), pos => #pos(bootstrap/GenC.hx:341: characters 39-54) },[{ expr => EConst(CIdent(ext)), pos => #pos(bootstrap/GenC.hx:341: characters 55-58) }]), pos => #pos(bootstrap/GenC.hx:341: characters 39-59) }), pos => #pos(bootstrap/GenC.hx:341: characters 25-59) }), pos => #pos(bootstrap/GenC.hx:341: characters 20-59) },null), pos => #pos(bootstrap/GenC.hx:341: characters 3-59) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:342: characters 3-4) },{ expr => EConst(CString( {
)), pos => #pos(bootstrap/GenC.hx:342: characters 8-14) }), pos => #pos(bootstrap/GenC.hx:342: characters 3-14) },{ expr => EVars([{ expr => { expr => EArrayDecl([]), pos => #pos(bootstrap/GenC.hx:343: characters 15-17) }, name => after, type => null, ??? => #pos(bootstrap/GenC.hx:343: characters 7-12) }]), pos => #pos(bootstrap/GenC.hx:343: characters 3-18) },{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenC.hx:344: characters 8-9) },{ expr => EConst(CIdent(fields)), pos => #pos(bootstrap/GenC.hx:344: characters 13-19) }), pos => #pos(bootstrap/GenC.hx:344: characters 8-19) },{ expr => EBlock([{ expr => EVars([{ expr => { expr => EConst(CString()), pos => #pos(bootstrap/GenC.hx:345: characters 15-17) }, name => code, type => null, ??? => #pos(bootstrap/GenC.hx:345: characters 8-12) }]), pos => #pos(bootstrap/GenC.hx:345: characters 4-18) },{ expr => EVars([{ expr => { expr => EConst(CIdent(false)), pos => #pos(bootstrap/GenC.hx:346: characters 18-23) }, name => statics, type => null, ??? => #pos(bootstrap/GenC.hx:346: characters 8-15) }]), pos => #pos(bootstrap/GenC.hx:346: characters 4-24) },{ expr => EFunction(unmeta,{ args => [{ meta => [], name => f, type => null, ??? => #pos(bootstrap/GenC.hx:348: characters 20-21), opt => false, value => null }], expr => { expr => EBlock([{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenC.hx:349: characters 12-13) }), pos => #pos(bootstrap/GenC.hx:349: characters 11-14) },[{ expr => { expr => EBlock([{ expr => EReturn({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenC.hx:350: characters 21-22) }), pos => #pos(bootstrap/GenC.hx:350: characters 14-22) }]), pos => #pos(bootstrap/GenC.hx:350: characters 6-22) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:350: characters 11-12) }], pos => #pos(bootstrap/GenC.hx:350: characters 6-22), guard => null }],null), pos => #pos(bootstrap/GenC.hx:349: lines 349-351) }]), pos => #pos(bootstrap/GenC.hx:348: lines 348-352) }, params => [], ret => null }), pos => #pos(bootstrap/GenC.hx:348: lines 348-352) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenC.hx:354: characters 4-5) },{ expr => ECall({ expr => EConst(CIdent(unmeta)), pos => #pos(bootstrap/GenC.hx:354: characters 8-14) },[{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenC.hx:354: characters 15-16) }]), pos => #pos(bootstrap/GenC.hx:354: characters 8-17) }), pos => #pos(bootstrap/GenC.hx:354: characters 4-17) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenC.hx:356: characters 11-12) }), pos => #pos(bootstrap/GenC.hx:356: characters 10-13) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenC.hx:357: characters 26-27) },{ expr => EConst(CIdent(field)), pos => #pos(bootstrap/GenC.hx:357: characters 30-35) }), pos => #pos(bootstrap/GenC.hx:357: characters 26-35) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(statics)), pos => #pos(bootstrap/GenC.hx:357: characters 37-44) },{ expr => EConst(CIdent(true)), pos => #pos(bootstrap/GenC.hx:357: characters 47-51) }), pos => #pos(bootstrap/GenC.hx:357: characters 37-51) }]), pos => #pos(bootstrap/GenC.hx:357: characters 5-51) }, values => [{ expr => ECall({ expr => EConst(CIdent(TStatic)), pos => #pos(bootstrap/GenC.hx:357: characters 10-17) },[{ expr => EConst(CIdent(field)), pos => #pos(bootstrap/GenC.hx:357: characters 18-23) }]), pos => #pos(bootstrap/GenC.hx:357: characters 10-24) }], pos => #pos(bootstrap/GenC.hx:357: characters 5-51), guard => null },{ expr => { expr => EBlock([{ expr => EBlock([]), pos => #pos(bootstrap/GenC.hx:358: characters 13-15) }]), pos => #pos(bootstrap/GenC.hx:358: characters 5-15) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:358: characters 10-11) }], pos => #pos(bootstrap/GenC.hx:358: characters 5-15), guard => null }],null), pos => #pos(bootstrap/GenC.hx:356: lines 356-359) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenC.hx:360: characters 4-5) },{ expr => ECall({ expr => EConst(CIdent(unmeta)), pos => #pos(bootstrap/GenC.hx:360: characters 8-14) },[{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenC.hx:360: characters 15-16) }]), pos => #pos(bootstrap/GenC.hx:360: characters 8-17) }), pos => #pos(bootstrap/GenC.hx:360: characters 4-17) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenC.hx:362: characters 11-12) }), pos => #pos(bootstrap/GenC.hx:362: characters 10-13) },[{ expr => { expr => EBlock([{ expr => EBlock([{ expr => EIf({ expr => EBinop(OpEq,{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:365: characters 10-14) },{ expr => EConst(CString(new)), pos => #pos(bootstrap/GenC.hx:365: characters 18-23) }), pos => #pos(bootstrap/GenC.hx:365: characters 10-23) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:365: characters 25-29) },{ expr => EConst(CString(constructor)), pos => #pos(bootstrap/GenC.hx:365: characters 32-45) }), pos => #pos(bootstrap/GenC.hx:365: characters 25-45) },null), pos => #pos(bootstrap/GenC.hx:365: characters 7-45) },{ expr => EIf({ expr => EConst(CIdent(statics)), pos => #pos(bootstrap/GenC.hx:366: characters 10-17) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenC.hx:366: characters 19-23) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(cname)), pos => #pos(bootstrap/GenC.hx:366: characters 27-32) },{ expr => EConst(CString(.)), pos => #pos(bootstrap/GenC.hx:366: characters 35-38) }), pos => #pos(bootstrap/GenC.hx:366: characters 27-38) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:366: characters 41-45) },rename), pos => #pos(bootstrap/GenC.hx:366: characters 41-52) },[]), pos => #pos(bootstrap/GenC.hx:366: characters 41-54) }), pos => #pos(bootstrap/GenC.hx:366: characters 27-54) },{ expr => EConst(CString( = function)), pos => #pos(bootstrap/GenC.hx:366: characters 57-70) }), pos => #pos(bootstrap/GenC.hx:366: characters 27-70) }), pos => #pos(bootstrap/GenC.hx:366: characters 19-70) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenC.hx:367: characters 12-16) },{ expr => EBinop(OpAdd,{ expr => EConst(CString(	)), pos => #pos(bootstrap/GenC.hx:367: characters 20-24) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:367: characters 27-31) },rename), pos => #pos(bootstrap/GenC.hx:367: characters 27-38) },[]), pos => #pos(bootstrap/GenC.hx:367: characters 27-40) }), pos => #pos(bootstrap/GenC.hx:367: characters 20-40) }), pos => #pos(bootstrap/GenC.hx:367: characters 12-40) }), pos => #pos(bootstrap/GenC.hx:366: lines 366-367) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenC.hx:368: characters 7-11) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(()), pos => #pos(bootstrap/GenC.hx:368: characters 15-18) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:368: characters 26-27) },{ expr => EConst(CIdent(vars)), pos => #pos(bootstrap/GenC.hx:368: characters 31-35) }), pos => #pos(bootstrap/GenC.hx:368: characters 26-35) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:369: characters 16-17) }), pos => #pos(bootstrap/GenC.hx:369: characters 15-18) },[{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:371: characters 20-24) },rename), pos => #pos(bootstrap/GenC.hx:371: characters 20-31) },[]), pos => #pos(bootstrap/GenC.hx:371: characters 20-33) }, name => name, type => null, ??? => #pos(bootstrap/GenC.hx:371: characters 13-17) }]), pos => #pos(bootstrap/GenC.hx:371: characters 9-34) },{ expr => EBinop(OpAssign,{ expr => EArray({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenC.hx:372: characters 9-20) },{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:372: characters 21-22) }), pos => #pos(bootstrap/GenC.hx:372: characters 9-23) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:372: characters 26-30) }), pos => #pos(bootstrap/GenC.hx:372: characters 9-30) }]), pos => #pos(bootstrap/GenC.hx:370: lines 370-372) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenC.hx:370: characters 14-18) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:370: characters 19-23) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:370: characters 25-26) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:370: characters 28-29) }]), pos => #pos(bootstrap/GenC.hx:370: characters 14-30) }], pos => #pos(bootstrap/GenC.hx:370: lines 370-372), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenC.hx:373: characters 23-24) }), pos => #pos(bootstrap/GenC.hx:373: characters 17-22) }]), pos => #pos(bootstrap/GenC.hx:373: characters 9-22) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:373: characters 14-15) }], pos => #pos(bootstrap/GenC.hx:373: characters 9-22), guard => null }],null), pos => #pos(bootstrap/GenC.hx:369: lines 369-374) }), pos => #pos(bootstrap/GenC.hx:368: lines 368-374) }]), pos => #pos(bootstrap/GenC.hx:368: lines 368-375) },join), pos => #pos(bootstrap/GenC.hx:368: lines 368-375) },[{ expr => EConst(CString(, )), pos => #pos(bootstrap/GenC.hx:375: characters 14-18) }]), pos => #pos(bootstrap/GenC.hx:368: lines 368-375) }), pos => #pos(bootstrap/GenC.hx:368: lines 368-375) },{ expr => EConst(CString() )), pos => #pos(bootstrap/GenC.hx:375: characters 22-26) }), pos => #pos(bootstrap/GenC.hx:368: lines 368-375) }), pos => #pos(bootstrap/GenC.hx:368: lines 368-375) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:376: characters 11-15) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenC.hx:376: characters 19-23) }), pos => #pos(bootstrap/GenC.hx:376: characters 11-23) },{ expr => EBlock([{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:377: characters 16-20) }), pos => #pos(bootstrap/GenC.hx:377: characters 15-21) },[{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenC.hx:379: characters 9-16) },[]), pos => #pos(bootstrap/GenC.hx:379: characters 9-18) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenC.hx:380: characters 9-13) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:380: characters 17-21) },stringify), pos => #pos(bootstrap/GenC.hx:380: characters 17-31) },[]), pos => #pos(bootstrap/GenC.hx:380: characters 17-33) }), pos => #pos(bootstrap/GenC.hx:380: characters 9-33) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenC.hx:381: characters 9-15) },[]), pos => #pos(bootstrap/GenC.hx:381: characters 9-17) }]), pos => #pos(bootstrap/GenC.hx:378: lines 378-381) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenC.hx:378: characters 14-20) },[{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenC.hx:378: characters 21-23) }]), pos => #pos(bootstrap/GenC.hx:378: characters 14-24) }], pos => #pos(bootstrap/GenC.hx:378: lines 378-381), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenC.hx:383: characters 10-17) },[]), pos => #pos(bootstrap/GenC.hx:383: characters 10-19) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenC.hx:384: characters 10-14) },{ expr => EBinop(OpAdd,{ expr => EConst(CString({
$tabs)), pos => #pos(bootstrap/GenC.hx:384: characters 18-28) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:384: characters 29-33) },stringify), pos => #pos(bootstrap/GenC.hx:384: characters 29-43) },[]), pos => #pos(bootstrap/GenC.hx:384: characters 29-45) }), pos => #pos(bootstrap/GenC.hx:384: characters 18-45) }), pos => #pos(bootstrap/GenC.hx:384: characters 10-45) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenC.hx:385: characters 10-16) },[]), pos => #pos(bootstrap/GenC.hx:385: characters 10-18) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenC.hx:386: characters 10-14) },{ expr => EConst(CString(
$tabs})), pos => #pos(bootstrap/GenC.hx:386: characters 18-28) }), pos => #pos(bootstrap/GenC.hx:386: characters 10-28) }]), pos => #pos(bootstrap/GenC.hx:382: lines 382-386) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:382: characters 14-15) }], pos => #pos(bootstrap/GenC.hx:382: lines 382-386), guard => null }],null), pos => #pos(bootstrap/GenC.hx:377: lines 377-387) }]), pos => #pos(bootstrap/GenC.hx:376: lines 376-388) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenC.hx:389: characters 12-16) },{ expr => EConst(CString({})), pos => #pos(bootstrap/GenC.hx:389: characters 20-24) }), pos => #pos(bootstrap/GenC.hx:389: characters 12-24) }), pos => #pos(bootstrap/GenC.hx:376: lines 376-389) }]), pos => #pos(bootstrap/GenC.hx:364: lines 364-390) }]), pos => #pos(bootstrap/GenC.hx:363: lines 363-390) }, values => [{ expr => ECall({ expr => EConst(CIdent(TFunction)), pos => #pos(bootstrap/GenC.hx:363: characters 10-19) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:363: characters 20-24) },{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:363: characters 26-30) },{ expr => EConst(CIdent(vars)), pos => #pos(bootstrap/GenC.hx:363: characters 32-36) },{ expr => EConst(CIdent(rettype)), pos => #pos(bootstrap/GenC.hx:363: characters 38-45) }]), pos => #pos(bootstrap/GenC.hx:363: characters 10-46) }], pos => #pos(bootstrap/GenC.hx:363: lines 363-390), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenC.hx:391: characters 34-38) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(cname)), pos => #pos(bootstrap/GenC.hx:391: characters 42-47) },{ expr => EConst(CString(.)), pos => #pos(bootstrap/GenC.hx:391: characters 50-53) }), pos => #pos(bootstrap/GenC.hx:391: characters 42-53) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:391: characters 56-60) },rename), pos => #pos(bootstrap/GenC.hx:391: characters 56-67) },[]), pos => #pos(bootstrap/GenC.hx:391: characters 56-69) }), pos => #pos(bootstrap/GenC.hx:391: characters 42-69) },{ expr => EConst(CString( = )), pos => #pos(bootstrap/GenC.hx:391: characters 72-77) }), pos => #pos(bootstrap/GenC.hx:391: characters 42-77) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:391: characters 80-84) },stringify), pos => #pos(bootstrap/GenC.hx:391: characters 80-94) },[]), pos => #pos(bootstrap/GenC.hx:391: characters 80-96) }), pos => #pos(bootstrap/GenC.hx:391: characters 42-96) }), pos => #pos(bootstrap/GenC.hx:391: characters 34-96) }]), pos => #pos(bootstrap/GenC.hx:391: characters 5-96) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenC.hx:391: characters 10-14) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:391: characters 15-19) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:391: characters 21-22) },{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenC.hx:391: characters 24-28) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:391: characters 30-31) }]), pos => #pos(bootstrap/GenC.hx:391: characters 10-32) }], pos => #pos(bootstrap/GenC.hx:391: characters 5-96), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenC.hx:392: characters 13-17) },{ expr => EBinop(OpAdd,{ expr => EConst(CString()), pos => #pos(bootstrap/GenC.hx:392: characters 21-23) },{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenC.hx:392: characters 26-27) }), pos => #pos(bootstrap/GenC.hx:392: characters 21-27) }), pos => #pos(bootstrap/GenC.hx:392: characters 13-27) }]), pos => #pos(bootstrap/GenC.hx:392: characters 5-27) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:392: characters 10-11) }], pos => #pos(bootstrap/GenC.hx:392: characters 5-27), guard => null }],null), pos => #pos(bootstrap/GenC.hx:362: lines 362-393) },{ expr => EIf({ expr => EConst(CIdent(statics)), pos => #pos(bootstrap/GenC.hx:394: characters 7-14) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(after)), pos => #pos(bootstrap/GenC.hx:394: characters 16-21) },push), pos => #pos(bootstrap/GenC.hx:394: characters 16-26) },[{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenC.hx:394: characters 27-31) },{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenC.hx:394: characters 34-38) }), pos => #pos(bootstrap/GenC.hx:394: characters 27-38) }]), pos => #pos(bootstrap/GenC.hx:394: characters 16-39) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:394: characters 45-46) },{ expr => EBinop(OpAdd,{ expr => EConst(CString(	)), pos => #pos(bootstrap/GenC.hx:394: characters 50-54) },{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenC.hx:394: characters 57-61) }), pos => #pos(bootstrap/GenC.hx:394: characters 50-61) }), pos => #pos(bootstrap/GenC.hx:394: characters 45-61) }), pos => #pos(bootstrap/GenC.hx:394: characters 4-61) }]), pos => #pos(bootstrap/GenC.hx:344: lines 344-395) }), pos => #pos(bootstrap/GenC.hx:344: lines 344-395) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:396: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(
)), pos => #pos(bootstrap/GenC.hx:396: characters 8-12) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenC.hx:396: characters 15-19) }), pos => #pos(bootstrap/GenC.hx:396: characters 8-19) },{ expr => EConst(CString(})), pos => #pos(bootstrap/GenC.hx:396: characters 22-25) }), pos => #pos(bootstrap/GenC.hx:396: characters 8-25) },{ expr => EParenthesis({ expr => ETernary({ expr => EConst(CIdent(external)), pos => #pos(bootstrap/GenC.hx:396: characters 29-37) },{ expr => EConst(CString( */)), pos => #pos(bootstrap/GenC.hx:396: characters 38-43) },{ expr => EConst(CString()), pos => #pos(bootstrap/GenC.hx:396: characters 44-46) }), pos => #pos(bootstrap/GenC.hx:396: characters 29-46) }), pos => #pos(bootstrap/GenC.hx:396: characters 28-47) }), pos => #pos(bootstrap/GenC.hx:396: characters 8-47) }), pos => #pos(bootstrap/GenC.hx:396: characters 3-47) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:397: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EConst(CString(
)), pos => #pos(bootstrap/GenC.hx:397: characters 8-12) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(after)), pos => #pos(bootstrap/GenC.hx:397: characters 13-18) },join), pos => #pos(bootstrap/GenC.hx:397: characters 13-23) },[{ expr => EConst(CString(;
)), pos => #pos(bootstrap/GenC.hx:397: characters 24-29) }]), pos => #pos(bootstrap/GenC.hx:397: characters 13-30) }), pos => #pos(bootstrap/GenC.hx:397: characters 8-30) }), pos => #pos(bootstrap/GenC.hx:397: characters 3-30) },{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:398: characters 3-4) }]), pos => #pos(bootstrap/GenC.hx:338: lines 338-398) }, values => [{ expr => ECall({ expr => EConst(CIdent(TClass)), pos => #pos(bootstrap/GenC.hx:338: characters 7-13) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:338: characters 14-15) },{ expr => EConst(CIdent(ext)), pos => #pos(bootstrap/GenC.hx:338: characters 17-20) },{ expr => EConst(CIdent(impl)), pos => #pos(bootstrap/GenC.hx:338: characters 22-26) },{ expr => EConst(CIdent(fields)), pos => #pos(bootstrap/GenC.hx:338: characters 28-34) },{ expr => EConst(CIdent(external)), pos => #pos(bootstrap/GenC.hx:338: characters 36-44) }]), pos => #pos(bootstrap/GenC.hx:338: characters 7-45) }], pos => #pos(bootstrap/GenC.hx:338: lines 338-398), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:401: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(module )), pos => #pos(bootstrap/GenC.hx:401: characters 7-16) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(path)), pos => #pos(bootstrap/GenC.hx:401: characters 19-23) },join), pos => #pos(bootstrap/GenC.hx:401: characters 19-28) },[{ expr => EConst(CString(.)), pos => #pos(bootstrap/GenC.hx:401: characters 29-32) }]), pos => #pos(bootstrap/GenC.hx:401: characters 19-33) }), pos => #pos(bootstrap/GenC.hx:401: characters 7-33) },{ expr => EConst(CString( {
)), pos => #pos(bootstrap/GenC.hx:401: characters 36-42) }), pos => #pos(bootstrap/GenC.hx:401: characters 7-42) }), pos => #pos(bootstrap/GenC.hx:401: characters 3-42) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenC.hx:402: characters 3-10) },[]), pos => #pos(bootstrap/GenC.hx:402: characters 3-12) },{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:403: characters 8-9) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenC.hx:403: characters 13-15) }), pos => #pos(bootstrap/GenC.hx:403: characters 8-15) },{ expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:404: characters 4-5) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenC.hx:404: characters 9-13) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenC.hx:404: characters 16-17) },stringify), pos => #pos(bootstrap/GenC.hx:404: characters 16-27) },[]), pos => #pos(bootstrap/GenC.hx:404: characters 16-29) }), pos => #pos(bootstrap/GenC.hx:404: characters 9-29) },{ expr => EConst(CString(;
)), pos => #pos(bootstrap/GenC.hx:404: characters 32-37) }), pos => #pos(bootstrap/GenC.hx:404: characters 9-37) }), pos => #pos(bootstrap/GenC.hx:404: characters 4-37) }]), pos => #pos(bootstrap/GenC.hx:403: lines 403-405) }), pos => #pos(bootstrap/GenC.hx:403: lines 403-405) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenC.hx:406: characters 3-9) },[]), pos => #pos(bootstrap/GenC.hx:406: characters 3-11) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:407: characters 3-4) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenC.hx:407: characters 7-11) }), pos => #pos(bootstrap/GenC.hx:407: characters 3-11) },{ expr => EConst(CString(})), pos => #pos(bootstrap/GenC.hx:407: characters 14-17) }), pos => #pos(bootstrap/GenC.hx:407: characters 3-17) }]), pos => #pos(bootstrap/GenC.hx:400: lines 400-407) }, values => [{ expr => ECall({ expr => EConst(CIdent(TModule)), pos => #pos(bootstrap/GenC.hx:400: characters 7-14) },[{ expr => EConst(CIdent(path)), pos => #pos(bootstrap/GenC.hx:400: characters 15-19) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenC.hx:400: characters 21-23) }]), pos => #pos(bootstrap/GenC.hx:400: characters 7-24) }], pos => #pos(bootstrap/GenC.hx:400: lines 400-407), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString({})), pos => #pos(bootstrap/GenC.hx:408: characters 23-27) }]), pos => #pos(bootstrap/GenC.hx:408: characters 2-27) }, values => [{ expr => ECall({ expr => EConst(CIdent(TObject)), pos => #pos(bootstrap/GenC.hx:408: characters 7-14) },[{ expr => EArrayDecl([]), pos => #pos(bootstrap/GenC.hx:408: characters 15-17) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:408: characters 19-20) }]), pos => #pos(bootstrap/GenC.hx:408: characters 7-21) }], pos => #pos(bootstrap/GenC.hx:408: characters 2-27), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString({)), pos => #pos(bootstrap/GenC.hx:409: characters 27-30) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenC.hx:409: characters 39-40) },{ expr => EBinop(OpInterval,{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenC.hx:409: characters 44-48) },{ expr => EField({ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenC.hx:409: characters 48-50) },length), pos => #pos(bootstrap/GenC.hx:409: characters 48-57) }), pos => #pos(bootstrap/GenC.hx:409: characters 44-57) }), pos => #pos(bootstrap/GenC.hx:409: characters 39-57) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(names)), pos => #pos(bootstrap/GenC.hx:409: characters 59-64) },{ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenC.hx:409: characters 65-66) }), pos => #pos(bootstrap/GenC.hx:409: characters 59-67) },rename), pos => #pos(bootstrap/GenC.hx:409: characters 59-74) },[]), pos => #pos(bootstrap/GenC.hx:409: characters 59-76) },{ expr => EConst(CString(:)), pos => #pos(bootstrap/GenC.hx:409: characters 79-82) }), pos => #pos(bootstrap/GenC.hx:409: characters 59-82) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenC.hx:409: characters 85-87) },{ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenC.hx:409: characters 88-89) }), pos => #pos(bootstrap/GenC.hx:409: characters 85-90) },stringify), pos => #pos(bootstrap/GenC.hx:409: characters 85-100) },[]), pos => #pos(bootstrap/GenC.hx:409: characters 85-102) }), pos => #pos(bootstrap/GenC.hx:409: characters 59-102) }), pos => #pos(bootstrap/GenC.hx:409: characters 34-102) }]), pos => #pos(bootstrap/GenC.hx:409: characters 33-103) },join), pos => #pos(bootstrap/GenC.hx:409: characters 33-108) },[{ expr => EConst(CString(,)), pos => #pos(bootstrap/GenC.hx:409: characters 109-112) }]), pos => #pos(bootstrap/GenC.hx:409: characters 33-113) }), pos => #pos(bootstrap/GenC.hx:409: characters 27-113) },{ expr => EConst(CString(})), pos => #pos(bootstrap/GenC.hx:409: characters 116-119) }), pos => #pos(bootstrap/GenC.hx:409: characters 27-119) }]), pos => #pos(bootstrap/GenC.hx:409: characters 2-119) }, values => [{ expr => ECall({ expr => EConst(CIdent(TObject)), pos => #pos(bootstrap/GenC.hx:409: characters 7-14) },[{ expr => EConst(CIdent(names)), pos => #pos(bootstrap/GenC.hx:409: characters 15-20) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenC.hx:409: characters 22-24) }]), pos => #pos(bootstrap/GenC.hx:409: characters 7-25) }], pos => #pos(bootstrap/GenC.hx:409: characters 2-119), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EConst(CString(static )), pos => #pos(bootstrap/GenC.hx:411: characters 23-32) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(field)), pos => #pos(bootstrap/GenC.hx:411: characters 35-40) },stringify), pos => #pos(bootstrap/GenC.hx:411: characters 35-50) },[]), pos => #pos(bootstrap/GenC.hx:411: characters 35-52) }), pos => #pos(bootstrap/GenC.hx:411: characters 23-52) }]), pos => #pos(bootstrap/GenC.hx:411: characters 2-52) }, values => [{ expr => ECall({ expr => EConst(CIdent(TStatic)), pos => #pos(bootstrap/GenC.hx:411: characters 7-14) },[{ expr => EConst(CIdent(field)), pos => #pos(bootstrap/GenC.hx:411: characters 15-20) }]), pos => #pos(bootstrap/GenC.hx:411: characters 7-21) }], pos => #pos(bootstrap/GenC.hx:411: characters 2-52), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:415: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EConst(CString(/*const )), pos => #pos(bootstrap/GenC.hx:415: characters 7-17) },{ expr => ECall({ expr => EConst(CIdent(extractTypeName)), pos => #pos(bootstrap/GenC.hx:415: characters 20-35) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:415: characters 36-37) }]), pos => #pos(bootstrap/GenC.hx:415: characters 20-38) }), pos => #pos(bootstrap/GenC.hx:415: characters 7-38) }), pos => #pos(bootstrap/GenC.hx:415: characters 3-38) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:416: characters 3-4) },{ expr => EConst(CString( = {
)), pos => #pos(bootstrap/GenC.hx:416: characters 8-16) }), pos => #pos(bootstrap/GenC.hx:416: characters 3-16) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenC.hx:417: characters 3-10) },[]), pos => #pos(bootstrap/GenC.hx:417: characters 3-12) },{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenC.hx:418: characters 8-9) },{ expr => EConst(CIdent(fields)), pos => #pos(bootstrap/GenC.hx:418: characters 13-19) }), pos => #pos(bootstrap/GenC.hx:418: characters 8-19) },{ expr => EBlock([{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenC.hx:419: characters 11-12) }), pos => #pos(bootstrap/GenC.hx:419: characters 10-13) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:421: characters 5-6) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenC.hx:421: characters 10-14) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:421: characters 17-21) }), pos => #pos(bootstrap/GenC.hx:421: characters 10-21) },{ expr => EConst(CString(:)), pos => #pos(bootstrap/GenC.hx:421: characters 24-27) }), pos => #pos(bootstrap/GenC.hx:421: characters 10-27) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(val)), pos => #pos(bootstrap/GenC.hx:421: characters 30-33) },stringify), pos => #pos(bootstrap/GenC.hx:421: characters 30-43) },[]), pos => #pos(bootstrap/GenC.hx:421: characters 30-45) }), pos => #pos(bootstrap/GenC.hx:421: characters 10-45) },{ expr => EConst(CString(,
)), pos => #pos(bootstrap/GenC.hx:421: characters 48-53) }), pos => #pos(bootstrap/GenC.hx:421: characters 10-53) }), pos => #pos(bootstrap/GenC.hx:421: characters 5-53) }]), pos => #pos(bootstrap/GenC.hx:420: lines 420-421) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBinop)), pos => #pos(bootstrap/GenC.hx:420: characters 10-16) },[{ expr => EConst(CIdent(OpAssign)), pos => #pos(bootstrap/GenC.hx:420: characters 17-25) },{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenC.hx:420: characters 27-33) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:420: characters 34-38) }]), pos => #pos(bootstrap/GenC.hx:420: characters 27-39) },{ expr => EConst(CIdent(val)), pos => #pos(bootstrap/GenC.hx:420: characters 41-44) }]), pos => #pos(bootstrap/GenC.hx:420: characters 10-45) }], pos => #pos(bootstrap/GenC.hx:420: lines 420-421), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:423: characters 5-6) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenC.hx:423: characters 10-14) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:423: characters 17-21) }), pos => #pos(bootstrap/GenC.hx:423: characters 10-21) },{ expr => EConst(CString(:{},
)), pos => #pos(bootstrap/GenC.hx:423: characters 24-32) }), pos => #pos(bootstrap/GenC.hx:423: characters 10-32) }), pos => #pos(bootstrap/GenC.hx:423: characters 5-32) }]), pos => #pos(bootstrap/GenC.hx:422: lines 422-423) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenC.hx:422: characters 10-16) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:422: characters 17-21) }]), pos => #pos(bootstrap/GenC.hx:422: characters 10-22) }], pos => #pos(bootstrap/GenC.hx:422: lines 422-423), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EBinop(OpAdd,{ expr => EConst(CString(!)), pos => #pos(bootstrap/GenC.hx:424: characters 19-22) },{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenC.hx:424: characters 25-26) }), pos => #pos(bootstrap/GenC.hx:424: characters 19-26) }), pos => #pos(bootstrap/GenC.hx:424: characters 13-18) }]), pos => #pos(bootstrap/GenC.hx:424: characters 5-18) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenC.hx:424: characters 10-11) }], pos => #pos(bootstrap/GenC.hx:424: characters 5-18), guard => null }],null), pos => #pos(bootstrap/GenC.hx:419: lines 419-425) }]), pos => #pos(bootstrap/GenC.hx:418: lines 418-426) }), pos => #pos(bootstrap/GenC.hx:418: lines 418-426) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenC.hx:427: characters 3-9) },[]), pos => #pos(bootstrap/GenC.hx:427: characters 3-11) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenC.hx:428: characters 3-4) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenC.hx:428: characters 7-11) }), pos => #pos(bootstrap/GenC.hx:428: characters 3-11) },{ expr => EConst(CString(}*/)), pos => #pos(bootstrap/GenC.hx:428: characters 14-19) }), pos => #pos(bootstrap/GenC.hx:428: characters 3-19) }]), pos => #pos(bootstrap/GenC.hx:414: lines 414-428) }, values => [{ expr => ECall({ expr => EConst(CIdent(TEnum)), pos => #pos(bootstrap/GenC.hx:414: characters 7-12) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:414: characters 13-14) },{ expr => EConst(CIdent(fields)), pos => #pos(bootstrap/GenC.hx:414: characters 16-22) }]), pos => #pos(bootstrap/GenC.hx:414: characters 7-23) }], pos => #pos(bootstrap/GenC.hx:414: lines 414-428), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString()), pos => #pos(bootstrap/GenC.hx:429: characters 23-25) }]), pos => #pos(bootstrap/GenC.hx:429: characters 2-25) }, values => [{ expr => ECall({ expr => EConst(CIdent(TType)), pos => #pos(bootstrap/GenC.hx:429: characters 7-12) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:429: characters 13-17) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenC.hx:429: characters 19-20) }]), pos => #pos(bootstrap/GenC.hx:429: characters 7-21) }], pos => #pos(bootstrap/GenC.hx:429: characters 2-25), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(_)), pos => #pos(bootstrap/GenC.hx:430: characters 20-23) }]), pos => #pos(bootstrap/GenC.hx:430: characters 2-23) }, values => [{ expr => EConst(CIdent(TUnderscore)), pos => #pos(bootstrap/GenC.hx:430: characters 7-18) }], pos => #pos(bootstrap/GenC.hx:430: characters 2-23), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EArray({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenC.hx:432: characters 3-14) },{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenC.hx:432: characters 15-19) }), pos => #pos(bootstrap/GenC.hx:432: characters 3-20) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:432: characters 23-27) }), pos => #pos(bootstrap/GenC.hx:432: characters 3-27) },{ expr => ECall({ expr => EField({ expr => EField({ expr => EConst(CIdent(Project)), pos => #pos(bootstrap/GenC.hx:433: characters 3-10) },isExternal), pos => #pos(bootstrap/GenC.hx:433: characters 3-21) },set), pos => #pos(bootstrap/GenC.hx:433: characters 3-25) },[{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenC.hx:433: characters 26-30) },{ expr => EConst(CIdent(true)), pos => #pos(bootstrap/GenC.hx:433: characters 32-36) }]), pos => #pos(bootstrap/GenC.hx:433: characters 3-37) },{ expr => EConst(CString(//declare $name)), pos => #pos(bootstrap/GenC.hx:434: characters 3-20) }]), pos => #pos(bootstrap/GenC.hx:431: lines 431-434) }, values => [{ expr => ECall({ expr => EConst(CIdent(TDeclare)), pos => #pos(bootstrap/GenC.hx:431: characters 7-15) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenC.hx:431: characters 16-20) },{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenC.hx:431: characters 22-26) }]), pos => #pos(bootstrap/GenC.hx:431: characters 7-27) }], pos => #pos(bootstrap/GenC.hx:431: lines 431-434), guard => null }],null)) tmp
		}

		private static function unwrapBlock(e: data.Node): data.Node {
			if(e.index == 9) {
				if({ let data.Node.TBlock(value) = e value }.length == 1) {
					var e1: data.Node = { let data.Node.TBlock(value) = e value }[0]
					return e1
				} else {
					let data.Node.TBlock(el) = e
					throw new HaxeError('Unwrapped block has multiple expressions')
				}
			} else return e
		}

		static function extractTypeName(t: data.NodeType): String {
			switch (t.index) {
				case 0: {
					let data.NodeType.Type(name) = t
					return name
				}

				case 1: {
					let data.NodeType.ParamentricType(name1, _) = t
					return name1
				}
				
				case _: throw new HaxeError('Type has no name: ' + Std.string(t))
			}
		}

	}
}
