module {
	class List< T > {
		private var h: list.ListNode< T >
		private var q: list.ListNode< T >
		var length: Int
		function add(item: T): Void {
			var x: list.ListNode< T > = new ListNode< T >(item, null)
			if (this.h == null) this.h = x else this.q.next = x
			this.q = x
			this.length++
		}

		function push(item: T): Void {
			var x: list.ListNode< T > = new ListNode< T >(item, this.h)
			this.h = x
			if (this.q == null) this.q = x
			this.length++
		}

		function first(): T? {
			if (this.h == null) return null else return this.h.item
		}

		function last(): T? {
			if (this.q == null) return null else return this.q.item
		}

		function pop(): T? {
			if (this.h == null) return null
			var x: T = this.h.item
			this.h = this.h.next
			if (this.h == null) this.q = null
			this.length--
			return x
		}

		function isEmpty(): Bool {
			return this.h == null
		}

		function clear(): Void {
			this.h = null
			this.q = null
			this.length = 0
		}

		function remove(v: T): Bool {
			var prev: list.ListNode< T > = null
			var l: list.ListNode< T > = this.h
			while (l != null) {
				if (l.item == v) {
					if (prev == null) this.h = l.next else prev.next = l.next
					if (this.q == l) this.q = prev
					this.length--
					return true
				}
				prev = l
				l = l.next
			}
			return false
		}

		@maybeUsed
		function iterator(): list.ListIterator< T > {
			return new ListIterator< T >(this.h)
		}

		function toString(): String {
			var s_b: String = ''
			var first: Bool = true
			var l: list.ListNode< T > = this.h
			s_b += '{'
			while (l != null) {
				if (first) first = false else s_b += ', '
				s_b += Std.string(Std.string(l.item))
				l = l.next
			}
			s_b += '}'
			return s_b
		}

		function join(sep: String): String {
			var s_b: String = ''
			var first: Bool = true
			var l: list.ListNode< T > = this.h
			while (l != null) {
				if (first) first = false else s_b += if (sep == null) 'null' else '' + sep
				s_b += Std.string(l.item)
				l = l.next
			}
			return s_b
		}

		function filter(f: T=>Bool): List< T > {
			var l2: List< T > = new List< T >()
			var l: list.ListNode< T > = this.h
			while (l != null) {
				var v: T = l.item
				l = l.next
				if (f(v)) l2.add(v)
			}
			return l2
		}

		function map(f: T=>list.X): List< list.X > {
			var b: List< list.X > = new List< list.X >()
			var l: list.ListNode< T > = this.h
			while (l != null) {
				var v: T = l.item
				l = l.next
				b.add(f(v))
			}
			return b
		}

		new() {
			this.length = 0
		}
	}
}
