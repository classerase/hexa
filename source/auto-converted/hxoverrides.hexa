module {
	@noDoc
	class HxOverrides {
		private static function dateStr(date: Date): String {
			var m: Int = date.getMonth() + 1
			var d: Int = date.getDate()
			var h: Int = date.getHours()
			var mi: Int = date.getMinutes()
			var s: Int = date.getSeconds()
			return date.getFullYear() + '-' + (if(m < 10) '0' + m else '' + m) + '-' + (if(d < 10) '0' + d else '' + d) + ' ' + (if(h < 10) '0' + h else '' + h) + ':' + (if(mi < 10) '0' + mi else '' + mi) + ':' + (if(s < 10) '0' + s else '' + s)
		}

		@has_untyped
		private static function strDate(s: String): Date {
			var _g: Int = s.length
			switch (_g) {
				case 8: {
					var k: [String] = s.split(':')
					var d: Date = __new__(Date)
					d['setTime'](0)
					d['setUTCHours'](k[0])
					d['setUTCMinutes'](k[1])
					d['setUTCSeconds'](k[2])
					return d
				}

				case 10: {
					var k1: [String] = s.split('-')
					return new Date((k1[0] as! Int), (k1[1] - 1 as! Int), (k1[2] as! Int), 0, 0, 0)
				}

				case 19: {
					var k2: [String] = s.split(' ')
					var y: [String] = k2[0].split('-')
					var t: [String] = k2[1].split(':')
					return new Date((y[0] as! Int), (y[1] - 1 as! Int), (y[2] as! Int), (t[0] as! Int), (t[1] as! Int), (t[2] as! Int))
				}
				
				case _: throw new HaxeError('Invalid date format : ' + s)
			}
		}

		private static function cca(s: String, index: Int): Int? {
			var x: Int? = (s as! {charCodeAt: Int=>Int?}).charCodeAt(index)
			if(x != x) return (__js__('undefined') as! Any)
			return x
		}

		@has_untyped
		private static function substr(s: String, pos: Int, len?: Int?): String {
			if(len == null) len = s.length else if(len < 0) {
				if(pos == 0) len = s.length + len else return ''
			}
			return s.substr(pos, len)
		}

		@has_untyped
		private static function indexOf(a: [hxoverrides.T], obj: hxoverrides.T, i: Int): Int {
			var len: Int = a.length
			if(i < 0) {
				i += len
				if(i < 0) i = 0
			}
			while(i < len) {
				if(__js__('a[i] === obj')) return i
				i++
			}
			return -1
		}

		@has_untyped
		private static function lastIndexOf(a: [hxoverrides.T], obj: hxoverrides.T, i: Int): Int {
			var len: Int = a.length
			if(i >= len) i = len - 1 else if(i < 0) i += len
			while(i >= 0) {
				if(__js__('a[i] === obj')) return i
				i--
			}
			return -1
		}

		private static function remove(a: [hxoverrides.T], obj: hxoverrides.T): Bool {
			var i: Int = a.indexOf(obj)
			if(i == -1) return false
			a.splice(i, 1)
			return true
		}

		@has_untyped
		private static function iter(a: [hxoverrides.T]): stdtypes.Iterator< hxoverrides.T > {
			return {cur: 0, arr: a, hasNext: function(): Bool {
				return this.cur < this.arr.length
			}, next: function(): hxoverrides.T {
				return this.arr[this.cur++]
			}}
		}

	}
}
