module {
	@keepInit
	@coreApi
	class Std {
		@has_untyped
		static function is(v: Any, t: Any): Bool {
			return js.boot.Boot.__instanceof(v, t)
		}

		@has_untyped
		static function instance(value: std.T, c: Class< std.S >): std.S {
			if(__instanceof__(value, c)) return (value as! std.S) else return null
		}

		@has_untyped
		@pure
		static function string(s: Any): String {
			return js.boot.Boot.__string_rec(s, '')
		}

		static function int(x: Float): Int {
			return (x as! Int) | 0
		}

		@has_untyped
		@pure
		static function parseInt(x: String): Int? {
			var v: Int = __js__('parseInt')(x, 10)
			if(v == 0 && (HxOverrides.cca(x, 1) == 120 || HxOverrides.cca(x, 1) == 88)) v = __js__('parseInt')(x)
			if(__js__('isNaN')(v)) return null
			return (v as! Int?)
		}

		@has_untyped
		static function parseFloat(x: String): Float {
			return __js__('parseFloat')(x)
		}

		static function random(x: Int): Int {
			if(x <= 0) return 0 else return Math.floor(Math.random() * x)
		}

	}
}

// __init__
{
	__feature__('js.Boot.getClass', String.prototype.__class__ = __feature__('Type.resolveClass', _hxClasses['String'] = String, String))
	__feature__('js.Boot.isClass', String.__name__ = __feature__('Type.getClassName', {['String']}, true))
	__feature__('Type.resolveClass', _hxClasses['Array'] = Array)
	__feature__('js.Boot.isClass', Array.__name__ = __feature__('Type.getClassName', {['Array']}, true))
	__feature__('Date.*', {
		__feature__('js.Boot.getClass', __js__('Date').prototype.__class__ = __feature__('Type.resolveClass', _hxClasses['Date'] = __js__('Date'), __js__('Date')))
		__feature__('js.Boot.isClass', __js__('Date').__name__ = {['Date']})
	})
	__feature__('Int.*', var int: Any = __feature__('Type.resolveClass', _hxClasses['Int'] = {__name__: {['Int']}}, {__name__: {['Int']}}))
	__feature__('Dynamic.*', var dynamic: Any = __feature__('Type.resolveClass', _hxClasses['Dynamic'] = {__name__: {['Dynamic']}}, {__name__: {['Dynamic']}}))
	__feature__('Float.*', {
		var float: {__name__: [String]} = __feature__('Type.resolveClass', _hxClasses['Float'] = __js__('Number'), __js__('Number'))
		float.__name__ = {['Float']}
	})
	__feature__('Bool.*', {
		var bool: {__ename__: [String]} = __feature__('Type.resolveEnum', _hxClasses['Bool'] = __js__('Boolean'), __js__('Boolean'))
		bool.__ename__ = {['Bool']}
	})
	__feature__('Class.*', var clas: Any = __feature__('Type.resolveClass', _hxClasses['Class'] = {__name__: {['Class']}}, {__name__: {['Class']}}))
	__feature__('Enum.*', var enums: {:} = {:})
	__feature__('Void.*', var void: Any = __feature__('Type.resolveEnum', _hxClasses['Void'] = {__ename__: {['Void']}}, {__ename__: {['Void']}}))
}
