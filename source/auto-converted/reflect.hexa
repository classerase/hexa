module {
	@coreApi
	class Reflect {
		@has_untyped
		@pure
		static function hasField(o: Any, field: String): Bool {
			return __js__('Object').prototype.hasOwnProperty.call(o, field)
		}

		@has_untyped
		static function field(o: Any, field: String): Any {
			try {
				return o[field]
			} catch (e:Any) {
				return null
			}
		}

		@has_untyped
		static function setField(o: Any, field: String, value: Any): Void {
			o[field] = value
		}

		@has_untyped
		static function getProperty(o: Any, field: String): Any {
			var tmp: Bool
			if (o == null) return __define_feature__('Reflect.getProperty', null) else {
				var tmp1: Bool
				if (o.__properties__) {
					tmp = o.__properties__['get_' + field]
					tmp1 = tmp
				} else tmp1 = false
				if (tmp1) return o[tmp]() else return o[field]
			}
		}

		@has_untyped
		static function setProperty(o: Any, field: String, value: Any): Void {
			var tmp: Bool
			var tmp1: Bool
			if (o.__properties__) {
				tmp = o.__properties__['set_' + field]
				tmp1 = tmp
			} else tmp1 = false
			if (tmp1) o[tmp](value) else o[field] = __define_feature__('Reflect.setProperty', value)
		}

		@has_untyped
		static function callMethod(o: Any, func: haxe.constraints.Function, args: [Any]): Any {
			return func.apply(o, args)
		}

		@has_untyped
		static function fields(o: Any): [String] {
			var a: [String] = []
			if (o != null) {
				var hasOwnProperty: {call: (Any, Any)=>Bool} = __js__('Object').prototype.hasOwnProperty
				__js__('for( var f in o ) {')
				if (f != '__id__' && f != 'hx__closures__' && hasOwnProperty.call(o, f)) a.push(f)
				__js__('}')
			}
			return a
		}

		@has_untyped
		static function isFunction(f: Any): Bool {
			if (__js__('typeof(f)') == 'function') return !(__define_feature__('js.Boot.isClass', f.__name__) || __define_feature__('js.Boot.isEnum', f.__ename__)) else return false
		}

		static function compare(a: reflect.T, b: reflect.T): Int {
			if (a == b) return 0 else if ((a as! Int) > (b as! Int)) return 1 else return -1
		}

		static function compareMethods(f1: Any, f2: Any): Bool {
			if (f1 == f2) return true
			if (!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false
			if (f1.scope == f2.scope && f1.method == f2.method) return f1.method != null else return false
		}

		@has_untyped
		static function isObject(v: Any): Bool {
			if (v == null) return false
			var t: String = __js__('typeof(v)')
			if (!(t == 'string' || t == 'object' && v.__enum__ == null)) {
				if (t == 'function') return (__define_feature__('js.Boot.isClass', v.__name__) || __define_feature__('js.Boot.isEnum', v.__ename__)) != null else return false
			} else return true
		}

		static function isEnumValue(v: Any): Bool {
			if (v != null) return v.__enum__ != null else return false
		}

		@has_untyped
		static function deleteField(o: Any, field: String): Bool {
			if (!@pure __js__('Object').prototype.hasOwnProperty.call(o, field)) return false
			__js__('delete')(o[field])
			return true
		}

		static function copy(o: reflect.T): reflect.T {
			var o2: Any = {:}
			{
				var _g: Int = 0
				var _g1: [String] = Reflect.fields(o)
				while (_g < _g1.length) {
					var f: String = _g1[_g]
					_g++
					o2[f] = Reflect.field(o, f)
				}
			}
			return o2
		}

		@has_untyped
		static function makeVarArgs(f: [Any]=>Any): Any {
			return function(): Any {
				var a: [Any] = Array.prototype.slice.call(__js__('arguments'))
				return f(a)
			}
		}

	}
}
