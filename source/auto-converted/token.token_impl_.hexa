module token {
	@final
	@enums
	private class Token_Impl_ {
		@enums
		@impl
		@rename('Eof')
		static var eof: Token = (0 as! Token)
		@enums
		@impl
		@rename('Default')
		static var default: Token = (123 as! Token)
		@enums
		@impl
		@rename('Underscore')
		static var underscore: Token = (1 as! Token)
		@enums
		@impl
		@rename('KBreak')
		static var kBreak: Token = (3 as! Token)
		@enums
		@impl
		@rename('KCase')
		static var kCase: Token = (4 as! Token)
		@enums
		@impl
		@rename('KCatch')
		static var kCatch: Token = (6 as! Token)
		@enums
		@impl
		@rename('KClass')
		static var kClass: Token = (7 as! Token)
		@enums
		@impl
		@rename('KContinue')
		static var kContinue: Token = (8 as! Token)
		@enums
		@impl
		@rename('KDo')
		static var kDo: Token = (9 as! Token)
		@enums
		@impl
		@rename('KElse')
		static var kElse: Token = (10 as! Token)
		@enums
		@impl
		@rename('KEnum')
		static var kEnum: Token = (11 as! Token)
		@enums
		@impl
		@rename('KExtends')
		static var kExtends: Token = (12 as! Token)
		@enums
		@impl
		@rename('KDeclare')
		static var kDeclare: Token = (13 as! Token)
		@enums
		@impl
		@rename('KFalse')
		static var kFalse: Token = (14 as! Token)
		@enums
		@impl
		@rename('KFor')
		static var kFor: Token = (15 as! Token)
		@enums
		@impl
		@rename('KFunction')
		static var kFunction: Token = (16 as! Token)
		@enums
		@impl
		@rename('KIf')
		static var kIf: Token = (17 as! Token)
		@enums
		@impl
		@rename('KImplements')
		static var kImplements: Token = (18 as! Token)
		@enums
		@impl
		@rename('KImport')
		static var kImport: Token = (19 as! Token)
		@enums
		@impl
		@rename('KIn')
		static var kIn: Token = (20 as! Token)
		@enums
		@impl
		@rename('KInterface')
		static var kInterface: Token = (22 as! Token)
		@enums
		@impl
		@rename('KLet')
		static var kLet: Token = (23 as! Token)
		@enums
		@impl
		@rename('KNew')
		static var kNew: Token = (25 as! Token)
		@enums
		@impl
		@rename('KNull')
		static var kNull: Token = (26 as! Token)
		@enums
		@impl
		@rename('KModule')
		static var kModule: Token = (28 as! Token)
		@enums
		@impl
		@rename('KPrivate')
		static var kPrivate: Token = (29 as! Token)
		@enums
		@impl
		@rename('KPublic')
		static var kPublic: Token = (30 as! Token)
		@enums
		@impl
		@rename('KReturn')
		static var kReturn: Token = (31 as! Token)
		@enums
		@impl
		@rename('KStatic')
		static var kStatic: Token = (32 as! Token)
		@enums
		@impl
		@rename('KSwitch')
		static var kSwitch: Token = (33 as! Token)
		@enums
		@impl
		@rename('KThis')
		static var kThis: Token = (34 as! Token)
		@enums
		@impl
		@rename('KThrow')
		static var kThrow: Token = (35 as! Token)
		@enums
		@impl
		@rename('KTrue')
		static var kTrue: Token = (36 as! Token)
		@enums
		@impl
		@rename('KTry')
		static var kTry: Token = (37 as! Token)
		@enums
		@impl
		@rename('KType')
		static var kType: Token = (38 as! Token)
		@enums
		@impl
		@rename('KUsing')
		static var kUsing: Token = (39 as! Token)
		@enums
		@impl
		@rename('KVar')
		static var kVar: Token = (40 as! Token)
		@enums
		@impl
		@rename('KWhile')
		static var kWhile: Token = (41 as! Token)
		@enums
		@impl
		@rename('KIs')
		static var kIs: Token = (57 as! Token)
		@enums
		@impl
		@rename('KAs')
		static var kAs: Token = (58 as! Token)
		@enums
		@impl
		@rename('KSuper')
		static var kSuper: Token = (59 as! Token)
		@enums
		@impl
		@rename('LFloat')
		static var lFloat: Token = (60 as! Token)
		@enums
		@impl
		@rename('LUpper')
		static var lUpper: Token = (61 as! Token)
		@enums
		@impl
		@rename('LLower')
		static var lLower: Token = (62 as! Token)
		@enums
		@impl
		@rename('LInt')
		static var lInt: Token = (63 as! Token)
		@enums
		@impl
		@rename('LString')
		static var lString: Token = (64 as! Token)
		@enums
		@impl
		@rename('LDoc')
		static var lDoc: Token = (65 as! Token)
		@enums
		@impl
		@rename('At')
		static var at: Token = (70 as! Token)
		@enums
		@impl
		@rename('BkClose')
		static var bkClose: Token = (71 as! Token)
		@enums
		@impl
		@rename('BkOpen')
		static var bkOpen: Token = (72 as! Token)
		@enums
		@impl
		@rename('BrClose')
		static var brClose: Token = (73 as! Token)
		@enums
		@impl
		@rename('BrOpen')
		static var brOpen: Token = (74 as! Token)
		@enums
		@impl
		@rename('Comma')
		static var comma: Token = (75 as! Token)
		@enums
		@impl
		@rename('DblDot')
		static var dblDot: Token = (76 as! Token)
		@enums
		@impl
		@rename('Dot')
		static var dot: Token = (77 as! Token)
		@enums
		@impl
		@rename('Sharp')
		static var sharp: Token = (78 as! Token)
		@enums
		@impl
		@rename('PClose')
		static var pClose: Token = (79 as! Token)
		@enums
		@impl
		@rename('POpen')
		static var pOpen: Token = (80 as! Token)
		@enums
		@impl
		@rename('Question')
		static var question: Token = (81 as! Token)
		@enums
		@impl
		@rename('Semicolon')
		static var semicolon: Token = (82 as! Token)
		@enums
		@impl
		@rename('Query')
		static var query: Token = (83 as! Token)
		@enums
		@impl
		@rename('Interval')
		static var interval: Token = (98 as! Token)
		@enums
		@impl
		@rename('OpDecrement')
		static var opDecrement: Token = (86 as! Token)
		@enums
		@impl
		@rename('OpIncrement')
		static var opIncrement: Token = (87 as! Token)
		@enums
		@impl
		@rename('OpNegBits')
		static var opNegBits: Token = (88 as! Token)
		@enums
		@impl
		@rename('OpNot')
		static var opNot: Token = (89 as! Token)
		@enums
		@impl
		@rename('OpArrow')
		static var opArrow: Token = (90 as! Token)
		@enums
		@impl
		@rename('OpAssign')
		static var opAssign: Token = (91 as! Token)
		@enums
		@impl
		@rename('OpBoolAnd')
		static var opBoolAnd: Token = (92 as! Token)
		@enums
		@impl
		@rename('OpBoolOr')
		static var opBoolOr: Token = (93 as! Token)
		@enums
		@impl
		@rename('OpDiv')
		static var opDiv: Token = (94 as! Token)
		@enums
		@impl
		@rename('OpEq')
		static var opEq: Token = (95 as! Token)
		@enums
		@impl
		@rename('OpGt')
		static var opGt: Token = (96 as! Token)
		@enums
		@impl
		@rename('OpGte')
		static var opGte: Token = (97 as! Token)
		@enums
		@impl
		@rename('OpLt')
		static var opLt: Token = (99 as! Token)
		@enums
		@impl
		@rename('OpLte')
		static var opLte: Token = (100 as! Token)
		@enums
		@impl
		@rename('OpMod')
		static var opMod: Token = (101 as! Token)
		@enums
		@impl
		@rename('OpMult')
		static var opMult: Token = (102 as! Token)
		@enums
		@impl
		@rename('OpNotEq')
		static var opNotEq: Token = (103 as! Token)
		@enums
		@impl
		@rename('OpOr')
		static var opOr: Token = (104 as! Token)
		@enums
		@impl
		@rename('OpShl')
		static var opShl: Token = (105 as! Token)
		@enums
		@impl
		@rename('OpShr')
		static var opShr: Token = (106 as! Token)
		@enums
		@impl
		@rename('OpSub')
		static var opSub: Token = (107 as! Token)
		@enums
		@impl
		@rename('OpUShr')
		static var opUShr: Token = (108 as! Token)
		@enums
		@impl
		@rename('OpXor')
		static var opXor: Token = (109 as! Token)
		@enums
		@impl
		@rename('OpIntDiv')
		static var opIntDiv: Token = (110 as! Token)
		@enums
		@impl
		@rename('OpAdd')
		static var opAdd: Token = (111 as! Token)
		@enums
		@impl
		@rename('OpAnd')
		static var opAnd: Token = (112 as! Token)
		@enums
		@impl
		@rename('OpChain')
		static var opChain: Token = (113 as! Token)
		@impl
		static function stringify(this1: Int, param: String?): String {
			var token: Token = (this1 as! Token)
			switch (@exhaustive token) {
				case 0: return '<!--eof-->'

				case 1: return '_'

				case 3: return 'break'

				case 4: return 'case'

				case 6: return 'catch'

				case 7: return 'class'

				case 8: return 'continue'

				case 9: return 'do'

				case 10: return 'else'

				case 11: return 'enum'

				case 12: return 'extends'

				case 13: return 'declare'

				case 14: return 'false'

				case 15: return 'for'

				case 16: return 'function'

				case 17: return 'if'

				case 18: return 'implements'

				case 19: return 'import'

				case 20: return 'in'

				case 22: return 'interface'

				case 23: return 'let'

				case 25: return 'new'

				case 26: return 'null'

				case 28: return 'module'

				case 29: return 'private'

				case 30: return 'public'

				case 31: return 'return'

				case 32: return 'static'

				case 33: return 'switch'

				case 34: return 'this'

				case 35: return 'throw'

				case 36: return 'true'

				case 37: return 'try'

				case 38: return 'type'

				case 39: return 'using'

				case 40: return 'var'

				case 41: return 'while'

				case 57: return 'is'

				case 58: return 'as'

				case 59: return 'super'

				case 60: if (param == null) return 'float' else return param

				case 61: if (param == null) return 'upper' else return param

				case 62: if (param == null) return 'lower' else return param

				case 63: if (param == null) return 'integer' else return param

				case 64: if (param == null) return 'string' else return '\'' + param + '\''

				case 65: return '///' + param

				case 70: return '@'

				case 71: return ']'

				case 72: return '['

				case 73: return '}'

				case 74: return '{'

				case 75: return ','

				case 76: return ':'

				case 77: return '.'

				case 78: return '#'

				case 79: return ')'

				case 80: return '('

				case 81: return '?'

				case 82: return ';'

				case 83: return '$'

				case 86: return '--'

				case 87: return '++'

				case 88: return '~'

				case 89: return '!'

				case 90: return '=>'

				case 91: return '='

				case 92: return '&&'

				case 93: return '||'

				case 94: return '/'

				case 95: return '=='

				case 96: return '>'

				case 97: return '>='

				case 98: return '...'

				case 99: return '<'

				case 100: return '<='

				case 101: return '%'

				case 102: return '*'

				case 103: return '!='

				case 104: return '|'

				case 105: return '<<'

				case 106: return '>>'

				case 107: return '-'

				case 108: return '>>>'

				case 109: return '^'

				case 110: return '\\'

				case 111: return '+'

				case 112: return '&'

				case 113: return '?.'

				case 123: return '<!--default-->'
			}
		}

	}
}
