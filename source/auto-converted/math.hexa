module {
	@keepInit
	declare class Math {
		@rename('PI')
		static var pi: Float
		@rename('NEGATIVE_INFINITY')
		static var negativeInfinity: Float
		@has_untyped
		@pure
		private static function get_NEGATIVE_INFINITY(): Float {
			return -__js__('Infinity')
		}

		@rename('POSITIVE_INFINITY')
		static var positiveInfinity: Float
		@has_untyped
		@pure
		private static function get_POSITIVE_INFINITY(): Float {
			return __js__('Infinity')
		}

		@rename('NaN')
		static var nan: Float
		@has_untyped
		@pure
		private static function get_NaN(): Float {
			return __js__('NaN')
		}

		@pure
		static function abs(v: Float): Float
		@pure
		static function acos(v: Float): Float
		@pure
		static function asin(v: Float): Float
		@pure
		static function atan(v: Float): Float
		@pure
		static function atan2(y: Float, x: Float): Float
		@pure
		static function ceil(v: Float): Int
		@pure
		static function cos(v: Float): Float
		@pure
		static function exp(v: Float): Float
		@pure
		static function floor(v: Float): Int
		@pure
		static function log(v: Float): Float
		@pure
		static function max(a: Float, b: Float): Float
		@pure
		static function min(a: Float, b: Float): Float
		@pure
		static function pow(v: Float, exp: Float): Float
		static function random(): Float
		@pure
		static function round(v: Float): Int
		@pure
		static function sin(v: Float): Float
		@pure
		static function sqrt(v: Float): Float
		@pure
		static function tan(v: Float): Float
		@pure
		static function ffloor(v: Float): Float {
			return Math.floor(v)
		}

		@pure
		static function fceil(v: Float): Float {
			return Math.ceil(v)
		}

		@pure
		static function fround(v: Float): Float {
			return Math.round(v)
		}

		@has_untyped
		@pure
		static function isFinite(f: Float): Bool {
			return __js__('isFinite')(f)
		}

		@has_untyped
		@pure
		static function isNaN(f: Float): Bool {
			return __js__('isNaN')(f)
		}

	}
}

// __init__
__feature__('Type.resolveClass', _hxClasses['Math'] = Math)
