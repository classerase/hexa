module {
	class GenJs extends generator.GeneratorHelper {
		private static var id: Int = 0
		private static var tabs: String = ''
		private static var reserved: [String] = {['with']}
		private static function rename(name: String): String {
			if(GenJs.reserved.indexOf(name) != -1) return '$' + name
			return name
		}

		private static function unblock(e: data.Node): data.Node {
			if(e.index == 9) {
				if({ let data.Node.TBlock(value) = e value }.length == 1) {
					var e1: data.Node = { let data.Node.TBlock(value) = e value }[0]
					return e1
				} else return e
			} else return e
		}

		private static function pushTab(): Void {
			GenJs.tabs += '\t'
		}

		private static function popTab(): Void {
			GenJs.tabs = GenJs.tabs.substring(0, GenJs.tabs.length - 1)
		}

		private static function stringifyBlockExpression(node: data.Node): String {
			var r: String = ''
			switch (node.index) {
				case 11: if({ let data.Node.TIf(value, _, _) = node value }.length == 1) {
					if({ let data.Node.TIf(value, _, _) = node value }[0].index == 20) {
						let data.Node.TIf(_, _, eelse) = node
						let data.Node.TIf(_, eif, _) = node
						let data.Node.TVar(_, _, _, const) = { let data.Node.TIf(value, _, _) = node value }[0]
						let data.Node.TVar(_, _, expr, _) = { let data.Node.TIf(value, _, _) = node value }[0]
						let data.Node.TVar(_, t, _, _) = { let data.Node.TIf(value, _, _) = node value }[0]
						let data.Node.TVar(oname, _, _, _) = { let data.Node.TIf(value, _, _) = node value }[0]
						var cond: data.Node = { let data.Node.TIf(value, _, _) = node value }[0]
						r += '\n' + GenJs.tabs + '{\n'
						GenJs.tabs += '\t'
						GenJs.pushScope()
						GenJs.parentNames.set(cond, oname)
						r += GenJs.tabs + 'const ' + oname + ' = ' + GenJs.stringify(expr) + '\n' + GenJs.tabs
						r += 'if(' + oname + ' != null) '
						r += @ast(ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenJs.hx:100: characters 17-20) }), pos => #pos(bootstrap/GenJs.hx:100: characters 16-21) },[{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenJs.hx:101: characters 21-24) },stringify), pos => #pos(bootstrap/GenJs.hx:101: characters 21-34) },[]), pos => #pos(bootstrap/GenJs.hx:101: characters 21-36) }]), pos => #pos(bootstrap/GenJs.hx:101: characters 5-36) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenJs.hx:101: characters 10-16) },[{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:101: characters 17-18) }]), pos => #pos(bootstrap/GenJs.hx:101: characters 10-19) }], pos => #pos(bootstrap/GenJs.hx:101: characters 5-36), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenJs.hx:102: characters 13-19) },[{ expr => EArrayDecl([{ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenJs.hx:102: characters 21-24) }]), pos => #pos(bootstrap/GenJs.hx:102: characters 20-25) }]), pos => #pos(bootstrap/GenJs.hx:102: characters 13-26) },stringify), pos => #pos(bootstrap/GenJs.hx:102: characters 13-36) },[]), pos => #pos(bootstrap/GenJs.hx:102: characters 13-38) }]), pos => #pos(bootstrap/GenJs.hx:102: characters 5-38) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:102: characters 10-11) }], pos => #pos(bootstrap/GenJs.hx:102: characters 5-38), guard => null }],null)) if(eif.index == 9) GenJs.stringify(eif) else GenJs.stringify(data.Node.TBlock({[eif]}))
						if(eelse != null) r += ' else ' + GenJs.stringifyBlockExpression(eelse)
						GenJs.tabs = GenJs.tabs.substring(0, GenJs.tabs.length - 1)
						GenJs.popScope()
						return r + '\n' + GenJs.tabs + '}'
					} else {
						let data.Node.TIf(_, _, eelse1) = node
						let data.Node.TIf(_, eif1, _) = node
						var econd: data.Node = { let data.Node.TIf(value, _, _) = node value }[0]
						r += 'if (' + GenJs.stringify(econd) + ') '
						r += @ast(ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenJs.hx:112: characters 17-20) }), pos => #pos(bootstrap/GenJs.hx:112: characters 16-21) },[{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenJs.hx:113: characters 22-25) },stringify), pos => #pos(bootstrap/GenJs.hx:113: characters 22-35) },[]), pos => #pos(bootstrap/GenJs.hx:113: characters 22-37) }]), pos => #pos(bootstrap/GenJs.hx:113: characters 6-37) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenJs.hx:113: characters 11-17) },[{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:113: characters 18-19) }]), pos => #pos(bootstrap/GenJs.hx:113: characters 11-20) }], pos => #pos(bootstrap/GenJs.hx:113: characters 6-37), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenJs.hx:114: characters 14-20) },[{ expr => EArrayDecl([{ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenJs.hx:114: characters 22-25) }]), pos => #pos(bootstrap/GenJs.hx:114: characters 21-26) }]), pos => #pos(bootstrap/GenJs.hx:114: characters 14-27) },stringify), pos => #pos(bootstrap/GenJs.hx:114: characters 14-37) },[]), pos => #pos(bootstrap/GenJs.hx:114: characters 14-39) }]), pos => #pos(bootstrap/GenJs.hx:114: characters 6-39) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:114: characters 11-12) }], pos => #pos(bootstrap/GenJs.hx:114: characters 6-39), guard => null }],null)) if(eif1.index == 9) GenJs.stringify(eif1) else GenJs.stringify(data.Node.TBlock({[eif1]}))
						if(eelse1 != null) r += ' else ' + GenJs.stringifyBlockExpression(eelse1)
						return r
					}
				} else {
					let data.Node.TIf(_, _, eelse2) = node
					let data.Node.TIf(_, eif2, _) = node
					let data.Node.TIf(econd1, _, _) = node
					GenJs.tabs += '\t'
					r += '{\n' + GenJs.tabs
					if(eelse2 != null) {
						GenJs.addToScope('else$$')
						r += 'const else$$ = () => ' + GenJs.stringify(eelse2) + '\n' + GenJs.tabs
					}
					var depth: Int = 0
					var econds: [data.Node] = econd1
					var i: Int = 0
					var condsstr: String = ''
					var constsstr: String = ''
					var addCond: String=>String = function(cond1: String): String {
						if(condsstr == '') return cond1 else return ' && ' + cond1
					}
					while(econds[i] != null) {
						var cond2: data.Node = econds[i]
						condsstr = ''
						constsstr = ''
						while(true) {
							var innercond: data.Node = econds[i]
							if(innercond.index == 20) {
								let data.Node.TVar(_, _, _, const1) = innercond
								let data.Node.TVar(_, _, expr1, _) = innercond
								let data.Node.TVar(_, t1, _, _) = innercond
								let data.Node.TVar(oname1, _, _, _) = innercond
								{
									log.trace('const for ' + oname1, {fileName: 'GenJs.hx', lineNumber: 146, className: 'GenJs', methodName: 'stringifyBlockExpression'})
									GenJs.addToScope(oname1)
									var name: String = GenJs.rename(oname1)
									GenJs.parentNames.set(cond2, name)
									constsstr += 'const ' + name + ' = ' + GenJs.stringify(expr1) + ';\n' + GenJs.tabs
									condsstr += addCond(name + ' != null')
								}
							} else condsstr += addCond(GenJs.stringify(innercond))
							if(econds[i + 1] != null) {
								var _g: data.Node = econds[i + 1]
								if(_g.index == 20) {
									let data.Node.TVar(_, _, _, const2) = _g
									let data.Node.TVar(_, _, expr2, _) = _g
									let data.Node.TVar(_, t2, _, _) = _g
									let data.Node.TVar(oname2, _, _, _) = _g
									break
								}
							}
							i++
							if(!(econds[i] != null)) break
						}
						r += constsstr
						r += 'if(' + condsstr + ') {'
						GenJs.tabs += '\t'
						r += '\n' + GenJs.tabs
						depth++
						i++
					}
					r += @ast(ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenJs.hx:167: characters 17-20) }), pos => #pos(bootstrap/GenJs.hx:167: characters 16-21) },[{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenJs.hx:168: characters 21-24) },stringify), pos => #pos(bootstrap/GenJs.hx:168: characters 21-34) },[]), pos => #pos(bootstrap/GenJs.hx:168: characters 21-36) }]), pos => #pos(bootstrap/GenJs.hx:168: characters 5-36) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenJs.hx:168: characters 10-16) },[{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:168: characters 17-18) }]), pos => #pos(bootstrap/GenJs.hx:168: characters 10-19) }], pos => #pos(bootstrap/GenJs.hx:168: characters 5-36), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenJs.hx:169: characters 13-19) },[{ expr => EArrayDecl([{ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenJs.hx:169: characters 21-24) }]), pos => #pos(bootstrap/GenJs.hx:169: characters 20-25) }]), pos => #pos(bootstrap/GenJs.hx:169: characters 13-26) },stringify), pos => #pos(bootstrap/GenJs.hx:169: characters 13-36) },[]), pos => #pos(bootstrap/GenJs.hx:169: characters 13-38) }]), pos => #pos(bootstrap/GenJs.hx:169: characters 5-38) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:169: characters 10-11) }], pos => #pos(bootstrap/GenJs.hx:169: characters 5-38), guard => null }],null)) if(eif2.index == 9) GenJs.stringify(eif2) else GenJs.stringify(data.Node.TBlock({[eif2]}))
					while(depth > 0) {
						GenJs.tabs = GenJs.tabs.substring(0, GenJs.tabs.length - 1)
						r += '\n' + GenJs.tabs + '}'
						if(eelse2 != null) r += ' else else$$()'
						depth--
					}
					GenJs.tabs = GenJs.tabs.substring(0, GenJs.tabs.length - 1)
					r += '\n' + GenJs.tabs + '}'
					return r
				}

				case 19: {
					let data.Node.TFunction(_, _, vars, _) = node
					let data.Node.TFunction(_, expr3, _, _) = node
					let data.Node.TFunction(name1, _, _, _) = node
					GenJs.pushScope()
					var newname: String = GenJs.rename(name1)
					var _g1: [String] = {[]}
					{
						var _g11: Int = 0
						while(_g11 < vars.length) {
							var v: data.Node = vars[_g11]
							_g11++
							var vars1: String
							switch (v.index) {
								case 1: {
									let data.Node.TIdent(oname3) = v
									var name2: String = GenJs.rename(oname3)
									if(GenJs.hasInScope(name2)) name2 += '$' + ++GenJs.id
									GenJs.addToScope(name2)
									GenJs.parentNames.set(v, name2)
									vars1 = GenJs.parentNames.get(v)
								}

								case 12: if({ let data.Node.TParenthesis(value) = v value } == null) vars1 = '' else throw new HaxeError(v)

								case 20: {
									let data.Node.TVar(oname4, _, _, _) = v
									var name3: String = GenJs.rename(oname4)
									if(GenJs.hasInScope(name3)) name3 += '$' + ++GenJs.id
									GenJs.addToScope(name3)
									GenJs.parentNames.set(v, name3)
									vars1 = GenJs.parentNames.get(v)
								}
								
								case _: throw new HaxeError(v)
							}
							_g1.push(@ast(ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:185: characters 13-14) }), pos => #pos(bootstrap/GenJs.hx:185: characters 12-15) },[{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenJs.hx:187: characters 18-23) },rename), pos => #pos(bootstrap/GenJs.hx:187: characters 18-30) },[]), pos => #pos(bootstrap/GenJs.hx:187: characters 18-32) }, name => name, type => null, ??? => #pos(bootstrap/GenJs.hx:187: characters 11-15) }]), pos => #pos(bootstrap/GenJs.hx:187: characters 7-33) },{ expr => EIf({ expr => ECall({ expr => EConst(CIdent(hasInScope)), pos => #pos(bootstrap/GenJs.hx:188: characters 11-21) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:188: characters 22-26) }]), pos => #pos(bootstrap/GenJs.hx:188: characters 11-27) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:188: characters 29-33) },{ expr => EBinop(OpAdd,{ expr => EConst(CString($$)), pos => #pos(bootstrap/GenJs.hx:188: characters 37-41) },{ expr => EParenthesis({ expr => EUnop(OpIncrement,false,{ expr => EConst(CIdent(id)), pos => #pos(bootstrap/GenJs.hx:188: characters 47-49) }), pos => #pos(bootstrap/GenJs.hx:188: characters 45-49) }), pos => #pos(bootstrap/GenJs.hx:188: characters 44-50) }), pos => #pos(bootstrap/GenJs.hx:188: characters 37-50) }), pos => #pos(bootstrap/GenJs.hx:188: characters 29-50) },null), pos => #pos(bootstrap/GenJs.hx:188: characters 7-50) },{ expr => ECall({ expr => EConst(CIdent(addToScope)), pos => #pos(bootstrap/GenJs.hx:189: characters 7-17) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:189: characters 18-22) }]), pos => #pos(bootstrap/GenJs.hx:189: characters 7-23) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenJs.hx:190: characters 7-18) },set), pos => #pos(bootstrap/GenJs.hx:190: characters 7-22) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:190: characters 23-24) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:190: characters 26-30) }]), pos => #pos(bootstrap/GenJs.hx:190: characters 7-31) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenJs.hx:191: characters 7-18) },get), pos => #pos(bootstrap/GenJs.hx:191: characters 7-22) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:191: characters 23-24) }]), pos => #pos(bootstrap/GenJs.hx:191: characters 7-25) }]), pos => #pos(bootstrap/GenJs.hx:186: lines 186-191) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenJs.hx:186: characters 11-15) },[{ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenJs.hx:186: characters 16-21) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:186: characters 23-24) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:186: characters 26-27) }]), pos => #pos(bootstrap/GenJs.hx:186: characters 11-28) },{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenJs.hx:186: characters 30-36) },[{ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenJs.hx:186: characters 37-42) }]), pos => #pos(bootstrap/GenJs.hx:186: characters 30-43) }], pos => #pos(bootstrap/GenJs.hx:186: lines 186-191), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString()), pos => #pos(bootstrap/GenJs.hx:192: characters 31-33) }]), pos => #pos(bootstrap/GenJs.hx:192: characters 6-33) }, values => [{ expr => ECall({ expr => EConst(CIdent(TParenthesis)), pos => #pos(bootstrap/GenJs.hx:192: characters 11-23) },[{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenJs.hx:192: characters 24-28) }]), pos => #pos(bootstrap/GenJs.hx:192: characters 11-29) }], pos => #pos(bootstrap/GenJs.hx:192: characters 6-33), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:193: characters 20-21) }), pos => #pos(bootstrap/GenJs.hx:193: characters 14-19) }]), pos => #pos(bootstrap/GenJs.hx:193: characters 6-19) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:193: characters 11-12) }], pos => #pos(bootstrap/GenJs.hx:193: characters 6-19), guard => null }],null)) vars1)
						}
					}
					var vars2: String = _g1.join(', ')
					var funcbody: String = ''
					if(expr3 != null) {
						if(expr3.index == 9) {
							let data.Node.TBlock(el) = expr3
							funcbody = GenJs.stringify(expr3)
						} else {
							GenJs.pushScope()
							GenJs.tabs += '\t'
							funcbody = '{\n' + GenJs.tabs + GenJs.stringify(expr3) + ('\n\t' + GenJs.tabs + '}')
							GenJs.tabs = GenJs.tabs.substring(0, GenJs.tabs.length - 1)
							GenJs.popScope()
						}
					} else funcbody = '{}'
					GenJs.popScope()
					return 'const ' + newname + ' = (' + vars2 + ') => ' + funcbody
				}
				
				case _: {
					log.trace(node, {fileName: 'GenJs.hx', lineNumber: 212, className: 'GenJs', methodName: 'stringifyBlockExpression'})
					return GenJs.stringify(node)
				}
			}
		}

		private static function getAtt(atts: [data.Attribute], atname: String): data.Attribute {
			log.trace(atts, {fileName: 'GenJs.hx', lineNumber: 218, className: 'GenJs', methodName: 'getAtt'})
			if(atts != null && atts.length > 0) {
				var _g: Int = 0
				while(_g < atts.length) {
					var att: data.Attribute = atts[_g]
					_g++
					if(att.name == atname) return att
				}
			}
			return null
		}

		private static var parentNames: nodejs.JSMap< data.Node, String > = new JSMap< data.Node, String >()
		private static var scopes: [nodejs.JSMap< String, Bool >] = {[new JSMap< String, Bool >()]}
		private static function pushScope(): Void {
			GenJs.scopes.push(new JSMap< String, Bool >())
		}

		private static function popScope(): Void {
			GenJs.scopes.pop()
		}

		private static function hasInScope(name: String): Bool {
			{
				var _g: Int = 0
				var _g1: [nodejs.JSMap< String, Bool >] = GenJs.scopes
				while(_g < _g1.length) {
					var scope: nodejs.JSMap< String, Bool > = _g1[_g]
					_g++
					if(scope.get(name) != null) return true
				}
			}
			return false
		}

		private static function addToScope(name: String): Void {
			GenJs.scopes[GenJs.scopes.length - 1].set(name, true)
		}

		@has_untyped
		static function stringify(node: data.Node): String {
			var r: String = ''
			if(node == null) throw new HaxeError('Unable to print: node is null')
			var atts: [data.Attribute] = data.Project.mapAttributes.get(node)
			var a: String = ''
			if(atts != null && atts.length > 0) {
				var _g: Int = 0
				while(_g < atts.length) {
					var att: data.Attribute = atts[_g]
					_g++
					a += '/* @' + att.name + '*/ '
				}
			}
			var tmp: String
			switch (@exhaustive node.index) {
				case 0: {
					let data.Node.TString(s) = node
					var s1: [String] = s.split('')
					var charsOut: [String] = {[]}
					while(s1.length > 0) {
						var _g1: String = s1[0]
						switch (_g1) {
							case '\n': {
								charsOut.push('\\n')
								s1.shift()
							}

							case '\r': {
								charsOut.push('\\r')
								s1.shift()
							}

							case '\'': {
								charsOut.push('\\\'')
								s1.shift()
							}

							case '\\': {
								s1.shift()
								if(s1[0] == '\'') {
									charsOut.push('\\\'')
									s1.shift()
								} else charsOut.push('\\')
							}
							
							case _: {
								charsOut.push(s1[0])
								s1.shift()
							}
						}
					}
					tmp = '\'' + charsOut.join('') + '\''
				}

				case 1: {
					let data.Node.TIdent(s2) = node
					log.trace('`' + s2 + '`', {fileName: 'GenJs.hx', lineNumber: 313, className: 'GenJs', methodName: 'stringify'})
					var source: data.Node = data.Project.mapNames.get(node)
					var n: String
					if(source == null) throw new HaxeError('Unmapped ' + Std.string(node)) else switch (source.index) {
						case 1: {
							let data.Node.TIdent(name) = source
							n = GenJs.parentNames.get(source)
						}

						case 19: {
							let data.Node.TFunction(name1, _, _, _) = source
							n = GenJs.rename(name1)
						}

						case 20: {
							let data.Node.TVar(name2, _, _, _) = source
							var n1: String = GenJs.parentNames.get(source)
							if(n1 == null) throw new HaxeError('TVar `' + name2 + '` parentNames null == ' + GenJs.parentNames.get(source))
							n = n1
						}

						case 22: {
							let data.Node.TClass(t, _, _, _, _) = source
							var rename: data.Attribute = GenJs.getAtt(data.Project.mapAttributes.get(source), 'native')
							var name3: String = GenJs.rename(GenJs.extractTypeName(t))
							if(rename != null) log.trace('Got @native!', {fileName: 'GenJs.hx', lineNumber: 335, className: 'GenJs', methodName: 'stringify'})
							if(rename != null) {
								var _g2: data.Node = rename.values[0]
								if(_g2 == null) n = name3 else if(_g2.index == 0) {
									let data.Node.TString(s3) = _g2
									n = s3
								} else n = name3
							} else n = name3
						}

						case 32: if({ let data.Node.TEnum(value, _) = source value }.index == 0) {
							let data.NodeType.Type(name4) = { let data.Node.TEnum(value, _) = source value }
							n = name4
						} else throw new HaxeError('' + s2 + ' ' + Std.string(source))

						case 40: if({ let data.Node.TStatic(value) = source value }.index == 20) {
							let data.Node.TVar(name5, _, _, _) = { let data.Node.TStatic(value) = source value }
							let data.Node.TStatic(f) = source
							var static_source: data.Node = data.Project.mapNames.get(source)
							switch (static_source.index) {
								case 22: {
									let data.Node.TClass(t1, _, _, _, _) = static_source
									n = GenJs.rename(GenJs.extractTypeName(t1)) + '.' + GenJs.rename(name5)
								}

								case 32: {
									let data.Node.TEnum(t2, _) = static_source
									n = GenJs.rename(GenJs.extractTypeName(t2)) + '.' + GenJs.rename(name5)
								}
								
								case _: throw new HaxeError('static_source is ' + Std.string(static_source))
							}
						} else throw new HaxeError('' + s2 + ' ' + Std.string(source))

						case 41: {
							let data.Node.TFor(name6, _, _) = source
							n = GenJs.parentNames.get(source)
						}
						
						case _: throw new HaxeError('' + s2 + ' ' + Std.string(source))
					}
					tmp = n
				}

				case 2: if({ let data.Node.TBool(value) = node value } == true) tmp = 'true' else tmp = 'false'

				case 3: tmp = 'this'

				case 4: tmp = 'super'

				case 5: {
					let data.Node.TInt(s4) = node
					tmp = s4
				}

				case 6: {
					let data.Node.TFloat(s5) = node
					tmp = s5
				}

				case 7: tmp = 'null'

				case 8: {
					let data.Node.TBinop(_, _, b) = node
					let data.Node.TBinop(_, a1, _) = node
					let data.Node.TBinop(op, _, _) = node
					tmp = GenJs.stringify(a1) + ' ' + token.Token_Impl_.stringify(op) + ' ' + GenJs.stringify(b)
				}

				case 9: if({ let data.Node.TBlock(value) = node value }.length == 0) tmp = '{}' else {
					let data.Node.TBlock(elements) = node
					r = '{\n'
					GenJs.pushScope()
					GenJs.tabs += '\t'
					{
						var _g3: Int = 0
						while(_g3 < elements.length) {
							var element: data.Node = elements[_g3]
							_g3++
							{
								var code: String = GenJs.tabs + GenJs.stringifyBlockExpression(element) + '\n'
								if(element.index != 9 && code.length < 256) log.trace('Generated block expression `' + code.trim() + '`', {fileName: 'GenJs.hx', lineNumber: 367, className: 'GenJs', methodName: 'stringify'})
								r += code
							}
						}
					}
					GenJs.tabs = GenJs.tabs.substring(0, GenJs.tabs.length - 1)
					GenJs.popScope()
					tmp = r + GenJs.tabs + '}'
				}

				case 10: if({ let data.Node.TCall(value, _, _) = node value }.index == 1) switch ({ let data.Node.TIdent(value) = { let data.Node.TCall(value, _, _) = node value } value }) {
					case '__instanceof__': if({ let data.Node.TCall(_, value, _) = node value }.length == 2) {
						var kind: data.Node = { let data.Node.TCall(_, value, _) = node value }[1]
						var of: data.Node = { let data.Node.TCall(_, value, _) = node value }[0]
						tmp = GenJs.stringify(of) + ' instanceof ' + GenJs.stringify(kind)
					} else {
						let data.Node.TCall(_, _, argNames) = node
						let data.Node.TCall(e, _, _) = node
						let data.Node.TCall(_, el, _) = node
						var tmp1: String = GenJs.stringify(e) + '('
						var _g4: [String] = {[]}
						{
							var _g11: Int = 0
							while(_g11 < el.length) {
								var e1: data.Node = el[_g11]
								_g11++
								_g4.push(GenJs.stringify(e1))
							}
						}
						tmp = tmp1 + _g4.join(', ') + ')'
					}

					case '__typeof__': if({ let data.Node.TCall(_, value, _) = node value }.length == 1) {
						var of1: data.Node = { let data.Node.TCall(_, value, _) = node value }[0]
						tmp = 'typeof ' + GenJs.stringify(of1)
					} else {
						let data.Node.TCall(_, _, argNames1) = node
						let data.Node.TCall(e2, _, _) = node
						let data.Node.TCall(_, el1, _) = node
						var tmp2: String = GenJs.stringify(e2) + '('
						var _g5: [String] = {[]}
						{
							var _g12: Int = 0
							while(_g12 < el1.length) {
								var e3: data.Node = el1[_g12]
								_g12++
								_g5.push(GenJs.stringify(e3))
							}
						}
						tmp = tmp2 + _g5.join(', ') + ')'
					}
					
					case _: {
						let data.Node.TCall(_, _, argNames2) = node
						let data.Node.TCall(_, el2, _) = node
						let data.Node.TCall(e4, _, _) = node
						var tmp3: String = GenJs.stringify(e4) + '('
						var _g6: [String] = {[]}
						{
							var _g13: Int = 0
							while(_g13 < el2.length) {
								var e5: data.Node = el2[_g13]
								_g13++
								_g6.push(GenJs.stringify(e5))
							}
						}
						tmp = tmp3 + _g6.join(', ') + ')'
					}
				} else {
					let data.Node.TCall(_, _, argNames3) = node
					let data.Node.TCall(_, el3, _) = node
					let data.Node.TCall(e6, _, _) = node
					var tmp4: String = GenJs.stringify(e6) + '('
					var _g7: [String] = {[]}
					{
						var _g14: Int = 0
						while(_g14 < el3.length) {
							var e7: data.Node = el3[_g14]
							_g14++
							_g7.push(GenJs.stringify(e7))
						}
					}
					tmp = tmp4 + _g7.join(', ') + ')'
				}

				case 11: {
					let data.Node.TIf(_, _, eelse) = node
					let data.Node.TIf(_, eif, _) = node
					let data.Node.TIf(econd, _, _) = node
					var _g8: [String] = {[]}
					{
						var _g15: Int = 0
						while(_g15 < econd.length) {
							var e8: data.Node = econd[_g15]
							_g15++
							_g8.push(GenJs.stringify(e8))
						}
					}
					r = '(' + _g8.join(' && ') + ')? (' + GenJs.stringify(eif)
					if(eelse != null) r += ') : (' + GenJs.stringify(eelse) + ')'
					tmp = r
				}

				case 12: {
					let data.Node.TParenthesis(e9) = node
					tmp = '(' + GenJs.stringify(e9) + ')'
				}

				case 13: if({ let data.Node.TReturn(value) = node value } == null) tmp = 'return ' else if({ let data.Node.TReturn(value) = node value }[1] == 9) {
					if({ let data.Node?.TBlock(value) = { let data.Node.TReturn(value) = node value } value }.length == 0) tmp = 'return ' else {
						let data.Node.TReturn(e10) = node
						tmp = 'return ' + GenJs.stringify(e10)
					}
				} else {
					let data.Node.TReturn(e11) = node
					tmp = 'return ' + GenJs.stringify(e11)
				}

				case 14: {
					let data.Node.TThrow(e12) = node
					tmp = 'throw ' + GenJs.stringify(e12) + ''
				}

				case 15: tmp = 'break'

				case 16: tmp = 'continue'

				case 17: {
					let data.Node.TUnop(_, _, e13) = node
					let data.Node.TUnop(_, postfix, _) = node
					let data.Node.TUnop(op1, _, _) = node
					if(postfix) tmp = GenJs.stringify(e13) + token.Token_Impl_.stringify(op1) else tmp = token.Token_Impl_.stringify(op1) + GenJs.stringify(e13)
				}

				case 18: switch (@exhaustive { let data.Node.TWhile(_, _, value) = node value }) {
					case false: {
						let data.Node.TWhile(econd1, _, _) = node
						let data.Node.TWhile(_, e14, _) = node
						tmp = 'do{' + GenJs.stringify(e14) + '}while(' + GenJs.stringify(econd1) + ')'
					}

					case true: {
						let data.Node.TWhile(econd2, _, _) = node
						let data.Node.TWhile(_, e15, _) = node
						tmp = 'while(' + GenJs.stringify(econd2) + ') ' + GenJs.stringify(e15)
					}
				}

				case 19: {
					let data.Node.TFunction(_, _, vars, _) = node
					let data.Node.TFunction(_, expr, _, _) = node
					let data.Node.TFunction(name7, _, _, _) = node
					GenJs.pushScope()
					r = 'function'
					if(name7 != null) r += ' ' + GenJs.rename(name7)
					var _g16: [String] = {[]}
					{
						var _g21: Int = 0
						while(_g21 < vars.length) {
							var v: data.Node = vars[_g21]
							_g21++
							var r1: String
							switch (v.index) {
								case 1: {
									let data.Node.TIdent(oname) = v
									var name8: String = GenJs.rename(oname)
									if(GenJs.hasInScope(name8)) name8 += '$' + ++GenJs.id
									GenJs.addToScope(name8)
									GenJs.parentNames.set(v, name8)
									r1 = GenJs.parentNames.get(v)
								}

								case 12: if({ let data.Node.TParenthesis(value) = v value } == null) r1 = '' else throw new HaxeError(v)

								case 20: {
									let data.Node.TVar(oname1, _, _, _) = v
									var name9: String = GenJs.rename(oname1)
									if(GenJs.hasInScope(name9)) name9 += '$' + ++GenJs.id
									GenJs.addToScope(name9)
									GenJs.parentNames.set(v, name9)
									r1 = GenJs.parentNames.get(v)
								}
								
								case _: throw new HaxeError(v)
							}
							_g16.push(@ast(ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:443: characters 12-13) }), pos => #pos(bootstrap/GenJs.hx:443: characters 11-14) },[{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenJs.hx:445: characters 17-22) },rename), pos => #pos(bootstrap/GenJs.hx:445: characters 17-29) },[]), pos => #pos(bootstrap/GenJs.hx:445: characters 17-31) }, name => name, type => null, ??? => #pos(bootstrap/GenJs.hx:445: characters 10-14) }]), pos => #pos(bootstrap/GenJs.hx:445: characters 6-32) },{ expr => EIf({ expr => ECall({ expr => EConst(CIdent(hasInScope)), pos => #pos(bootstrap/GenJs.hx:446: characters 10-20) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:446: characters 21-25) }]), pos => #pos(bootstrap/GenJs.hx:446: characters 10-26) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:446: characters 28-32) },{ expr => EBinop(OpAdd,{ expr => EConst(CString($$)), pos => #pos(bootstrap/GenJs.hx:446: characters 36-40) },{ expr => EParenthesis({ expr => EUnop(OpIncrement,false,{ expr => EConst(CIdent(id)), pos => #pos(bootstrap/GenJs.hx:446: characters 46-48) }), pos => #pos(bootstrap/GenJs.hx:446: characters 44-48) }), pos => #pos(bootstrap/GenJs.hx:446: characters 43-49) }), pos => #pos(bootstrap/GenJs.hx:446: characters 36-49) }), pos => #pos(bootstrap/GenJs.hx:446: characters 28-49) },null), pos => #pos(bootstrap/GenJs.hx:446: characters 6-49) },{ expr => ECall({ expr => EConst(CIdent(addToScope)), pos => #pos(bootstrap/GenJs.hx:447: characters 6-16) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:447: characters 17-21) }]), pos => #pos(bootstrap/GenJs.hx:447: characters 6-22) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenJs.hx:448: characters 6-17) },set), pos => #pos(bootstrap/GenJs.hx:448: characters 6-21) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:448: characters 22-23) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:448: characters 25-29) }]), pos => #pos(bootstrap/GenJs.hx:448: characters 6-30) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenJs.hx:449: characters 6-17) },get), pos => #pos(bootstrap/GenJs.hx:449: characters 6-21) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:449: characters 22-23) }]), pos => #pos(bootstrap/GenJs.hx:449: characters 6-24) }]), pos => #pos(bootstrap/GenJs.hx:444: lines 444-449) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenJs.hx:444: characters 10-14) },[{ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenJs.hx:444: characters 15-20) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:444: characters 22-23) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:444: characters 25-26) }]), pos => #pos(bootstrap/GenJs.hx:444: characters 10-27) },{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenJs.hx:444: characters 29-35) },[{ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenJs.hx:444: characters 36-41) }]), pos => #pos(bootstrap/GenJs.hx:444: characters 29-42) }], pos => #pos(bootstrap/GenJs.hx:444: lines 444-449), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString()), pos => #pos(bootstrap/GenJs.hx:450: characters 30-32) }]), pos => #pos(bootstrap/GenJs.hx:450: characters 5-32) }, values => [{ expr => ECall({ expr => EConst(CIdent(TParenthesis)), pos => #pos(bootstrap/GenJs.hx:450: characters 10-22) },[{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenJs.hx:450: characters 23-27) }]), pos => #pos(bootstrap/GenJs.hx:450: characters 10-28) }], pos => #pos(bootstrap/GenJs.hx:450: characters 5-32), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:451: characters 19-20) }), pos => #pos(bootstrap/GenJs.hx:451: characters 13-18) }]), pos => #pos(bootstrap/GenJs.hx:451: characters 5-18) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:451: characters 10-11) }], pos => #pos(bootstrap/GenJs.hx:451: characters 5-18), guard => null }],null)) r1)
						}
					}
					r += '(' + _g16.join(', ') + ') '
					if(expr != null) {
						if(expr.index == 9) {
							let data.Node.TBlock(el4) = expr
							r += GenJs.stringify(expr)
						} else {
							GenJs.pushScope()
							GenJs.tabs += '\t'
							r += '{\n' + GenJs.tabs + GenJs.stringify(expr) + ('\n\t' + GenJs.tabs + '}')
							GenJs.tabs = GenJs.tabs.substring(0, GenJs.tabs.length - 1)
							GenJs.popScope()
						}
					} else r += '{}'
					GenJs.popScope()
					tmp = r
				}

				case 20: {
					let data.Node.TVar(_, _, _, const) = node
					let data.Node.TVar(_, _, expr1, _) = node
					let data.Node.TVar(_, t3, _, _) = node
					let data.Node.TVar(oname2, _, _, _) = node
					if(oname2 == null) throw new HaxeError('name is null for ' + Std.string(node))
					var es: String = ''
					if(expr1 != null) es = ' = ' + GenJs.stringify(expr1)
					var name10: String = GenJs.rename(oname2)
					if(GenJs.hasInScope(name10)) name10 += '$' + ++GenJs.id
					GenJs.addToScope(name10)
					GenJs.parentNames.set(node, name10)
					if(name10 == null) throw new HaxeError('name is null for ' + Std.string(node))
					r = (if(const) 'const ' else 'let ') + name10 + es
					tmp = r
				}

				case 21: {
					let data.Node.TVars(e16) = node
					var _g9: [String] = {[]}
					{
						var _g17: Int = 0
						while(_g17 < e16.length) {
							var e17: data.Node = e16[_g17]
							_g17++
							_g9.push(GenJs.stringify(e17))
						}
					}
					tmp = _g9.join('; ')
				}

				case 22: if({ let data.Node.TClass(_, _, _, _, value) = node value } == true) {
					let data.Node.TClass(t4, _, _, _, _) = node
					let data.Node.TClass(_, ext, _, _, _) = node
					let data.Node.TClass(_, _, impl, _, _) = node
					let data.Node.TClass(_, _, _, fields, _) = node
					var cname: String = GenJs.extractTypeName(t4)
					var require: data.Attribute = GenJs.getAtt(data.Project.mapAttributes.get(node), 'require')
					if(require != null) {
						var _g10: data.Node = require.values[1]
						var _g18: data.Node = require.values[0]
						if(_g18.index == 0) {
							if(_g10 == null) {
								let data.Node.TString(s6) = _g18
								r += 'const ' + cname + ' = require("' + s6 + '");\n' + GenJs.tabs
							} else if(_g10.index == 0) {
								let data.Node.TString(s7) = _g18
								let data.Node.TString(f1) = _g10
								r += 'const ' + cname + ' = require("' + s7 + '").' + f1 + ';\n' + GenJs.tabs
							} else throw new HaxeError('@require takes string as argument')
						} else throw new HaxeError('@require takes string as argument')
					}
					r += '/* declare class ' + cname + ' */'
					tmp = r
				} else {
					let data.Node.TClass(t5, _, _, _, _) = node
					let data.Node.TClass(_, ext1, _, _, _) = node
					let data.Node.TClass(_, _, impl1, _, _) = node
					let data.Node.TClass(_, _, _, fields1, _) = node
					let data.Node.TClass(_, _, _, _, external) = node
					var cname1: String = GenJs.extractTypeName(t5)
					r = (if(external) '/* declare class ' else 'class ') + cname1
					if(ext1 != null) r += ' extends ' + GenJs.extractTypeName(ext1)
					r += ' {\n'
					var after: [String] = {[]}
					{
						var _g19: Int = 0
						while(_g19 < fields1.length) {
							var f2: data.Node = fields1[_g19]
							_g19++
							var code1: String = ''
							var isafter: Bool = false
							var unmeta: data.Node=>data.Node = function(f3: data.Node): data.Node {
								return f3
							}
							f2 = unmeta(f2)
							if(f2.index == 40) {
								let data.Node.TStatic(field) = f2
								{
									f2 = field
									isafter = true
								}
							}
							f2 = unmeta(f2)
							switch (f2.index) {
								case 19: {
									let data.Node.TFunction(_, _, vars1, _) = f2
									let data.Node.TFunction(_, expr2, _, _) = f2
									let data.Node.TFunction(name11, _, _, _) = f2
									{
										if(name11 == 'new') name11 = 'constructor'
										if(isafter) code1 += cname1 + '.' + GenJs.rename(name11) + ' = function' else code1 += '\t' + GenJs.rename(name11)
										var _g22: [String] = {[]}
										{
											var _g31: Int = 0
											while(_g31 < vars1.length) {
												var v1: data.Node = vars1[_g31]
												_g31++
												var code2: String
												if(v1.index == 20) {
													let data.Node.TVar(oname3, _, _, _) = v1
													var name12: String = GenJs.rename(oname3)
													if(GenJs.hasInScope(name12)) name12 += '$' + ++GenJs.id
													GenJs.addToScope(name12)
													GenJs.parentNames.set(v1, name12)
													code2 = GenJs.parentNames.get(v1)
												} else throw new HaxeError(v1)
												_g22.push(@ast(ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:555: characters 16-17) }), pos => #pos(bootstrap/GenJs.hx:555: characters 15-18) },[{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenJs.hx:557: characters 20-25) },rename), pos => #pos(bootstrap/GenJs.hx:557: characters 20-32) },[]), pos => #pos(bootstrap/GenJs.hx:557: characters 20-34) }, name => name, type => null, ??? => #pos(bootstrap/GenJs.hx:557: characters 13-17) }]), pos => #pos(bootstrap/GenJs.hx:557: characters 9-35) },{ expr => EIf({ expr => ECall({ expr => EConst(CIdent(hasInScope)), pos => #pos(bootstrap/GenJs.hx:558: characters 13-23) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:558: characters 24-28) }]), pos => #pos(bootstrap/GenJs.hx:558: characters 13-29) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:558: characters 31-35) },{ expr => EBinop(OpAdd,{ expr => EConst(CString($$)), pos => #pos(bootstrap/GenJs.hx:558: characters 39-43) },{ expr => EParenthesis({ expr => EUnop(OpIncrement,false,{ expr => EConst(CIdent(id)), pos => #pos(bootstrap/GenJs.hx:558: characters 49-51) }), pos => #pos(bootstrap/GenJs.hx:558: characters 47-51) }), pos => #pos(bootstrap/GenJs.hx:558: characters 46-52) }), pos => #pos(bootstrap/GenJs.hx:558: characters 39-52) }), pos => #pos(bootstrap/GenJs.hx:558: characters 31-52) },null), pos => #pos(bootstrap/GenJs.hx:558: characters 9-52) },{ expr => ECall({ expr => EConst(CIdent(addToScope)), pos => #pos(bootstrap/GenJs.hx:559: characters 9-19) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:559: characters 20-24) }]), pos => #pos(bootstrap/GenJs.hx:559: characters 9-25) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenJs.hx:560: characters 9-20) },set), pos => #pos(bootstrap/GenJs.hx:560: characters 9-24) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:560: characters 25-26) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:560: characters 28-32) }]), pos => #pos(bootstrap/GenJs.hx:560: characters 9-33) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenJs.hx:561: characters 9-20) },get), pos => #pos(bootstrap/GenJs.hx:561: characters 9-24) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:561: characters 25-26) }]), pos => #pos(bootstrap/GenJs.hx:561: characters 9-27) }]), pos => #pos(bootstrap/GenJs.hx:556: lines 556-561) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenJs.hx:556: characters 14-18) },[{ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenJs.hx:556: characters 19-24) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:556: characters 26-27) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:556: characters 29-30) }]), pos => #pos(bootstrap/GenJs.hx:556: characters 14-31) }], pos => #pos(bootstrap/GenJs.hx:556: lines 556-561), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:562: characters 23-24) }), pos => #pos(bootstrap/GenJs.hx:562: characters 17-22) }]), pos => #pos(bootstrap/GenJs.hx:562: characters 9-22) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:562: characters 14-15) }], pos => #pos(bootstrap/GenJs.hx:562: characters 9-22), guard => null }],null)) code2)
											}
										}
										code1 += '(' + _g22.join(', ') + ') '
										if(expr2 != null) {
											if(expr2.index == 9) {
												let data.Node.TBlock(el5) = expr2
												{
													GenJs.tabs += '\t'
													code1 += GenJs.stringify(expr2)
													GenJs.tabs = GenJs.tabs.substring(0, GenJs.tabs.length - 1)
												}
											} else {
												GenJs.tabs += '\t'
												code1 += '{\n' + GenJs.tabs + GenJs.stringify(expr2)
												GenJs.tabs = GenJs.tabs.substring(0, GenJs.tabs.length - 1)
												code1 += '\n' + GenJs.tabs + '}'
											}
										} else code1 += '{}'
									}
								}

								case 20: {
									let data.Node.TVar(_, _, _, const1) = f2
									let data.Node.TVar(_, _, expr3, _) = f2
									let data.Node.TVar(_, t6, _, _) = f2
									let data.Node.TVar(name13, _, _, _) = f2
									{
										isafter = true
										code1 += cname1 + '.' + GenJs.rename(name13)
										if(expr3 != null) code1 += ' = ' + GenJs.stringify(expr3)
									}
								}
								
								case _: code1 += '' + Std.string(f2)
							}
							if(isafter) after.push(GenJs.tabs + code1) else r += '\t' + code1
						}
					}
					r += '\n' + GenJs.tabs + '}' + (if(external) ' */' else '')
					r += '\n' + after.join(';\n')
					tmp = r
				}

				case 23: {
					let data.Node.TTry(_, _, _, catches) = node
					let data.Node.TTry(_, _, v2, _) = node
					let data.Node.TTry(_, t7, _, _) = node
					let data.Node.TTry(expr4, _, _, _) = node
					r = 'try {\n' + GenJs.tabs + '\t'
					GenJs.tabs += '\t'
					if(expr4.index == 9) {
						let data.Node.TBlock(el6) = expr4
						var _g110: [String] = {[]}
						{
							var _g23: Int = 0
							while(_g23 < el6.length) {
								var e18: data.Node = el6[_g23]
								_g23++
								_g110.push(GenJs.stringifyBlockExpression(e18))
							}
						}
						r += _g110.join(';\n' + GenJs.tabs)
					} else r += GenJs.stringify(expr4)
					GenJs.tabs = GenJs.tabs.substring(0, GenJs.tabs.length - 1)
					r += '\n' + GenJs.tabs + '} catch(' + data.DataHelper.varName(v2[0]) + (') {\n' + GenJs.tabs + '\t')
					GenJs.tabs += '\t'
					GenJs.parentNames.set(v2[0], data.DataHelper.varName(v2[0]))
					{
						var _g20: data.Node = catches[0]
						if(_g20.index == 9) {
							let data.Node.TBlock(el7) = _g20
							var _g111: [String] = {[]}
							{
								var _g24: Int = 0
								while(_g24 < el7.length) {
									var e19: data.Node = el7[_g24]
									_g24++
									_g111.push(GenJs.stringify(e19))
								}
							}
							r += _g111.join(';\n' + GenJs.tabs)
						} else r += GenJs.stringify(catches[0])
					}
					GenJs.tabs = GenJs.tabs.substring(0, GenJs.tabs.length - 1)
					tmp = r + '\n' + GenJs.tabs + '}'
				}

				case 24: if({ let data.Node.TDot(value, _) = node value }.index == 0) {
					if({ let data.Node.TDot(_, value) = node value } == 'length') {
						let data.Node.TString(s8) = { let data.Node.TDot(value, _) = node value }
						tmp = '' + s8.length
					} else {
						let data.Node.TDot(expr5, _) = node
						let data.Node.TDot(_, name14) = node
						log.trace('.`' + name14 + '`', {fileName: 'GenJs.hx', lineNumber: 431, className: 'GenJs', methodName: 'stringify'})
						tmp = GenJs.stringify(expr5) + '.' + GenJs.rename(name14)
					}
				} else {
					let data.Node.TDot(_, name15) = node
					let data.Node.TDot(expr6, _) = node
					log.trace('.`' + name15 + '`', {fileName: 'GenJs.hx', lineNumber: 431, className: 'GenJs', methodName: 'stringify'})
					tmp = GenJs.stringify(expr6) + '.' + GenJs.rename(name15)
				}

				case 25: {
					let data.Node.TNew(_, _, _, values) = node
					let data.Node.TNew(_, _, names, _) = node
					let data.Node.TNew(_, args, _, _) = node
					let data.Node.TNew(t8, _, _, _) = node
					var tmp5: String = 'new ' + GenJs.extractTypeName(t8) + '('
					var _g25: [String] = {[]}
					{
						var _g112: Int = 0
						while(_g112 < args.length) {
							var e20: data.Node = args[_g112]
							_g112++
							_g25.push(GenJs.stringify(e20))
						}
					}
					tmp = tmp5 + _g25.join(',') + ')'
				}

				case 26: if({ let data.Node.TArray(value) = node value }.length == 1) {
					if({ let data.Node.TArray(value) = node value }[0].index == 41) {
						let data.Node.TFor(_, _, expr7) = { let data.Node.TArray(value) = node value }[0]
						let data.Node.TFor(_, array, _) = { let data.Node.TArray(value) = node value }[0]
						let data.Node.TFor(oname4, _, _) = { let data.Node.TArray(value) = node value }[0]
						var f4: data.Node = { let data.Node.TArray(value) = node value }[0]
						GenJs.pushScope()
						r += '((()=>{'
						r += 'const return$$ = []; '
						var name16: String = GenJs.rename(oname4)
						if(GenJs.hasInScope(name16)) name16 += '$' + ++GenJs.id
						GenJs.addToScope(name16)
						GenJs.parentNames.set(f4, name16)
						r += 'for (const ' + name16 + ' of ' + GenJs.stringify(array) + ') '
						r += 'return$$.push('
						r += GenJs.stringify(expr7)
						r += '); return$$;'
						r += '})())'
						GenJs.popScope()
						tmp = r
					} else {
						let data.Node.TArray(el8) = node
						var _g26: [String] = {[]}
						{
							var _g113: Int = 0
							while(_g113 < el8.length) {
								var e21: data.Node = el8[_g113]
								_g113++
								_g26.push(GenJs.stringify(e21))
							}
						}
						tmp = '[' + _g26.join(', ') + ']'
					}
				} else {
					let data.Node.TArray(el9) = node
					var _g27: [String] = {[]}
					{
						var _g114: Int = 0
						while(_g114 < el9.length) {
							var e22: data.Node = el9[_g114]
							_g114++
							_g27.push(GenJs.stringify(e22))
						}
					}
					tmp = '[' + _g27.join(', ') + ']'
				}

				case 27: if({ let data.Node.TMap(value, _) = node value }.length == 0) tmp = 'new Map()' else {
					let data.Node.TMap(_, values1) = node
					let data.Node.TMap(keys, _) = node
					var _g28: [String] = {[]}
					{
						var _g29: Int = 0
						var _g115: Int = keys.length
						while(_g29 < _g115) {
							var i: Int = _g29++
							_g28.push('[' + GenJs.stringify(keys[i]) + ',' + GenJs.stringify(values1[i]) + ']')
						}
					}
					tmp = 'new Map([' + _g28.join(',') + '])'
				}

				case 28: {
					let data.Node.TIndex(_, index) = node
					let data.Node.TIndex(expr8, _) = node
					tmp = GenJs.stringify(expr8) + '[' + GenJs.stringify(index) + ']'
				}

				case 29: {
					let data.Node.TSwitch(_, _, cases) = node
					let data.Node.TSwitch(_, conds, _) = node
					let data.Node.TSwitch(exprs, _, _) = node
					r = 'switch ('
					r += GenJs.stringify(exprs[0])
					r += ') {\n'
					GenJs.tabs += '\t'
					{
						var _g116: Int = 0
						var _g30: Int = cases.length
						while(_g116 < _g30) {
							var i1: Int = _g116++
							var c: data.Node = cases[i1]
							r += GenJs.tabs
							{
								var _g210: Int = 0
								var _g32: [data.Node] = conds[i1]
								while(_g210 < _g32.length) {
									var c1: data.Node = _g32[_g210]
									_g210++
									r += 'case ' + GenJs.stringify(c1) + ':'
								}
							}
							r += ' {\n'
							r += GenJs.tabs + '\t' + GenJs.stringify(c) + ';\n'
							r += GenJs.tabs + '\t' + 'break;' + '\n' + ('' + GenJs.tabs + '}') + '\n'
						}
					}
					GenJs.tabs = GenJs.tabs.substring(0, GenJs.tabs.length - 1)
					tmp = r + GenJs.tabs + '}'
				}

				case 30: {
					let data.Node.TModule(_, el10) = node
					let data.Node.TModule(path, _) = node
					r = 'module ' + path.join('.') + ' {\n'
					GenJs.tabs += '\t'
					{
						var _g33: Int = 0
						while(_g33 < el10.length) {
							var e23: data.Node = el10[_g33]
							_g33++
							r += GenJs.tabs + GenJs.stringify(e23) + ';\n'
						}
					}
					GenJs.tabs = GenJs.tabs.substring(0, GenJs.tabs.length - 1)
					tmp = r + GenJs.tabs + '}'
				}

				case 31: if({ let data.Node.TObject(value, _) = node value }.length == 0) tmp = '{}' else {
					let data.Node.TObject(_, el11) = node
					let data.Node.TObject(names1, _) = node
					var _g34: [String] = {[]}
					{
						var _g211: Int = 0
						var _g117: Int = el11.length
						while(_g211 < _g117) {
							var i2: Int = _g211++
							_g34.push(GenJs.rename(names1[i2]) + ':' + GenJs.stringify(el11[i2]))
						}
					}
					tmp = '{' + _g34.join(',') + '}'
				}

				case 32: {
					let data.Node.TEnum(_, fields2) = node
					let data.Node.TEnum(t9, _) = node
					r = 'const ' + GenJs.extractTypeName(t9)
					r += ' = {\n'
					GenJs.tabs += '\t'
					{
						var _g35: Int = 0
						while(_g35 < fields2.length) {
							var f5: data.Node = fields2[_g35]
							_g35++
							switch (f5.index) {
								case 1: {
									let data.Node.TIdent(name17) = f5
									r += GenJs.tabs + name17 + ':{},\n'
								}

								case 8: if({ let data.Node.TBinop(value, _, _) = f5 value } == 91) {
									if({ let data.Node.TBinop(_, value, _) = f5 value }.index == 1) {
										let data.Node.TBinop(_, _, val) = f5
										let data.Node.TIdent(name18) = { let data.Node.TBinop(_, value, _) = f5 value }
										r += GenJs.tabs + name18 + ':' + GenJs.stringify(val) + ',\n'
									} else throw new HaxeError('!' + Std.string(f5))
								} else throw new HaxeError('!' + Std.string(f5))
								
								case _: throw new HaxeError('!' + Std.string(f5))
							}
						}
					}
					GenJs.tabs = GenJs.tabs.substring(0, GenJs.tabs.length - 1)
					tmp = r + GenJs.tabs + '}'
				}

				case 33: {
					let data.Node.TEnumExtract(_, _, name19) = node
					let data.Node.TEnumExtract(_, extract, _) = node
					let data.Node.TEnumExtract(tenum, _, _) = node
					tmp = '/*tenumxtract*/'
				}

				case 34: {
					let data.Node.TType(_, t10) = node
					let data.Node.TType(name20, _) = node
					tmp = ''
				}

				case 35: {
					let data.Node.TDeclare(_, node1) = node
					let data.Node.TDeclare(name21, _) = node
					GenJs.parentNames.set(node1, name21)
					tmp = '//declare ' + name21
				}

				case 36: {
					let data.Node.TUsing(names2) = node
					tmp = '/*using ' + Std.string(names2) + '*/'
				}

				case 37: {
					let data.Node.TIs(_, t11) = node
					let data.Node.TIs(expr9, _) = node
					tmp = ''
				}

				case 38: {
					let data.Node.TAs(_, _, t12) = node
					let data.Node.TAs(_, kind, _) = node
					let data.Node.TAs(expr10, _, _) = node
					tmp = '(' + GenJs.stringify(expr10) + ')'
				}

				case 39: tmp = '_'

				case 40: {
					let data.Node.TStatic(field1) = node
					tmp = 'static ' + GenJs.stringify(field1)
				}

				case 41: {
					let data.Node.TFor(_, _, b1) = node
					let data.Node.TFor(_, a2, _) = node
					let data.Node.TFor(n2, _, _) = node
					GenJs.pushScope()
					var name22: String = GenJs.rename(n2)
					if(GenJs.hasInScope(name22)) name22 += '$' + ++GenJs.id
					GenJs.addToScope(name22)
					GenJs.parentNames.set(node, name22)
					var res: String = 'for (const ' + GenJs.rename(name22) + ' of ' + GenJs.stringify(a2) + ') ' + GenJs.stringify(b1)
					GenJs.popScope()
					tmp = res
				}

				case 42: {
					let data.Node.TElvis(_, b2) = node
					let data.Node.TElvis(a3, _) = node
					tmp = GenJs.stringify(a3) + '||' + GenJs.stringify(b2)
				}

				case 43: {
					let data.Node.NodeTypeValue(type1) = node
					tmp = GenJs.extractTypeName(type1)
				}
			}
			return a + @ast(ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenJs.hx:269: characters 21-25) }), pos => #pos(bootstrap/GenJs.hx:269: characters 20-26) },[{ expr => { expr => EBlock([{ expr => EConst(CString(/*tenumxtract*/)), pos => #pos(bootstrap/GenJs.hx:271: characters 43-60) }]), pos => #pos(bootstrap/GenJs.hx:271: characters 2-60) }, values => [{ expr => ECall({ expr => EConst(CIdent(TEnumExtract)), pos => #pos(bootstrap/GenJs.hx:271: characters 7-19) },[{ expr => EConst(CIdent(tenum)), pos => #pos(bootstrap/GenJs.hx:271: characters 20-25) },{ expr => EConst(CIdent(extract)), pos => #pos(bootstrap/GenJs.hx:271: characters 27-34) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:271: characters 36-40) }]), pos => #pos(bootstrap/GenJs.hx:271: characters 7-41) }], pos => #pos(bootstrap/GenJs.hx:271: characters 2-60), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(/*using $names*/)), pos => #pos(bootstrap/GenJs.hx:273: characters 22-40) }]), pos => #pos(bootstrap/GenJs.hx:273: characters 2-40) }, values => [{ expr => ECall({ expr => EConst(CIdent(TUsing)), pos => #pos(bootstrap/GenJs.hx:273: characters 7-13) },[{ expr => EConst(CIdent(names)), pos => #pos(bootstrap/GenJs.hx:273: characters 14-19) }]), pos => #pos(bootstrap/GenJs.hx:273: characters 7-20) }], pos => #pos(bootstrap/GenJs.hx:273: characters 2-40), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:274: characters 23-24) },{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:274: characters 28-29) }), pos => #pos(bootstrap/GenJs.hx:274: characters 23-29) },{ expr => ECall({ expr => EConst(CIdent(stringify)), pos => #pos(bootstrap/GenJs.hx:274: characters 31-40) },[{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:274: characters 41-42) }]), pos => #pos(bootstrap/GenJs.hx:274: characters 31-43) }), pos => #pos(bootstrap/GenJs.hx:274: characters 18-43) }]), pos => #pos(bootstrap/GenJs.hx:274: characters 17-44) },join), pos => #pos(bootstrap/GenJs.hx:274: characters 17-49) },[{ expr => EConst(CString(; )), pos => #pos(bootstrap/GenJs.hx:274: characters 50-54) }]), pos => #pos(bootstrap/GenJs.hx:274: characters 17-55) }]), pos => #pos(bootstrap/GenJs.hx:274: characters 2-55) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVars)), pos => #pos(bootstrap/GenJs.hx:274: characters 7-12) },[{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:274: characters 13-14) }]), pos => #pos(bootstrap/GenJs.hx:274: characters 7-15) }], pos => #pos(bootstrap/GenJs.hx:274: characters 2-55), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:283: characters 11-12) },split), pos => #pos(bootstrap/GenJs.hx:283: characters 11-18) },[{ expr => EConst(CString()), pos => #pos(bootstrap/GenJs.hx:283: characters 19-21) }]), pos => #pos(bootstrap/GenJs.hx:283: characters 11-22) }, name => s, type => null, ??? => #pos(bootstrap/GenJs.hx:283: characters 7-8) }]), pos => #pos(bootstrap/GenJs.hx:283: characters 3-23) },{ expr => EVars([{ expr => { expr => EArrayDecl([]), pos => #pos(bootstrap/GenJs.hx:284: characters 18-20) }, name => charsOut, type => null, ??? => #pos(bootstrap/GenJs.hx:284: characters 7-15) }]), pos => #pos(bootstrap/GenJs.hx:284: characters 3-21) },{ expr => EWhile({ expr => EBinop(OpGt,{ expr => EField({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:285: characters 10-11) },length), pos => #pos(bootstrap/GenJs.hx:285: characters 10-18) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenJs.hx:285: characters 21-22) }), pos => #pos(bootstrap/GenJs.hx:285: characters 10-22) },{ expr => EBlock([{ expr => ESwitch({ expr => EParenthesis({ expr => EArray({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:287: characters 12-13) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenJs.hx:287: characters 14-15) }), pos => #pos(bootstrap/GenJs.hx:287: characters 12-16) }), pos => #pos(bootstrap/GenJs.hx:287: characters 11-17) },[{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(charsOut)), pos => #pos(bootstrap/GenJs.hx:289: characters 5-13) },push), pos => #pos(bootstrap/GenJs.hx:289: characters 5-18) },[{ expr => EConst(CString(\')), pos => #pos(bootstrap/GenJs.hx:289: characters 19-24) }]), pos => #pos(bootstrap/GenJs.hx:289: characters 5-25) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:290: characters 5-6) },shift), pos => #pos(bootstrap/GenJs.hx:290: characters 5-12) },[]), pos => #pos(bootstrap/GenJs.hx:290: characters 5-14) }]), pos => #pos(bootstrap/GenJs.hx:288: lines 288-290) }, values => [{ expr => EConst(CString(')), pos => #pos(bootstrap/GenJs.hx:288: characters 10-13) }], pos => #pos(bootstrap/GenJs.hx:288: lines 288-290), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(charsOut)), pos => #pos(bootstrap/GenJs.hx:292: characters 5-13) },push), pos => #pos(bootstrap/GenJs.hx:292: characters 5-18) },[{ expr => EConst(CString(\n)), pos => #pos(bootstrap/GenJs.hx:292: characters 19-24) }]), pos => #pos(bootstrap/GenJs.hx:292: characters 5-25) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:293: characters 5-6) },shift), pos => #pos(bootstrap/GenJs.hx:293: characters 5-12) },[]), pos => #pos(bootstrap/GenJs.hx:293: characters 5-14) }]), pos => #pos(bootstrap/GenJs.hx:291: lines 291-293) }, values => [{ expr => EConst(CString(
)), pos => #pos(bootstrap/GenJs.hx:291: characters 10-14) }], pos => #pos(bootstrap/GenJs.hx:291: lines 291-293), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(charsOut)), pos => #pos(bootstrap/GenJs.hx:295: characters 5-13) },push), pos => #pos(bootstrap/GenJs.hx:295: characters 5-18) },[{ expr => EConst(CString(\r)), pos => #pos(bootstrap/GenJs.hx:295: characters 19-24) }]), pos => #pos(bootstrap/GenJs.hx:295: characters 5-25) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:296: characters 5-6) },shift), pos => #pos(bootstrap/GenJs.hx:296: characters 5-12) },[]), pos => #pos(bootstrap/GenJs.hx:296: characters 5-14) }]), pos => #pos(bootstrap/GenJs.hx:294: lines 294-296) }, values => [{ expr => EConst(CString()), pos => #pos(bootstrap/GenJs.hx:294: characters 10-14) }], pos => #pos(bootstrap/GenJs.hx:294: lines 294-296), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:298: characters 5-6) },shift), pos => #pos(bootstrap/GenJs.hx:298: characters 5-12) },[]), pos => #pos(bootstrap/GenJs.hx:298: characters 5-14) },{ expr => EIf({ expr => EBinop(OpEq,{ expr => EArray({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:299: characters 9-10) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenJs.hx:299: characters 11-12) }), pos => #pos(bootstrap/GenJs.hx:299: characters 9-13) },{ expr => EConst(CString(')), pos => #pos(bootstrap/GenJs.hx:299: characters 17-20) }), pos => #pos(bootstrap/GenJs.hx:299: characters 9-20) },{ expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(charsOut)), pos => #pos(bootstrap/GenJs.hx:300: characters 6-14) },push), pos => #pos(bootstrap/GenJs.hx:300: characters 6-19) },[{ expr => EConst(CString(\')), pos => #pos(bootstrap/GenJs.hx:300: characters 20-25) }]), pos => #pos(bootstrap/GenJs.hx:300: characters 6-26) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:301: characters 6-7) },shift), pos => #pos(bootstrap/GenJs.hx:301: characters 6-13) },[]), pos => #pos(bootstrap/GenJs.hx:301: characters 6-15) }]), pos => #pos(bootstrap/GenJs.hx:299: lines 299-302) },{ expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(charsOut)), pos => #pos(bootstrap/GenJs.hx:303: characters 6-14) },push), pos => #pos(bootstrap/GenJs.hx:303: characters 6-19) },[{ expr => EConst(CString(\)), pos => #pos(bootstrap/GenJs.hx:303: characters 20-24) }]), pos => #pos(bootstrap/GenJs.hx:303: characters 6-25) }]), pos => #pos(bootstrap/GenJs.hx:302: lines 302-304) }), pos => #pos(bootstrap/GenJs.hx:299: lines 299-304) }]), pos => #pos(bootstrap/GenJs.hx:297: lines 297-304) }, values => [{ expr => EConst(CString(\)), pos => #pos(bootstrap/GenJs.hx:297: characters 10-14) }], pos => #pos(bootstrap/GenJs.hx:297: lines 297-304), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(charsOut)), pos => #pos(bootstrap/GenJs.hx:306: characters 5-13) },push), pos => #pos(bootstrap/GenJs.hx:306: characters 5-18) },[{ expr => EArray({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:306: characters 19-20) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenJs.hx:306: characters 21-22) }), pos => #pos(bootstrap/GenJs.hx:306: characters 19-23) }]), pos => #pos(bootstrap/GenJs.hx:306: characters 5-24) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:307: characters 5-6) },shift), pos => #pos(bootstrap/GenJs.hx:307: characters 5-12) },[]), pos => #pos(bootstrap/GenJs.hx:307: characters 5-14) }]), pos => #pos(bootstrap/GenJs.hx:305: lines 305-307) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:305: characters 10-11) }], pos => #pos(bootstrap/GenJs.hx:305: lines 305-307), guard => null }],null), pos => #pos(bootstrap/GenJs.hx:287: lines 287-308) }]), pos => #pos(bootstrap/GenJs.hx:286: lines 286-309) },true), pos => #pos(bootstrap/GenJs.hx:285: lines 285-309) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(')), pos => #pos(bootstrap/GenJs.hx:311: characters 3-6) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(charsOut)), pos => #pos(bootstrap/GenJs.hx:311: characters 9-17) },join), pos => #pos(bootstrap/GenJs.hx:311: characters 9-22) },[{ expr => EConst(CString()), pos => #pos(bootstrap/GenJs.hx:311: characters 23-25) }]), pos => #pos(bootstrap/GenJs.hx:311: characters 9-26) }), pos => #pos(bootstrap/GenJs.hx:311: characters 3-26) },{ expr => EConst(CString(')), pos => #pos(bootstrap/GenJs.hx:311: characters 29-32) }), pos => #pos(bootstrap/GenJs.hx:311: characters 3-32) }]), pos => #pos(bootstrap/GenJs.hx:277: lines 277-311) }, values => [{ expr => ECall({ expr => EConst(CIdent(TString)), pos => #pos(bootstrap/GenJs.hx:277: characters 7-14) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:277: characters 15-16) }]), pos => #pos(bootstrap/GenJs.hx:277: characters 7-17) }], pos => #pos(bootstrap/GenJs.hx:277: lines 277-311), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(trace)), pos => #pos(bootstrap/GenJs.hx:313: characters 3-8) },[{ expr => EConst(CString(`$s`)), pos => #pos(bootstrap/GenJs.hx:313: characters 9-15) }]), pos => #pos(bootstrap/GenJs.hx:313: characters 3-16) },{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EField({ expr => EConst(CIdent(Project)), pos => #pos(bootstrap/GenJs.hx:314: characters 16-23) },mapNames), pos => #pos(bootstrap/GenJs.hx:314: characters 16-32) },get), pos => #pos(bootstrap/GenJs.hx:314: characters 16-36) },[{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenJs.hx:314: characters 37-41) }]), pos => #pos(bootstrap/GenJs.hx:314: characters 16-42) }, name => source, type => null, ??? => #pos(bootstrap/GenJs.hx:314: characters 7-13) }]), pos => #pos(bootstrap/GenJs.hx:314: characters 3-43) },{ expr => EVars([{ expr => { expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenJs.hx:315: characters 19-25) }), pos => #pos(bootstrap/GenJs.hx:315: characters 18-26) },[{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CString(Unmapped $node)), pos => #pos(bootstrap/GenJs.hx:316: characters 21-37) }), pos => #pos(bootstrap/GenJs.hx:316: characters 15-20) }]), pos => #pos(bootstrap/GenJs.hx:316: characters 4-20) }, values => [{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenJs.hx:316: characters 9-13) }], pos => #pos(bootstrap/GenJs.hx:316: characters 4-20), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:317: characters 31-35) }]), pos => #pos(bootstrap/GenJs.hx:317: characters 4-35) }, values => [{ expr => ECall({ expr => EConst(CIdent(TEnum)), pos => #pos(bootstrap/GenJs.hx:317: characters 9-14) },[{ expr => ECall({ expr => EConst(CIdent(Type)), pos => #pos(bootstrap/GenJs.hx:317: characters 15-19) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:317: characters 20-24) }]), pos => #pos(bootstrap/GenJs.hx:317: characters 15-25) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:317: characters 27-28) }]), pos => #pos(bootstrap/GenJs.hx:317: characters 9-29) }], pos => #pos(bootstrap/GenJs.hx:317: characters 4-35), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenJs.hx:318: characters 27-38) },get), pos => #pos(bootstrap/GenJs.hx:318: characters 27-42) },[{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenJs.hx:318: characters 43-49) }]), pos => #pos(bootstrap/GenJs.hx:318: characters 27-50) }]), pos => #pos(bootstrap/GenJs.hx:318: characters 4-50) }, values => [{ expr => ECall({ expr => EConst(CIdent(TFor)), pos => #pos(bootstrap/GenJs.hx:318: characters 9-13) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:318: characters 14-18) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:318: characters 20-21) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:318: characters 23-24) }]), pos => #pos(bootstrap/GenJs.hx:318: characters 9-25) }], pos => #pos(bootstrap/GenJs.hx:318: characters 4-50), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenJs.hx:319: characters 23-34) },get), pos => #pos(bootstrap/GenJs.hx:319: characters 23-38) },[{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenJs.hx:319: characters 39-45) }]), pos => #pos(bootstrap/GenJs.hx:319: characters 23-46) }]), pos => #pos(bootstrap/GenJs.hx:319: characters 4-46) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenJs.hx:319: characters 9-15) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:319: characters 16-20) }]), pos => #pos(bootstrap/GenJs.hx:319: characters 9-21) }], pos => #pos(bootstrap/GenJs.hx:319: characters 4-46), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenJs.hx:321: characters 13-24) },get), pos => #pos(bootstrap/GenJs.hx:321: characters 13-28) },[{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenJs.hx:321: characters 29-35) }]), pos => #pos(bootstrap/GenJs.hx:321: characters 13-36) }, name => n, type => null, ??? => #pos(bootstrap/GenJs.hx:321: characters 9-10) }]), pos => #pos(bootstrap/GenJs.hx:321: characters 5-37) },{ expr => EIf({ expr => EBinop(OpEq,{ expr => EConst(CIdent(n)), pos => #pos(bootstrap/GenJs.hx:322: characters 9-10) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenJs.hx:322: characters 12-16) }), pos => #pos(bootstrap/GenJs.hx:322: characters 9-16) },{ expr => EThrow({ expr => EBinop(OpAdd,{ expr => EConst(CString(TVar `$name` parentNames null == )), pos => #pos(bootstrap/GenJs.hx:322: characters 24-59) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenJs.hx:322: characters 60-71) },get), pos => #pos(bootstrap/GenJs.hx:322: characters 60-75) },[{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenJs.hx:322: characters 76-82) }]), pos => #pos(bootstrap/GenJs.hx:322: characters 60-83) }), pos => #pos(bootstrap/GenJs.hx:322: characters 24-83) }), pos => #pos(bootstrap/GenJs.hx:322: characters 18-23) },null), pos => #pos(bootstrap/GenJs.hx:322: characters 5-23) },{ expr => EConst(CIdent(n)), pos => #pos(bootstrap/GenJs.hx:323: characters 5-6) }]), pos => #pos(bootstrap/GenJs.hx:320: lines 320-323) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenJs.hx:320: characters 9-13) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:320: characters 14-18) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:320: characters 20-21) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:320: characters 23-24) }]), pos => #pos(bootstrap/GenJs.hx:320: characters 9-25) }], pos => #pos(bootstrap/GenJs.hx:320: lines 320-323), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EField({ expr => EConst(CIdent(Project)), pos => #pos(bootstrap/GenJs.hx:325: characters 25-32) },mapNames), pos => #pos(bootstrap/GenJs.hx:325: characters 25-41) },get), pos => #pos(bootstrap/GenJs.hx:325: characters 25-45) },[{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenJs.hx:325: characters 46-52) }]), pos => #pos(bootstrap/GenJs.hx:325: characters 25-53) }, name => static_source, type => null, ??? => #pos(bootstrap/GenJs.hx:325: characters 9-22) }]), pos => #pos(bootstrap/GenJs.hx:325: characters 5-54) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(static_source)), pos => #pos(bootstrap/GenJs.hx:326: characters 13-26) }), pos => #pos(bootstrap/GenJs.hx:326: characters 12-27) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => ECall({ expr => EField({ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenJs.hx:328: characters 7-8) },extractTypeName), pos => #pos(bootstrap/GenJs.hx:328: characters 7-24) },[]), pos => #pos(bootstrap/GenJs.hx:328: characters 7-26) },rename), pos => #pos(bootstrap/GenJs.hx:328: characters 7-33) },[]), pos => #pos(bootstrap/GenJs.hx:328: characters 7-35) },{ expr => EConst(CString(.)), pos => #pos(bootstrap/GenJs.hx:328: characters 38-41) }), pos => #pos(bootstrap/GenJs.hx:328: characters 7-41) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:328: characters 44-48) },rename), pos => #pos(bootstrap/GenJs.hx:328: characters 44-55) },[]), pos => #pos(bootstrap/GenJs.hx:328: characters 44-57) }), pos => #pos(bootstrap/GenJs.hx:328: characters 7-57) }]), pos => #pos(bootstrap/GenJs.hx:327: lines 327-328) }, values => [{ expr => ECall({ expr => EConst(CIdent(TClass)), pos => #pos(bootstrap/GenJs.hx:327: characters 11-17) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenJs.hx:327: characters 18-19) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:327: characters 21-22) }]), pos => #pos(bootstrap/GenJs.hx:327: characters 11-23) },{ expr => ECall({ expr => EConst(CIdent(TEnum)), pos => #pos(bootstrap/GenJs.hx:327: characters 25-30) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenJs.hx:327: characters 31-32) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:327: characters 33-34) }]), pos => #pos(bootstrap/GenJs.hx:327: characters 25-35) }], pos => #pos(bootstrap/GenJs.hx:327: lines 327-328), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CString(static_source is $static_source)), pos => #pos(bootstrap/GenJs.hx:329: characters 20-53) }), pos => #pos(bootstrap/GenJs.hx:329: characters 14-19) }]), pos => #pos(bootstrap/GenJs.hx:329: characters 6-19) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:329: characters 11-12) }], pos => #pos(bootstrap/GenJs.hx:329: characters 6-19), guard => null }],null), pos => #pos(bootstrap/GenJs.hx:326: lines 326-330) }]), pos => #pos(bootstrap/GenJs.hx:324: lines 324-330) }, values => [{ expr => ECall({ expr => EConst(CIdent(TStatic)), pos => #pos(bootstrap/GenJs.hx:324: characters 9-16) },[{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenJs.hx:324: characters 17-18) },{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenJs.hx:324: characters 21-25) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:324: characters 26-30) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:324: characters 32-33) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:324: characters 35-36) }]), pos => #pos(bootstrap/GenJs.hx:324: characters 21-37) }), pos => #pos(bootstrap/GenJs.hx:324: characters 17-37) }]), pos => #pos(bootstrap/GenJs.hx:324: characters 9-38) }], pos => #pos(bootstrap/GenJs.hx:324: lines 324-330), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:331: characters 29-33) },rename), pos => #pos(bootstrap/GenJs.hx:331: characters 29-40) },[]), pos => #pos(bootstrap/GenJs.hx:331: characters 29-42) }]), pos => #pos(bootstrap/GenJs.hx:331: characters 4-42) }, values => [{ expr => ECall({ expr => EConst(CIdent(TFunction)), pos => #pos(bootstrap/GenJs.hx:331: characters 9-18) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:331: characters 19-23) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:331: characters 25-26) }]), pos => #pos(bootstrap/GenJs.hx:331: characters 9-27) }], pos => #pos(bootstrap/GenJs.hx:331: characters 4-42), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EConst(CIdent(getAtt)), pos => #pos(bootstrap/GenJs.hx:333: characters 18-24) },[{ expr => ECall({ expr => EField({ expr => EField({ expr => EConst(CIdent(Project)), pos => #pos(bootstrap/GenJs.hx:333: characters 25-32) },mapAttributes), pos => #pos(bootstrap/GenJs.hx:333: characters 25-46) },get), pos => #pos(bootstrap/GenJs.hx:333: characters 25-50) },[{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenJs.hx:333: characters 51-57) }]), pos => #pos(bootstrap/GenJs.hx:333: characters 25-58) },{ expr => EConst(CString(native)), pos => #pos(bootstrap/GenJs.hx:333: characters 60-68) }]), pos => #pos(bootstrap/GenJs.hx:333: characters 18-69) }, name => rename, type => null, ??? => #pos(bootstrap/GenJs.hx:333: characters 9-15) }]), pos => #pos(bootstrap/GenJs.hx:333: characters 5-70) },{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => ECall({ expr => EField({ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenJs.hx:334: characters 16-17) },extractTypeName), pos => #pos(bootstrap/GenJs.hx:334: characters 16-33) },[]), pos => #pos(bootstrap/GenJs.hx:334: characters 16-35) },rename), pos => #pos(bootstrap/GenJs.hx:334: characters 16-42) },[]), pos => #pos(bootstrap/GenJs.hx:334: characters 16-44) }, name => name, type => null, ??? => #pos(bootstrap/GenJs.hx:334: characters 9-13) }]), pos => #pos(bootstrap/GenJs.hx:334: characters 5-45) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(rename)), pos => #pos(bootstrap/GenJs.hx:335: characters 9-15) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenJs.hx:335: characters 19-23) }), pos => #pos(bootstrap/GenJs.hx:335: characters 9-23) },{ expr => ECall({ expr => EConst(CIdent(trace)), pos => #pos(bootstrap/GenJs.hx:335: characters 25-30) },[{ expr => EConst(CString(Got @native!)), pos => #pos(bootstrap/GenJs.hx:335: characters 31-45) }]), pos => #pos(bootstrap/GenJs.hx:335: characters 25-46) },null), pos => #pos(bootstrap/GenJs.hx:335: characters 5-46) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(rename)), pos => #pos(bootstrap/GenJs.hx:336: characters 9-15) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenJs.hx:336: characters 19-23) }), pos => #pos(bootstrap/GenJs.hx:336: characters 9-23) },{ expr => ESwitch({ expr => EParenthesis({ expr => EArray({ expr => EField({ expr => EConst(CIdent(rename)), pos => #pos(bootstrap/GenJs.hx:336: characters 33-39) },values), pos => #pos(bootstrap/GenJs.hx:336: characters 33-46) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenJs.hx:336: characters 47-48) }), pos => #pos(bootstrap/GenJs.hx:336: characters 33-49) }), pos => #pos(bootstrap/GenJs.hx:336: characters 32-50) },[{ expr => { expr => EBlock([{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:337: characters 17-21) }]), pos => #pos(bootstrap/GenJs.hx:337: characters 6-21) }, values => [{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenJs.hx:337: characters 11-15) }], pos => #pos(bootstrap/GenJs.hx:337: characters 6-21), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:338: characters 23-24) }]), pos => #pos(bootstrap/GenJs.hx:338: characters 6-24) }, values => [{ expr => ECall({ expr => EConst(CIdent(TString)), pos => #pos(bootstrap/GenJs.hx:338: characters 11-18) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:338: characters 19-20) }]), pos => #pos(bootstrap/GenJs.hx:338: characters 11-21) }], pos => #pos(bootstrap/GenJs.hx:338: characters 6-24), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:339: characters 14-18) }]), pos => #pos(bootstrap/GenJs.hx:339: characters 6-18) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:339: characters 11-12) }], pos => #pos(bootstrap/GenJs.hx:339: characters 6-18), guard => null }],null), pos => #pos(bootstrap/GenJs.hx:336: lines 336-340) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:340: characters 12-16) }), pos => #pos(bootstrap/GenJs.hx:336: lines 336-340) }]), pos => #pos(bootstrap/GenJs.hx:332: lines 332-340) }, values => [{ expr => ECall({ expr => EConst(CIdent(TClass)), pos => #pos(bootstrap/GenJs.hx:332: characters 9-15) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenJs.hx:332: characters 16-17) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:332: characters 19-20) }]), pos => #pos(bootstrap/GenJs.hx:332: characters 9-21) }], pos => #pos(bootstrap/GenJs.hx:332: lines 332-340), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EBinop(OpAdd,{ expr => EConst(CString($s )), pos => #pos(bootstrap/GenJs.hx:342: characters 10-15) },{ expr => EConst(CIdent(source)), pos => #pos(bootstrap/GenJs.hx:342: characters 16-22) }), pos => #pos(bootstrap/GenJs.hx:342: characters 10-22) }), pos => #pos(bootstrap/GenJs.hx:342: characters 4-9) }]), pos => #pos(bootstrap/GenJs.hx:341: lines 341-342) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:341: characters 9-10) }], pos => #pos(bootstrap/GenJs.hx:341: lines 341-342), guard => null }],null), pos => #pos(bootstrap/GenJs.hx:315: lines 315-343) }, name => n, type => null, ??? => #pos(bootstrap/GenJs.hx:315: characters 7-8) }]), pos => #pos(bootstrap/GenJs.hx:315: lines 315-343) },{ expr => EConst(CIdent(n)), pos => #pos(bootstrap/GenJs.hx:344: characters 3-4) }]), pos => #pos(bootstrap/GenJs.hx:312: lines 312-344) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenJs.hx:312: characters 7-13) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:312: characters 14-15) }]), pos => #pos(bootstrap/GenJs.hx:312: characters 7-16) }], pos => #pos(bootstrap/GenJs.hx:312: lines 312-344), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(true)), pos => #pos(bootstrap/GenJs.hx:345: characters 20-26) }]), pos => #pos(bootstrap/GenJs.hx:345: characters 2-26) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBool)), pos => #pos(bootstrap/GenJs.hx:345: characters 7-12) },[{ expr => EConst(CIdent(true)), pos => #pos(bootstrap/GenJs.hx:345: characters 13-17) }]), pos => #pos(bootstrap/GenJs.hx:345: characters 7-18) }], pos => #pos(bootstrap/GenJs.hx:345: characters 2-26), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(false)), pos => #pos(bootstrap/GenJs.hx:346: characters 17-24) }]), pos => #pos(bootstrap/GenJs.hx:346: characters 2-24) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBool)), pos => #pos(bootstrap/GenJs.hx:346: characters 7-12) },[{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:346: characters 13-14) }]), pos => #pos(bootstrap/GenJs.hx:346: characters 7-15) }], pos => #pos(bootstrap/GenJs.hx:346: characters 2-24), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(this)), pos => #pos(bootstrap/GenJs.hx:347: characters 14-20) }]), pos => #pos(bootstrap/GenJs.hx:347: characters 2-20) }, values => [{ expr => EConst(CIdent(TThis)), pos => #pos(bootstrap/GenJs.hx:347: characters 7-12) }], pos => #pos(bootstrap/GenJs.hx:347: characters 2-20), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(super)), pos => #pos(bootstrap/GenJs.hx:348: characters 15-22) }]), pos => #pos(bootstrap/GenJs.hx:348: characters 2-22) }, values => [{ expr => EConst(CIdent(TSuper)), pos => #pos(bootstrap/GenJs.hx:348: characters 7-13) }], pos => #pos(bootstrap/GenJs.hx:348: characters 2-22), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:349: characters 16-17) }]), pos => #pos(bootstrap/GenJs.hx:349: characters 2-17) }, values => [{ expr => ECall({ expr => EConst(CIdent(TInt)), pos => #pos(bootstrap/GenJs.hx:349: characters 7-11) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:349: characters 12-13) }]), pos => #pos(bootstrap/GenJs.hx:349: characters 7-14) }], pos => #pos(bootstrap/GenJs.hx:349: characters 2-17), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:350: characters 18-19) }]), pos => #pos(bootstrap/GenJs.hx:350: characters 2-19) }, values => [{ expr => ECall({ expr => EConst(CIdent(TFloat)), pos => #pos(bootstrap/GenJs.hx:350: characters 7-13) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:350: characters 14-15) }]), pos => #pos(bootstrap/GenJs.hx:350: characters 7-16) }], pos => #pos(bootstrap/GenJs.hx:350: characters 2-19), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(null)), pos => #pos(bootstrap/GenJs.hx:351: characters 14-20) }]), pos => #pos(bootstrap/GenJs.hx:351: characters 2-20) }, values => [{ expr => EConst(CIdent(TNull)), pos => #pos(bootstrap/GenJs.hx:351: characters 7-12) }], pos => #pos(bootstrap/GenJs.hx:351: characters 2-20), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(break)), pos => #pos(bootstrap/GenJs.hx:352: characters 15-22) }]), pos => #pos(bootstrap/GenJs.hx:352: characters 2-22) }, values => [{ expr => EConst(CIdent(TBreak)), pos => #pos(bootstrap/GenJs.hx:352: characters 7-13) }], pos => #pos(bootstrap/GenJs.hx:352: characters 2-22), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(continue)), pos => #pos(bootstrap/GenJs.hx:353: characters 18-28) }]), pos => #pos(bootstrap/GenJs.hx:353: characters 2-28) }, values => [{ expr => EConst(CIdent(TContinue)), pos => #pos(bootstrap/GenJs.hx:353: characters 7-16) }], pos => #pos(bootstrap/GenJs.hx:353: characters 2-28), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(a)), pos => #pos(bootstrap/GenJs.hx:355: characters 3-4) },stringify), pos => #pos(bootstrap/GenJs.hx:355: characters 3-14) },[]), pos => #pos(bootstrap/GenJs.hx:355: characters 3-16) },{ expr => EConst(CString( )), pos => #pos(bootstrap/GenJs.hx:355: characters 19-22) }), pos => #pos(bootstrap/GenJs.hx:355: characters 3-22) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(op)), pos => #pos(bootstrap/GenJs.hx:355: characters 25-27) },stringify), pos => #pos(bootstrap/GenJs.hx:355: characters 25-37) },[]), pos => #pos(bootstrap/GenJs.hx:355: characters 25-39) }), pos => #pos(bootstrap/GenJs.hx:355: characters 3-39) },{ expr => EConst(CString( )), pos => #pos(bootstrap/GenJs.hx:355: characters 42-45) }), pos => #pos(bootstrap/GenJs.hx:355: characters 3-45) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(b)), pos => #pos(bootstrap/GenJs.hx:355: characters 48-49) },stringify), pos => #pos(bootstrap/GenJs.hx:355: characters 48-59) },[]), pos => #pos(bootstrap/GenJs.hx:355: characters 48-61) }), pos => #pos(bootstrap/GenJs.hx:355: characters 3-61) }]), pos => #pos(bootstrap/GenJs.hx:354: lines 354-355) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBinop)), pos => #pos(bootstrap/GenJs.hx:354: characters 7-13) },[{ expr => EConst(CIdent(op)), pos => #pos(bootstrap/GenJs.hx:354: characters 14-16) },{ expr => EConst(CIdent(a)), pos => #pos(bootstrap/GenJs.hx:354: characters 18-19) },{ expr => EConst(CIdent(b)), pos => #pos(bootstrap/GenJs.hx:354: characters 21-22) }]), pos => #pos(bootstrap/GenJs.hx:354: characters 7-23) }], pos => #pos(bootstrap/GenJs.hx:354: lines 354-355), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString({})), pos => #pos(bootstrap/GenJs.hx:356: characters 19-23) }]), pos => #pos(bootstrap/GenJs.hx:356: characters 2-23) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenJs.hx:356: characters 7-13) },[{ expr => EArrayDecl([]), pos => #pos(bootstrap/GenJs.hx:356: characters 14-16) }]), pos => #pos(bootstrap/GenJs.hx:356: characters 7-17) }], pos => #pos(bootstrap/GenJs.hx:356: characters 2-23), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:358: characters 3-4) },{ expr => EConst(CString({
)), pos => #pos(bootstrap/GenJs.hx:358: characters 7-12) }), pos => #pos(bootstrap/GenJs.hx:358: characters 3-12) },{ expr => ECall({ expr => EConst(CIdent(pushScope)), pos => #pos(bootstrap/GenJs.hx:359: characters 3-12) },[]), pos => #pos(bootstrap/GenJs.hx:359: characters 3-14) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenJs.hx:360: characters 3-10) },[]), pos => #pos(bootstrap/GenJs.hx:360: characters 3-12) },{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(element)), pos => #pos(bootstrap/GenJs.hx:361: characters 8-15) },{ expr => EConst(CIdent(elements)), pos => #pos(bootstrap/GenJs.hx:361: characters 19-27) }), pos => #pos(bootstrap/GenJs.hx:361: characters 8-27) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(element)), pos => #pos(bootstrap/GenJs.hx:362: characters 11-18) }), pos => #pos(bootstrap/GenJs.hx:362: characters 10-19) },[{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenJs.hx:364: characters 17-21) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(element)), pos => #pos(bootstrap/GenJs.hx:364: characters 24-31) },stringifyBlockExpression), pos => #pos(bootstrap/GenJs.hx:364: characters 24-56) },[]), pos => #pos(bootstrap/GenJs.hx:364: characters 24-58) }), pos => #pos(bootstrap/GenJs.hx:364: characters 17-58) },{ expr => EConst(CString(
)), pos => #pos(bootstrap/GenJs.hx:364: characters 61-65) }), pos => #pos(bootstrap/GenJs.hx:364: characters 17-65) }, name => code, type => null, ??? => #pos(bootstrap/GenJs.hx:364: characters 10-14) }]), pos => #pos(bootstrap/GenJs.hx:364: characters 6-66) },{ expr => EIf({ expr => EBinop(OpBoolAnd,{ expr => EUnop(OpNot,false,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(element)), pos => #pos(bootstrap/GenJs.hx:366: characters 11-18) },match), pos => #pos(bootstrap/GenJs.hx:366: characters 11-24) },[{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenJs.hx:366: characters 25-31) },[{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:366: characters 32-33) }]), pos => #pos(bootstrap/GenJs.hx:366: characters 25-34) }]), pos => #pos(bootstrap/GenJs.hx:366: characters 11-35) }), pos => #pos(bootstrap/GenJs.hx:366: characters 10-35) },{ expr => EBinop(OpLt,{ expr => EField({ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenJs.hx:366: characters 39-43) },length), pos => #pos(bootstrap/GenJs.hx:366: characters 39-50) },{ expr => EConst(CInt(256)), pos => #pos(bootstrap/GenJs.hx:366: characters 53-56) }), pos => #pos(bootstrap/GenJs.hx:366: characters 39-56) }), pos => #pos(bootstrap/GenJs.hx:366: characters 10-56) },{ expr => ECall({ expr => EConst(CIdent(trace)), pos => #pos(bootstrap/GenJs.hx:367: characters 6-11) },[{ expr => EConst(CString(Generated block expression `${untyped code.trim()}`)), pos => #pos(bootstrap/GenJs.hx:367: characters 12-65) }]), pos => #pos(bootstrap/GenJs.hx:367: characters 6-66) },null), pos => #pos(bootstrap/GenJs.hx:366: lines 366-367) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:368: characters 6-7) },{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenJs.hx:368: characters 11-15) }), pos => #pos(bootstrap/GenJs.hx:368: characters 6-15) }]), pos => #pos(bootstrap/GenJs.hx:363: lines 363-368) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:363: characters 10-11) }], pos => #pos(bootstrap/GenJs.hx:363: lines 363-368), guard => null }],null), pos => #pos(bootstrap/GenJs.hx:362: lines 362-369) }), pos => #pos(bootstrap/GenJs.hx:361: lines 361-369) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenJs.hx:370: characters 3-9) },[]), pos => #pos(bootstrap/GenJs.hx:370: characters 3-11) },{ expr => ECall({ expr => EConst(CIdent(popScope)), pos => #pos(bootstrap/GenJs.hx:371: characters 3-11) },[]), pos => #pos(bootstrap/GenJs.hx:371: characters 3-13) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:372: characters 3-4) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenJs.hx:372: characters 7-11) }), pos => #pos(bootstrap/GenJs.hx:372: characters 3-11) },{ expr => EConst(CString(})), pos => #pos(bootstrap/GenJs.hx:372: characters 14-17) }), pos => #pos(bootstrap/GenJs.hx:372: characters 3-17) }]), pos => #pos(bootstrap/GenJs.hx:357: lines 357-372) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenJs.hx:357: characters 7-13) },[{ expr => EConst(CIdent(elements)), pos => #pos(bootstrap/GenJs.hx:357: characters 14-22) }]), pos => #pos(bootstrap/GenJs.hx:357: characters 7-23) }], pos => #pos(bootstrap/GenJs.hx:357: lines 357-372), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(a)), pos => #pos(bootstrap/GenJs.hx:374: characters 21-22) },stringify), pos => #pos(bootstrap/GenJs.hx:374: characters 21-32) },[]), pos => #pos(bootstrap/GenJs.hx:374: characters 21-34) },{ expr => EConst(CString(||)), pos => #pos(bootstrap/GenJs.hx:374: characters 37-41) }), pos => #pos(bootstrap/GenJs.hx:374: characters 21-41) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(b)), pos => #pos(bootstrap/GenJs.hx:374: characters 44-45) },stringify), pos => #pos(bootstrap/GenJs.hx:374: characters 44-55) },[]), pos => #pos(bootstrap/GenJs.hx:374: characters 44-57) }), pos => #pos(bootstrap/GenJs.hx:374: characters 21-57) }]), pos => #pos(bootstrap/GenJs.hx:374: characters 2-57) }, values => [{ expr => ECall({ expr => EConst(CIdent(TElvis)), pos => #pos(bootstrap/GenJs.hx:374: characters 7-13) },[{ expr => EConst(CIdent(a)), pos => #pos(bootstrap/GenJs.hx:374: characters 14-15) },{ expr => EConst(CIdent(b)), pos => #pos(bootstrap/GenJs.hx:374: characters 17-18) }]), pos => #pos(bootstrap/GenJs.hx:374: characters 7-19) }], pos => #pos(bootstrap/GenJs.hx:374: characters 2-57), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(pushScope)), pos => #pos(bootstrap/GenJs.hx:376: characters 3-12) },[]), pos => #pos(bootstrap/GenJs.hx:376: characters 3-14) },{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(n)), pos => #pos(bootstrap/GenJs.hx:377: characters 14-15) },rename), pos => #pos(bootstrap/GenJs.hx:377: characters 14-22) },[]), pos => #pos(bootstrap/GenJs.hx:377: characters 14-24) }, name => name, type => null, ??? => #pos(bootstrap/GenJs.hx:377: characters 7-11) }]), pos => #pos(bootstrap/GenJs.hx:377: characters 3-25) },{ expr => EIf({ expr => ECall({ expr => EConst(CIdent(hasInScope)), pos => #pos(bootstrap/GenJs.hx:378: characters 7-17) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:378: characters 18-22) }]), pos => #pos(bootstrap/GenJs.hx:378: characters 7-23) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:378: characters 25-29) },{ expr => EBinop(OpAdd,{ expr => EConst(CString($$)), pos => #pos(bootstrap/GenJs.hx:378: characters 33-37) },{ expr => EParenthesis({ expr => EUnop(OpIncrement,false,{ expr => EConst(CIdent(id)), pos => #pos(bootstrap/GenJs.hx:378: characters 43-45) }), pos => #pos(bootstrap/GenJs.hx:378: characters 41-45) }), pos => #pos(bootstrap/GenJs.hx:378: characters 40-46) }), pos => #pos(bootstrap/GenJs.hx:378: characters 33-46) }), pos => #pos(bootstrap/GenJs.hx:378: characters 25-46) },null), pos => #pos(bootstrap/GenJs.hx:378: characters 3-46) },{ expr => ECall({ expr => EConst(CIdent(addToScope)), pos => #pos(bootstrap/GenJs.hx:379: characters 3-13) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:379: characters 14-18) }]), pos => #pos(bootstrap/GenJs.hx:379: characters 3-19) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenJs.hx:380: characters 3-14) },set), pos => #pos(bootstrap/GenJs.hx:380: characters 3-18) },[{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenJs.hx:380: characters 19-23) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:380: characters 25-29) }]), pos => #pos(bootstrap/GenJs.hx:380: characters 3-30) },{ expr => EVars([{ expr => { expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(for (const )), pos => #pos(bootstrap/GenJs.hx:381: characters 13-26) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:381: characters 29-33) },rename), pos => #pos(bootstrap/GenJs.hx:381: characters 29-40) },[]), pos => #pos(bootstrap/GenJs.hx:381: characters 29-42) }), pos => #pos(bootstrap/GenJs.hx:381: characters 13-42) },{ expr => EConst(CString( of )), pos => #pos(bootstrap/GenJs.hx:381: characters 45-51) }), pos => #pos(bootstrap/GenJs.hx:381: characters 13-51) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(a)), pos => #pos(bootstrap/GenJs.hx:381: characters 54-55) },stringify), pos => #pos(bootstrap/GenJs.hx:381: characters 54-65) },[]), pos => #pos(bootstrap/GenJs.hx:381: characters 54-67) }), pos => #pos(bootstrap/GenJs.hx:381: characters 13-67) },{ expr => EConst(CString() )), pos => #pos(bootstrap/GenJs.hx:381: characters 70-74) }), pos => #pos(bootstrap/GenJs.hx:381: characters 13-74) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(b)), pos => #pos(bootstrap/GenJs.hx:382: characters 5-6) },stringify), pos => #pos(bootstrap/GenJs.hx:382: characters 5-16) },[]), pos => #pos(bootstrap/GenJs.hx:382: characters 5-18) }), pos => #pos(bootstrap/GenJs.hx:381: lines 381-382) }, name => res, type => null, ??? => #pos(bootstrap/GenJs.hx:381: characters 7-10) }]), pos => #pos(bootstrap/GenJs.hx:381: lines 381-382) },{ expr => ECall({ expr => EConst(CIdent(popScope)), pos => #pos(bootstrap/GenJs.hx:383: characters 3-11) },[]), pos => #pos(bootstrap/GenJs.hx:383: characters 3-13) },{ expr => EConst(CIdent(res)), pos => #pos(bootstrap/GenJs.hx:384: characters 3-6) }]), pos => #pos(bootstrap/GenJs.hx:375: lines 375-384) }, values => [{ expr => ECall({ expr => EConst(CIdent(TFor)), pos => #pos(bootstrap/GenJs.hx:375: characters 7-11) },[{ expr => EConst(CIdent(n)), pos => #pos(bootstrap/GenJs.hx:375: characters 12-13) },{ expr => EConst(CIdent(a)), pos => #pos(bootstrap/GenJs.hx:375: characters 15-16) },{ expr => EConst(CIdent(b)), pos => #pos(bootstrap/GenJs.hx:375: characters 18-19) }]), pos => #pos(bootstrap/GenJs.hx:375: characters 7-20) }], pos => #pos(bootstrap/GenJs.hx:375: lines 375-384), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(of)), pos => #pos(bootstrap/GenJs.hx:387: characters 2-4) },stringify), pos => #pos(bootstrap/GenJs.hx:387: characters 2-14) },[]), pos => #pos(bootstrap/GenJs.hx:387: characters 2-16) },{ expr => EConst(CString( instanceof )), pos => #pos(bootstrap/GenJs.hx:387: characters 19-33) }), pos => #pos(bootstrap/GenJs.hx:387: characters 2-33) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(type)), pos => #pos(bootstrap/GenJs.hx:387: characters 36-40) },stringify), pos => #pos(bootstrap/GenJs.hx:387: characters 36-50) },[]), pos => #pos(bootstrap/GenJs.hx:387: characters 36-52) }), pos => #pos(bootstrap/GenJs.hx:387: characters 2-52) }]), pos => #pos(bootstrap/GenJs.hx:386: lines 386-387) }, values => [{ expr => ECall({ expr => EConst(CIdent(TCall)), pos => #pos(bootstrap/GenJs.hx:386: characters 7-12) },[{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenJs.hx:386: characters 13-19) },[{ expr => EConst(CString(__instanceof__)), pos => #pos(bootstrap/GenJs.hx:386: characters 20-36) }]), pos => #pos(bootstrap/GenJs.hx:386: characters 13-37) },{ expr => EArrayDecl([{ expr => EConst(CIdent(of)), pos => #pos(bootstrap/GenJs.hx:386: characters 40-42) },{ expr => EConst(CIdent(type)), pos => #pos(bootstrap/GenJs.hx:386: characters 44-48) }]), pos => #pos(bootstrap/GenJs.hx:386: characters 39-49) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:386: characters 51-52) }]), pos => #pos(bootstrap/GenJs.hx:386: characters 7-53) }], pos => #pos(bootstrap/GenJs.hx:386: lines 386-387), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EConst(CString(typeof )), pos => #pos(bootstrap/GenJs.hx:389: characters 2-11) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(of)), pos => #pos(bootstrap/GenJs.hx:389: characters 14-16) },stringify), pos => #pos(bootstrap/GenJs.hx:389: characters 14-26) },[]), pos => #pos(bootstrap/GenJs.hx:389: characters 14-28) }), pos => #pos(bootstrap/GenJs.hx:389: characters 2-28) }]), pos => #pos(bootstrap/GenJs.hx:388: lines 388-389) }, values => [{ expr => ECall({ expr => EConst(CIdent(TCall)), pos => #pos(bootstrap/GenJs.hx:388: characters 7-12) },[{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenJs.hx:388: characters 13-19) },[{ expr => EConst(CString(__typeof__)), pos => #pos(bootstrap/GenJs.hx:388: characters 20-32) }]), pos => #pos(bootstrap/GenJs.hx:388: characters 13-33) },{ expr => EArrayDecl([{ expr => EConst(CIdent(of)), pos => #pos(bootstrap/GenJs.hx:388: characters 36-38) }]), pos => #pos(bootstrap/GenJs.hx:388: characters 35-39) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:388: characters 41-42) }]), pos => #pos(bootstrap/GenJs.hx:388: characters 7-43) }], pos => #pos(bootstrap/GenJs.hx:388: lines 388-389), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:391: characters 31-32) },stringify), pos => #pos(bootstrap/GenJs.hx:391: characters 31-42) },[]), pos => #pos(bootstrap/GenJs.hx:391: characters 31-44) },{ expr => EConst(CString(()), pos => #pos(bootstrap/GenJs.hx:391: characters 47-50) }), pos => #pos(bootstrap/GenJs.hx:391: characters 31-50) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:391: characters 59-60) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenJs.hx:391: characters 64-66) }), pos => #pos(bootstrap/GenJs.hx:391: characters 59-66) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:391: characters 68-69) },stringify), pos => #pos(bootstrap/GenJs.hx:391: characters 68-79) },[]), pos => #pos(bootstrap/GenJs.hx:391: characters 68-81) }), pos => #pos(bootstrap/GenJs.hx:391: characters 54-81) }]), pos => #pos(bootstrap/GenJs.hx:391: characters 53-82) },join), pos => #pos(bootstrap/GenJs.hx:391: characters 53-87) },[{ expr => EConst(CString(, )), pos => #pos(bootstrap/GenJs.hx:391: characters 88-92) }]), pos => #pos(bootstrap/GenJs.hx:391: characters 53-93) }), pos => #pos(bootstrap/GenJs.hx:391: characters 31-93) },{ expr => EConst(CString())), pos => #pos(bootstrap/GenJs.hx:391: characters 96-99) }), pos => #pos(bootstrap/GenJs.hx:391: characters 31-99) }]), pos => #pos(bootstrap/GenJs.hx:391: characters 2-99) }, values => [{ expr => ECall({ expr => EConst(CIdent(TCall)), pos => #pos(bootstrap/GenJs.hx:391: characters 7-12) },[{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:391: characters 13-14) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenJs.hx:391: characters 16-18) },{ expr => EConst(CIdent(argNames)), pos => #pos(bootstrap/GenJs.hx:391: characters 20-28) }]), pos => #pos(bootstrap/GenJs.hx:391: characters 7-29) }], pos => #pos(bootstrap/GenJs.hx:391: characters 2-99), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(()), pos => #pos(bootstrap/GenJs.hx:392: characters 24-27) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:392: characters 30-31) },stringify), pos => #pos(bootstrap/GenJs.hx:392: characters 30-41) },[]), pos => #pos(bootstrap/GenJs.hx:392: characters 30-43) }), pos => #pos(bootstrap/GenJs.hx:392: characters 24-43) },{ expr => EConst(CString())), pos => #pos(bootstrap/GenJs.hx:392: characters 46-49) }), pos => #pos(bootstrap/GenJs.hx:392: characters 24-49) }]), pos => #pos(bootstrap/GenJs.hx:392: characters 2-49) }, values => [{ expr => ECall({ expr => EConst(CIdent(TParenthesis)), pos => #pos(bootstrap/GenJs.hx:392: characters 7-19) },[{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:392: characters 20-21) }]), pos => #pos(bootstrap/GenJs.hx:392: characters 7-22) }], pos => #pos(bootstrap/GenJs.hx:392: characters 2-49), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(return )), pos => #pos(bootstrap/GenJs.hx:393: characters 43-52) }]), pos => #pos(bootstrap/GenJs.hx:393: characters 2-52) }, values => [{ expr => ECall({ expr => EConst(CIdent(TReturn)), pos => #pos(bootstrap/GenJs.hx:393: characters 7-14) },[{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenJs.hx:393: characters 15-19) }]), pos => #pos(bootstrap/GenJs.hx:393: characters 7-20) },{ expr => ECall({ expr => EConst(CIdent(TReturn)), pos => #pos(bootstrap/GenJs.hx:393: characters 22-29) },[{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenJs.hx:393: characters 30-36) },[{ expr => EArrayDecl([]), pos => #pos(bootstrap/GenJs.hx:393: characters 37-39) }]), pos => #pos(bootstrap/GenJs.hx:393: characters 30-40) }]), pos => #pos(bootstrap/GenJs.hx:393: characters 22-41) }], pos => #pos(bootstrap/GenJs.hx:393: characters 2-52), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EConst(CString(return )), pos => #pos(bootstrap/GenJs.hx:394: characters 19-28) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:394: characters 31-32) },stringify), pos => #pos(bootstrap/GenJs.hx:394: characters 31-42) },[]), pos => #pos(bootstrap/GenJs.hx:394: characters 31-44) }), pos => #pos(bootstrap/GenJs.hx:394: characters 19-44) }]), pos => #pos(bootstrap/GenJs.hx:394: characters 2-44) }, values => [{ expr => ECall({ expr => EConst(CIdent(TReturn)), pos => #pos(bootstrap/GenJs.hx:394: characters 7-14) },[{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:394: characters 15-16) }]), pos => #pos(bootstrap/GenJs.hx:394: characters 7-17) }], pos => #pos(bootstrap/GenJs.hx:394: characters 2-44), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(throw )), pos => #pos(bootstrap/GenJs.hx:395: characters 18-26) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:395: characters 29-30) },stringify), pos => #pos(bootstrap/GenJs.hx:395: characters 29-40) },[]), pos => #pos(bootstrap/GenJs.hx:395: characters 29-42) }), pos => #pos(bootstrap/GenJs.hx:395: characters 18-42) },{ expr => EConst(CString()), pos => #pos(bootstrap/GenJs.hx:395: characters 45-47) }), pos => #pos(bootstrap/GenJs.hx:395: characters 18-47) }]), pos => #pos(bootstrap/GenJs.hx:395: characters 2-47) }, values => [{ expr => ECall({ expr => EConst(CIdent(TThrow)), pos => #pos(bootstrap/GenJs.hx:395: characters 7-13) },[{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:395: characters 14-15) }]), pos => #pos(bootstrap/GenJs.hx:395: characters 7-16) }], pos => #pos(bootstrap/GenJs.hx:395: characters 2-47), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(pushScope)), pos => #pos(bootstrap/GenJs.hx:397: characters 3-12) },[]), pos => #pos(bootstrap/GenJs.hx:397: characters 3-14) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:398: characters 3-4) },{ expr => EConst(CString(((()=>{)), pos => #pos(bootstrap/GenJs.hx:398: characters 8-17) }), pos => #pos(bootstrap/GenJs.hx:398: characters 3-17) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:399: characters 3-4) },{ expr => EConst(CString(const return$$ = []; )), pos => #pos(bootstrap/GenJs.hx:399: characters 8-31) }), pos => #pos(bootstrap/GenJs.hx:399: characters 3-31) },{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenJs.hx:400: characters 14-19) },rename), pos => #pos(bootstrap/GenJs.hx:400: characters 14-26) },[]), pos => #pos(bootstrap/GenJs.hx:400: characters 14-28) }, name => name, type => null, ??? => #pos(bootstrap/GenJs.hx:400: characters 7-11) }]), pos => #pos(bootstrap/GenJs.hx:400: characters 3-29) },{ expr => EIf({ expr => ECall({ expr => EConst(CIdent(hasInScope)), pos => #pos(bootstrap/GenJs.hx:401: characters 7-17) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:401: characters 18-22) }]), pos => #pos(bootstrap/GenJs.hx:401: characters 7-23) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:401: characters 25-29) },{ expr => EBinop(OpAdd,{ expr => EConst(CString($$)), pos => #pos(bootstrap/GenJs.hx:401: characters 33-37) },{ expr => EParenthesis({ expr => EUnop(OpIncrement,false,{ expr => EConst(CIdent(id)), pos => #pos(bootstrap/GenJs.hx:401: characters 43-45) }), pos => #pos(bootstrap/GenJs.hx:401: characters 41-45) }), pos => #pos(bootstrap/GenJs.hx:401: characters 40-46) }), pos => #pos(bootstrap/GenJs.hx:401: characters 33-46) }), pos => #pos(bootstrap/GenJs.hx:401: characters 25-46) },null), pos => #pos(bootstrap/GenJs.hx:401: characters 3-46) },{ expr => ECall({ expr => EConst(CIdent(addToScope)), pos => #pos(bootstrap/GenJs.hx:402: characters 3-13) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:402: characters 14-18) }]), pos => #pos(bootstrap/GenJs.hx:402: characters 3-19) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenJs.hx:403: characters 3-14) },set), pos => #pos(bootstrap/GenJs.hx:403: characters 3-18) },[{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenJs.hx:403: characters 19-20) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:403: characters 22-26) }]), pos => #pos(bootstrap/GenJs.hx:403: characters 3-27) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:404: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(for (const )), pos => #pos(bootstrap/GenJs.hx:404: characters 8-21) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:404: characters 24-28) }), pos => #pos(bootstrap/GenJs.hx:404: characters 8-28) },{ expr => EConst(CString( of )), pos => #pos(bootstrap/GenJs.hx:404: characters 31-37) }), pos => #pos(bootstrap/GenJs.hx:404: characters 8-37) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(array)), pos => #pos(bootstrap/GenJs.hx:404: characters 40-45) },stringify), pos => #pos(bootstrap/GenJs.hx:404: characters 40-55) },[]), pos => #pos(bootstrap/GenJs.hx:404: characters 40-57) }), pos => #pos(bootstrap/GenJs.hx:404: characters 8-57) },{ expr => EConst(CString() )), pos => #pos(bootstrap/GenJs.hx:404: characters 60-64) }), pos => #pos(bootstrap/GenJs.hx:404: characters 8-64) }), pos => #pos(bootstrap/GenJs.hx:404: characters 3-64) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:405: characters 3-4) },{ expr => EConst(CString(return$$.push()), pos => #pos(bootstrap/GenJs.hx:405: characters 8-24) }), pos => #pos(bootstrap/GenJs.hx:405: characters 3-24) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:406: characters 3-4) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:406: characters 8-12) },stringify), pos => #pos(bootstrap/GenJs.hx:406: characters 8-22) },[]), pos => #pos(bootstrap/GenJs.hx:406: characters 8-24) }), pos => #pos(bootstrap/GenJs.hx:406: characters 3-24) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:407: characters 3-4) },{ expr => EConst(CString(); return$$;)), pos => #pos(bootstrap/GenJs.hx:407: characters 8-22) }), pos => #pos(bootstrap/GenJs.hx:407: characters 3-22) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:408: characters 3-4) },{ expr => EConst(CString(})()))), pos => #pos(bootstrap/GenJs.hx:408: characters 8-15) }), pos => #pos(bootstrap/GenJs.hx:408: characters 3-15) },{ expr => ECall({ expr => EConst(CIdent(popScope)), pos => #pos(bootstrap/GenJs.hx:409: characters 3-11) },[]), pos => #pos(bootstrap/GenJs.hx:409: characters 3-13) },{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:410: characters 3-4) }]), pos => #pos(bootstrap/GenJs.hx:396: lines 396-410) }, values => [{ expr => ECall({ expr => EConst(CIdent(TArray)), pos => #pos(bootstrap/GenJs.hx:396: characters 7-13) },[{ expr => EArrayDecl([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenJs.hx:396: characters 15-16) },{ expr => ECall({ expr => EConst(CIdent(TFor)), pos => #pos(bootstrap/GenJs.hx:396: characters 19-23) },[{ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenJs.hx:396: characters 24-29) },{ expr => EConst(CIdent(array)), pos => #pos(bootstrap/GenJs.hx:396: characters 31-36) },{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:396: characters 38-42) }]), pos => #pos(bootstrap/GenJs.hx:396: characters 19-43) }), pos => #pos(bootstrap/GenJs.hx:396: characters 15-43) }]), pos => #pos(bootstrap/GenJs.hx:396: characters 14-44) }]), pos => #pos(bootstrap/GenJs.hx:396: characters 7-45) }], pos => #pos(bootstrap/GenJs.hx:396: lines 396-410), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString([)), pos => #pos(bootstrap/GenJs.hx:412: characters 19-22) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:412: characters 31-32) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenJs.hx:412: characters 36-38) }), pos => #pos(bootstrap/GenJs.hx:412: characters 31-38) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:412: characters 40-41) },stringify), pos => #pos(bootstrap/GenJs.hx:412: characters 40-51) },[]), pos => #pos(bootstrap/GenJs.hx:412: characters 40-53) }), pos => #pos(bootstrap/GenJs.hx:412: characters 26-53) }]), pos => #pos(bootstrap/GenJs.hx:412: characters 25-54) },join), pos => #pos(bootstrap/GenJs.hx:412: characters 25-59) },[{ expr => EConst(CString(, )), pos => #pos(bootstrap/GenJs.hx:412: characters 60-64) }]), pos => #pos(bootstrap/GenJs.hx:412: characters 25-65) }), pos => #pos(bootstrap/GenJs.hx:412: characters 19-65) },{ expr => EConst(CString(])), pos => #pos(bootstrap/GenJs.hx:412: characters 68-71) }), pos => #pos(bootstrap/GenJs.hx:412: characters 19-71) }]), pos => #pos(bootstrap/GenJs.hx:412: characters 2-71) }, values => [{ expr => ECall({ expr => EConst(CIdent(TArray)), pos => #pos(bootstrap/GenJs.hx:412: characters 7-13) },[{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenJs.hx:412: characters 14-16) }]), pos => #pos(bootstrap/GenJs.hx:412: characters 7-17) }], pos => #pos(bootstrap/GenJs.hx:412: characters 2-71), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(new Map())), pos => #pos(bootstrap/GenJs.hx:413: characters 19-30) }]), pos => #pos(bootstrap/GenJs.hx:413: characters 2-30) }, values => [{ expr => ECall({ expr => EConst(CIdent(TMap)), pos => #pos(bootstrap/GenJs.hx:413: characters 7-11) },[{ expr => EArrayDecl([]), pos => #pos(bootstrap/GenJs.hx:413: characters 12-14) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:413: characters 15-16) }]), pos => #pos(bootstrap/GenJs.hx:413: characters 7-17) }], pos => #pos(bootstrap/GenJs.hx:413: characters 2-30), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(new Map([)), pos => #pos(bootstrap/GenJs.hx:415: characters 3-14) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenJs.hx:416: characters 9-10) },{ expr => EBinop(OpInterval,{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenJs.hx:416: characters 14-18) },{ expr => EField({ expr => EConst(CIdent(keys)), pos => #pos(bootstrap/GenJs.hx:416: characters 18-22) },length), pos => #pos(bootstrap/GenJs.hx:416: characters 18-29) }), pos => #pos(bootstrap/GenJs.hx:416: characters 14-29) }), pos => #pos(bootstrap/GenJs.hx:416: characters 9-29) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString([)), pos => #pos(bootstrap/GenJs.hx:416: characters 31-34) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(keys)), pos => #pos(bootstrap/GenJs.hx:416: characters 37-41) },{ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenJs.hx:416: characters 42-43) }), pos => #pos(bootstrap/GenJs.hx:416: characters 37-44) },stringify), pos => #pos(bootstrap/GenJs.hx:416: characters 37-54) },[]), pos => #pos(bootstrap/GenJs.hx:416: characters 37-56) }), pos => #pos(bootstrap/GenJs.hx:416: characters 31-56) },{ expr => EConst(CString(,)), pos => #pos(bootstrap/GenJs.hx:416: characters 58-61) }), pos => #pos(bootstrap/GenJs.hx:416: characters 31-61) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(values)), pos => #pos(bootstrap/GenJs.hx:416: characters 64-70) },{ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenJs.hx:416: characters 71-72) }), pos => #pos(bootstrap/GenJs.hx:416: characters 64-73) },stringify), pos => #pos(bootstrap/GenJs.hx:416: characters 64-83) },[]), pos => #pos(bootstrap/GenJs.hx:416: characters 64-85) }), pos => #pos(bootstrap/GenJs.hx:416: characters 31-85) },{ expr => EConst(CString(])), pos => #pos(bootstrap/GenJs.hx:416: characters 88-91) }), pos => #pos(bootstrap/GenJs.hx:416: characters 31-91) }), pos => #pos(bootstrap/GenJs.hx:416: characters 4-91) }]), pos => #pos(bootstrap/GenJs.hx:416: characters 3-92) },join), pos => #pos(bootstrap/GenJs.hx:416: characters 3-97) },[{ expr => EConst(CString(,)), pos => #pos(bootstrap/GenJs.hx:416: characters 98-101) }]), pos => #pos(bootstrap/GenJs.hx:416: characters 3-102) }), pos => #pos(bootstrap/GenJs.hx:415: lines 415-416) },{ expr => EConst(CString(]))), pos => #pos(bootstrap/GenJs.hx:417: characters 5-9) }), pos => #pos(bootstrap/GenJs.hx:415: lines 415-417) }]), pos => #pos(bootstrap/GenJs.hx:414: lines 414-417) }, values => [{ expr => ECall({ expr => EConst(CIdent(TMap)), pos => #pos(bootstrap/GenJs.hx:414: characters 7-11) },[{ expr => EConst(CIdent(keys)), pos => #pos(bootstrap/GenJs.hx:414: characters 12-16) },{ expr => EConst(CIdent(values)), pos => #pos(bootstrap/GenJs.hx:414: characters 17-23) }]), pos => #pos(bootstrap/GenJs.hx:414: characters 7-24) }], pos => #pos(bootstrap/GenJs.hx:414: lines 414-417), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:421: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(()), pos => #pos(bootstrap/GenJs.hx:421: characters 7-10) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:421: characters 19-20) },{ expr => EConst(CIdent(econd)), pos => #pos(bootstrap/GenJs.hx:421: characters 24-29) }), pos => #pos(bootstrap/GenJs.hx:421: characters 19-29) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:421: characters 31-32) },stringify), pos => #pos(bootstrap/GenJs.hx:421: characters 31-42) },[]), pos => #pos(bootstrap/GenJs.hx:421: characters 31-44) }), pos => #pos(bootstrap/GenJs.hx:421: characters 14-44) }]), pos => #pos(bootstrap/GenJs.hx:421: characters 13-45) },join), pos => #pos(bootstrap/GenJs.hx:421: characters 13-50) },[{ expr => EConst(CString( && )), pos => #pos(bootstrap/GenJs.hx:421: characters 51-57) }]), pos => #pos(bootstrap/GenJs.hx:421: characters 13-58) }), pos => #pos(bootstrap/GenJs.hx:421: characters 7-58) },{ expr => EConst(CString()? ()), pos => #pos(bootstrap/GenJs.hx:421: characters 61-67) }), pos => #pos(bootstrap/GenJs.hx:421: characters 7-67) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenJs.hx:421: characters 71-74) },stringify), pos => #pos(bootstrap/GenJs.hx:421: characters 71-84) },[]), pos => #pos(bootstrap/GenJs.hx:421: characters 71-86) }), pos => #pos(bootstrap/GenJs.hx:421: characters 7-86) }), pos => #pos(bootstrap/GenJs.hx:421: characters 3-86) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(eelse)), pos => #pos(bootstrap/GenJs.hx:422: characters 7-12) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenJs.hx:422: characters 16-20) }), pos => #pos(bootstrap/GenJs.hx:422: characters 7-20) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:422: characters 22-23) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString() : ()), pos => #pos(bootstrap/GenJs.hx:422: characters 27-34) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(eelse)), pos => #pos(bootstrap/GenJs.hx:422: characters 37-42) },stringify), pos => #pos(bootstrap/GenJs.hx:422: characters 37-52) },[]), pos => #pos(bootstrap/GenJs.hx:422: characters 37-54) }), pos => #pos(bootstrap/GenJs.hx:422: characters 27-54) },{ expr => EConst(CString())), pos => #pos(bootstrap/GenJs.hx:422: characters 57-60) }), pos => #pos(bootstrap/GenJs.hx:422: characters 27-60) }), pos => #pos(bootstrap/GenJs.hx:422: characters 22-60) },null), pos => #pos(bootstrap/GenJs.hx:422: characters 3-60) },{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:423: characters 3-4) }]), pos => #pos(bootstrap/GenJs.hx:419: lines 419-423) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIf)), pos => #pos(bootstrap/GenJs.hx:419: characters 7-10) },[{ expr => EConst(CIdent(econd)), pos => #pos(bootstrap/GenJs.hx:419: characters 11-16) },{ expr => EConst(CIdent(eif)), pos => #pos(bootstrap/GenJs.hx:419: characters 18-21) },{ expr => EConst(CIdent(eelse)), pos => #pos(bootstrap/GenJs.hx:419: characters 23-28) }]), pos => #pos(bootstrap/GenJs.hx:419: characters 7-29) }], pos => #pos(bootstrap/GenJs.hx:419: lines 419-423), guard => null },{ expr => { expr => EBlock([{ expr => ETernary({ expr => EConst(CIdent(postfix)), pos => #pos(bootstrap/GenJs.hx:425: characters 30-37) },{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:425: characters 40-41) },stringify), pos => #pos(bootstrap/GenJs.hx:425: characters 40-51) },[]), pos => #pos(bootstrap/GenJs.hx:425: characters 40-53) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(op)), pos => #pos(bootstrap/GenJs.hx:425: characters 56-58) },stringify), pos => #pos(bootstrap/GenJs.hx:425: characters 56-68) },[]), pos => #pos(bootstrap/GenJs.hx:425: characters 56-70) }), pos => #pos(bootstrap/GenJs.hx:425: characters 40-70) },{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(op)), pos => #pos(bootstrap/GenJs.hx:425: characters 73-75) },stringify), pos => #pos(bootstrap/GenJs.hx:425: characters 73-85) },[]), pos => #pos(bootstrap/GenJs.hx:425: characters 73-87) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:425: characters 90-91) },stringify), pos => #pos(bootstrap/GenJs.hx:425: characters 90-101) },[]), pos => #pos(bootstrap/GenJs.hx:425: characters 90-103) }), pos => #pos(bootstrap/GenJs.hx:425: characters 73-103) }), pos => #pos(bootstrap/GenJs.hx:425: characters 30-103) }]), pos => #pos(bootstrap/GenJs.hx:425: characters 2-103) }, values => [{ expr => ECall({ expr => EConst(CIdent(TUnop)), pos => #pos(bootstrap/GenJs.hx:425: characters 7-12) },[{ expr => EConst(CIdent(op)), pos => #pos(bootstrap/GenJs.hx:425: characters 13-15) },{ expr => EConst(CIdent(postfix)), pos => #pos(bootstrap/GenJs.hx:425: characters 17-24) },{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:425: characters 26-27) }]), pos => #pos(bootstrap/GenJs.hx:425: characters 7-28) }], pos => #pos(bootstrap/GenJs.hx:425: characters 2-103), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(while()), pos => #pos(bootstrap/GenJs.hx:426: characters 31-39) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(econd)), pos => #pos(bootstrap/GenJs.hx:426: characters 42-47) },stringify), pos => #pos(bootstrap/GenJs.hx:426: characters 42-57) },[]), pos => #pos(bootstrap/GenJs.hx:426: characters 42-59) }), pos => #pos(bootstrap/GenJs.hx:426: characters 31-59) },{ expr => EConst(CString() )), pos => #pos(bootstrap/GenJs.hx:426: characters 62-66) }), pos => #pos(bootstrap/GenJs.hx:426: characters 31-66) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:426: characters 69-70) },stringify), pos => #pos(bootstrap/GenJs.hx:426: characters 69-80) },[]), pos => #pos(bootstrap/GenJs.hx:426: characters 69-82) }), pos => #pos(bootstrap/GenJs.hx:426: characters 31-82) }]), pos => #pos(bootstrap/GenJs.hx:426: characters 2-82) }, values => [{ expr => ECall({ expr => EConst(CIdent(TWhile)), pos => #pos(bootstrap/GenJs.hx:426: characters 7-13) },[{ expr => EConst(CIdent(econd)), pos => #pos(bootstrap/GenJs.hx:426: characters 14-19) },{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:426: characters 21-22) },{ expr => EConst(CIdent(true)), pos => #pos(bootstrap/GenJs.hx:426: characters 24-28) }]), pos => #pos(bootstrap/GenJs.hx:426: characters 7-29) }], pos => #pos(bootstrap/GenJs.hx:426: characters 2-82), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(do{)), pos => #pos(bootstrap/GenJs.hx:427: characters 32-37) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:427: characters 40-41) },stringify), pos => #pos(bootstrap/GenJs.hx:427: characters 40-51) },[]), pos => #pos(bootstrap/GenJs.hx:427: characters 40-53) }), pos => #pos(bootstrap/GenJs.hx:427: characters 32-53) },{ expr => EConst(CString(}while()), pos => #pos(bootstrap/GenJs.hx:427: characters 56-65) }), pos => #pos(bootstrap/GenJs.hx:427: characters 32-65) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(econd)), pos => #pos(bootstrap/GenJs.hx:427: characters 68-73) },stringify), pos => #pos(bootstrap/GenJs.hx:427: characters 68-83) },[]), pos => #pos(bootstrap/GenJs.hx:427: characters 68-85) }), pos => #pos(bootstrap/GenJs.hx:427: characters 32-85) },{ expr => EConst(CString())), pos => #pos(bootstrap/GenJs.hx:427: characters 88-91) }), pos => #pos(bootstrap/GenJs.hx:427: characters 32-91) }]), pos => #pos(bootstrap/GenJs.hx:427: characters 2-91) }, values => [{ expr => ECall({ expr => EConst(CIdent(TWhile)), pos => #pos(bootstrap/GenJs.hx:427: characters 7-13) },[{ expr => EConst(CIdent(econd)), pos => #pos(bootstrap/GenJs.hx:427: characters 14-19) },{ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:427: characters 21-22) },{ expr => EConst(CIdent(false)), pos => #pos(bootstrap/GenJs.hx:427: characters 24-29) }]), pos => #pos(bootstrap/GenJs.hx:427: characters 7-30) }], pos => #pos(bootstrap/GenJs.hx:427: characters 2-91), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(extractTypeName)), pos => #pos(bootstrap/GenJs.hx:428: characters 28-43) },[{ expr => EConst(CIdent(type)), pos => #pos(bootstrap/GenJs.hx:428: characters 44-48) }]), pos => #pos(bootstrap/GenJs.hx:428: characters 28-49) }]), pos => #pos(bootstrap/GenJs.hx:428: characters 2-49) }, values => [{ expr => ECall({ expr => EConst(CIdent(NodeTypeValue)), pos => #pos(bootstrap/GenJs.hx:428: characters 7-20) },[{ expr => EConst(CIdent(type)), pos => #pos(bootstrap/GenJs.hx:428: characters 21-25) }]), pos => #pos(bootstrap/GenJs.hx:428: characters 7-26) }], pos => #pos(bootstrap/GenJs.hx:428: characters 2-49), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EConst(CString()), pos => #pos(bootstrap/GenJs.hx:429: characters 35-37) },{ expr => EField({ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:429: characters 38-39) },length), pos => #pos(bootstrap/GenJs.hx:429: characters 38-46) }), pos => #pos(bootstrap/GenJs.hx:429: characters 35-46) }]), pos => #pos(bootstrap/GenJs.hx:429: characters 2-46) }, values => [{ expr => ECall({ expr => EConst(CIdent(TDot)), pos => #pos(bootstrap/GenJs.hx:429: characters 7-11) },[{ expr => ECall({ expr => EConst(CIdent(TString)), pos => #pos(bootstrap/GenJs.hx:429: characters 12-19) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:429: characters 20-21) }]), pos => #pos(bootstrap/GenJs.hx:429: characters 12-22) },{ expr => EConst(CString(length)), pos => #pos(bootstrap/GenJs.hx:429: characters 24-32) }]), pos => #pos(bootstrap/GenJs.hx:429: characters 7-33) }], pos => #pos(bootstrap/GenJs.hx:429: characters 2-46), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(trace)), pos => #pos(bootstrap/GenJs.hx:431: characters 2-7) },[{ expr => EConst(CString(.`$name`)), pos => #pos(bootstrap/GenJs.hx:431: characters 8-18) }]), pos => #pos(bootstrap/GenJs.hx:431: characters 2-19) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:432: characters 2-6) },stringify), pos => #pos(bootstrap/GenJs.hx:432: characters 2-16) },[]), pos => #pos(bootstrap/GenJs.hx:432: characters 2-18) },{ expr => EConst(CString(.)), pos => #pos(bootstrap/GenJs.hx:432: characters 21-24) }), pos => #pos(bootstrap/GenJs.hx:432: characters 2-24) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:432: characters 27-31) },rename), pos => #pos(bootstrap/GenJs.hx:432: characters 27-38) },[]), pos => #pos(bootstrap/GenJs.hx:432: characters 27-40) }), pos => #pos(bootstrap/GenJs.hx:432: characters 2-40) }]), pos => #pos(bootstrap/GenJs.hx:430: lines 430-432) }, values => [{ expr => ECall({ expr => EConst(CIdent(TDot)), pos => #pos(bootstrap/GenJs.hx:430: characters 7-11) },[{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:430: characters 12-16) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:430: characters 18-22) }]), pos => #pos(bootstrap/GenJs.hx:430: characters 7-23) }], pos => #pos(bootstrap/GenJs.hx:430: lines 430-432), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:434: characters 28-32) },stringify), pos => #pos(bootstrap/GenJs.hx:434: characters 28-42) },[]), pos => #pos(bootstrap/GenJs.hx:434: characters 28-44) },{ expr => EConst(CString([)), pos => #pos(bootstrap/GenJs.hx:434: characters 47-50) }), pos => #pos(bootstrap/GenJs.hx:434: characters 28-50) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(index)), pos => #pos(bootstrap/GenJs.hx:434: characters 53-58) },stringify), pos => #pos(bootstrap/GenJs.hx:434: characters 53-68) },[]), pos => #pos(bootstrap/GenJs.hx:434: characters 53-70) }), pos => #pos(bootstrap/GenJs.hx:434: characters 28-70) },{ expr => EConst(CString(])), pos => #pos(bootstrap/GenJs.hx:434: characters 73-76) }), pos => #pos(bootstrap/GenJs.hx:434: characters 28-76) }]), pos => #pos(bootstrap/GenJs.hx:434: characters 2-76) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIndex)), pos => #pos(bootstrap/GenJs.hx:434: characters 7-13) },[{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:434: characters 14-18) },{ expr => EConst(CIdent(index)), pos => #pos(bootstrap/GenJs.hx:434: characters 20-25) }]), pos => #pos(bootstrap/GenJs.hx:434: characters 7-26) }], pos => #pos(bootstrap/GenJs.hx:434: characters 2-76), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString()), pos => #pos(bootstrap/GenJs.hx:435: characters 21-23) }]), pos => #pos(bootstrap/GenJs.hx:435: characters 2-23) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIs)), pos => #pos(bootstrap/GenJs.hx:435: characters 7-10) },[{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:435: characters 11-15) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenJs.hx:435: characters 17-18) }]), pos => #pos(bootstrap/GenJs.hx:435: characters 7-19) }], pos => #pos(bootstrap/GenJs.hx:435: characters 2-23), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(()), pos => #pos(bootstrap/GenJs.hx:436: characters 27-30) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:436: characters 33-37) },stringify), pos => #pos(bootstrap/GenJs.hx:436: characters 33-47) },[]), pos => #pos(bootstrap/GenJs.hx:436: characters 33-49) }), pos => #pos(bootstrap/GenJs.hx:436: characters 27-49) },{ expr => EConst(CString())), pos => #pos(bootstrap/GenJs.hx:436: characters 52-55) }), pos => #pos(bootstrap/GenJs.hx:436: characters 27-55) }]), pos => #pos(bootstrap/GenJs.hx:436: characters 2-55) }, values => [{ expr => ECall({ expr => EConst(CIdent(TAs)), pos => #pos(bootstrap/GenJs.hx:436: characters 7-10) },[{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:436: characters 11-15) },{ expr => EConst(CIdent(kind)), pos => #pos(bootstrap/GenJs.hx:436: characters 17-21) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenJs.hx:436: characters 23-24) }]), pos => #pos(bootstrap/GenJs.hx:436: characters 7-25) }], pos => #pos(bootstrap/GenJs.hx:436: characters 2-55), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(pushScope)), pos => #pos(bootstrap/GenJs.hx:438: characters 3-12) },[]), pos => #pos(bootstrap/GenJs.hx:438: characters 3-14) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:439: characters 3-4) },{ expr => EConst(CString(function)), pos => #pos(bootstrap/GenJs.hx:439: characters 7-17) }), pos => #pos(bootstrap/GenJs.hx:439: characters 3-17) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:440: characters 7-11) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenJs.hx:440: characters 15-19) }), pos => #pos(bootstrap/GenJs.hx:440: characters 7-19) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:440: characters 21-22) },{ expr => EBinop(OpAdd,{ expr => EConst(CString( )), pos => #pos(bootstrap/GenJs.hx:440: characters 26-29) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:440: characters 32-36) },rename), pos => #pos(bootstrap/GenJs.hx:440: characters 32-43) },[]), pos => #pos(bootstrap/GenJs.hx:440: characters 32-45) }), pos => #pos(bootstrap/GenJs.hx:440: characters 26-45) }), pos => #pos(bootstrap/GenJs.hx:440: characters 21-45) },null), pos => #pos(bootstrap/GenJs.hx:440: characters 3-45) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:442: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(()), pos => #pos(bootstrap/GenJs.hx:442: characters 8-11) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:442: characters 19-20) },{ expr => EConst(CIdent(vars)), pos => #pos(bootstrap/GenJs.hx:442: characters 24-28) }), pos => #pos(bootstrap/GenJs.hx:442: characters 19-28) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:443: characters 12-13) }), pos => #pos(bootstrap/GenJs.hx:443: characters 11-14) },[{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenJs.hx:445: characters 17-22) },rename), pos => #pos(bootstrap/GenJs.hx:445: characters 17-29) },[]), pos => #pos(bootstrap/GenJs.hx:445: characters 17-31) }, name => name, type => null, ??? => #pos(bootstrap/GenJs.hx:445: characters 10-14) }]), pos => #pos(bootstrap/GenJs.hx:445: characters 6-32) },{ expr => EIf({ expr => ECall({ expr => EConst(CIdent(hasInScope)), pos => #pos(bootstrap/GenJs.hx:446: characters 10-20) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:446: characters 21-25) }]), pos => #pos(bootstrap/GenJs.hx:446: characters 10-26) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:446: characters 28-32) },{ expr => EBinop(OpAdd,{ expr => EConst(CString($$)), pos => #pos(bootstrap/GenJs.hx:446: characters 36-40) },{ expr => EParenthesis({ expr => EUnop(OpIncrement,false,{ expr => EConst(CIdent(id)), pos => #pos(bootstrap/GenJs.hx:446: characters 46-48) }), pos => #pos(bootstrap/GenJs.hx:446: characters 44-48) }), pos => #pos(bootstrap/GenJs.hx:446: characters 43-49) }), pos => #pos(bootstrap/GenJs.hx:446: characters 36-49) }), pos => #pos(bootstrap/GenJs.hx:446: characters 28-49) },null), pos => #pos(bootstrap/GenJs.hx:446: characters 6-49) },{ expr => ECall({ expr => EConst(CIdent(addToScope)), pos => #pos(bootstrap/GenJs.hx:447: characters 6-16) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:447: characters 17-21) }]), pos => #pos(bootstrap/GenJs.hx:447: characters 6-22) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenJs.hx:448: characters 6-17) },set), pos => #pos(bootstrap/GenJs.hx:448: characters 6-21) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:448: characters 22-23) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:448: characters 25-29) }]), pos => #pos(bootstrap/GenJs.hx:448: characters 6-30) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenJs.hx:449: characters 6-17) },get), pos => #pos(bootstrap/GenJs.hx:449: characters 6-21) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:449: characters 22-23) }]), pos => #pos(bootstrap/GenJs.hx:449: characters 6-24) }]), pos => #pos(bootstrap/GenJs.hx:444: lines 444-449) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenJs.hx:444: characters 10-14) },[{ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenJs.hx:444: characters 15-20) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:444: characters 22-23) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:444: characters 25-26) }]), pos => #pos(bootstrap/GenJs.hx:444: characters 10-27) },{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenJs.hx:444: characters 29-35) },[{ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenJs.hx:444: characters 36-41) }]), pos => #pos(bootstrap/GenJs.hx:444: characters 29-42) }], pos => #pos(bootstrap/GenJs.hx:444: lines 444-449), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString()), pos => #pos(bootstrap/GenJs.hx:450: characters 30-32) }]), pos => #pos(bootstrap/GenJs.hx:450: characters 5-32) }, values => [{ expr => ECall({ expr => EConst(CIdent(TParenthesis)), pos => #pos(bootstrap/GenJs.hx:450: characters 10-22) },[{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenJs.hx:450: characters 23-27) }]), pos => #pos(bootstrap/GenJs.hx:450: characters 10-28) }], pos => #pos(bootstrap/GenJs.hx:450: characters 5-32), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:451: characters 19-20) }), pos => #pos(bootstrap/GenJs.hx:451: characters 13-18) }]), pos => #pos(bootstrap/GenJs.hx:451: characters 5-18) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:451: characters 10-11) }], pos => #pos(bootstrap/GenJs.hx:451: characters 5-18), guard => null }],null), pos => #pos(bootstrap/GenJs.hx:443: lines 443-452) }), pos => #pos(bootstrap/GenJs.hx:442: lines 442-452) }]), pos => #pos(bootstrap/GenJs.hx:442: lines 442-453) },join), pos => #pos(bootstrap/GenJs.hx:442: lines 442-453) },[{ expr => EConst(CString(, )), pos => #pos(bootstrap/GenJs.hx:453: characters 10-14) }]), pos => #pos(bootstrap/GenJs.hx:442: lines 442-453) }), pos => #pos(bootstrap/GenJs.hx:442: lines 442-453) },{ expr => EConst(CString() )), pos => #pos(bootstrap/GenJs.hx:453: characters 18-22) }), pos => #pos(bootstrap/GenJs.hx:442: lines 442-453) }), pos => #pos(bootstrap/GenJs.hx:442: lines 442-453) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:454: characters 7-11) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenJs.hx:454: characters 15-19) }), pos => #pos(bootstrap/GenJs.hx:454: characters 7-19) },{ expr => EBlock([{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:455: characters 12-16) }), pos => #pos(bootstrap/GenJs.hx:455: characters 11-17) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:457: characters 6-7) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:457: characters 11-15) },stringify), pos => #pos(bootstrap/GenJs.hx:457: characters 11-25) },[]), pos => #pos(bootstrap/GenJs.hx:457: characters 11-27) }), pos => #pos(bootstrap/GenJs.hx:457: characters 6-27) }]), pos => #pos(bootstrap/GenJs.hx:456: lines 456-457) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenJs.hx:456: characters 10-16) },[{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenJs.hx:456: characters 17-19) }]), pos => #pos(bootstrap/GenJs.hx:456: characters 10-20) }], pos => #pos(bootstrap/GenJs.hx:456: lines 456-457), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(pushScope)), pos => #pos(bootstrap/GenJs.hx:459: characters 6-15) },[]), pos => #pos(bootstrap/GenJs.hx:459: characters 6-17) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenJs.hx:460: characters 6-13) },[]), pos => #pos(bootstrap/GenJs.hx:460: characters 6-15) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:461: characters 6-7) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString({
$tabs)), pos => #pos(bootstrap/GenJs.hx:461: characters 11-21) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:461: characters 22-26) },stringify), pos => #pos(bootstrap/GenJs.hx:461: characters 22-36) },[]), pos => #pos(bootstrap/GenJs.hx:461: characters 22-38) }), pos => #pos(bootstrap/GenJs.hx:461: characters 11-38) },{ expr => EConst(CString(
	$tabs})), pos => #pos(bootstrap/GenJs.hx:461: characters 39-51) }), pos => #pos(bootstrap/GenJs.hx:461: characters 11-51) }), pos => #pos(bootstrap/GenJs.hx:461: characters 6-51) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenJs.hx:462: characters 6-12) },[]), pos => #pos(bootstrap/GenJs.hx:462: characters 6-14) },{ expr => ECall({ expr => EConst(CIdent(popScope)), pos => #pos(bootstrap/GenJs.hx:463: characters 6-14) },[]), pos => #pos(bootstrap/GenJs.hx:463: characters 6-16) }]), pos => #pos(bootstrap/GenJs.hx:458: lines 458-463) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:458: characters 10-11) }], pos => #pos(bootstrap/GenJs.hx:458: lines 458-463), guard => null }],null), pos => #pos(bootstrap/GenJs.hx:455: lines 455-464) }]), pos => #pos(bootstrap/GenJs.hx:454: lines 454-465) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:466: characters 8-9) },{ expr => EConst(CString({})), pos => #pos(bootstrap/GenJs.hx:466: characters 13-17) }), pos => #pos(bootstrap/GenJs.hx:466: characters 8-17) }), pos => #pos(bootstrap/GenJs.hx:454: lines 454-466) },{ expr => ECall({ expr => EConst(CIdent(popScope)), pos => #pos(bootstrap/GenJs.hx:467: characters 3-11) },[]), pos => #pos(bootstrap/GenJs.hx:467: characters 3-13) },{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:468: characters 3-4) }]), pos => #pos(bootstrap/GenJs.hx:437: lines 437-468) }, values => [{ expr => ECall({ expr => EConst(CIdent(TFunction)), pos => #pos(bootstrap/GenJs.hx:437: characters 7-16) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:437: characters 17-21) },{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:437: characters 23-27) },{ expr => EConst(CIdent(vars)), pos => #pos(bootstrap/GenJs.hx:437: characters 29-33) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:437: characters 35-36) }]), pos => #pos(bootstrap/GenJs.hx:437: characters 7-37) }], pos => #pos(bootstrap/GenJs.hx:437: lines 437-468), guard => null },{ expr => { expr => EBlock([{ expr => EIf({ expr => EBinop(OpEq,{ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenJs.hx:470: characters 7-12) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenJs.hx:470: characters 16-20) }), pos => #pos(bootstrap/GenJs.hx:470: characters 7-20) },{ expr => EThrow({ expr => EConst(CString(name is null for $node)), pos => #pos(bootstrap/GenJs.hx:470: characters 28-52) }), pos => #pos(bootstrap/GenJs.hx:470: characters 22-27) },null), pos => #pos(bootstrap/GenJs.hx:470: characters 3-27) },{ expr => EVars([{ expr => { expr => EConst(CString()), pos => #pos(bootstrap/GenJs.hx:471: characters 12-14) }, name => es, type => null, ??? => #pos(bootstrap/GenJs.hx:471: characters 7-9) }]), pos => #pos(bootstrap/GenJs.hx:471: characters 3-15) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:472: characters 7-11) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenJs.hx:472: characters 15-19) }), pos => #pos(bootstrap/GenJs.hx:472: characters 7-19) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(es)), pos => #pos(bootstrap/GenJs.hx:472: characters 21-23) },{ expr => EBinop(OpAdd,{ expr => EConst(CString( = )), pos => #pos(bootstrap/GenJs.hx:472: characters 26-31) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:472: characters 34-38) },stringify), pos => #pos(bootstrap/GenJs.hx:472: characters 34-48) },[]), pos => #pos(bootstrap/GenJs.hx:472: characters 34-50) }), pos => #pos(bootstrap/GenJs.hx:472: characters 26-50) }), pos => #pos(bootstrap/GenJs.hx:472: characters 21-50) },null), pos => #pos(bootstrap/GenJs.hx:472: characters 3-50) },{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenJs.hx:473: characters 14-19) },rename), pos => #pos(bootstrap/GenJs.hx:473: characters 14-26) },[]), pos => #pos(bootstrap/GenJs.hx:473: characters 14-28) }, name => name, type => null, ??? => #pos(bootstrap/GenJs.hx:473: characters 7-11) }]), pos => #pos(bootstrap/GenJs.hx:473: characters 3-29) },{ expr => EIf({ expr => ECall({ expr => EConst(CIdent(hasInScope)), pos => #pos(bootstrap/GenJs.hx:474: characters 7-17) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:474: characters 18-22) }]), pos => #pos(bootstrap/GenJs.hx:474: characters 7-23) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:474: characters 25-29) },{ expr => EBinop(OpAdd,{ expr => EConst(CString($$)), pos => #pos(bootstrap/GenJs.hx:474: characters 33-37) },{ expr => EParenthesis({ expr => EUnop(OpIncrement,false,{ expr => EConst(CIdent(id)), pos => #pos(bootstrap/GenJs.hx:474: characters 43-45) }), pos => #pos(bootstrap/GenJs.hx:474: characters 41-45) }), pos => #pos(bootstrap/GenJs.hx:474: characters 40-46) }), pos => #pos(bootstrap/GenJs.hx:474: characters 33-46) }), pos => #pos(bootstrap/GenJs.hx:474: characters 25-46) },null), pos => #pos(bootstrap/GenJs.hx:474: characters 3-46) },{ expr => ECall({ expr => EConst(CIdent(addToScope)), pos => #pos(bootstrap/GenJs.hx:475: characters 3-13) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:475: characters 14-18) }]), pos => #pos(bootstrap/GenJs.hx:475: characters 3-19) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenJs.hx:476: characters 3-14) },set), pos => #pos(bootstrap/GenJs.hx:476: characters 3-18) },[{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenJs.hx:476: characters 19-23) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:476: characters 25-29) }]), pos => #pos(bootstrap/GenJs.hx:476: characters 3-30) },{ expr => EIf({ expr => EBinop(OpEq,{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:477: characters 7-11) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenJs.hx:477: characters 15-19) }), pos => #pos(bootstrap/GenJs.hx:477: characters 7-19) },{ expr => EThrow({ expr => EConst(CString(name is null for $node)), pos => #pos(bootstrap/GenJs.hx:477: characters 27-51) }), pos => #pos(bootstrap/GenJs.hx:477: characters 21-26) },null), pos => #pos(bootstrap/GenJs.hx:477: characters 3-26) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:478: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EParenthesis({ expr => ETernary({ expr => EConst(CIdent(const)), pos => #pos(bootstrap/GenJs.hx:478: characters 8-13) },{ expr => EConst(CString(const )), pos => #pos(bootstrap/GenJs.hx:478: characters 14-22) },{ expr => EConst(CString(let )), pos => #pos(bootstrap/GenJs.hx:478: characters 23-29) }), pos => #pos(bootstrap/GenJs.hx:478: characters 8-29) }), pos => #pos(bootstrap/GenJs.hx:478: characters 7-30) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:478: characters 33-37) }), pos => #pos(bootstrap/GenJs.hx:478: characters 7-37) },{ expr => EConst(CIdent(es)), pos => #pos(bootstrap/GenJs.hx:478: characters 40-42) }), pos => #pos(bootstrap/GenJs.hx:478: characters 7-42) }), pos => #pos(bootstrap/GenJs.hx:478: characters 3-42) },{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:479: characters 3-4) }]), pos => #pos(bootstrap/GenJs.hx:469: lines 469-479) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenJs.hx:469: characters 7-11) },[{ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenJs.hx:469: characters 12-17) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenJs.hx:469: characters 19-20) },{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:469: characters 22-26) },{ expr => EConst(CIdent(const)), pos => #pos(bootstrap/GenJs.hx:469: characters 28-33) }]), pos => #pos(bootstrap/GenJs.hx:469: characters 7-34) }], pos => #pos(bootstrap/GenJs.hx:469: lines 469-479), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:481: characters 3-4) },{ expr => EConst(CString(try {
$tabs	)), pos => #pos(bootstrap/GenJs.hx:481: characters 7-23) }), pos => #pos(bootstrap/GenJs.hx:481: characters 3-23) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenJs.hx:482: characters 3-10) },[]), pos => #pos(bootstrap/GenJs.hx:482: characters 3-12) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:483: characters 11-15) }), pos => #pos(bootstrap/GenJs.hx:483: characters 10-16) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:484: characters 21-22) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:484: characters 32-33) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenJs.hx:484: characters 37-39) }), pos => #pos(bootstrap/GenJs.hx:484: characters 32-39) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:484: characters 41-42) },stringifyBlockExpression), pos => #pos(bootstrap/GenJs.hx:484: characters 41-67) },[]), pos => #pos(bootstrap/GenJs.hx:484: characters 41-69) }), pos => #pos(bootstrap/GenJs.hx:484: characters 27-69) }]), pos => #pos(bootstrap/GenJs.hx:484: characters 26-70) },join), pos => #pos(bootstrap/GenJs.hx:484: characters 26-75) },[{ expr => EBinop(OpAdd,{ expr => EConst(CString(;
)), pos => #pos(bootstrap/GenJs.hx:484: characters 76-81) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenJs.hx:484: characters 82-86) }), pos => #pos(bootstrap/GenJs.hx:484: characters 76-86) }]), pos => #pos(bootstrap/GenJs.hx:484: characters 26-87) }), pos => #pos(bootstrap/GenJs.hx:484: characters 21-87) }]), pos => #pos(bootstrap/GenJs.hx:484: characters 4-87) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenJs.hx:484: characters 9-15) },[{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenJs.hx:484: characters 16-18) }]), pos => #pos(bootstrap/GenJs.hx:484: characters 9-19) }], pos => #pos(bootstrap/GenJs.hx:484: characters 4-87), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:485: characters 12-13) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:485: characters 17-21) },stringify), pos => #pos(bootstrap/GenJs.hx:485: characters 17-31) },[]), pos => #pos(bootstrap/GenJs.hx:485: characters 17-33) }), pos => #pos(bootstrap/GenJs.hx:485: characters 12-33) }]), pos => #pos(bootstrap/GenJs.hx:485: characters 4-33) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:485: characters 9-10) }], pos => #pos(bootstrap/GenJs.hx:485: characters 4-33), guard => null }],null), pos => #pos(bootstrap/GenJs.hx:483: lines 483-486) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenJs.hx:488: characters 3-9) },[]), pos => #pos(bootstrap/GenJs.hx:488: characters 3-11) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:489: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(
)), pos => #pos(bootstrap/GenJs.hx:489: characters 8-12) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenJs.hx:489: characters 15-19) }), pos => #pos(bootstrap/GenJs.hx:489: characters 8-19) },{ expr => EConst(CString(} catch()), pos => #pos(bootstrap/GenJs.hx:489: characters 22-32) }), pos => #pos(bootstrap/GenJs.hx:489: characters 8-32) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:489: characters 33-34) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenJs.hx:489: characters 35-36) }), pos => #pos(bootstrap/GenJs.hx:489: characters 33-37) },varName), pos => #pos(bootstrap/GenJs.hx:489: characters 33-45) },[]), pos => #pos(bootstrap/GenJs.hx:489: characters 33-47) }), pos => #pos(bootstrap/GenJs.hx:489: characters 8-47) },{ expr => EConst(CString() {
$tabs	)), pos => #pos(bootstrap/GenJs.hx:489: characters 48-62) }), pos => #pos(bootstrap/GenJs.hx:489: characters 8-62) }), pos => #pos(bootstrap/GenJs.hx:489: characters 3-62) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenJs.hx:490: characters 3-10) },[]), pos => #pos(bootstrap/GenJs.hx:490: characters 3-12) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenJs.hx:491: characters 3-14) },set), pos => #pos(bootstrap/GenJs.hx:491: characters 3-18) },[{ expr => EArray({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:491: characters 19-20) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenJs.hx:491: characters 21-22) }), pos => #pos(bootstrap/GenJs.hx:491: characters 19-23) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:491: characters 25-26) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenJs.hx:491: characters 27-28) }), pos => #pos(bootstrap/GenJs.hx:491: characters 25-29) },varName), pos => #pos(bootstrap/GenJs.hx:491: characters 25-37) },[]), pos => #pos(bootstrap/GenJs.hx:491: characters 25-39) }]), pos => #pos(bootstrap/GenJs.hx:491: characters 3-40) },{ expr => ESwitch({ expr => EParenthesis({ expr => EArray({ expr => EConst(CIdent(catches)), pos => #pos(bootstrap/GenJs.hx:492: characters 11-18) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenJs.hx:492: characters 19-20) }), pos => #pos(bootstrap/GenJs.hx:492: characters 11-21) }), pos => #pos(bootstrap/GenJs.hx:492: characters 10-22) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:493: characters 21-22) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:493: characters 32-33) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenJs.hx:493: characters 37-39) }), pos => #pos(bootstrap/GenJs.hx:493: characters 32-39) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:493: characters 41-42) },stringify), pos => #pos(bootstrap/GenJs.hx:493: characters 41-52) },[]), pos => #pos(bootstrap/GenJs.hx:493: characters 41-54) }), pos => #pos(bootstrap/GenJs.hx:493: characters 27-54) }]), pos => #pos(bootstrap/GenJs.hx:493: characters 26-55) },join), pos => #pos(bootstrap/GenJs.hx:493: characters 26-60) },[{ expr => EBinop(OpAdd,{ expr => EConst(CString(;
)), pos => #pos(bootstrap/GenJs.hx:493: characters 61-66) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenJs.hx:493: characters 67-71) }), pos => #pos(bootstrap/GenJs.hx:493: characters 61-71) }]), pos => #pos(bootstrap/GenJs.hx:493: characters 26-72) }), pos => #pos(bootstrap/GenJs.hx:493: characters 21-72) }]), pos => #pos(bootstrap/GenJs.hx:493: characters 4-72) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenJs.hx:493: characters 9-15) },[{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenJs.hx:493: characters 16-18) }]), pos => #pos(bootstrap/GenJs.hx:493: characters 9-19) }], pos => #pos(bootstrap/GenJs.hx:493: characters 4-72), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:494: characters 12-13) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(catches)), pos => #pos(bootstrap/GenJs.hx:494: characters 17-24) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenJs.hx:494: characters 25-26) }), pos => #pos(bootstrap/GenJs.hx:494: characters 17-27) },stringify), pos => #pos(bootstrap/GenJs.hx:494: characters 17-37) },[]), pos => #pos(bootstrap/GenJs.hx:494: characters 17-39) }), pos => #pos(bootstrap/GenJs.hx:494: characters 12-39) }]), pos => #pos(bootstrap/GenJs.hx:494: characters 4-39) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:494: characters 9-10) }], pos => #pos(bootstrap/GenJs.hx:494: characters 4-39), guard => null }],null), pos => #pos(bootstrap/GenJs.hx:492: lines 492-495) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenJs.hx:496: characters 3-9) },[]), pos => #pos(bootstrap/GenJs.hx:496: characters 3-11) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:497: characters 3-4) },{ expr => EConst(CString(
)), pos => #pos(bootstrap/GenJs.hx:497: characters 7-11) }), pos => #pos(bootstrap/GenJs.hx:497: characters 3-11) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenJs.hx:497: characters 14-18) }), pos => #pos(bootstrap/GenJs.hx:497: characters 3-18) },{ expr => EConst(CString(})), pos => #pos(bootstrap/GenJs.hx:497: characters 21-24) }), pos => #pos(bootstrap/GenJs.hx:497: characters 3-24) }]), pos => #pos(bootstrap/GenJs.hx:480: lines 480-497) }, values => [{ expr => ECall({ expr => EConst(CIdent(TTry)), pos => #pos(bootstrap/GenJs.hx:480: characters 7-11) },[{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:480: characters 12-16) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenJs.hx:480: characters 18-19) },{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:480: characters 21-22) },{ expr => EConst(CIdent(catches)), pos => #pos(bootstrap/GenJs.hx:480: characters 24-31) }]), pos => #pos(bootstrap/GenJs.hx:480: characters 7-32) }], pos => #pos(bootstrap/GenJs.hx:480: lines 480-497), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(new )), pos => #pos(bootstrap/GenJs.hx:498: characters 37-43) },{ expr => ECall({ expr => EConst(CIdent(extractTypeName)), pos => #pos(bootstrap/GenJs.hx:498: characters 46-61) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenJs.hx:498: characters 62-63) }]), pos => #pos(bootstrap/GenJs.hx:498: characters 46-64) }), pos => #pos(bootstrap/GenJs.hx:498: characters 37-64) },{ expr => EConst(CString(()), pos => #pos(bootstrap/GenJs.hx:498: characters 67-70) }), pos => #pos(bootstrap/GenJs.hx:498: characters 37-70) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:498: characters 79-80) },{ expr => EConst(CIdent(args)), pos => #pos(bootstrap/GenJs.hx:498: characters 84-88) }), pos => #pos(bootstrap/GenJs.hx:498: characters 79-88) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:498: characters 90-91) },stringify), pos => #pos(bootstrap/GenJs.hx:498: characters 90-101) },[]), pos => #pos(bootstrap/GenJs.hx:498: characters 90-103) }), pos => #pos(bootstrap/GenJs.hx:498: characters 74-103) }]), pos => #pos(bootstrap/GenJs.hx:498: characters 73-104) },join), pos => #pos(bootstrap/GenJs.hx:498: characters 73-109) },[{ expr => EConst(CString(,)), pos => #pos(bootstrap/GenJs.hx:498: characters 110-113) }]), pos => #pos(bootstrap/GenJs.hx:498: characters 73-114) }), pos => #pos(bootstrap/GenJs.hx:498: characters 37-114) },{ expr => EConst(CString())), pos => #pos(bootstrap/GenJs.hx:498: characters 117-120) }), pos => #pos(bootstrap/GenJs.hx:498: characters 37-120) }]), pos => #pos(bootstrap/GenJs.hx:498: characters 2-120) }, values => [{ expr => ECall({ expr => EConst(CIdent(TNew)), pos => #pos(bootstrap/GenJs.hx:498: characters 7-11) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenJs.hx:498: characters 12-13) },{ expr => EConst(CIdent(args)), pos => #pos(bootstrap/GenJs.hx:498: characters 15-19) },{ expr => EConst(CIdent(names)), pos => #pos(bootstrap/GenJs.hx:498: characters 21-26) },{ expr => EConst(CIdent(values)), pos => #pos(bootstrap/GenJs.hx:498: characters 28-34) }]), pos => #pos(bootstrap/GenJs.hx:498: characters 7-35) }], pos => #pos(bootstrap/GenJs.hx:498: characters 2-120), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:500: characters 3-4) },{ expr => EConst(CString(switch ()), pos => #pos(bootstrap/GenJs.hx:500: characters 7-17) }), pos => #pos(bootstrap/GenJs.hx:500: characters 3-17) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:501: characters 3-4) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(exprs)), pos => #pos(bootstrap/GenJs.hx:501: characters 8-13) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenJs.hx:501: characters 14-15) }), pos => #pos(bootstrap/GenJs.hx:501: characters 8-16) },stringify), pos => #pos(bootstrap/GenJs.hx:501: characters 8-26) },[]), pos => #pos(bootstrap/GenJs.hx:501: characters 8-28) }), pos => #pos(bootstrap/GenJs.hx:501: characters 3-28) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:502: characters 3-4) },{ expr => EConst(CString() {
)), pos => #pos(bootstrap/GenJs.hx:502: characters 8-15) }), pos => #pos(bootstrap/GenJs.hx:502: characters 3-15) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenJs.hx:503: characters 3-10) },[]), pos => #pos(bootstrap/GenJs.hx:503: characters 3-12) },{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenJs.hx:504: characters 8-9) },{ expr => EBinop(OpInterval,{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenJs.hx:504: characters 13-17) },{ expr => EField({ expr => EConst(CIdent(cases)), pos => #pos(bootstrap/GenJs.hx:504: characters 17-22) },length), pos => #pos(bootstrap/GenJs.hx:504: characters 17-29) }), pos => #pos(bootstrap/GenJs.hx:504: characters 13-29) }), pos => #pos(bootstrap/GenJs.hx:504: characters 8-29) },{ expr => EBlock([{ expr => EVars([{ expr => { expr => EArray({ expr => EConst(CIdent(cases)), pos => #pos(bootstrap/GenJs.hx:505: characters 12-17) },{ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenJs.hx:505: characters 18-19) }), pos => #pos(bootstrap/GenJs.hx:505: characters 12-20) }, name => c, type => null, ??? => #pos(bootstrap/GenJs.hx:505: characters 8-9) }]), pos => #pos(bootstrap/GenJs.hx:505: characters 4-21) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:506: characters 4-5) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenJs.hx:506: characters 9-13) }), pos => #pos(bootstrap/GenJs.hx:506: characters 4-13) },{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(c)), pos => #pos(bootstrap/GenJs.hx:507: characters 9-10) },{ expr => EArray({ expr => EConst(CIdent(conds)), pos => #pos(bootstrap/GenJs.hx:507: characters 14-19) },{ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenJs.hx:507: characters 20-21) }), pos => #pos(bootstrap/GenJs.hx:507: characters 14-22) }), pos => #pos(bootstrap/GenJs.hx:507: characters 9-22) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:508: characters 5-6) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(case )), pos => #pos(bootstrap/GenJs.hx:508: characters 10-17) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(c)), pos => #pos(bootstrap/GenJs.hx:508: characters 20-21) },stringify), pos => #pos(bootstrap/GenJs.hx:508: characters 20-31) },[]), pos => #pos(bootstrap/GenJs.hx:508: characters 20-33) }), pos => #pos(bootstrap/GenJs.hx:508: characters 10-33) },{ expr => EConst(CString(:)), pos => #pos(bootstrap/GenJs.hx:508: characters 36-39) }), pos => #pos(bootstrap/GenJs.hx:508: characters 10-39) }), pos => #pos(bootstrap/GenJs.hx:508: characters 5-39) }), pos => #pos(bootstrap/GenJs.hx:507: lines 507-508) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:509: characters 4-5) },{ expr => EConst(CString( {
)), pos => #pos(bootstrap/GenJs.hx:509: characters 9-15) }), pos => #pos(bootstrap/GenJs.hx:509: characters 4-15) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:510: characters 4-5) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenJs.hx:510: characters 9-13) },{ expr => EConst(CString(	)), pos => #pos(bootstrap/GenJs.hx:510: characters 16-20) }), pos => #pos(bootstrap/GenJs.hx:510: characters 9-20) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(c)), pos => #pos(bootstrap/GenJs.hx:510: characters 23-24) },stringify), pos => #pos(bootstrap/GenJs.hx:510: characters 23-34) },[]), pos => #pos(bootstrap/GenJs.hx:510: characters 23-36) }), pos => #pos(bootstrap/GenJs.hx:510: characters 9-36) },{ expr => EConst(CString(;
)), pos => #pos(bootstrap/GenJs.hx:510: characters 39-44) }), pos => #pos(bootstrap/GenJs.hx:510: characters 9-44) }), pos => #pos(bootstrap/GenJs.hx:510: characters 4-44) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:511: characters 4-5) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenJs.hx:511: characters 9-13) },{ expr => EConst(CString(	)), pos => #pos(bootstrap/GenJs.hx:511: characters 16-20) }), pos => #pos(bootstrap/GenJs.hx:511: characters 9-20) },{ expr => EConst(CString(break;)), pos => #pos(bootstrap/GenJs.hx:511: characters 23-31) }), pos => #pos(bootstrap/GenJs.hx:511: characters 9-31) },{ expr => EConst(CString(
)), pos => #pos(bootstrap/GenJs.hx:511: characters 34-38) }), pos => #pos(bootstrap/GenJs.hx:511: characters 9-38) },{ expr => EConst(CString($tabs})), pos => #pos(bootstrap/GenJs.hx:511: characters 41-49) }), pos => #pos(bootstrap/GenJs.hx:511: characters 9-49) },{ expr => EConst(CString(
)), pos => #pos(bootstrap/GenJs.hx:511: characters 52-56) }), pos => #pos(bootstrap/GenJs.hx:511: characters 9-56) }), pos => #pos(bootstrap/GenJs.hx:511: characters 4-56) }]), pos => #pos(bootstrap/GenJs.hx:504: lines 504-512) }), pos => #pos(bootstrap/GenJs.hx:504: lines 504-512) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenJs.hx:513: characters 3-9) },[]), pos => #pos(bootstrap/GenJs.hx:513: characters 3-11) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:514: characters 3-4) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenJs.hx:514: characters 7-11) }), pos => #pos(bootstrap/GenJs.hx:514: characters 3-11) },{ expr => EConst(CString(})), pos => #pos(bootstrap/GenJs.hx:514: characters 14-17) }), pos => #pos(bootstrap/GenJs.hx:514: characters 3-17) }]), pos => #pos(bootstrap/GenJs.hx:499: lines 499-514) }, values => [{ expr => ECall({ expr => EConst(CIdent(TSwitch)), pos => #pos(bootstrap/GenJs.hx:499: characters 7-14) },[{ expr => EConst(CIdent(exprs)), pos => #pos(bootstrap/GenJs.hx:499: characters 15-20) },{ expr => EConst(CIdent(conds)), pos => #pos(bootstrap/GenJs.hx:499: characters 22-27) },{ expr => EConst(CIdent(cases)), pos => #pos(bootstrap/GenJs.hx:499: characters 29-34) }]), pos => #pos(bootstrap/GenJs.hx:499: characters 7-35) }], pos => #pos(bootstrap/GenJs.hx:499: lines 499-514), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EConst(CIdent(extractTypeName)), pos => #pos(bootstrap/GenJs.hx:516: characters 15-30) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenJs.hx:516: characters 31-32) }]), pos => #pos(bootstrap/GenJs.hx:516: characters 15-33) }, name => cname, type => null, ??? => #pos(bootstrap/GenJs.hx:516: characters 7-12) }]), pos => #pos(bootstrap/GenJs.hx:516: characters 3-34) },{ expr => EVars([{ expr => { expr => ECall({ expr => EConst(CIdent(getAtt)), pos => #pos(bootstrap/GenJs.hx:517: characters 17-23) },[{ expr => ECall({ expr => EField({ expr => EField({ expr => EConst(CIdent(Project)), pos => #pos(bootstrap/GenJs.hx:517: characters 24-31) },mapAttributes), pos => #pos(bootstrap/GenJs.hx:517: characters 24-45) },get), pos => #pos(bootstrap/GenJs.hx:517: characters 24-49) },[{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenJs.hx:517: characters 50-54) }]), pos => #pos(bootstrap/GenJs.hx:517: characters 24-55) },{ expr => EConst(CString(require)), pos => #pos(bootstrap/GenJs.hx:517: characters 57-66) }]), pos => #pos(bootstrap/GenJs.hx:517: characters 17-67) }, name => require, type => null, ??? => #pos(bootstrap/GenJs.hx:517: characters 7-14) }]), pos => #pos(bootstrap/GenJs.hx:517: characters 3-68) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(require)), pos => #pos(bootstrap/GenJs.hx:518: characters 7-14) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenJs.hx:518: characters 18-22) }), pos => #pos(bootstrap/GenJs.hx:518: characters 7-22) },{ expr => ESwitch({ expr => EArrayDecl([{ expr => EArray({ expr => EField({ expr => EConst(CIdent(require)), pos => #pos(bootstrap/GenJs.hx:518: characters 32-39) },values), pos => #pos(bootstrap/GenJs.hx:518: characters 32-46) },{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenJs.hx:518: characters 47-48) }), pos => #pos(bootstrap/GenJs.hx:518: characters 32-49) },{ expr => EArray({ expr => EField({ expr => EConst(CIdent(require)), pos => #pos(bootstrap/GenJs.hx:518: characters 51-58) },values), pos => #pos(bootstrap/GenJs.hx:518: characters 51-65) },{ expr => EConst(CInt(1)), pos => #pos(bootstrap/GenJs.hx:518: characters 66-67) }), pos => #pos(bootstrap/GenJs.hx:518: characters 51-68) }]), pos => #pos(bootstrap/GenJs.hx:518: characters 31-69) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:519: characters 29-30) },{ expr => EConst(CString(const $cname = require("$s");
$tabs)), pos => #pos(bootstrap/GenJs.hx:519: characters 34-72) }), pos => #pos(bootstrap/GenJs.hx:519: characters 29-72) }]), pos => #pos(bootstrap/GenJs.hx:519: characters 4-72) }, values => [{ expr => EArrayDecl([{ expr => ECall({ expr => EConst(CIdent(TString)), pos => #pos(bootstrap/GenJs.hx:519: characters 10-17) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:519: characters 18-19) }]), pos => #pos(bootstrap/GenJs.hx:519: characters 10-20) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenJs.hx:519: characters 22-26) }]), pos => #pos(bootstrap/GenJs.hx:519: characters 9-27) }], pos => #pos(bootstrap/GenJs.hx:519: characters 4-72), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:520: characters 35-36) },{ expr => EConst(CString(const $cname = require("$s").$f;
$tabs)), pos => #pos(bootstrap/GenJs.hx:520: characters 40-81) }), pos => #pos(bootstrap/GenJs.hx:520: characters 35-81) }]), pos => #pos(bootstrap/GenJs.hx:520: characters 4-81) }, values => [{ expr => EArrayDecl([{ expr => ECall({ expr => EConst(CIdent(TString)), pos => #pos(bootstrap/GenJs.hx:520: characters 10-17) },[{ expr => EConst(CIdent(s)), pos => #pos(bootstrap/GenJs.hx:520: characters 18-19) }]), pos => #pos(bootstrap/GenJs.hx:520: characters 10-20) },{ expr => ECall({ expr => EConst(CIdent(TString)), pos => #pos(bootstrap/GenJs.hx:520: characters 22-29) },[{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenJs.hx:520: characters 30-31) }]), pos => #pos(bootstrap/GenJs.hx:520: characters 22-32) }]), pos => #pos(bootstrap/GenJs.hx:520: characters 9-33) }], pos => #pos(bootstrap/GenJs.hx:520: characters 4-81), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CString(@require takes string as argument)), pos => #pos(bootstrap/GenJs.hx:521: characters 18-53) }), pos => #pos(bootstrap/GenJs.hx:521: characters 12-17) }]), pos => #pos(bootstrap/GenJs.hx:521: characters 4-17) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:521: characters 9-10) }], pos => #pos(bootstrap/GenJs.hx:521: characters 4-17), guard => null }],null), pos => #pos(bootstrap/GenJs.hx:518: lines 518-522) },null), pos => #pos(bootstrap/GenJs.hx:518: lines 518-522) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:523: characters 3-4) },{ expr => EConst(CString(/* declare class $cname */)), pos => #pos(bootstrap/GenJs.hx:523: characters 8-36) }), pos => #pos(bootstrap/GenJs.hx:523: characters 3-36) }]), pos => #pos(bootstrap/GenJs.hx:515: lines 515-523) }, values => [{ expr => ECall({ expr => EConst(CIdent(TClass)), pos => #pos(bootstrap/GenJs.hx:515: characters 7-13) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenJs.hx:515: characters 14-15) },{ expr => EConst(CIdent(ext)), pos => #pos(bootstrap/GenJs.hx:515: characters 17-20) },{ expr => EConst(CIdent(impl)), pos => #pos(bootstrap/GenJs.hx:515: characters 22-26) },{ expr => EConst(CIdent(fields)), pos => #pos(bootstrap/GenJs.hx:515: characters 28-34) },{ expr => EConst(CIdent(true)), pos => #pos(bootstrap/GenJs.hx:515: characters 36-40) }]), pos => #pos(bootstrap/GenJs.hx:515: characters 7-41) }], pos => #pos(bootstrap/GenJs.hx:515: lines 515-523), guard => null },{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EConst(CIdent(extractTypeName)), pos => #pos(bootstrap/GenJs.hx:525: characters 15-30) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenJs.hx:525: characters 31-32) }]), pos => #pos(bootstrap/GenJs.hx:525: characters 15-33) }, name => cname, type => null, ??? => #pos(bootstrap/GenJs.hx:525: characters 7-12) }]), pos => #pos(bootstrap/GenJs.hx:525: characters 3-34) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:526: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EParenthesis({ expr => ETernary({ expr => EConst(CIdent(external)), pos => #pos(bootstrap/GenJs.hx:526: characters 8-16) },{ expr => EConst(CString(/* declare class )), pos => #pos(bootstrap/GenJs.hx:526: characters 17-36) },{ expr => EConst(CString(class )), pos => #pos(bootstrap/GenJs.hx:526: characters 39-47) }), pos => #pos(bootstrap/GenJs.hx:526: characters 8-47) }), pos => #pos(bootstrap/GenJs.hx:526: characters 7-48) },{ expr => EConst(CIdent(cname)), pos => #pos(bootstrap/GenJs.hx:526: characters 51-56) }), pos => #pos(bootstrap/GenJs.hx:526: characters 7-56) }), pos => #pos(bootstrap/GenJs.hx:526: characters 3-56) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(ext)), pos => #pos(bootstrap/GenJs.hx:527: characters 7-10) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenJs.hx:527: characters 14-18) }), pos => #pos(bootstrap/GenJs.hx:527: characters 7-18) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:527: characters 20-21) },{ expr => EBinop(OpAdd,{ expr => EConst(CString( extends )), pos => #pos(bootstrap/GenJs.hx:527: characters 25-36) },{ expr => ECall({ expr => EConst(CIdent(extractTypeName)), pos => #pos(bootstrap/GenJs.hx:527: characters 39-54) },[{ expr => EConst(CIdent(ext)), pos => #pos(bootstrap/GenJs.hx:527: characters 55-58) }]), pos => #pos(bootstrap/GenJs.hx:527: characters 39-59) }), pos => #pos(bootstrap/GenJs.hx:527: characters 25-59) }), pos => #pos(bootstrap/GenJs.hx:527: characters 20-59) },null), pos => #pos(bootstrap/GenJs.hx:527: characters 3-59) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:528: characters 3-4) },{ expr => EConst(CString( {
)), pos => #pos(bootstrap/GenJs.hx:528: characters 8-14) }), pos => #pos(bootstrap/GenJs.hx:528: characters 3-14) },{ expr => EVars([{ expr => { expr => EArrayDecl([]), pos => #pos(bootstrap/GenJs.hx:529: characters 15-17) }, name => after, type => null, ??? => #pos(bootstrap/GenJs.hx:529: characters 7-12) }]), pos => #pos(bootstrap/GenJs.hx:529: characters 3-18) },{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenJs.hx:530: characters 8-9) },{ expr => EConst(CIdent(fields)), pos => #pos(bootstrap/GenJs.hx:530: characters 13-19) }), pos => #pos(bootstrap/GenJs.hx:530: characters 8-19) },{ expr => EBlock([{ expr => EVars([{ expr => { expr => EConst(CString()), pos => #pos(bootstrap/GenJs.hx:531: characters 15-17) }, name => code, type => null, ??? => #pos(bootstrap/GenJs.hx:531: characters 8-12) }]), pos => #pos(bootstrap/GenJs.hx:531: characters 4-18) },{ expr => EVars([{ expr => { expr => EConst(CIdent(false)), pos => #pos(bootstrap/GenJs.hx:532: characters 18-23) }, name => isafter, type => null, ??? => #pos(bootstrap/GenJs.hx:532: characters 8-15) }]), pos => #pos(bootstrap/GenJs.hx:532: characters 4-24) },{ expr => EFunction(unmeta,{ args => [{ meta => [], name => f, type => null, ??? => #pos(bootstrap/GenJs.hx:534: characters 20-21), opt => false, value => null }], expr => { expr => EBlock([{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenJs.hx:535: characters 13-14) }), pos => #pos(bootstrap/GenJs.hx:535: characters 12-15) },[{ expr => { expr => EBlock([{ expr => EReturn({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenJs.hx:536: characters 21-22) }), pos => #pos(bootstrap/GenJs.hx:536: characters 14-22) }]), pos => #pos(bootstrap/GenJs.hx:536: characters 6-22) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:536: characters 11-12) }], pos => #pos(bootstrap/GenJs.hx:536: characters 6-22), guard => null }],null), pos => #pos(bootstrap/GenJs.hx:535: lines 535-537) }]), pos => #pos(bootstrap/GenJs.hx:534: lines 534-538) }, params => [], ret => null }), pos => #pos(bootstrap/GenJs.hx:534: lines 534-538) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenJs.hx:540: characters 4-5) },{ expr => ECall({ expr => EConst(CIdent(unmeta)), pos => #pos(bootstrap/GenJs.hx:540: characters 8-14) },[{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenJs.hx:540: characters 15-16) }]), pos => #pos(bootstrap/GenJs.hx:540: characters 8-17) }), pos => #pos(bootstrap/GenJs.hx:540: characters 4-17) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenJs.hx:542: characters 12-13) }), pos => #pos(bootstrap/GenJs.hx:542: characters 11-14) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenJs.hx:543: characters 26-27) },{ expr => EConst(CIdent(field)), pos => #pos(bootstrap/GenJs.hx:543: characters 30-35) }), pos => #pos(bootstrap/GenJs.hx:543: characters 26-35) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(isafter)), pos => #pos(bootstrap/GenJs.hx:543: characters 37-44) },{ expr => EConst(CIdent(true)), pos => #pos(bootstrap/GenJs.hx:543: characters 47-51) }), pos => #pos(bootstrap/GenJs.hx:543: characters 37-51) }]), pos => #pos(bootstrap/GenJs.hx:543: characters 5-51) }, values => [{ expr => ECall({ expr => EConst(CIdent(TStatic)), pos => #pos(bootstrap/GenJs.hx:543: characters 10-17) },[{ expr => EConst(CIdent(field)), pos => #pos(bootstrap/GenJs.hx:543: characters 18-23) }]), pos => #pos(bootstrap/GenJs.hx:543: characters 10-24) }], pos => #pos(bootstrap/GenJs.hx:543: characters 5-51), guard => null },{ expr => { expr => EBlock([{ expr => EBlock([]), pos => #pos(bootstrap/GenJs.hx:544: characters 13-15) }]), pos => #pos(bootstrap/GenJs.hx:544: characters 5-15) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:544: characters 10-11) }], pos => #pos(bootstrap/GenJs.hx:544: characters 5-15), guard => null }],null), pos => #pos(bootstrap/GenJs.hx:542: lines 542-545) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenJs.hx:547: characters 4-5) },{ expr => ECall({ expr => EConst(CIdent(unmeta)), pos => #pos(bootstrap/GenJs.hx:547: characters 8-14) },[{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenJs.hx:547: characters 15-16) }]), pos => #pos(bootstrap/GenJs.hx:547: characters 8-17) }), pos => #pos(bootstrap/GenJs.hx:547: characters 4-17) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenJs.hx:548: characters 12-13) }), pos => #pos(bootstrap/GenJs.hx:548: characters 11-14) },[{ expr => { expr => EBlock([{ expr => EBlock([{ expr => EIf({ expr => EBinop(OpEq,{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:551: characters 11-15) },{ expr => EConst(CString(new)), pos => #pos(bootstrap/GenJs.hx:551: characters 19-24) }), pos => #pos(bootstrap/GenJs.hx:551: characters 11-24) },{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:551: characters 26-30) },{ expr => EConst(CString(constructor)), pos => #pos(bootstrap/GenJs.hx:551: characters 33-46) }), pos => #pos(bootstrap/GenJs.hx:551: characters 26-46) },null), pos => #pos(bootstrap/GenJs.hx:551: characters 7-46) },{ expr => EIf({ expr => EConst(CIdent(isafter)), pos => #pos(bootstrap/GenJs.hx:552: characters 11-18) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenJs.hx:552: characters 20-24) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(cname)), pos => #pos(bootstrap/GenJs.hx:552: characters 28-33) },{ expr => EConst(CString(.)), pos => #pos(bootstrap/GenJs.hx:552: characters 36-39) }), pos => #pos(bootstrap/GenJs.hx:552: characters 28-39) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:552: characters 42-46) },rename), pos => #pos(bootstrap/GenJs.hx:552: characters 42-53) },[]), pos => #pos(bootstrap/GenJs.hx:552: characters 42-55) }), pos => #pos(bootstrap/GenJs.hx:552: characters 28-55) },{ expr => EConst(CString( = function)), pos => #pos(bootstrap/GenJs.hx:552: characters 58-71) }), pos => #pos(bootstrap/GenJs.hx:552: characters 28-71) }), pos => #pos(bootstrap/GenJs.hx:552: characters 20-71) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenJs.hx:553: characters 12-16) },{ expr => EBinop(OpAdd,{ expr => EConst(CString(	)), pos => #pos(bootstrap/GenJs.hx:553: characters 20-24) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:553: characters 25-29) },rename), pos => #pos(bootstrap/GenJs.hx:553: characters 25-36) },[]), pos => #pos(bootstrap/GenJs.hx:553: characters 25-38) }), pos => #pos(bootstrap/GenJs.hx:553: characters 20-38) }), pos => #pos(bootstrap/GenJs.hx:553: characters 12-38) }), pos => #pos(bootstrap/GenJs.hx:552: lines 552-553) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenJs.hx:554: characters 7-11) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(()), pos => #pos(bootstrap/GenJs.hx:554: characters 15-18) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:554: characters 27-28) },{ expr => EConst(CIdent(vars)), pos => #pos(bootstrap/GenJs.hx:554: characters 32-36) }), pos => #pos(bootstrap/GenJs.hx:554: characters 27-36) },{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:555: characters 16-17) }), pos => #pos(bootstrap/GenJs.hx:555: characters 15-18) },[{ expr => { expr => EBlock([{ expr => EVars([{ expr => { expr => ECall({ expr => EField({ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenJs.hx:557: characters 20-25) },rename), pos => #pos(bootstrap/GenJs.hx:557: characters 20-32) },[]), pos => #pos(bootstrap/GenJs.hx:557: characters 20-34) }, name => name, type => null, ??? => #pos(bootstrap/GenJs.hx:557: characters 13-17) }]), pos => #pos(bootstrap/GenJs.hx:557: characters 9-35) },{ expr => EIf({ expr => ECall({ expr => EConst(CIdent(hasInScope)), pos => #pos(bootstrap/GenJs.hx:558: characters 13-23) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:558: characters 24-28) }]), pos => #pos(bootstrap/GenJs.hx:558: characters 13-29) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:558: characters 31-35) },{ expr => EBinop(OpAdd,{ expr => EConst(CString($$)), pos => #pos(bootstrap/GenJs.hx:558: characters 39-43) },{ expr => EParenthesis({ expr => EUnop(OpIncrement,false,{ expr => EConst(CIdent(id)), pos => #pos(bootstrap/GenJs.hx:558: characters 49-51) }), pos => #pos(bootstrap/GenJs.hx:558: characters 47-51) }), pos => #pos(bootstrap/GenJs.hx:558: characters 46-52) }), pos => #pos(bootstrap/GenJs.hx:558: characters 39-52) }), pos => #pos(bootstrap/GenJs.hx:558: characters 31-52) },null), pos => #pos(bootstrap/GenJs.hx:558: characters 9-52) },{ expr => ECall({ expr => EConst(CIdent(addToScope)), pos => #pos(bootstrap/GenJs.hx:559: characters 9-19) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:559: characters 20-24) }]), pos => #pos(bootstrap/GenJs.hx:559: characters 9-25) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenJs.hx:560: characters 9-20) },set), pos => #pos(bootstrap/GenJs.hx:560: characters 9-24) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:560: characters 25-26) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:560: characters 28-32) }]), pos => #pos(bootstrap/GenJs.hx:560: characters 9-33) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenJs.hx:561: characters 9-20) },get), pos => #pos(bootstrap/GenJs.hx:561: characters 9-24) },[{ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:561: characters 25-26) }]), pos => #pos(bootstrap/GenJs.hx:561: characters 9-27) }]), pos => #pos(bootstrap/GenJs.hx:556: lines 556-561) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenJs.hx:556: characters 14-18) },[{ expr => EConst(CIdent(oname)), pos => #pos(bootstrap/GenJs.hx:556: characters 19-24) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:556: characters 26-27) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:556: characters 29-30) }]), pos => #pos(bootstrap/GenJs.hx:556: characters 14-31) }], pos => #pos(bootstrap/GenJs.hx:556: lines 556-561), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EConst(CIdent(v)), pos => #pos(bootstrap/GenJs.hx:562: characters 23-24) }), pos => #pos(bootstrap/GenJs.hx:562: characters 17-22) }]), pos => #pos(bootstrap/GenJs.hx:562: characters 9-22) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:562: characters 14-15) }], pos => #pos(bootstrap/GenJs.hx:562: characters 9-22), guard => null }],null), pos => #pos(bootstrap/GenJs.hx:555: lines 555-563) }), pos => #pos(bootstrap/GenJs.hx:554: lines 554-563) }]), pos => #pos(bootstrap/GenJs.hx:554: lines 554-564) },join), pos => #pos(bootstrap/GenJs.hx:554: lines 554-564) },[{ expr => EConst(CString(, )), pos => #pos(bootstrap/GenJs.hx:564: characters 14-18) }]), pos => #pos(bootstrap/GenJs.hx:554: lines 554-564) }), pos => #pos(bootstrap/GenJs.hx:554: lines 554-564) },{ expr => EConst(CString() )), pos => #pos(bootstrap/GenJs.hx:564: characters 22-26) }), pos => #pos(bootstrap/GenJs.hx:554: lines 554-564) }), pos => #pos(bootstrap/GenJs.hx:554: lines 554-564) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:565: characters 11-15) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenJs.hx:565: characters 19-23) }), pos => #pos(bootstrap/GenJs.hx:565: characters 11-23) },{ expr => EBlock([{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:566: characters 16-20) }), pos => #pos(bootstrap/GenJs.hx:566: characters 15-21) },[{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenJs.hx:568: characters 9-16) },[]), pos => #pos(bootstrap/GenJs.hx:568: characters 9-18) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenJs.hx:569: characters 9-13) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:569: characters 17-21) },stringify), pos => #pos(bootstrap/GenJs.hx:569: characters 17-31) },[]), pos => #pos(bootstrap/GenJs.hx:569: characters 17-33) }), pos => #pos(bootstrap/GenJs.hx:569: characters 9-33) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenJs.hx:570: characters 9-15) },[]), pos => #pos(bootstrap/GenJs.hx:570: characters 9-17) }]), pos => #pos(bootstrap/GenJs.hx:567: lines 567-570) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBlock)), pos => #pos(bootstrap/GenJs.hx:567: characters 14-20) },[{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenJs.hx:567: characters 21-23) }]), pos => #pos(bootstrap/GenJs.hx:567: characters 14-24) }], pos => #pos(bootstrap/GenJs.hx:567: lines 567-570), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenJs.hx:572: characters 10-17) },[]), pos => #pos(bootstrap/GenJs.hx:572: characters 10-19) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenJs.hx:573: characters 10-14) },{ expr => EBinop(OpAdd,{ expr => EConst(CString({
$tabs)), pos => #pos(bootstrap/GenJs.hx:573: characters 18-28) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:573: characters 31-35) },stringify), pos => #pos(bootstrap/GenJs.hx:573: characters 31-45) },[]), pos => #pos(bootstrap/GenJs.hx:573: characters 31-47) }), pos => #pos(bootstrap/GenJs.hx:573: characters 18-47) }), pos => #pos(bootstrap/GenJs.hx:573: characters 10-47) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenJs.hx:574: characters 10-16) },[]), pos => #pos(bootstrap/GenJs.hx:574: characters 10-18) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenJs.hx:575: characters 10-14) },{ expr => EConst(CString(
$tabs})), pos => #pos(bootstrap/GenJs.hx:575: characters 18-28) }), pos => #pos(bootstrap/GenJs.hx:575: characters 10-28) }]), pos => #pos(bootstrap/GenJs.hx:571: lines 571-575) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:571: characters 14-15) }], pos => #pos(bootstrap/GenJs.hx:571: lines 571-575), guard => null }],null), pos => #pos(bootstrap/GenJs.hx:566: lines 566-576) }]), pos => #pos(bootstrap/GenJs.hx:565: lines 565-577) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenJs.hx:578: characters 12-16) },{ expr => EConst(CString({})), pos => #pos(bootstrap/GenJs.hx:578: characters 20-24) }), pos => #pos(bootstrap/GenJs.hx:578: characters 12-24) }), pos => #pos(bootstrap/GenJs.hx:565: lines 565-578) }]), pos => #pos(bootstrap/GenJs.hx:550: lines 550-579) }]), pos => #pos(bootstrap/GenJs.hx:549: lines 549-579) }, values => [{ expr => ECall({ expr => EConst(CIdent(TFunction)), pos => #pos(bootstrap/GenJs.hx:549: characters 10-19) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:549: characters 20-24) },{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:549: characters 26-30) },{ expr => EConst(CIdent(vars)), pos => #pos(bootstrap/GenJs.hx:549: characters 32-36) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:549: characters 38-39) }]), pos => #pos(bootstrap/GenJs.hx:549: characters 10-40) }], pos => #pos(bootstrap/GenJs.hx:549: lines 549-579), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(isafter)), pos => #pos(bootstrap/GenJs.hx:581: characters 6-13) },{ expr => EConst(CIdent(true)), pos => #pos(bootstrap/GenJs.hx:581: characters 16-20) }), pos => #pos(bootstrap/GenJs.hx:581: characters 6-20) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenJs.hx:582: characters 6-10) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(cname)), pos => #pos(bootstrap/GenJs.hx:582: characters 14-19) },{ expr => EConst(CString(.)), pos => #pos(bootstrap/GenJs.hx:582: characters 22-25) }), pos => #pos(bootstrap/GenJs.hx:582: characters 14-25) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:582: characters 28-32) },rename), pos => #pos(bootstrap/GenJs.hx:582: characters 28-39) },[]), pos => #pos(bootstrap/GenJs.hx:582: characters 28-41) }), pos => #pos(bootstrap/GenJs.hx:582: characters 14-41) }), pos => #pos(bootstrap/GenJs.hx:582: characters 6-41) },{ expr => EIf({ expr => EBinop(OpNotEq,{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:583: characters 10-14) },{ expr => EConst(CIdent(null)), pos => #pos(bootstrap/GenJs.hx:583: characters 18-22) }), pos => #pos(bootstrap/GenJs.hx:583: characters 10-22) },{ expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenJs.hx:584: characters 7-11) },{ expr => EBinop(OpAdd,{ expr => EConst(CString( = )), pos => #pos(bootstrap/GenJs.hx:584: characters 15-20) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:584: characters 23-27) },stringify), pos => #pos(bootstrap/GenJs.hx:584: characters 23-37) },[]), pos => #pos(bootstrap/GenJs.hx:584: characters 23-39) }), pos => #pos(bootstrap/GenJs.hx:584: characters 15-39) }), pos => #pos(bootstrap/GenJs.hx:584: characters 7-39) }]), pos => #pos(bootstrap/GenJs.hx:583: lines 583-585) },null), pos => #pos(bootstrap/GenJs.hx:583: lines 583-585) }]), pos => #pos(bootstrap/GenJs.hx:580: lines 580-585) }, values => [{ expr => ECall({ expr => EConst(CIdent(TVar)), pos => #pos(bootstrap/GenJs.hx:580: characters 10-14) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:580: characters 15-19) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenJs.hx:580: characters 21-22) },{ expr => EConst(CIdent(expr)), pos => #pos(bootstrap/GenJs.hx:580: characters 24-28) },{ expr => EConst(CIdent(const)), pos => #pos(bootstrap/GenJs.hx:580: characters 30-35) }]), pos => #pos(bootstrap/GenJs.hx:580: characters 10-36) }], pos => #pos(bootstrap/GenJs.hx:580: lines 580-585), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenJs.hx:586: characters 13-17) },{ expr => EBinop(OpAdd,{ expr => EConst(CString()), pos => #pos(bootstrap/GenJs.hx:586: characters 21-23) },{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenJs.hx:586: characters 24-25) }), pos => #pos(bootstrap/GenJs.hx:586: characters 21-25) }), pos => #pos(bootstrap/GenJs.hx:586: characters 13-25) }]), pos => #pos(bootstrap/GenJs.hx:586: characters 5-25) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:586: characters 10-11) }], pos => #pos(bootstrap/GenJs.hx:586: characters 5-25), guard => null }],null), pos => #pos(bootstrap/GenJs.hx:548: lines 548-587) },{ expr => EIf({ expr => EConst(CIdent(isafter)), pos => #pos(bootstrap/GenJs.hx:589: characters 8-15) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(after)), pos => #pos(bootstrap/GenJs.hx:589: characters 17-22) },push), pos => #pos(bootstrap/GenJs.hx:589: characters 17-27) },[{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenJs.hx:589: characters 28-32) },{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenJs.hx:589: characters 35-39) }), pos => #pos(bootstrap/GenJs.hx:589: characters 28-39) }]), pos => #pos(bootstrap/GenJs.hx:589: characters 17-40) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:589: characters 46-47) },{ expr => EBinop(OpAdd,{ expr => EConst(CString(	)), pos => #pos(bootstrap/GenJs.hx:589: characters 51-55) },{ expr => EConst(CIdent(code)), pos => #pos(bootstrap/GenJs.hx:589: characters 58-62) }), pos => #pos(bootstrap/GenJs.hx:589: characters 51-62) }), pos => #pos(bootstrap/GenJs.hx:589: characters 46-62) }), pos => #pos(bootstrap/GenJs.hx:589: characters 4-62) }]), pos => #pos(bootstrap/GenJs.hx:530: lines 530-591) }), pos => #pos(bootstrap/GenJs.hx:530: lines 530-591) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:592: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(
)), pos => #pos(bootstrap/GenJs.hx:592: characters 8-12) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenJs.hx:592: characters 15-19) }), pos => #pos(bootstrap/GenJs.hx:592: characters 8-19) },{ expr => EConst(CString(})), pos => #pos(bootstrap/GenJs.hx:592: characters 22-25) }), pos => #pos(bootstrap/GenJs.hx:592: characters 8-25) },{ expr => EParenthesis({ expr => ETernary({ expr => EConst(CIdent(external)), pos => #pos(bootstrap/GenJs.hx:592: characters 29-37) },{ expr => EConst(CString( */)), pos => #pos(bootstrap/GenJs.hx:592: characters 38-43) },{ expr => EConst(CString()), pos => #pos(bootstrap/GenJs.hx:592: characters 44-46) }), pos => #pos(bootstrap/GenJs.hx:592: characters 29-46) }), pos => #pos(bootstrap/GenJs.hx:592: characters 28-47) }), pos => #pos(bootstrap/GenJs.hx:592: characters 8-47) }), pos => #pos(bootstrap/GenJs.hx:592: characters 3-47) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:593: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EConst(CString(
)), pos => #pos(bootstrap/GenJs.hx:593: characters 8-12) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(after)), pos => #pos(bootstrap/GenJs.hx:593: characters 13-18) },join), pos => #pos(bootstrap/GenJs.hx:593: characters 13-23) },[{ expr => EConst(CString(;
)), pos => #pos(bootstrap/GenJs.hx:593: characters 24-29) }]), pos => #pos(bootstrap/GenJs.hx:593: characters 13-30) }), pos => #pos(bootstrap/GenJs.hx:593: characters 8-30) }), pos => #pos(bootstrap/GenJs.hx:593: characters 3-30) },{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:594: characters 3-4) }]), pos => #pos(bootstrap/GenJs.hx:524: lines 524-594) }, values => [{ expr => ECall({ expr => EConst(CIdent(TClass)), pos => #pos(bootstrap/GenJs.hx:524: characters 7-13) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenJs.hx:524: characters 14-15) },{ expr => EConst(CIdent(ext)), pos => #pos(bootstrap/GenJs.hx:524: characters 17-20) },{ expr => EConst(CIdent(impl)), pos => #pos(bootstrap/GenJs.hx:524: characters 22-26) },{ expr => EConst(CIdent(fields)), pos => #pos(bootstrap/GenJs.hx:524: characters 28-34) },{ expr => EConst(CIdent(external)), pos => #pos(bootstrap/GenJs.hx:524: characters 36-44) }]), pos => #pos(bootstrap/GenJs.hx:524: characters 7-45) }], pos => #pos(bootstrap/GenJs.hx:524: lines 524-594), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:597: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString(module )), pos => #pos(bootstrap/GenJs.hx:597: characters 7-16) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(path)), pos => #pos(bootstrap/GenJs.hx:597: characters 19-23) },join), pos => #pos(bootstrap/GenJs.hx:597: characters 19-28) },[{ expr => EConst(CString(.)), pos => #pos(bootstrap/GenJs.hx:597: characters 29-32) }]), pos => #pos(bootstrap/GenJs.hx:597: characters 19-33) }), pos => #pos(bootstrap/GenJs.hx:597: characters 7-33) },{ expr => EConst(CString( {
)), pos => #pos(bootstrap/GenJs.hx:597: characters 36-42) }), pos => #pos(bootstrap/GenJs.hx:597: characters 7-42) }), pos => #pos(bootstrap/GenJs.hx:597: characters 3-42) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenJs.hx:598: characters 3-10) },[]), pos => #pos(bootstrap/GenJs.hx:598: characters 3-12) },{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:599: characters 8-9) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenJs.hx:599: characters 13-15) }), pos => #pos(bootstrap/GenJs.hx:599: characters 8-15) },{ expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:600: characters 4-5) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenJs.hx:600: characters 9-13) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(e)), pos => #pos(bootstrap/GenJs.hx:600: characters 16-17) },stringify), pos => #pos(bootstrap/GenJs.hx:600: characters 16-27) },[]), pos => #pos(bootstrap/GenJs.hx:600: characters 16-29) }), pos => #pos(bootstrap/GenJs.hx:600: characters 9-29) },{ expr => EConst(CString(;
)), pos => #pos(bootstrap/GenJs.hx:600: characters 32-37) }), pos => #pos(bootstrap/GenJs.hx:600: characters 9-37) }), pos => #pos(bootstrap/GenJs.hx:600: characters 4-37) }]), pos => #pos(bootstrap/GenJs.hx:599: lines 599-601) }), pos => #pos(bootstrap/GenJs.hx:599: lines 599-601) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenJs.hx:602: characters 3-9) },[]), pos => #pos(bootstrap/GenJs.hx:602: characters 3-11) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:603: characters 3-4) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenJs.hx:603: characters 7-11) }), pos => #pos(bootstrap/GenJs.hx:603: characters 3-11) },{ expr => EConst(CString(})), pos => #pos(bootstrap/GenJs.hx:603: characters 14-17) }), pos => #pos(bootstrap/GenJs.hx:603: characters 3-17) }]), pos => #pos(bootstrap/GenJs.hx:596: lines 596-603) }, values => [{ expr => ECall({ expr => EConst(CIdent(TModule)), pos => #pos(bootstrap/GenJs.hx:596: characters 7-14) },[{ expr => EConst(CIdent(path)), pos => #pos(bootstrap/GenJs.hx:596: characters 15-19) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenJs.hx:596: characters 21-23) }]), pos => #pos(bootstrap/GenJs.hx:596: characters 7-24) }], pos => #pos(bootstrap/GenJs.hx:596: lines 596-603), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString({})), pos => #pos(bootstrap/GenJs.hx:604: characters 23-27) }]), pos => #pos(bootstrap/GenJs.hx:604: characters 2-27) }, values => [{ expr => ECall({ expr => EConst(CIdent(TObject)), pos => #pos(bootstrap/GenJs.hx:604: characters 7-14) },[{ expr => EArrayDecl([]), pos => #pos(bootstrap/GenJs.hx:604: characters 15-17) },{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:604: characters 19-20) }]), pos => #pos(bootstrap/GenJs.hx:604: characters 7-21) }], pos => #pos(bootstrap/GenJs.hx:604: characters 2-27), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CString({)), pos => #pos(bootstrap/GenJs.hx:605: characters 27-30) },{ expr => ECall({ expr => EField({ expr => EArrayDecl([{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenJs.hx:605: characters 39-40) },{ expr => EBinop(OpInterval,{ expr => EConst(CInt(0)), pos => #pos(bootstrap/GenJs.hx:605: characters 44-48) },{ expr => EField({ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenJs.hx:605: characters 48-50) },length), pos => #pos(bootstrap/GenJs.hx:605: characters 48-57) }), pos => #pos(bootstrap/GenJs.hx:605: characters 44-57) }), pos => #pos(bootstrap/GenJs.hx:605: characters 39-57) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(names)), pos => #pos(bootstrap/GenJs.hx:605: characters 59-64) },{ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenJs.hx:605: characters 65-66) }), pos => #pos(bootstrap/GenJs.hx:605: characters 59-67) },rename), pos => #pos(bootstrap/GenJs.hx:605: characters 59-74) },[]), pos => #pos(bootstrap/GenJs.hx:605: characters 59-76) },{ expr => EConst(CString(:)), pos => #pos(bootstrap/GenJs.hx:605: characters 79-82) }), pos => #pos(bootstrap/GenJs.hx:605: characters 59-82) },{ expr => ECall({ expr => EField({ expr => EArray({ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenJs.hx:605: characters 85-87) },{ expr => EConst(CIdent(i)), pos => #pos(bootstrap/GenJs.hx:605: characters 88-89) }), pos => #pos(bootstrap/GenJs.hx:605: characters 85-90) },stringify), pos => #pos(bootstrap/GenJs.hx:605: characters 85-100) },[]), pos => #pos(bootstrap/GenJs.hx:605: characters 85-102) }), pos => #pos(bootstrap/GenJs.hx:605: characters 59-102) }), pos => #pos(bootstrap/GenJs.hx:605: characters 34-102) }]), pos => #pos(bootstrap/GenJs.hx:605: characters 33-103) },join), pos => #pos(bootstrap/GenJs.hx:605: characters 33-108) },[{ expr => EConst(CString(,)), pos => #pos(bootstrap/GenJs.hx:605: characters 109-112) }]), pos => #pos(bootstrap/GenJs.hx:605: characters 33-113) }), pos => #pos(bootstrap/GenJs.hx:605: characters 27-113) },{ expr => EConst(CString(})), pos => #pos(bootstrap/GenJs.hx:605: characters 116-119) }), pos => #pos(bootstrap/GenJs.hx:605: characters 27-119) }]), pos => #pos(bootstrap/GenJs.hx:605: characters 2-119) }, values => [{ expr => ECall({ expr => EConst(CIdent(TObject)), pos => #pos(bootstrap/GenJs.hx:605: characters 7-14) },[{ expr => EConst(CIdent(names)), pos => #pos(bootstrap/GenJs.hx:605: characters 15-20) },{ expr => EConst(CIdent(el)), pos => #pos(bootstrap/GenJs.hx:605: characters 22-24) }]), pos => #pos(bootstrap/GenJs.hx:605: characters 7-25) }], pos => #pos(bootstrap/GenJs.hx:605: characters 2-119), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAdd,{ expr => EConst(CString(static )), pos => #pos(bootstrap/GenJs.hx:607: characters 23-32) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(field)), pos => #pos(bootstrap/GenJs.hx:607: characters 35-40) },stringify), pos => #pos(bootstrap/GenJs.hx:607: characters 35-50) },[]), pos => #pos(bootstrap/GenJs.hx:607: characters 35-52) }), pos => #pos(bootstrap/GenJs.hx:607: characters 23-52) }]), pos => #pos(bootstrap/GenJs.hx:607: characters 2-52) }, values => [{ expr => ECall({ expr => EConst(CIdent(TStatic)), pos => #pos(bootstrap/GenJs.hx:607: characters 7-14) },[{ expr => EConst(CIdent(field)), pos => #pos(bootstrap/GenJs.hx:607: characters 15-20) }]), pos => #pos(bootstrap/GenJs.hx:607: characters 7-21) }], pos => #pos(bootstrap/GenJs.hx:607: characters 2-52), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssign,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:611: characters 3-4) },{ expr => EBinop(OpAdd,{ expr => EConst(CString(const )), pos => #pos(bootstrap/GenJs.hx:611: characters 7-15) },{ expr => ECall({ expr => EConst(CIdent(extractTypeName)), pos => #pos(bootstrap/GenJs.hx:611: characters 18-33) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenJs.hx:611: characters 34-35) }]), pos => #pos(bootstrap/GenJs.hx:611: characters 18-36) }), pos => #pos(bootstrap/GenJs.hx:611: characters 7-36) }), pos => #pos(bootstrap/GenJs.hx:611: characters 3-36) },{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:612: characters 3-4) },{ expr => EConst(CString( = {
)), pos => #pos(bootstrap/GenJs.hx:612: characters 8-16) }), pos => #pos(bootstrap/GenJs.hx:612: characters 3-16) },{ expr => ECall({ expr => EConst(CIdent(pushTab)), pos => #pos(bootstrap/GenJs.hx:613: characters 3-10) },[]), pos => #pos(bootstrap/GenJs.hx:613: characters 3-12) },{ expr => EFor({ expr => EIn({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenJs.hx:614: characters 8-9) },{ expr => EConst(CIdent(fields)), pos => #pos(bootstrap/GenJs.hx:614: characters 13-19) }), pos => #pos(bootstrap/GenJs.hx:614: characters 8-19) },{ expr => EBlock([{ expr => ESwitch({ expr => EParenthesis({ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenJs.hx:615: characters 11-12) }), pos => #pos(bootstrap/GenJs.hx:615: characters 10-13) },[{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:617: characters 5-6) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenJs.hx:617: characters 10-14) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:617: characters 17-21) }), pos => #pos(bootstrap/GenJs.hx:617: characters 10-21) },{ expr => EConst(CString(:)), pos => #pos(bootstrap/GenJs.hx:617: characters 24-27) }), pos => #pos(bootstrap/GenJs.hx:617: characters 10-27) },{ expr => ECall({ expr => EField({ expr => EConst(CIdent(val)), pos => #pos(bootstrap/GenJs.hx:617: characters 30-33) },stringify), pos => #pos(bootstrap/GenJs.hx:617: characters 30-43) },[]), pos => #pos(bootstrap/GenJs.hx:617: characters 30-45) }), pos => #pos(bootstrap/GenJs.hx:617: characters 10-45) },{ expr => EConst(CString(,
)), pos => #pos(bootstrap/GenJs.hx:617: characters 48-53) }), pos => #pos(bootstrap/GenJs.hx:617: characters 10-53) }), pos => #pos(bootstrap/GenJs.hx:617: characters 5-53) }]), pos => #pos(bootstrap/GenJs.hx:616: lines 616-617) }, values => [{ expr => ECall({ expr => EConst(CIdent(TBinop)), pos => #pos(bootstrap/GenJs.hx:616: characters 10-16) },[{ expr => EConst(CIdent(OpAssign)), pos => #pos(bootstrap/GenJs.hx:616: characters 17-25) },{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenJs.hx:616: characters 27-33) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:616: characters 34-38) }]), pos => #pos(bootstrap/GenJs.hx:616: characters 27-39) },{ expr => EConst(CIdent(val)), pos => #pos(bootstrap/GenJs.hx:616: characters 41-44) }]), pos => #pos(bootstrap/GenJs.hx:616: characters 10-45) }], pos => #pos(bootstrap/GenJs.hx:616: lines 616-617), guard => null },{ expr => { expr => EBlock([{ expr => EBinop(OpAssignOp(OpAdd),{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:619: characters 5-6) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenJs.hx:619: characters 10-14) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:619: characters 17-21) }), pos => #pos(bootstrap/GenJs.hx:619: characters 10-21) },{ expr => EConst(CString(:{},
)), pos => #pos(bootstrap/GenJs.hx:619: characters 24-32) }), pos => #pos(bootstrap/GenJs.hx:619: characters 10-32) }), pos => #pos(bootstrap/GenJs.hx:619: characters 5-32) }]), pos => #pos(bootstrap/GenJs.hx:618: lines 618-619) }, values => [{ expr => ECall({ expr => EConst(CIdent(TIdent)), pos => #pos(bootstrap/GenJs.hx:618: characters 10-16) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:618: characters 17-21) }]), pos => #pos(bootstrap/GenJs.hx:618: characters 10-22) }], pos => #pos(bootstrap/GenJs.hx:618: lines 618-619), guard => null },{ expr => { expr => EBlock([{ expr => EThrow({ expr => EBinop(OpAdd,{ expr => EConst(CString(!)), pos => #pos(bootstrap/GenJs.hx:620: characters 19-22) },{ expr => EConst(CIdent(f)), pos => #pos(bootstrap/GenJs.hx:620: characters 25-26) }), pos => #pos(bootstrap/GenJs.hx:620: characters 19-26) }), pos => #pos(bootstrap/GenJs.hx:620: characters 13-18) }]), pos => #pos(bootstrap/GenJs.hx:620: characters 5-18) }, values => [{ expr => EConst(CIdent(_)), pos => #pos(bootstrap/GenJs.hx:620: characters 10-11) }], pos => #pos(bootstrap/GenJs.hx:620: characters 5-18), guard => null }],null), pos => #pos(bootstrap/GenJs.hx:615: lines 615-621) }]), pos => #pos(bootstrap/GenJs.hx:614: lines 614-622) }), pos => #pos(bootstrap/GenJs.hx:614: lines 614-622) },{ expr => ECall({ expr => EConst(CIdent(popTab)), pos => #pos(bootstrap/GenJs.hx:623: characters 3-9) },[]), pos => #pos(bootstrap/GenJs.hx:623: characters 3-11) },{ expr => EBinop(OpAdd,{ expr => EBinop(OpAdd,{ expr => EConst(CIdent(r)), pos => #pos(bootstrap/GenJs.hx:624: characters 3-4) },{ expr => EConst(CIdent(tabs)), pos => #pos(bootstrap/GenJs.hx:624: characters 7-11) }), pos => #pos(bootstrap/GenJs.hx:624: characters 3-11) },{ expr => EConst(CString(})), pos => #pos(bootstrap/GenJs.hx:624: characters 14-17) }), pos => #pos(bootstrap/GenJs.hx:624: characters 3-17) }]), pos => #pos(bootstrap/GenJs.hx:610: lines 610-624) }, values => [{ expr => ECall({ expr => EConst(CIdent(TEnum)), pos => #pos(bootstrap/GenJs.hx:610: characters 7-12) },[{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenJs.hx:610: characters 13-14) },{ expr => EConst(CIdent(fields)), pos => #pos(bootstrap/GenJs.hx:610: characters 16-22) }]), pos => #pos(bootstrap/GenJs.hx:610: characters 7-23) }], pos => #pos(bootstrap/GenJs.hx:610: lines 610-624), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString()), pos => #pos(bootstrap/GenJs.hx:625: characters 23-25) }]), pos => #pos(bootstrap/GenJs.hx:625: characters 2-25) }, values => [{ expr => ECall({ expr => EConst(CIdent(TType)), pos => #pos(bootstrap/GenJs.hx:625: characters 7-12) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:625: characters 13-17) },{ expr => EConst(CIdent(t)), pos => #pos(bootstrap/GenJs.hx:625: characters 19-20) }]), pos => #pos(bootstrap/GenJs.hx:625: characters 7-21) }], pos => #pos(bootstrap/GenJs.hx:625: characters 2-25), guard => null },{ expr => { expr => EBlock([{ expr => EConst(CString(_)), pos => #pos(bootstrap/GenJs.hx:626: characters 20-23) }]), pos => #pos(bootstrap/GenJs.hx:626: characters 2-23) }, values => [{ expr => EConst(CIdent(TUnderscore)), pos => #pos(bootstrap/GenJs.hx:626: characters 7-18) }], pos => #pos(bootstrap/GenJs.hx:626: characters 2-23), guard => null },{ expr => { expr => EBlock([{ expr => ECall({ expr => EField({ expr => EConst(CIdent(parentNames)), pos => #pos(bootstrap/GenJs.hx:628: characters 3-14) },set), pos => #pos(bootstrap/GenJs.hx:628: characters 3-18) },[{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenJs.hx:628: characters 19-23) },{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:628: characters 25-29) }]), pos => #pos(bootstrap/GenJs.hx:628: characters 3-30) },{ expr => EConst(CString(//declare $name)), pos => #pos(bootstrap/GenJs.hx:629: characters 3-20) }]), pos => #pos(bootstrap/GenJs.hx:627: lines 627-629) }, values => [{ expr => ECall({ expr => EConst(CIdent(TDeclare)), pos => #pos(bootstrap/GenJs.hx:627: characters 7-15) },[{ expr => EConst(CIdent(name)), pos => #pos(bootstrap/GenJs.hx:627: characters 16-20) },{ expr => EConst(CIdent(node)), pos => #pos(bootstrap/GenJs.hx:627: characters 22-26) }]), pos => #pos(bootstrap/GenJs.hx:627: characters 7-27) }], pos => #pos(bootstrap/GenJs.hx:627: lines 627-629), guard => null }],null)) tmp
		}

		private static function unwrapBlock(e: data.Node): data.Node {
			if(e.index == 9) {
				if({ let data.Node.TBlock(value) = e value }.length == 1) {
					var e1: data.Node = { let data.Node.TBlock(value) = e value }[0]
					return e1
				} else {
					let data.Node.TBlock(el) = e
					throw new HaxeError('Unwrapped block has multiple expressions')
				}
			} else return e
		}

		private static function extractTypeName(t: data.NodeType): String {
			switch (t.index) {
				case 0: {
					let data.NodeType.Type(name) = t
					return name
				}

				case 1: {
					let data.NodeType.ParamentricType(name1, _) = t
					return name1
				}
				
				case _: throw new HaxeError('Type has no name: ' + Std.string(t))
			}
		}

		static function generatePackageJson(pack: main.Package): String {
			var jspackage: {author: String, description: String, license: String, main: String, name: String, version: String} = {name: pack.main, version: pack.main, description: pack.description, main: pack.main, author: pack.author, license: pack.license}
			return haxe.json.Json.stringify(jspackage, null, '\t')
		}

	}
}
