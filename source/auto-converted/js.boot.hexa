module js.boot {
	@dox(hide)
	class Boot {
		private static function __unhtml(s: String): String {
			return s.split('&').join('&amp;').split('<').join('&lt;').split('>').join('&gt;')
		}

		@has_untyped
		private static function __trace(v: {__enum__: Bool, hasOwnProperty: String=>Bool, length: Int, toString: ()=>String}, i: haxe.posinfos.PosInfos): Void {
			var msg: String = if (i != null) i.fileName + ':' + i.lineNumber + ': ' else ''
			msg += js.boot.Boot.__string_rec(v, '')
			if (i != null && i.customParams != null) {
				var _g: Int = 0
				var _g1: [Any]? = i.customParams
				while (_g < _g1.length) {
					var v1: Any = _g1[_g]
					_g++
					msg += ',' + js.boot.Boot.__string_rec(v1, '')
				}
			}
			var d: {innerHTML: String}
			var tmp: Bool
			if (__js__('typeof')(document) != 'undefined') {
				d = document.getElementById('haxe:trace')
				tmp = d != null
			} else tmp = false
			if (tmp) d.innerHTML += js.boot.Boot.__unhtml(msg) + '<br/>' else if (__js__('typeof console') != 'undefined' && __js__('console').log != null) __js__('console').log(msg)
		}

		@has_untyped
		private static function __clear_trace(): Void {
			var d: {innerHTML: String} = document.getElementById('haxe:trace')
			if (d != null) d.innerHTML = ''
		}

		@has_untyped
		private static function isClass(o: Any): Bool {
			return __define_feature__('js.Boot.isClass', o.__name__)
		}

		@has_untyped
		private static function isEnum(e: Any): Bool {
			return __define_feature__('js.Boot.isEnum', e.__ename__)
		}

		@has_untyped
		private static function getClass(o: Any): Any {
			if (__instanceof__(o, Array) && o.__enum__ == null) return Array else {
				var cl: Any = __define_feature__('js.Boot.getClass', o.__class__)
				if (cl != null) return cl
				var name: String = js.boot.Boot.__nativeClassName(o)
				if (name != null) return js.boot.Boot.__resolveNativeClass(name)
				return null
			}
		}

		@has_untyped
		@ifFeature('has_enum')
		private static function __string_rec(o: {__enum__: Bool, hasOwnProperty: String=>Bool, length: Int, toString: ()=>String}, s: String): String {
			if (o == null) return 'null'
			if (s.length >= 5) return '<...>'
			var t: String = __js__('typeof(o)')
			if (t == 'function' && (__define_feature__('js.Boot.isClass', o.__name__) || __define_feature__('js.Boot.isEnum', o.__ename__))) t = 'object'
			switch (t) {
				case 'function': return '<function>'

				case 'object': {
					if (__js__('o instanceof Array')) {
						if (o.__enum__) {
							if (o.length == 2) return o[0]
							var str: String = o[0] + '('
							s += '\t'
							{
								var _g1: Int = 2
								var _g: Int = o.length
								while (_g1 < _g) {
									var i: Int = _g1++
									if (i != 2) str += ',' + js.boot.Boot.__string_rec(o[i], s) else str += js.boot.Boot.__string_rec(o[i], s)
								}
							}
							return str + ')'
						}
						var l: Int = o.length
						var i1: Any
						var str1: String = '['
						s += '\t'
						{
							var _g11: Int = 0
							var _g2: Int = l
							while (_g11 < _g2) {
								var i2: Int = _g11++
								str1 += (if (i2 > 0) ',' else '') + js.boot.Boot.__string_rec(o[i2], s)
							}
						}
						str1 += ']'
						return str1
					}
					var tostr: Any
					try {
						tostr = o.toString
					} catch (e:Any) {
						return '???'
					}
					if (tostr != null && tostr != __js__('Object.toString') && __typeof__(tostr) == 'function') {
						var s2: String = o.toString()
						if (s2 != '[object Object]') return s2
					}
					var k: String = null
					var str2: String = '{\n'
					s += '\t'
					var hasp: Bool = o.hasOwnProperty != null
					__js__('for( var k in o ) {')
					if (hasp && !o.hasOwnProperty(k)) {
						__js__('continue')
					}
					if (k == 'prototype' || k == '__class__' || k == '__super__' || k == '__interfaces__' || k == '__properties__') {
						__js__('continue')
					}
					if (str2.length != 2) str2 += ', \n'
					str2 += s + k + ' : ' + js.boot.Boot.__string_rec(o[k], s)
					__js__('}')
					s = s.substring(1)
					str2 += '\n' + s + '}'
					return str2
				}

				case 'string': return o
				
				case _: return String(o)
			}
		}

		private static function __interfLoop(cc: Any, cl: Any): Bool {
			if (cc == null) return false
			if (cc == cl) return true
			var intf: Any = cc.__interfaces__
			if (intf != null) {
				var _g1: Int = 0
				var _g: Int = (intf.length as! Int)
				while (_g1 < _g) {
					var i: Int = _g1++
					var i1: Any = intf[i]
					if (i1 == cl || js.boot.Boot.__interfLoop(i1, cl)) return true
				}
			}
			return js.boot.Boot.__interfLoop(cc.__super__, cl)
		}

		@has_untyped
		@ifFeature('typed_catch')
		private static function __instanceof(o: Any, cl: Any): Bool {
			if (cl == null) return false
			switch ((cl as! Class< Any >)) {
				case Array: if (__js__('(o instanceof Array)')) return o.__enum__ == null else return false

				case stdtypes.Bool: return __js__('typeof')(o) == 'boolean'

				case stdtypes.Dynamic: return true

				case stdtypes.Float: return __js__('typeof')(o) == 'number'

				case stdtypes.Int: if (__js__('typeof')(o) == 'number') return __js__('(o|0) === o') else return false

				case String: return __js__('typeof')(o) == 'string'
				
				case _: {
					if (o != null) {
						if (__js__('typeof')(cl) == 'function') {
							if (__js__('o instanceof cl')) return true
							if (js.boot.Boot.__interfLoop(js.boot.Boot.getClass(o), cl)) return true
						} else if (__js__('typeof')(cl) == 'object' && js.boot.Boot.__isNativeObj(cl)) {
							if (__js__('o instanceof cl')) return true
						}
					} else return false
					__feature__('Class.*', if (if (cl == Class) o.__name__ != null else false) return true)
					__feature__('Enum.*', if (if (cl == Enum) o.__ename__ != null else false) return true)
					return o.__enum__ == cl
				}
			}
		}

		@ifFeature('typed_cast')
		private static function __cast(o: Any, t: Any): Any {
			if (js.boot.Boot.__instanceof(o, t)) return o else throw new HaxeError('Cannot cast ' + Std.string(o) + ' to ' + Std.string(t))
		}

		@has_untyped
		private static var __toStr: {call: Any=>{slice: (Int, Int)=>Any}} = {:}.toString
		@has_untyped
		private static function __nativeClassName(o: Any): String {
			var name: String = js.boot.Boot.__toStr.call(o).slice(8, -1)
			if (name == 'Object' || name == 'Function' || name == 'Math' || name == 'JSON') return null
			return name
		}

		private static function __isNativeObj(o: Any): Bool {
			return js.boot.Boot.__nativeClassName(o) != null
		}

		@has_untyped
		private static function __resolveNativeClass(name: String): Any {
			return (__define_feature__('js.Lib.global', __js__('$global')) as! Any)[name]
		}

	}
}
