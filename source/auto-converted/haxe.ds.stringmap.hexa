module haxe.ds.stringmap {
	@coreApi
	class StringMap< haxe.ds.stringmap.T > implements haxe.constraints.IMap< String, haxe.ds.stringmap.T > {
		private var h: Any
		private var rh: Any
		@has_untyped
		private function isReserved(key: String): Bool {
			return __js__('__map_reserved')[key] != null
		}

		function set(key: String, value: haxe.ds.stringmap.T): Void {
			if(__js__('__map_reserved')[key] != null) this.setReserved(key, value) else this.h[(key as! Int)] = value
		}

		function get(key: String): haxe.ds.stringmap.T? {
			if(__js__('__map_reserved')[key] != null) return this.getReserved(key)
			return this.h[(key as! Int)]
		}

		function exists(key: String): Bool {
			if(__js__('__map_reserved')[key] != null) return this.existsReserved(key)
			return this.h.hasOwnProperty(key)
		}

		private function setReserved(key: String, value: haxe.ds.stringmap.T): Void {
			if(this.rh == null) this.rh = {:}
			this.rh[('$' + key as! Int)] = value
		}

		private function getReserved(key: String): haxe.ds.stringmap.T? {
			if(this.rh == null) return null else return this.rh[('$' + key as! Int)]
		}

		@has_untyped
		private function existsReserved(key: String): Bool {
			if(this.rh == null) return false
			return this.rh.hasOwnProperty('$' + key)
		}

		@has_untyped
		function remove(key: String): Bool {
			if(__js__('__map_reserved')[key] != null) {
				key = '$' + key
				if(this.rh == null || !this.rh.hasOwnProperty(key)) return false
				__js__('delete')(this.rh[key])
				return true
			} else {
				if(!this.h.hasOwnProperty(key)) return false
				__js__('delete')(this.h[key])
				return true
			}
		}

		function keys(): stdtypes.Iterator< String > {
			return HxOverrides.iter(this.arrayKeys())
		}

		@has_untyped
		private function arrayKeys(): [String] {
			var out: [String] = {[]}
			{
				__js__('for( var key in this.h ) {')
				if(this.h.hasOwnProperty(key)) out.push(key)
				__js__('}')
			}
			if(this.rh != null) {
				__js__('for( var key in this.rh ) {')
				if(key.charCodeAt(0) == 36) out.push(key.substr(1))
				__js__('}')
			}
			return out
		}

		function iterator(): stdtypes.Iterator< haxe.ds.stringmap.T > {
			return new StringMapIterator< haxe.ds.stringmap.T >(this, this.arrayKeys())
		}

		function toString(): String {
			var s_b: String = ''
			s_b += '{'
			var keys: [String] = this.arrayKeys()
			{
				var _g1: Int = 0
				var _g: Int = keys.length
				while(_g1 < _g) {
					var i: Int = _g1++
					var k: String = keys[i]
					s_b += if(k == null) 'null' else '' + k
					s_b += ' => '
					s_b += Std.string(Std.string((if(__js__('__map_reserved')[k] != null) this.getReserved(k) else this.h[(k as! Int)] as! haxe.ds.stringmap.T?)))
					if(i < keys.length - 1) s_b += ', '
				}
			}
			s_b += '}'
			return s_b
		}

		new() {
			this.h = {:}
		}
	}
}

// __init__
__js__('var __map_reserved = {};')
