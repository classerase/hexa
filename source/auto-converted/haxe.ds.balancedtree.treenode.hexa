module haxe.ds.balancedtree {
	class TreeNode< haxe.ds.balancedtree.K, haxe.ds.balancedtree.V > {
		var left: haxe.ds.balancedtree.TreeNode< haxe.ds.balancedtree.K, haxe.ds.balancedtree.V >
		var right: haxe.ds.balancedtree.TreeNode< haxe.ds.balancedtree.K, haxe.ds.balancedtree.V >
		var key: haxe.ds.balancedtree.K
		var value: haxe.ds.balancedtree.V
		private var _height: Int
		@extern
		function get_height(): Int return if (this == null) {
			0
		} else {
			this._height
		}

		function toString(): String {
			return (if (this.left == null) '' else this.left.toString() + ', ') + ('' + Std.string(this.key) + '=' + Std.string(this.value)) + (if (this.right == null) '' else ', ' + this.right.toString())
		}

		new(l: haxe.ds.balancedtree.TreeNode< haxe.ds.balancedtree.K, haxe.ds.balancedtree.V >, k: haxe.ds.balancedtree.K, v: haxe.ds.balancedtree.V, r: haxe.ds.balancedtree.TreeNode< haxe.ds.balancedtree.K, haxe.ds.balancedtree.V >, h?: Int) {
			this.left = l
			this.key = k
			this.value = v
			this.right = r
			if (h == -1) {
				var tmp: Int
				var _this: haxe.ds.balancedtree.TreeNode< haxe.ds.balancedtree.K, haxe.ds.balancedtree.V > = this.left
				var _this1: haxe.ds.balancedtree.TreeNode< haxe.ds.balancedtree.K, haxe.ds.balancedtree.V > = this.right
				if ((if (_this == null) 0 else _this._height) > (if (_this1 == null) 0 else _this1._height)) {
					var _this2: haxe.ds.balancedtree.TreeNode< haxe.ds.balancedtree.K, haxe.ds.balancedtree.V > = this.left
					if (_this2 == null) tmp = 0 else tmp = _this2._height
				} else {
					var _this3: haxe.ds.balancedtree.TreeNode< haxe.ds.balancedtree.K, haxe.ds.balancedtree.V > = this.right
					if (_this3 == null) tmp = 0 else tmp = _this3._height
				}
				this._height = tmp + 1
			} else this._height = h
		}
	}
}
