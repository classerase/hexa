module {
	class TestParser {
		static function test(): Void {
			log.trace('TestParser begin', {fileName: 'TestParser.hx', lineNumber: 29, className: 'TestParser', methodName: 'test'})
			var _g: [String:String] = new StringMap< String >()
			if (__js__('__map_reserved')[''] != null) _g.setReserved('', '') else _g.h[('' as! Int)] = ''
			if (__js__('__map_reserved')['  '] != null) _g.setReserved('  ', '') else _g.h[('  ' as! Int)] = ''
			if (__js__('__map_reserved')['\t'] != null) _g.setReserved('\t', '') else _g.h[('\t' as! Int)] = ''
			if (__js__('__map_reserved')['   \t'] != null) _g.setReserved('   \t', '') else _g.h[('   \t' as! Int)] = ''
			if (__js__('__map_reserved')['\n'] != null) _g.setReserved('\n', '') else _g.h[('\n' as! Int)] = ''
			if (__js__('__map_reserved')['\n\n'] != null) _g.setReserved('\n\n', '') else _g.h[('\n\n' as! Int)] = ''
			if (__js__('__map_reserved')['\r\r\n\r\n\r\t'] != null) _g.setReserved('\r\r\n\r\n\r\t', '') else _g.h[('\r\r\n\r\n\r\t' as! Int)] = ''
			if (__js__('__map_reserved')['{}'] != null) _g.setReserved('{}', 'TBlock([])') else _g.h[('{}' as! Int)] = 'TBlock([])'
			if (__js__('__map_reserved')['{{}}'] != null) _g.setReserved('{{}}', 'TBlock([TBlock([])])') else _g.h[('{{}}' as! Int)] = 'TBlock([TBlock([])])'
			if (__js__('__map_reserved')['{ 0 0 0 }'] != null) _g.setReserved('{ 0 0 0 }', 'TBlock([TInt(0),TInt(0),TInt(0)])') else _g.h[('{ 0 0 0 }' as! Int)] = 'TBlock([TInt(0),TInt(0),TInt(0)])'
			if (__js__('__map_reserved')['0'] != null) _g.setReserved('0', 'TInt(0)') else _g.h[('0' as! Int)] = 'TInt(0)'
			if (__js__('__map_reserved')[' 0 '] != null) _g.setReserved(' 0 ', 'TInt(0)') else _g.h[(' 0 ' as! Int)] = 'TInt(0)'
			if (__js__('__map_reserved')['123'] != null) _g.setReserved('123', 'TInt(123)') else _g.h[('123' as! Int)] = 'TInt(123)'
			if (__js__('__map_reserved')['12'] != null) _g.setReserved('12', 'TInt(12)') else _g.h[('12' as! Int)] = 'TInt(12)'
			if (__js__('__map_reserved')['0x1'] != null) _g.setReserved('0x1', 'TInt(0x1)') else _g.h[('0x1' as! Int)] = 'TInt(0x1)'
			if (__js__('__map_reserved')['0x0'] != null) _g.setReserved('0x0', 'TInt(0x0)') else _g.h[('0x0' as! Int)] = 'TInt(0x0)'
			if (__js__('__map_reserved')['0xF'] != null) _g.setReserved('0xF', 'TInt(0xF)') else _g.h[('0xF' as! Int)] = 'TInt(0xF)'
			if (__js__('__map_reserved')['0xFA'] != null) _g.setReserved('0xFA', 'TInt(0xFA)') else _g.h[('0xFA' as! Int)] = 'TInt(0xFA)'
			if (__js__('__map_reserved')['0xFABCDEF'] != null) _g.setReserved('0xFABCDEF', 'TInt(0xFABCDEF)') else _g.h[('0xFABCDEF' as! Int)] = 'TInt(0xFABCDEF)'
			if (__js__('__map_reserved')['0.0'] != null) _g.setReserved('0.0', 'TFloat(0.0)') else _g.h[('0.0' as! Int)] = 'TFloat(0.0)'
			if (__js__('__map_reserved')['0.123'] != null) _g.setReserved('0.123', 'TFloat(0.123)') else _g.h[('0.123' as! Int)] = 'TFloat(0.123)'
			if (__js__('__map_reserved')['\'s\''] != null) _g.setReserved('\'s\'', 'TString(s)') else _g.h[('\'s\'' as! Int)] = 'TString(s)'
			if (__js__('__map_reserved')['"s"'] != null) _g.setReserved('"s"', 'TString(s)') else _g.h[('"s"' as! Int)] = 'TString(s)'
			TestParser.shouldAllEqual(_g)
			var _g1: [String:String] = new StringMap< String >()
			if (__js__('__map_reserved')['1 2 3 trace("Hello!", "World!") + 5 * 6 / 3'] != null) _g1.setReserved('1 2 3 trace("Hello!", "World!") + 5 * 6 / 3', 'TBlock([\n\t\t\t\tTInt(1),\n\t\t\t\tTInt(2),\n\t\t\t\tTInt(3),\n\t\t\t\tTBinop(+,\n\t\t\t\tTCall(TIdent(trace),[TString(Hello!),TString(World!)]),\n\t\t\t\tTBinop(*,TInt(5),TBinop(/,TInt(6),TInt(3))))])') else _g1.h[('1 2 3 trace("Hello!", "World!") + 5 * 6 / 3' as! Int)] = 'TBlock([\n\t\t\t\tTInt(1),\n\t\t\t\tTInt(2),\n\t\t\t\tTInt(3),\n\t\t\t\tTBinop(+,\n\t\t\t\tTCall(TIdent(trace),[TString(Hello!),TString(World!)]),\n\t\t\t\tTBinop(*,TInt(5),TBinop(/,TInt(6),TInt(3))))])'
			if (__js__('__map_reserved')['enum Test { Demo } hello World'] != null) _g1.setReserved('enum Test { Demo } hello World', 'TBlock([TEnum(Type(Test),[TIdent(Demo)]),\n\t\t\t\tTIdent(hello),\n\t\t\t\tTIdent(World)])') else _g1.h[('enum Test { Demo } hello World' as! Int)] = 'TBlock([TEnum(Type(Test),[TIdent(Demo)]),\n\t\t\t\tTIdent(hello),\n\t\t\t\tTIdent(World)])'
			TestParser.shouldAllEqual(_g1)
			var _g2: [String:String] = new StringMap< String >()
			if (__js__('__map_reserved')['"\\(v)"'] != null) _g2.setReserved('"\\(v)"', 'TParenthesis(TBinop(+,TString(),TBinop(+,TParenthesis(TIdent(v)),TString())))') else _g2.h[('"\\(v)"' as! Int)] = 'TParenthesis(TBinop(+,TString(),TBinop(+,TParenthesis(TIdent(v)),TString())))'
			if (__js__('__map_reserved')['"\\(((v)))"'] != null) _g2.setReserved('"\\(((v)))"', 'TParenthesis(TBinop(+,TString(),TBinop(+,TParenthesis(TParenthesis(TParenthesis(TIdent(v)))),TString())))') else _g2.h[('"\\(((v)))"' as! Int)] = 'TParenthesis(TBinop(+,TString(),TBinop(+,TParenthesis(TParenthesis(TParenthesis(TIdent(v)))),TString())))'
			if (__js__('__map_reserved')['"\\( v )"'] != null) _g2.setReserved('"\\( v )"', 'TParenthesis(TBinop(+,TString(),TBinop(+,TParenthesis(TIdent(v)),TString())))') else _g2.h[('"\\( v )"' as! Int)] = 'TParenthesis(TBinop(+,TString(),TBinop(+,TParenthesis(TIdent(v)),TString())))'
			if (__js__('__map_reserved')['"\\(V)\\(v)"'] != null) _g2.setReserved('"\\(V)\\(v)"', 'TParenthesis(TBinop(+,TString(),TBinop(+,TParenthesis(TIdent(V)),TBinop(+,TString(),TBinop(+,TParenthesis(TIdent(v)),TString())))))') else _g2.h[('"\\(V)\\(v)"' as! Int)] = 'TParenthesis(TBinop(+,TString(),TBinop(+,TParenthesis(TIdent(V)),TBinop(+,TString(),TBinop(+,TParenthesis(TIdent(v)),TString())))))'
			if (__js__('__map_reserved')['"\\(V)\\(v)s\\(v)"'] != null) _g2.setReserved('"\\(V)\\(v)s\\(v)"', 'TParenthesis(TBinop(+,TString(),TBinop(+,TParenthesis(TIdent(V)),TBinop(+,TString(),TBinop(+,TParenthesis(TIdent(v)),TBinop(+,TString(s),TBinop(+,TParenthesis(TIdent(v)),TString())))))))') else _g2.h[('"\\(V)\\(v)s\\(v)"' as! Int)] = 'TParenthesis(TBinop(+,TString(),TBinop(+,TParenthesis(TIdent(V)),TBinop(+,TString(),TBinop(+,TParenthesis(TIdent(v)),TBinop(+,TString(s),TBinop(+,TParenthesis(TIdent(v)),TString())))))))'
			if (__js__('__map_reserved')['"\\(V)s\\(v)s\\(v)"'] != null) _g2.setReserved('"\\(V)s\\(v)s\\(v)"', 'TParenthesis(TBinop(+,TString(),TBinop(+,TParenthesis(TIdent(V)),TBinop(+,TString(s),TBinop(+,TParenthesis(TIdent(v)),TBinop(+,TString(s),TBinop(+,TParenthesis(TIdent(v)),TString())))))))') else _g2.h[('"\\(V)s\\(v)s\\(v)"' as! Int)] = 'TParenthesis(TBinop(+,TString(),TBinop(+,TParenthesis(TIdent(V)),TBinop(+,TString(s),TBinop(+,TParenthesis(TIdent(v)),TBinop(+,TString(s),TBinop(+,TParenthesis(TIdent(v)),TString())))))))'
			TestParser.shouldAllEqual(_g2)
			var _g3: [String:String] = new StringMap< String >()
			if (__js__('__map_reserved')['"\\( v )"'] != null) _g3.setReserved('"\\( v )"', 'TParenthesis(TBinop(+,TString(),TBinop(+,TParenthesis(TIdent(v)),TString())))') else _g3.h[('"\\( v )"' as! Int)] = 'TParenthesis(TBinop(+,TString(),TBinop(+,TParenthesis(TIdent(v)),TString())))'
			if (__js__('__map_reserved')['"\\(V)\r\n\\(v)"'] != null) _g3.setReserved('"\\(V)\r\n\\(v)"', 'TParenthesis(TBinop(+,TString(),TBinop(+,TParenthesis(TIdent(V)),TBinop(+,TString(\r\n),TBinop(+,TParenthesis(TIdent(v)),TString())))))') else _g3.h[('"\\(V)\r\n\\(v)"' as! Int)] = 'TParenthesis(TBinop(+,TString(),TBinop(+,TParenthesis(TIdent(V)),TBinop(+,TString(\r\n),TBinop(+,TParenthesis(TIdent(v)),TString())))))'
			if (__js__('__map_reserved')['"\\(V) \\(v) \\(v)"'] != null) _g3.setReserved('"\\(V) \\(v) \\(v)"', 'TParenthesis(TBinop(+,TString(),TBinop(+,TParenthesis(TIdent(V)),TBinop(+,TString( ),TBinop(+,TParenthesis(TIdent(v)),TBinop(+,TString( ),TBinop(+,TParenthesis(TIdent(v)),TString())))))))') else _g3.h[('"\\(V) \\(v) \\(v)"' as! Int)] = 'TParenthesis(TBinop(+,TString(),TBinop(+,TParenthesis(TIdent(V)),TBinop(+,TString( ),TBinop(+,TParenthesis(TIdent(v)),TBinop(+,TString( ),TBinop(+,TParenthesis(TIdent(v)),TString())))))))'
			TestParser.shouldAllEqualWithoutTrim(_g3)
			var _g4: [String:String] = new StringMap< String >()
			if (__js__('__map_reserved')['using A'] != null) _g4.setReserved('using A', 'TUsing(A)') else _g4.h[('using A' as! Int)] = 'TUsing(A)'
			if (__js__('__map_reserved')['using A, B, C'] != null) _g4.setReserved('using A, B, C', 'TUsing(A,B,C)') else _g4.h[('using A, B, C' as! Int)] = 'TUsing(A,B,C)'
			TestParser.shouldAllEqual(_g4)
			var _g5: [String:String] = new StringMap< String >()
			if (__js__('__map_reserved')['module { }'] != null) _g5.setReserved('module { }', 'TModule(, [])') else _g5.h[('module { }' as! Int)] = 'TModule(, [])'
			if (__js__('__map_reserved')['code module { } code'] != null) _g5.setReserved('code module { } code', 'TBlock([TIdent(code),TModule(,[]),TIdent(code)])') else _g5.h[('code module { } code' as! Int)] = 'TBlock([TIdent(code),TModule(,[]),TIdent(code)])'
			if (__js__('__map_reserved')['code module { } module { } code'] != null) _g5.setReserved('code module { } module { } code', 'TBlock([TIdent(code),TModule(,[]),TModule(,[]),TIdent(code)])') else _g5.h[('code module { } module { } code' as! Int)] = 'TBlock([TIdent(code),TModule(,[]),TModule(,[]),TIdent(code)])'
			if (__js__('__map_reserved')['module a { }'] != null) _g5.setReserved('module a { }', 'TModule(a, [])') else _g5.h[('module a { }' as! Int)] = 'TModule(a, [])'
			if (__js__('__map_reserved')['module a.b { }'] != null) _g5.setReserved('module a.b { }', 'TModule(a.b, [])') else _g5.h[('module a.b { }' as! Int)] = 'TModule(a.b, [])'
			if (__js__('__map_reserved')['module a { module b { } }'] != null) _g5.setReserved('module a { module b { } }', 'TModule(a,[TModule(b,[])])') else _g5.h[('module a { module b { } }' as! Int)] = 'TModule(a,[TModule(b,[])])'
			if (__js__('__map_reserved')['module { class Inner {} }'] != null) _g5.setReserved('module { class Inner {} }', 'TModule(,[TClass(Type(Inner),null,[],[],false)])') else _g5.h[('module { class Inner {} }' as! Int)] = 'TModule(,[TClass(Type(Inner),null,[],[],false)])'
			if (__js__('__map_reserved')['module { class InnerA {} class InnerB {} }'] != null) _g5.setReserved('module { class InnerA {} class InnerB {} }', 'TModule(,[TClass(Type(InnerA),null,[],[],false),TClass(Type(InnerB),null,[],[],false)])') else _g5.h[('module { class InnerA {} class InnerB {} }' as! Int)] = 'TModule(,[TClass(Type(InnerA),null,[],[],false),TClass(Type(InnerB),null,[],[],false)])'
			if (__js__('__map_reserved')['module m { class C {} enum E {} function f() {} var v }'] != null) _g5.setReserved('module m { class C {} enum E {} function f() {} var v }', 'TModule(m,[TClass(Type(C),null,[],[],false),TEnum(Type(E),[]),TFunction(f,TBlock([]),[],null),TVar(v,null,null,false)])') else _g5.h[('module m { class C {} enum E {} function f() {} var v }' as! Int)] = 'TModule(m,[TClass(Type(C),null,[],[],false),TEnum(Type(E),[]),TFunction(f,TBlock([]),[],null),TVar(v,null,null,false)])'
			TestParser.shouldAllEqual(_g5)
			var _g6: [String:String] = new StringMap< String >()
			if (__js__('__map_reserved')['var a = new Array<A>()'] != null) _g6.setReserved('var a = new Array<A>()', 'TVar(a,null,TNew(ParamentricType(Array,[Type(A)]),[],[],[]),false)') else _g6.h[('var a = new Array<A>()' as! Int)] = 'TVar(a,null,TNew(ParamentricType(Array,[Type(A)]),[],[],[]),false)'
			if (__js__('__map_reserved')['a = Array<A>.staticField()'] != null) _g6.setReserved('a = Array<A>.staticField()', 'TBinop(=,TIdent(a),TCall(TDot(NodeTypeValue(ParamentricType(Array,[Type(A)])),staticField),[]))') else _g6.h[('a = Array<A>.staticField()' as! Int)] = 'TBinop(=,TIdent(a),TCall(TDot(NodeTypeValue(ParamentricType(Array,[Type(A)])),staticField),[]))'
			if (__js__('__map_reserved')['a = EnumTest.EnumField'] != null) _g6.setReserved('a = EnumTest.EnumField', 'TBinop(=,TIdent(a),TDot(TIdent(EnumTest),EnumField))') else _g6.h[('a = EnumTest.EnumField' as! Int)] = 'TBinop(=,TIdent(a),TDot(TIdent(EnumTest),EnumField))'
			if (__js__('__map_reserved')['a = EnumTest.EnumField(arg)'] != null) _g6.setReserved('a = EnumTest.EnumField(arg)', 'TBinop(=,TIdent(a),TCall(TDot(TIdent(EnumTest),EnumField),[TIdent(arg)]))') else _g6.h[('a = EnumTest.EnumField(arg)' as! Int)] = 'TBinop(=,TIdent(a),TCall(TDot(TIdent(EnumTest),EnumField),[TIdent(arg)]))'
			if (__js__('__map_reserved')['a = EnumTest.EnumField(argName: argValue, arg2, arg3: arg3)'] != null) _g6.setReserved('a = EnumTest.EnumField(argName: argValue, arg2, arg3: arg3)', 'TBinop(=,TIdent(a),TCall(TDot(TIdent(EnumTest),EnumField),[argName:TIdent(argValue),TIdent(arg2),arg3:TIdent(arg3)]))') else _g6.h[('a = EnumTest.EnumField(argName: argValue, arg2, arg3: arg3)' as! Int)] = 'TBinop(=,TIdent(a),TCall(TDot(TIdent(EnumTest),EnumField),[argName:TIdent(argValue),TIdent(arg2),arg3:TIdent(arg3)]))'
			if (__js__('__map_reserved')['a = EnumTest<A,B>.EnumField'] != null) _g6.setReserved('a = EnumTest<A,B>.EnumField', 'TBinop(=,TIdent(a),TDot(NodeTypeValue(ParamentricType(EnumTest,[Type(A),Type(B)])),EnumField))') else _g6.h[('a = EnumTest<A,B>.EnumField' as! Int)] = 'TBinop(=,TIdent(a),TDot(NodeTypeValue(ParamentricType(EnumTest,[Type(A),Type(B)])),EnumField))'
			if (__js__('__map_reserved')['var a = b as B, c = d as! B, e = f as? B'] != null) _g6.setReserved('var a = b as B, c = d as! B, e = f as? B', 'TVars([TVar(a,null,TAs(TIdent(b),<!--default-->,Type(B)),false),TVar(c,null,TAs(TIdent(d),!,Type(B)),false),TVar(e,null,TAs(TIdent(f),?,Type(B)),false)])') else _g6.h[('var a = b as B, c = d as! B, e = f as? B' as! Int)] = 'TVars([TVar(a,null,TAs(TIdent(b),<!--default-->,Type(B)),false),TVar(c,null,TAs(TIdent(d),!,Type(B)),false),TVar(e,null,TAs(TIdent(f),?,Type(B)),false)])'
			if (__js__('__map_reserved')['var a = b is B, c = d is B, e = f is B'] != null) _g6.setReserved('var a = b is B, c = d is B, e = f is B', 'TVars([TVar(a,null,TAs(TIdent(b),Type(B)),false),TVar(c,null,TAs(TIdent(d),Type(B)),false),TVar(e,null,TAs(TIdent(f),Type(B)),false)])') else _g6.h[('var a = b is B, c = d is B, e = f is B' as! Int)] = 'TVars([TVar(a,null,TAs(TIdent(b),Type(B)),false),TVar(c,null,TAs(TIdent(d),Type(B)),false),TVar(e,null,TAs(TIdent(f),Type(B)),false)])'
			TestParser.shouldAllEqual(_g6)
			var _g7: [String:String] = new StringMap< String >()
			if (__js__('__map_reserved')['var x:[Array<T>]'] != null) _g7.setReserved('var x:[Array<T>]', 'TVar(x,ParamentricType(Array,[ParamentricType(Array,[Type(T)])]),null,false)') else _g7.h[('var x:[Array<T>]' as! Int)] = 'TVar(x,ParamentricType(Array,[ParamentricType(Array,[Type(T)])]),null,false)'
			if (__js__('__map_reserved')['var x:[Map<K,V> : Array<T>]'] != null) _g7.setReserved('var x:[Map<K,V> : Array<T>]', 'TVar(x,ParamentricType(Map,[ParamentricType(Map,[Type(K),Type(V)]),ParamentricType(Array,[Type(T)])]),null,false)') else _g7.h[('var x:[Map<K,V> : Array<T>]' as! Int)] = 'TVar(x,ParamentricType(Map,[ParamentricType(Map,[Type(K),Type(V)]),ParamentricType(Array,[Type(T)])]),null,false)'
			if (__js__('__map_reserved')['var x:{:}, y:[], z:[:], w:()=>{:}'] != null) _g7.setReserved('var x:{:}, y:[], z:[:], w:()=>{:}', 'TVars([TVar(x,Object([],[]),null,false),TVar(y,ParamentricType(Array,[Object([],[])]),null,false),TVar(z,ParamentricType(Map,[Object([],[]),Object([],[])]),null,false),TVar(w,Function([],Object([],[])),null,false)])') else _g7.h[('var x:{:}, y:[], z:[:], w:()=>{:}' as! Int)] = 'TVars([TVar(x,Object([],[]),null,false),TVar(y,ParamentricType(Array,[Object([],[])]),null,false),TVar(z,ParamentricType(Map,[Object([],[]),Object([],[])]),null,false),TVar(w,Function([],Object([],[])),null,false)])'
			if (__js__('__map_reserved')['let x:()=>()=>()=>()=>Void'] != null) _g7.setReserved('let x:()=>()=>()=>()=>Void', 'TVar(x,Function([],Function([],Function([],Function([],Type(Void))))),null,true)') else _g7.h[('let x:()=>()=>()=>()=>Void' as! Int)] = 'TVar(x,Function([],Function([],Function([],Function([],Type(Void))))),null,true)'
			TestParser.shouldAllEqual(_g7)
			var _g8: [String:String] = new StringMap< String >()
			if (__js__('__map_reserved')['enum A {}'] != null) _g8.setReserved('enum A {}', 'TEnum(Type(A),[])') else _g8.h[('enum A {}' as! Int)] = 'TEnum(Type(A),[])'
			if (__js__('__map_reserved')['enum A { A B C }'] != null) _g8.setReserved('enum A { A B C }', 'TEnum(Type(A),[TIdent(A),TIdent(B),TIdent(C)])') else _g8.h[('enum A { A B C }' as! Int)] = 'TEnum(Type(A),[TIdent(A),TIdent(B),TIdent(C)])'
			if (__js__('__map_reserved')['enum A { A(v:Int) B C(v:[K:V], a:Array<T>) }'] != null) _g8.setReserved('enum A { A(v:Int) B C(v:[K:V], a:Array<T>) }', 'TEnum(Type(A),[TCall(TIdent(A),[v:TIdent(Int)]),TIdent(B),TCall(TIdent(C),[v:TMap([TIdent(K)],[TIdent(V)]),a:NodeTypeValue(ParamentricType(Array,[Type(T)]))])])') else _g8.h[('enum A { A(v:Int) B C(v:[K:V], a:Array<T>) }' as! Int)] = 'TEnum(Type(A),[TCall(TIdent(A),[v:TIdent(Int)]),TIdent(B),TCall(TIdent(C),[v:TMap([TIdent(K)],[TIdent(V)]),a:NodeTypeValue(ParamentricType(Array,[Type(T)]))])])'
			TestParser.shouldAllEqual(_g8)
			var _g9: [String:String] = new StringMap< String >()
			if (__js__('__map_reserved')['class A {} var a = new A { } ()'] != null) _g9.setReserved('class A {} var a = new A { } ()', 'TBlock([TClass(Type(A),null,[],[],false),TVar(a,null,TNew(Type(A),[],[],[]),false)])') else _g9.h[('class A {} var a = new A { } ()' as! Int)] = 'TBlock([TClass(Type(A),null,[],[],false),TVar(a,null,TNew(Type(A),[],[],[]),false)])'
			if (__js__('__map_reserved')['class A { var field: String } var a = new A { field: "Value" } ()'] != null) _g9.setReserved('class A { var field: String } var a = new A { field: "Value" } ()', 'TBlock([TClass(Type(A),null,[],[TVar(field,Type(String),null,false)],false),TVar(a,null,TNew(Type(A),[],[field],[TString(Value)]),false)])') else _g9.h[('class A { var field: String } var a = new A { field: "Value" } ()' as! Int)] = 'TBlock([TClass(Type(A),null,[],[TVar(field,Type(String),null,false)],false),TVar(a,null,TNew(Type(A),[],[field],[TString(Value)]),false)])'
			if (__js__('__map_reserved')['class A { var field: String var otherfield: Int } var a = new A { field: "Value", otherfield: 25 } ()'] != null) _g9.setReserved('class A { var field: String var otherfield: Int } var a = new A { field: "Value", otherfield: 25 } ()', 'TBlock([TClass(Type(A),null,[],[TVar(field,Type(String),null,false),TVar(otherfield,Type(Int),null,false)],false),TVar(a,null,TNew(Type(A),[],[field,otherfield],[TString(Value),TInt(25)]),false)])') else _g9.h[('class A { var field: String var otherfield: Int } var a = new A { field: "Value", otherfield: 25 } ()' as! Int)] = 'TBlock([TClass(Type(A),null,[],[TVar(field,Type(String),null,false),TVar(otherfield,Type(Int),null,false)],false),TVar(a,null,TNew(Type(A),[],[field,otherfield],[TString(Value),TInt(25)]),false)])'
			TestParser.shouldAllEqual(_g9)
			var _g10: [String:String] = new StringMap< String >()
			if (__js__('__map_reserved')['declare var a:T'] != null) _g10.setReserved('declare var a:T', 'TDeclare(a,TVar(a,Type(T),null,false))') else _g10.h[('declare var a:T' as! Int)] = 'TDeclare(a,TVar(a,Type(T),null,false))'
			if (__js__('__map_reserved')['declare let a:T'] != null) _g10.setReserved('declare let a:T', 'TDeclare(a,TVar(a,Type(T),null,true))') else _g10.h[('declare let a:T' as! Int)] = 'TDeclare(a,TVar(a,Type(T),null,true))'
			if (__js__('__map_reserved')['declare function name()'] != null) _g10.setReserved('declare function name()', 'TDeclare(name,TFunction(name,null,[],null))') else _g10.h[('declare function name()' as! Int)] = 'TDeclare(name,TFunction(name,null,[],null))'
			if (__js__('__map_reserved')['declare function name() hi()'] != null) _g10.setReserved('declare function name() hi()', 'TBlock([TDeclare(name,TFunction(name,null,[],null)),TCall(TIdent(hi),[])])') else _g10.h[('declare function name() hi()' as! Int)] = 'TBlock([TDeclare(name,TFunction(name,null,[],null)),TCall(TIdent(hi),[])])'
			if (__js__('__map_reserved')['declare function name() {}'] != null) _g10.setReserved('declare function name() {}', 'TBlock([TDeclare(name,TFunction(name,null,[],null)),TBlock([])])') else _g10.h[('declare function name() {}' as! Int)] = 'TBlock([TDeclare(name,TFunction(name,null,[],null)),TBlock([])])'
			TestParser.shouldAllEqual(_g10)
			TestParser.shouldAllError({['declare var a', 'declare var a = value', 'declare var a:T = value', 'declare function()', 'declare var a, b, c', 'declare anything']})
			log.trace('TestParser done', {fileName: 'TestParser.hx', lineNumber: 210, className: 'TestParser', methodName: 'test'})
		}

		private static function shouldEqual(input: String, test: String): Void {
			test = TestParser.deepTrim(test)
			TestParser.shouldEqualWithoutTrim(input, test)
		}

		private static function shouldEqualWithoutTrim(input: String, test: String): Void {
			log.trace('Testing: ' + input, {fileName: 'TestParser.hx', lineNumber: 225, className: 'TestParser', methodName: 'shouldEqualWithoutTrim'})
			var lexe: lexer.Tokens = Lexer.tokenize(nodejs.Buffer.from(input), 'TEST')
			var parser: Parser = new Parser(lexe)
			var res: String = TestParser.stringify(parser.node)
			if (test != res) throw new HaxeError('TestParser test fail: `' + input + '` != `' + test + '`\nGot: `' + res + '`')
		}

		private static function shouldAllEqual(map: [String:String]): Void {
			var input: stdtypes.Iterator< String > = map.keys()
			while (input.hasNext()) {
				var input1: String = input.next()
				var test: String? = ((if (__js__('__map_reserved')[input1] != null) map.getReserved(input1) else map.h[(input1 as! Int)] as! String?) as! String?)
				TestParser.shouldEqual(input1, test)
			}
		}

		private static function shouldAllEqualWithoutTrim(map: [String:String]): Void {
			var input: stdtypes.Iterator< String > = map.keys()
			while (input.hasNext()) {
				var input1: String = input.next()
				var test: String? = ((if (__js__('__map_reserved')[input1] != null) map.getReserved(input1) else map.h[(input1 as! Int)] as! String?) as! String?)
				TestParser.shouldEqualWithoutTrim(input1, test)
			}
		}

		private static function shouldError(input: String): Void {
			try {
				var lexe: lexer.Tokens = Lexer.tokenize(nodejs.Buffer.from(input), 'TEST')
				var parser: Parser = new Parser(lexe)
			} catch (e:Any) {
				return {}
			}
			throw new HaxeError('TestParser test fail: `' + input + '` did not throw exception.')
		}

		private static function shouldAllError(input: [String]): Void {
			var _g: Int = 0
			while (_g < input.length) {
				var str: String = input[_g]
				_g++
				TestParser.shouldError(str)
			}
		}

		private static function deepTrim(s: String): String {
			return StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(s, '\n', ''), '\r', ''), '\t', ''), ' ', '')
		}

		private static function stringify(node: data.Node): String {
			if (node == null) return '' else switch (node.index) {
				case 0: {
					let data.Node.TString(s) = node
					return 'TString(' + s + ')'
				}

				case 1: {
					let data.Node.TIdent(s1) = node
					return 'TIdent(' + s1 + ')'
				}

				case 2: {
					let data.Node.TBool(b) = node
					return 'TBool(' + (if (b == null) 'null' else '' + b) + ')'
				}

				case 3: return 'TThis'

				case 4: return 'TSuper'

				case 5: {
					let data.Node.TInt(s2) = node
					return 'TInt(' + s2 + ')'
				}

				case 6: {
					let data.Node.TFloat(s3) = node
					return 'TFloat(' + s3 + ')'
				}

				case 7: return 'TNull'

				case 8: {
					let data.Node.TBinop(_, _, b1) = node
					let data.Node.TBinop(_, a, _) = node
					let data.Node.TBinop(op, _, _) = node
					return 'TBinop(' + token.Token_Impl_.stringify(op) + ',' + TestParser.stringify(a) + ',' + TestParser.stringify(b1) + ')'
				}

				case 9: {
					let data.Node.TBlock(els) = node
					return 'TBlock(' + TestParser.stringifyNodeArray(els) + ')'
				}

				case 10: {
					let data.Node.TCall(_, _, argNames) = node
					let data.Node.TCall(_, el, _) = node
					let data.Node.TCall(e, _, _) = node
					var res: String = 'TCall(' + TestParser.stringify(e) + ',['
					{
						var _g1: Int = 0
						var _g: Int = el.length
						while (_g1 < _g) {
							var i: Int = _g1++
							res += if (argNames[i] == null) '' else argNames[i] + ':'
							res += Std.string(el[i]) + (if (i != el.length - 1) ',' else '')
						}
					}
					return res + '])'
				}

				case 12: {
					let data.Node.TParenthesis(e1) = node
					return 'TParenthesis(' + TestParser.stringify(e1) + ')'
				}

				case 13: {
					let data.Node.TReturn(e2) = node
					return 'TReturn(' + TestParser.stringify(e2) + ')'
				}

				case 14: {
					let data.Node.TThrow(e3) = node
					return 'TThrow(' + TestParser.stringify(e3) + ')'
				}

				case 15: return 'TBreak'

				case 16: return 'TContinue'

				case 19: {
					let data.Node.TFunction(_, _, _, rettype) = node
					let data.Node.TFunction(_, _, vars, _) = node
					let data.Node.TFunction(_, expr, _, _) = node
					let data.Node.TFunction(name, _, _, _) = node
					return 'TFunction(' + name + ',' + (if (expr == null) 'null' else TestParser.stringify(expr)) + ',' + TestParser.stringifyNodeArray(vars) + ',' + (if (rettype != null) TestParser.stringifyType(rettype) else 'null') + ')'
				}

				case 20: {
					let data.Node.TVar(_, _, _, const) = node
					let data.Node.TVar(_, _, expr1, _) = node
					let data.Node.TVar(_, t, _, _) = node
					let data.Node.TVar(name1, _, _, _) = node
					return 'TVar(' + name1 + ',' + (if (t != null) TestParser.stringifyType(t) else 'null') + ',' + (if (expr1 != null) TestParser.stringify(expr1) else 'null') + (',' + (if (const == null) 'null' else '' + const) + ')')
				}

				case 21: {
					let data.Node.TVars(vars1) = node
					return 'TVars(' + TestParser.stringifyNodeArray(vars1) + ')'
				}

				case 22: {
					let data.Node.TClass(_, _, _, _, external) = node
					let data.Node.TClass(_, _, _, fields, _) = node
					let data.Node.TClass(_, _, implement, _, _) = node
					let data.Node.TClass(_, extend, _, _, _) = node
					let data.Node.TClass(kind, _, _, _, _) = node
					var res1: String = 'TClass(' + TestParser.stringifyType(kind) + ','
					res1 += if (extend != null) TestParser.stringifyType(extend) else 'null' + ','
					res1 += TestParser.stringifyNodeTypeArray(implement) + ','
					res1 += TestParser.stringifyNodeArray(fields) + ','
					res1 += (if (external == null) 'null' else '' + external) + ')'
					return res1
				}

				case 24: {
					let data.Node.TDot(_, r) = node
					let data.Node.TDot(l, _) = node
					return 'TDot(' + TestParser.stringify(l) + ',' + r + ')'
				}

				case 25: {
					let data.Node.TNew(_, _, _, values) = node
					let data.Node.TNew(_, _, names, _) = node
					let data.Node.TNew(_, args, _, _) = node
					let data.Node.TNew(t1, _, _, _) = node
					return 'TNew(' + TestParser.stringifyType(t1) + ',' + TestParser.stringifyNodeArray(args) + ',[' + names.join(',') + '],' + TestParser.stringifyNodeArray(values) + ')'
				}

				case 30: {
					let data.Node.TModule(_, els1) = node
					let data.Node.TModule(paths, _) = node
					return 'TModule(' + paths.join('.') + ',' + TestParser.stringifyNodeArray(els1) + ')'
				}

				case 32: {
					let data.Node.TEnum(_, els2) = node
					let data.Node.TEnum(t2, _) = node
					return 'TEnum(' + Std.string(t2) + ',' + TestParser.stringifyNodeArray(els2) + ')'
				}

				case 35: {
					let data.Node.TDeclare(_, expr2) = node
					let data.Node.TDeclare(name2, _) = node
					return 'TDeclare(' + name2 + ',' + TestParser.stringify(expr2) + ')'
				}

				case 36: {
					let data.Node.TUsing(a1) = node
					return 'TUsing(' + a1.join(',') + ')'
				}

				case 37: {
					let data.Node.TIs(_, type1) = node
					let data.Node.TIs(expr3, _) = node
					return 'TAs(' + TestParser.stringify(expr3) + ',' + TestParser.stringifyType(type1) + ')'
				}

				case 38: {
					let data.Node.TAs(_, _, type2) = node
					let data.Node.TAs(_, kind, _) = node
					let data.Node.TAs(expr4, _, _) = node
					return 'TAs(' + TestParser.stringify(expr4) + ',' + token.Token_Impl_.stringify(kind) + ',' + TestParser.stringifyType(type2) + ')'
				}

				case 43: {
					let data.Node.NodeTypeValue(type3) = node
					return 'NodeTypeValue(' + TestParser.stringifyType(type3) + ')'
				}
				
				case _: {
					var e4: data.Node = node
					return '<!--' + Std.string(e4) + '-->'
				}
			}
		}

		private static function stringifyNodeArray(arr: [data.Node]): String {
			var _g: [String] = []
			{
				var _g1: Int = 0
				while (_g1 < arr.length) {
					var e: data.Node = arr[_g1]
					_g1++
					_g.push(TestParser.stringify(e))
				}
			}
			return '[' + _g.join(',') + ']'
		}

		private static function stringifyNodeTypeArray(arr: [data.NodeType]): String {
			var _g: [String] = []
			{
				var _g1: Int = 0
				while (_g1 < arr.length) {
					var e: data.NodeType = arr[_g1]
					_g1++
					_g.push(TestParser.stringifyType(e))
				}
			}
			return '[' + _g.join(',') + ']'
		}

		private static function stringifyType(node: data.NodeType): String {
			switch (node.index) {
				case 0: {
					let data.NodeType.Type(s) = node
					return 'Type(' + s + ')'
				}

				case 1: {
					let data.NodeType.ParamentricType(_, params) = node
					let data.NodeType.ParamentricType(name, _) = node
					return 'ParamentricType(' + name + ',[' + params.join(',') + '])'
				}

				case 2: {
					let data.NodeType.Function(_, rettype) = node
					let data.NodeType.Function(args, _) = node
					var _g: [String] = []
					{
						var _g1: Int = 0
						while (_g1 < args.length) {
							var e: data.NodeType = args[_g1]
							_g1++
							_g.push(TestParser.stringifyType(e))
						}
					}
					return 'Function([' + _g.join(',') + '],' + TestParser.stringifyType(rettype) + ')'
				}

				case 4: {
					let data.NodeType.Object(_, types) = node
					let data.NodeType.Object(names, _) = node
					var tmp: String = 'Object([' + names.join(',') + '],['
					var _g2: [String] = []
					{
						var _g11: Int = 0
						while (_g11 < types.length) {
							var e1: data.NodeType = types[_g11]
							_g11++
							_g2.push(TestParser.stringifyType(e1))
						}
					}
					return tmp + _g2.join(',') + '])'
				}
				
				case _: {
					var e2: data.NodeType = node
					return '<!--' + Std.string(e2) + '-->'
				}
			}
		}

	}
}
