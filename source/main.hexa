// The Hexa Compiler
// Copyright (C) 2018-2019  Oleg Petrenko
// Copyright (C) 2018  Bogdan Danylchenko
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

module {
	// Compiler version
	let version = "0.0.1"

	// Contents of hexa.json
	declare class Package {
		let name: String
		let output: String
		let version: String
		let description: String
		let author: String
		let license: String
		let target: Target
		let addLicenseNoticeToOutput: Bool
		let randomSeed: Int?
		let files: [String]
	}

	enum Generator: String {
		JavaScript = "JavaScript"
		C = "C"
		CSharp = "C#"
		Haxe = "Haxe"
		Hexa = "Hexa"
	}

	declare class Target {
		var generator: Generator
		let instance: { generatePackageJson: Bool }
	}
}

class Main {
	/// Based on https://stackoverflow.com/questions/3430939/node-js-readsync-from-stdin
	static function question(query: String): String {
		Process.stdout.write(query)
		var bufsize = 256
		var buf = new Buffer(bufsize)
		var bytesRead = 0
		try {
			bytesRead = Fs.readSync(Process.stdin.fd, buf, 0, bufsize)
		} catch (e: Any) {{
			let e: { code: String } = e
			if (e.code == 'EAGAIN') return 'ERROR: interactive stdin input not supported.'
			if (e.code == 'EOF') return ''
			throw e // unexpected exception
		}}
		if (bytesRead == 0) {
			// No more stdin input available.
			// OS X 10.8.3: regardless of input method, this is how the end
			// of input is signaled.
			// Windows 7: this is how the end of input is signaled for
			// *interactive* stdin input.
			return ''
		}
		// Process the chunk read.
		let answer = buf.toString('utf8', 0, bytesRead).trim()
		return answer
	}

	// Asks a couple of questions and creates hexa.json
	function init() {
		var currentDirTmp = Process.argv[1].split(Path.sep)
		if (Fs.existsSync("hexa.json")) {
			Process.stdout.write("Hexa package 'hexa.json' already exists here")
			Process.exit(1)
		}

		var packageFileName = currentDirTmp.splice(0, -1).join(Path.sep) + Path.sep + "hexa.json"
		var currentDir = currentDirTmp[currentDirTmp.length - 2]
		var name = question('Enter package name (\(currentDir)): ')
		if (name == "") name = currentDir

		var version = question("Enter package version (1.0.0): ")
		if (version == "") version = "1.0.0"

		var description = question("Enter package description: ")

		var main = question("Enter main file (main.hexa): ")
		if (main == "") main = "main.hexa"

		let target: Target = { generator: Generator.JavaScript, instance: { generatePackageJson: false } }
		var output = name
		let generatorstr = question("Enter generator type (JavaScript):\n1. JavaScript\n2. C\n3. Haxe\n")
		if (generatorstr.toUpperCase() == "C" || generatorstr == "2") target.generator = Generator.C
		else if (generatorstr.toUpperCase() == "HAXE" || generatorstr == "3") target.generator = Generator.Haxe
		else output += '.js'

		while (!(main.endsWith(".hexa"))) {
			Process.stdout.write("Wrong file name. Must end with '.hexa'.\n")
			main = question("Enter main file (main.hexa): ")
		}

		let author = question("Enter package author name: ")
		let license = question("Enter license: ")

		let pack: Package = {
			name: name, version: version, description: description,
			output: output,
			author: author, license: license, target: target, files: [main]
		}

		let extras = []

		var addGit = false
		if (Fs.existsSync('.git'))
			if (!Fs.existsSync('.gitignore') || !Fs.existsSync('.gitattributes'))
				if (['y','yes',''].includes(question('Create additional git files? (.gitignore, .gitattributes)').toLowerCase().trim())) {
					if (!Fs.existsSync('.gitignore')) extras.push('.gitignore')
					if (!Fs.existsSync('.gitattributes')) extras.push('.gitattributes')
					addGit = true
				}

		let addMain = Fs.existsSync(main) == false
		if (addMain) extras.push(main)

		let packageStr = JSON.stringify(pack, null, "\t").split('\r\n').join('\n').split('\n').join('\r\n')
		let extrasStr = extras.length > 0? '\nAnd \'' + extras.join('\', \'') + '\'' : ''

		let answ = question('About to write to: \(packageFileName):\n\(packageStr)\(extrasStr)\nIs this ok? (yes)')
		if (answ != "") Process.exit(1) // Handle yes

		Fs.writeFileSync("hexa.json", packageStr)

		if (addMain, !Fs.existsSync(main)) Fs.writeFileSync(main, 'console.log("Thank you for choosing Hexa")')

		if (addGit, !Fs.existsSync('.gitattributes')) Fs.writeFileSync('.gitattributes', [
			'# Auto detect text files and perform LF normalization',
			'* text=auto',
			''
		].join('\r\n'))

		if (addGit, !Fs.existsSync('.gitignore')) Fs.writeFileSync('.gitignore', [
			'# Mac & Win',
			'*~',
			'._*',
			'*DS_Store*',
			'.DS_Store',
			'.DS_Store?',
			'.Spotlight-V100',
			'.Trashes',
			'ehthumbs.db',
			'Thumbs.db',
			'*Thumbs.db',
			'__MACOSX',
			'',
			'# Custom',
			'*.map',
			output, // Re-generated on each compilation
			'node_modules',
			''
		].join('\r\n'))

		Process.stdout.write("Hexa package initialized!")
	}

	var lines = 0

	// Parses a file
	function processFile(target: String): Node {
		let content = Fs.readFileSync(target)
		let tokens = Lexer.tokenize(content, target)
		if (tokens.length > 0)
			lines += tokens.line[tokens.length - 1]
		let parsed = Parser.parseNodes(tokens)
		return parsed
	}

	// Read-eval-print loop, starts if hexa called without arguments
	function repl() {
		// Load standard library
		let js = processFile(__dirname + '/library/js/js.hexa')
		let nodejs = processFile(__dirname + '/library/nodejs/nodejs.hexa')
		// REPL
		let lines = []
		var lines = []
		while (true) {
			var line = question("> ")
			if (line.length == 0) continue
			lines.push(line)
			lines = [line] // Do not remember previous commands yet
			try {
				var code = '"use strict"\r\n'
				try {
					let content = lines.join('\n')
					let tokens = Lexer.tokenize(Buffer.from(content), "REPL")
					let parser = Parser.toNode(Parser.parseNodes(tokens))
					var collected = Node.TBlock([js, nodejs, parser])
					if (parser == null) continue
					//Typer.fillScopes(collected)
					//code += GenJs.stringifyProject(Normalizer.normalize(collected, GenJs.reserved))
				} catch (e: Any) {
					lines.pop()
					console.error('\x1b[31mCompilation Error: ' + e, '\x1b[0m')
					continue
				}
				let result = eval(code)
				if (result == null) console.log('\x1b[90m' + result, '\x1b[0m')
				else if (result == true) console.log('\x1b[33m' + result, '\x1b[0m')
				else if (result == false) console.log('\x1b[33m' + result, '\x1b[0m')
				else console.log(result)
			} catch (e: Any) {
				console.error("Error: " + e)
			}
		}
	}

	// Parses all files, shows errors and stops if any
	function processFiles(targets: [String]): [[Node]] {
		var res: [[Node]] = []
		for (target in targets) {
			if (!Fs.existsSync(target)) {
				console.log('No such source file on disk `\(target)`')
				continue
			}

			try {
				res.push(processFile(target))
			} catch (e: Any) {
				console.log(e.toString())
			}
		}
		if (targets.length != res.length) {
			console.log('[Stopped on errors]')
			Process.exit(1)
		}
		return res
	}

	// Loads hexa.json
	function loadPackage(filename): Package {
		let pack = JSON.parse(Fs.readFileSync(Path.resolve(filename)).toString('utf8'))
		function incorrect(what: String) {
			Process.stdout.write("Incorrect package file! Field `\(what)` does not exists\n")
			Process.exit(1)
		}
		if (pack.target == null) incorrect('target')
		if (pack.output == null) incorrect('output')
		if (pack.name == null) incorrect('name')
		Project.defines = pack.define ?? {:}

		// Add standard library
		if (pack.files == null) pack.files = []

		// Defaults
		if (pack.addLicenseNoticeToOutput == null) pack.addLicenseNoticeToOutput = true

		switch (pack.target.generator) {
			case Generator.JavaScript:
				Project.defines.js = Project.defines.js ?? true
				if (pack.noLib == true) {
				} else {
					pack.files.unshift(Path.resolve(__dirname + '/library/js/js.hexa'))
					pack.files.unshift(Path.resolve(__dirname + '/library/nodejs/nodejs.hexa'))
					pack.files.unshift(Path.resolve(__dirname + '/library/browser/html.hexa'))
				}
			case Generator.C:
				Project.defines.c = Project.defines.c ?? true
				Project.defines.native = Project.defines.native ?? true
				if (pack.noLib == true) {
				} else {
					pack.files.unshift(Path.resolve(__dirname + '/library/c/c.hexa'))
				}
			case Generator.Haxe:
				Project.defines.haxe = Project.defines.haxe ?? true
			case Generator.Hexa:
				Project.defines.hexa = Project.defines.hexa ?? true
				if (pack.noLib == true) {
				} else {
					pack.files.unshift(Path.resolve(__dirname + '/library/js/js.hexa'))
					pack.files.unshift(Path.resolve(__dirname + '/library/nodejs/nodejs.hexa'))
				}
			case Generator.CSharp:
				Project.defines.cs = Project.defines.cs ?? true
				pack.files.unshift(Path.resolve(__dirname + '/library/cs/cs.hexa'))
		}
		return pack
	}

	/// Entry
	new() {
		// Debug information

		/// Used to measure compiler performance and to show a success message
		let begin = Date.now()

		// Initialize compiler
		Lexer.init()

		// Exit before self-test
		if (Process.argv[2] == "--syntax-linter") {
			if (Process.argv.length < 4) {
				console.log("Usage: `hexa --syntax-linter file.hexa`")
			} else {
				let file = Process.argv[3]
				try {
					let content = Fs.readFileSync(file)
					try {
						let tokens = Lexer.tokenize(content, file)
						try {
							let parser = Parser.parseNodes(tokens)
						} catch (e: Any) console.log("\(e)")
					} catch (e: Any) console.log("\(e)")
				} catch (e: Any) console.log("ERROR: Unable to open file \(file)")
			}
			Process.exit(0)
		}

		// Self-test
		#if debug
			#if times
				let beginTests = Date.now()
			#end
			TestLexer.test()
			TestParser.test()
			TestTyper.test()
			#if times
				console.log("[Tests finished in \(Date.now() - beginTests) ms]")
			#end
		#end

		function ignoreArguments(from: Int)	{
			if (from == Process.argv.length) { return }
			let args = []
			let count: Int = Process.argv.length - from
			var i = 0
			while (i < count)
				args.push(Process.argv[i++ + from])
			console.log('Arguments `\(args)` ignored')
		}

		if (Process.argv[2] == "--version") {
			console.log('Hexa \(version) on node.js ' + Process.versions.node)
			ignoreArguments(3)
			Process.exit(0)
		}
		// Usage examples
		else if (Process.argv[2] == "--help") {
			console.log("Usage: `hexa project.json` or `hexa init`")
			ignoreArguments(3)
			Process.exit(0)
		}
		else if (Process.argv[2] == null) {
			repl()
			Process.exit(0)
		}
		else if (Process.argv[2] == "init") {
			init()
			ignoreArguments(3)
			Process.exit(0)
		}

		// Get inputs
		var currentFile = Path.resolve(Process.argv[2])
		var currentParsedFile: ParsedPath = Path.parse(currentFile)
		var input: Package? = null
		var packageFolder: String = currentParsedFile.dir

		// Build the selected project
		if (currentParsedFile.ext == ".json") {
			input = loadPackage(currentFile)
			ignoreArguments(3)
			console.log("[Building \(input.name)]")
		}
		// Search for project in the selected folder
		else if (Fs.existsSync(currentFile), Fs.lstatSync(currentFile).isDirectory()) {
			ignoreArguments(3)
			input = loadPackage(currentFile + Path.sep + "hexa.json")
			packageFolder = currentFile
		}
		// Evaluate file directly
		else if (currentParsedFile.ext == ".hexa") {
			//let code = '"use strict"\r\n' + GenJs.stringifyProject(Normalizer.normalize(Node.TBlock([processFile(currentFile)]), GenJs.reserved))
			//eval(code)
			return
		}
		else {
			console.error('Unknown command: \(Process.argv[2])')
			console.error('Try --help')
			Process.exit(1)
			return
		}

		// Perform compilation
		#if times
			let beginParsing = Date.now()
		#end

		var files: [[Node]] = []
		if (input.files != null) {
			let fileList = input.files.map(function(file) {
				// Avoid global paths
				if (file.startsWith('/') || file.charAt(1) == ':') return Path.resolve(file)
				return Path.resolve(packageFolder + Path.sep + file)
			})
			files = processFiles(fileList)
		}

		#if times
			console.log("[Parsing finished in \(Date.now() - beginParsing) ms]")
			let beginTyper = Date.now()
		#end

		let typer = new Typer()
		try {
			typer.fillFiles(files)
		} catch (e: Any) {
			console.log(e.toString())
			Process.exit(1)
		}

		#if times
			console.log("[Typer finished in \(Date.now() - beginTyper) ms]")
		#end

		let normalizer = new Normalizer()

		let generators = [:]

		function registerTarget(name: String, generator) {
			if (let generator = generators.get(name))
				console.log('Note: generator `\(name)` was overridden')
			generators.set(name, generator)
		}

		registerTarget('JavaScript', GenJs.spawn)
		registerTarget('Haxe', GenHaxe.spawn)
		registerTarget('Hexa', GenHexa.spawn)
		registerTarget('C', GenC.spawn)

		// Perform code generation
		if (let generatorName = input.target.generator) {
			if (let generatorSpawner = generators.get(generatorName)) {
				let generator = generatorSpawner()
				let target = packageFolder + Path.sep + Path.parse(input.output).name + generator.extension
				normalizer.keywords = generator.reserved
				normalizer.collected = files
				normalizer.nativeEnums = generator.nativeEnums
				normalizer.reservedGlobals = generator.reservedGlobals ?? normalizer.reservedGlobals
				normalizer.package = input
				if (let randomSeed = input.randomSeed) normalizer.id = randomSeed
				if (let globalAccessor = generator.globalAccessor) normalizer.globalAccessor = globalAccessor
				normalizer.typer = typer

				#if times
					let beginNormalizer = Date.now()
				#end

				let normal = normalizer.normalize()

				#if times
					console.log("[Normalizer finished in \(Date.now() - beginNormalizer) ms]")
					let beginGenerator = Date.now()
				#end

				// Print hints out
				for (hint in Project.hints) {
					console.log(hint.toString())
				}

				let outs = generator.perform(normal)

				#if times
					console.log("[Generator finished in \(Date.now() - beginGenerator) ms]")
				#end

				Fs.writeFileSync(target, outs)
			} else {
				console.log("Generator for `\(generatorName)` is not registered.")
				Process.exit(1)
			}
		} else {
			console.log("Generator is not defined or unknown. Is there `target.generator` field in `hexa.json`?")
			Process.exit(1)
		}

		let delta = Date.now() - begin
		let lps = Math.round(lines / (delta/1000))
		console.log("[Finished in \(delta) ms, \(lines) lines, \(lps) lines per second]")
		Process.stdout.once('drain', function () { Process.exit(0) })
		Process.stdout.write('')
	}
}

// Entry point
new Main()
