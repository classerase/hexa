// The Hexa Compiler
// Copyright (C) 2019  Oleg Petrenko
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

module {
	// Generates C++ with at least C++11 standard
	class GenCxx {
		static function spawn() {
			return new GenCxx()
		}
		new () {}
		function perform(normalizer): String {
			project = normalizer
			return stringify()
		}

		let globalAccessor = ''
		var project: NiceProject
		var declarationsOfFunctions: [String] = []
		var declarationsOfOpaqueTypes: [String] = []
		var declarationsOfFullTypes: [String] = []
		var declarationsOfStrings: [String] = []

		function stringify() {
			// Contains forward declarations
			let header = ['// Generated by Hexa \(version) https://hexalang.github.io']
			if (project.package.addLicenseNoticeToOutput) {
				// rename addLicenseNoticeToOutput
				header.push('// \(project.package.name)')
				header.push('// \(project.package.name) \(project.package.version)')
				header.push('// LICENSE \(project.package.license)')
			} else {
				header.push('// The generated code is subject to the original license')
			}
			header.push('#include <stdint.h>')
			header.push('#include <stdarg.h>')
			header.push('#include <stdio.h>') // printf
			header.push('#include <stdlib.h>') // malloc
			header.push('extern "C" {')
			header.push('class ARC_ { public: uint32_t rc_; };')


			let out: [String] = []
			let forward: [String] = []
			let types: [String] = []

			// Types
			for (e in project.enumsSimple) {
				// No need to output simple enum values
				if (e.staticVars.length + e.staticMethods.length == 0) continue
				forward.push('class ' + e.name + '_;')
				types.push('class ' + e.name + '_ {\n\tpublic:')
				for (v in e.staticMethods) switch (v) {
					case NiceStatement.Function(name, expr, args, defaults):
						types.push('\n\tstatic void ' + name + '_')
						types.push(printFunctionArguments(args))
						types.push(';')
				}
				types.push('\n};\n')

				for (v in e.staticMethods) switch (v) {
					case NiceStatement.Function(name, expr, args, defaults):
						out.push('void ' + e.name + '_::' + name + '_')
						out.push(printFunctionArguments(args))
						out.push(' {};\n')
				}
			}

			for (e in project.enumsComplex) {
				forward.push('class ' + e.name + '_;')
			}

			for (c in project.classes) {
				forward.push('class ' + c.name + '_;')
				types.push('class ' + c.name + '_ : public ARC_ {\n\tpublic:')

				for (v in c.vars) switch (v) {
					case NiceStatement.Var(name, expr):
						types.push('\n\tvoid* ' + name + '_;')
					case NiceStatement.Const(name, expr):
						types.push('\n\tvoid* ' + name + '_;')
				}

				for (v in c.methods) switch (v) {
					case NiceStatement.Function(name, expr, args, defaults):
						if (name == null || name == 'new') {
							types.push('\n\tvoid this_')
							types.push(printFunctionArguments(args))
							types.push(';')
							types.push('\n\tstatic ' + c.name + '_* new_')
							types.push(printFunctionArguments(args))
							types.push(';')

							// Init
							out.push('void ' + c.name + '_::this_')
							out.push(printFunctionArguments(args))
							out.push(' {\n')
							out.push('};\n')

							// Alloc
							out.push(c.name + '_* ' + c.name + '_::new_')
							out.push(printFunctionArguments(args))
							out.push(' {\n')
							out.push('\t' + c.name + '_* _ = (' + c.name + '_*)(malloc(sizeof(' + c.name + '_)));\n')
							out.push('\t_->this_(')
							out.push([for (a in args) a + '_'].join(', '))
							out.push(');\n')
							out.push('\treturn _;\n')
							out.push('};\n')
						} else {
							types.push('\n\tvirtual void ' + name + '_')
							types.push(printFunctionArguments(args))
							types.push(';')
							out.push('void ' + c.name + '_::' + name + '_')
							out.push(printFunctionArguments(args))
							out.push(' {};\n')
						}
				}

				for (v in c.staticVars) switch (v) {
					case NiceStatement.Var(name, expr):
						types.push('\n\tstatic void* ' + name + '_;')
					case NiceStatement.Const(name, expr):
						types.push('\n\tstatic void* ' + name + '_;')
				}

				for (v in c.staticMethods) switch (v) {
					case NiceStatement.Function(name, expr, args, defaults):
						//out.push(printFunctionArguments(args, defaults) + ' => { ' + printStatement(expr) + ' }')
						types.push('\n\tstatic void ' + name + '_')
						types.push(printFunctionArguments(args))
						types.push(';')
				}

				types.push('\n};\n')

				for (v in c.staticMethods) switch (v) {
					case NiceStatement.Function(name, expr, args, defaults):
						out.push('void ' + c.name + '_::' + name + '_')
						out.push(printFunctionArguments(args))
						out.push('{};\n')
				}
			}

			for (g in project.globalFuncs) switch (g) {
				case NiceStatement.Function(name, expr, args, defaults):
					types.push('void ' + name + '_')
					types.push(printFunctionArguments(args))
					types.push(';\n')
					out.push('void ' + name + '_')
					out.push(printFunctionArguments(args))
					out.push(' {};\n')
			}

			for (g in project.globalVars) switch (g) {
				case NiceStatement.Var(name, expr):
					types.push('void* ' + name + '_;\n')
				case NiceStatement.Const(name, expr):
					types.push('void* ' + name + '_;\n')
			}

			// Init
			for (init in project.init) {
				out.push('int main(int argc, char **argv) {\n')
				out.push('\treturn 0;\n}\n}\n')
			}

			return (
				header.join('\n')
				+ '\n// Forward\n' +
				forward.join('\n')
				+ '\n// Types\n' +
				types.join('')
				+ '\n// Statements\n' +
				out.join('')
			).split('\n').join('\r\n')

			var out = ''

			// Types
			for (e in project.enumsSimple) {
				// No need to output simple enum values
				//out += '\n' + 'struct _x' + e.name + ' {};'
				//out += '\n' + 'uint32_t _x' + e.name + ';'
				declarationsOfOpaqueTypes.push('typedef uint16_t _x' + e.name)
				// TODO typedef, renamed
				for (v in e.staticVars) switch (v) {
					case NiceStatement.Var(name, expr, type):
						out += '\n' + printType(type) + ' _x' + e.name + '_' + name
						if (expr != null) out += ' = ' + printExpression(expr) + ';' //!to constructor
						// += ;
					case NiceStatement.Const(name, expr, type):
						out += '\n' + printType(type) + ' _x' + e.name + '_' + name
						out += ' = ' + printExpression(expr) + ';'
				}
				for (v in e.staticMethods) switch (v) { // TODO forward, auto args
					case NiceStatement.Function(name, expr, args, defaults, types, returns):
						out += '\n' + printType(returns) + ' _x' + e.name + '_' + name
						out += printFunctionArguments(args, defaults, types) + ' { ' + printStatement(expr) + ' };'
				}
			}

			for (e in project.enumsComplex) {
				// TODO union, forward, renamed
				// Note, that we cannot use `$` or any special signs because ARM/etc assemblers do not allow them
				out += '\nstruct _x' + e.name + ' {\n uint16_t _xindex;\n'
				declarationsOfOpaqueTypes.push('typedef struct _x\(e.name)* _x\(e.name)')
				var i = 0
				if (e.names.length > 0) {
					out += '\n union {'
					for (name in e.names) {
						if (e.constructors[i] != null) {
							out += '\n  struct { '
							out += 'void* ' + e.constructors[i].join('; void* ') + '; '
						//	out += name + '",' + i + ', ' + e.constructors[i].join(', ')
							out += '} _x' + name + ';'
						//} else out += '["' + name + '",' + i + '];'
						}
						i++
					}
					out += '\n };'
				}
				out += '\n};'
			}

			for (c in project.classes) {
				if (c.external) {
					if (c.jsRequire != null) {
						// todo MAKE IT possible to use plain-c include's!
						// like "declare" vs "deep extern declare" for Haxe
						out += '\n ' + '/*var ' + c.name + ' = require("' + c.jsRequire + '")*/'
						continue
					}
					//declarationsOfOpaqueTypes.push('#define _x' + c.name + ' ' + (c.jsNative ?? c.name))
					// Avoid adding of `;`
					//header.push('#define _x' + c.name + ' ' + (c.jsNative ?? c.name))
					header.push('typedef ' + (c.jsNative ?? c.name) + ' _x' + c.name + ';')
					continue
				}

				let renamed = '_x' + c.name
				let t = ['struct ', renamed, ' {'] // t should be used instead of out???
				//out += '\n ' + 'struct ' + c.name + ' {'
				// maybe use as struct* not just `struct`?
				declarationsOfOpaqueTypes.push('typedef struct \(renamed)* \(renamed)')
				t.push('\n _xclass _xclass;') // Reference counting and metatable
				for (v in c.vars) switch (v) {
					case NiceStatement.Var(name, expr, type):
					t.push('\n ' + printType(type) + ' _x' + name + ';')
					//if (expr != null) out += ' = ' + printExpression(expr)
					//t.push(';')
					case NiceStatement.Const(name, expr, type):
					//t.push('\n ' + printType(type) + ' = ' + printExpression(expr) + ';')
					t.push('\n ' + printType(type) + ' _x' + name + ';')
				}
				for (v in c.methods) switch (v) {
					case NiceStatement.Function(name, expr, args, defaults, types, returns): // Class method
					var declaration = printType(returns) + ' '
					let constructor = (name == null || name == 'new')
					if (constructor) declaration = renamed + ' '
					declaration += renamed + '_' + name

					if (constructor) {
						if (args.length > 0) declaration += '(void* _x' + args.join(', void* _x') + ')'
						else declaration += '()'
					} else {
						if (args.length > 0) declaration += '(\(renamed) _xthis, void* _x' + args.join(', void* _x') + ')'
						else declaration += '(\(renamed) _xthis)'
					}

					declarationsOfFunctions.push(declaration)
					//if (name == null || name == 'new') declaration = '\(renamed) \(renamed)_new'
					//if (name == null || name == 'new') out += '\n\(renamed)* constructor_\(renamed)'
					//else out += '\nauto ' + name
					out += '\n' + declaration
					//out += '(' + args.join(', ') + ') { '
					out += ' { '

					if (constructor) {
						out += '\n \(renamed) _xthis = (\(renamed))malloc(sizeof(struct \(renamed)));'
						// Init fields
						for (v in c.vars) switch (v) {
							case NiceStatement.Var(name, expr, type):
							if (expr != null)
							out += '\n _xthis->_x' + name + ' = ' + printExpression(expr) + ';'
							case NiceStatement.Const(name, expr, type):
							out += '\n _xthis->_x' + name + ' = ' + printExpression(expr) + ';'
						}
						out += '\n '
						out += printStatement(expr) + '\n return _xthis;\n};'
					} else

					out += printStatement(expr) + '\n};'
				}
				t.push('\n}')
				declarationsOfFullTypes.push(t.join(''))

				for (v in c.staticVars) switch (v) {
					case NiceStatement.Var(name, expr, type):
						out += '\n ' + printType(type) + ' ' + renamed + '_' + name
						//t.push('\n ' + c.name + '.' + name)
						// TODO to main()
						//if (expr != null) out += ' = ' + printExpression(expr)
						out += ';'
						//if (expr != null) t.push(' = ' + printExpression(expr))
					case NiceStatement.Const(name, expr, type):
						out += '\n ' + printType(type) + ' ' + renamed + '_' + name
						// TODO to main()
						//if (expr != null)
						//out += ' = ' + printExpression(expr) + ';'
						out += ';'
				}
				for (v in c.staticMethods) switch (v) {
					case NiceStatement.Function(name, expr, args, defaults, types, returns):
						out += '\n ' + printType(returns) + ' ' + renamed + '_' + name
						out += printFunctionArguments(args, defaults, types) + ' ' + printBlock(expr)
						//' { ' + printStatement(expr)/*block*/ + ' };'
				}
			}

			for (g in project.globalFuncs) {
				console.log('ooops g')
				//throw g
			}

			for (g in project.globalVars) {
				console.log('ooops gg') // declarationsOfFullTypes
				//throw g
			}

			// Init
			for (init in project.init) {
				// TODO custom entry
				out += '\nint main(int argc, char **argv) {\n '
				out += printStatement(init)/*block*/
				out += '\n return 0;\n}'
			}

			out += '\n#ifdef __cplusplus'
			out += '\n}'
			out += '\n#endif\n'

			if (declarationsOfOpaqueTypes.length > 0) declarationsOfOpaqueTypes.push('\n')
			if (declarationsOfFunctions.length > 0) declarationsOfFunctions.push('\n')
			if (declarationsOfFullTypes.length > 0) declarationsOfFullTypes.push('\n')
			if (declarationsOfStrings.length > 0) declarationsOfStrings.push('\n')

			return header.join('\n') + '\n'
			+ declarationsOfOpaqueTypes.join(';\n')
			+ declarationsOfFunctions.join(';\n')
			+ declarationsOfFullTypes.join(';\n')
			+ declarationsOfStrings.join(';\n')
			+ out
		}

		var tabs = ''
		@inline function pushTab() tabs += ' '
		@inline function popTab() tabs = tabs.substring(0, tabs.length - 1)

		// All names are prefixed with `_x`, so reserved words are not required
		var reserved = []

		// Surrounds with { brackets } single statement
		function printBlock(s: NiceStatement): String {
			switch (s) {
				case NiceStatement.Block(el):
				//if (el.length == 1) return '{ ' + printStatement(el[0]) + '; }'
				if (el.length == 1) switch (el[0]) {
					case NiceStatement.Block(_): return printBlock(el[0])
					case _: return '{ ' + printStatement(el[0]) + '; }'
				}
				if (el.length == 0) return '{}'
				return printStatement(s)
				case _: return '{ ' + printStatement(s) + '; }'
			}
		}

		var last = ''
		function printStatement(s: NiceStatement) {
			last = s ?? last
			switch (s) {
				case NiceStatement.Statements(els):
					var r = ''
					for (s in els) if (s != null) r += '\n' + tabs + printStatement(s) + ';'
					return r

				case NiceStatement.Break: return 'break'
				case NiceStatement.Continue: return 'continue'
				case NiceStatement.Block(el):
					pushTab()
					var r = '{'

					for (e in el) switch (e) {
						case null:
						case NiceStatement.Statements(els):
							for (s in els) if (s != null) r += '\n' + tabs + printStatement(s) + ';'
						case _:
							r += '\n' + tabs + printStatement(e) + ';'
					}

					popTab()
					return r + '\n' + tabs + '}'
				case NiceStatement.New(e, args): return '' + printExpression(e) + '_new' + printCallArguments(args)
				case NiceStatement.Const(name, expr, type): return printType(type) + ' _x' + name + (expr == null? '' : ' = ' + printExpression(expr))
				case NiceStatement.Var(name, expr, type): return printType(type) + ' _x' + name + (expr == null? '' : ' = ' + printExpression(expr))
				case NiceStatement.Function(name, expr, args, defaults, types, returns):
					return printType(returns) + ' _x' + name + printFunctionArguments(args, defaults, types) + ' ' + printBlock(expr)
					//return 'const void* _x' + name + ' = ' + ((async==true)?'async ':'') + printFunctionArguments(args, defaults) + ' => ' + printBlock(expr)
				case NiceStatement.Return(e):
					if (e == null) return 'return'
					return 'return ' + printExpression(e)
				case NiceStatement.If(econd, eif, eelse):
					var r = 'if (' + printExpression(econd) + ') ' + printBlock(eif)
					if (eelse != null) r += ' else ' + printStatement(eelse)
					return r
				case NiceStatement.Call(e, args): return printExpression(e) + printCallArguments(args)
				case NiceStatement.Try(expr, t, v, catches):
					pushTab()
					var r = 'try {\n' + tabs
					r += printStatement(expr)
					popTab()
					r += '\n' + tabs + '} catch(' + printType(t[0]) + ' _x' + v[0] + ') {\n' + tabs + ' '
					pushTab()
					r += printStatement(catches[0])
					popTab()
					return r + '\n' + tabs + '}'
				case NiceStatement.Assign(a, v):
					return printExpression(a) + ' = ' + printExpression(v)
				case NiceStatement.Throw(e):
					return '_xthrow(' + printExpression(e) + ')'
				case NiceStatement.For(name, over, by):
					return 'for (void* _x' + name + '; ' + printExpression(over) + ';) ' + printStatement(by)
				case NiceStatement.Increment(e): return printExpression(e) + '++'
				case NiceStatement.Decrement(e): return printExpression(e) + '--'
				case NiceStatement.While(econd, e, pre):
					if (pre) return 'while (' + printExpression(econd) + ') ' + printStatement(e)
					return 'do {' + printStatement(e) /*block*/ + '} while (' + printExpression(econd) + ')'
				case NiceStatement.Assignop(a, op, value):
					return printExpression(a) + ' ' + Token.stringify(op) + '= ' + printExpression(value)
				case NiceStatement.Dot(expr, name): return printExpression(expr) + '.' + name

				case NiceStatement.Switch(expr, cases, statements):
					// TODO: don't use "0" as tag, use 1+; use `switch(a? a->index : 0)` or
					// generate `if(a) switch() else null-case` in normalizer
					/*
						let temp = f()
						if (temp != null) {
							switch (temp.index) {
								// no null case
							}
						} else {
							null case
						}
						^ in normalizer
					*/
					var r = 'switch (' + printExpression(expr) + ') {'

					// case 1: case 2: case 3:
					for (i in cases.length) if (cases[i].length > 0) {
						r += '\n' + tabs
						for (cc in cases[i]) r += 'case ' + printExpression(cc) + ': '
						//pushTab()
						//r += '{\n' + tabs
						//r += printStatement(statements[i])
						//popTab()
						//r += '\n' + tabs + '} break;\n' + tabs

						pushTab()
						r += printBlock(statements[i])
						popTab()
						r += ' break;'
					}

					// default:
					for (i in cases.length) if (cases[i].length == 0) {
						r += '\n' + tabs + 'default:'
						r += '\n' + tabs
						r += printBlock(statements[i])
						//r += '\n' + tabs
					}

					r += '\n' + tabs
					return r + '}'

				case _: console.error("Unknown statement kind:", (s??[])[0])
			}
		}

		function printCallArguments(args: [NiceExpression]) {
			return '(' + [for (a in args) printExpression(a)].join(', ') + ')'
		}

		function printFunctionArguments(args: [String], defaults: [NiceExpression], types: [NodeType]) {
			if (args.length == 0) return '(void)' // Otherwise C function takes infinite number of arguments
			return '(' + [for (a in args.length)
				'void* ' + args[a] + '_'
			].join(', ') + ')'
			// TODO defaults
			// 'void* ' + args[a] + ((defaults != null && defaults[a] != null)? ' = ' + printExpression(defaults[a]) : '')
		}

		function stringType(t: NodeType, prefix: String) {
			//let prefix = prefix? '' : ''
			if (t == null) return 'void*'
			//if (t == null) return prefix + 'void*'

			switch (t) {
				case NodeType.ParametricType(name, params):
			//		if (name == 'Buffer') return prefix + name
			//		return prefix + name + '<' + [for (param in params) stringType(param, false)].join(', ') + '>'
					return '_x' + name
				case NodeType.Type(name):
			//		if (name == 'Any') return prefix + 'void*'
					return '_x' + name
				case NodeType.Object(_):
			//		return prefix + '{}'
				case NodeType.Optional(t):
			//		return prefix + 'Null<' + stringType(t, false) + '>'
					return stringType(t, '')
			}

			return prefix + 'void*'
		}

		function printType(t: NodeType) {
			//if (t == null) return 'void*'

			let type = stringType(t, '')
			//if (type == ': Array<Dynamic>') return ''
			return type
			//return 'void*'
		}

		function printExpression(e: NiceExpression) {
			last = e ?? last
			switch (e) {
				case NiceExpression.This: return '_xthis'
				case NiceExpression.Ident(name): return '_x' + name
				case NiceExpression.Null: return '((void*)0)'
				case NiceExpression.Int(v): return '' + v
				case NiceExpression.Float(v): return '' + v
				case NiceExpression.String(s):

					let s = s.split('')
					let charsOut = []
					while (s.length > 0) {
						switch (s[0]) {
							case "'":
							charsOut.push("\\'")
							s.shift()
							case '"':
							charsOut.push('\\"')
							s.shift()
							case "\n":
							charsOut.push("\\n")
							s.shift()
							case "\r":
							charsOut.push("\\r")
							s.shift()
							case "\\":
							s.shift()
							if (s[0] == "'") {
								charsOut.push("\\'")
								s.shift()
							} else if (s[0] == '"') {
								charsOut.push('\\"')
								s.shift()
							} else if (s[0] == '\\') {
								charsOut.push("\\\\")
								s.shift()
							} else {
								charsOut.push('\\')
							}
							case _:
							charsOut.push(s[0])
							s.shift()
						}
					}

					return '_xString_fromUTF8z("' + charsOut.join('') + '")'
				case NiceExpression.True: return '1'
				case NiceExpression.False: return '0'
				case NiceExpression.Dot(expr, name): switch (expr) {
					case NiceExpression.This: return '_xthis->_x' + name
					case _: return printExpression(expr) + '->_x' + name
				}
				case NiceExpression.Call(e, args): return printExpression(e) + printCallArguments(args)
				case NiceExpression.Function(name, expr, args, defaults, types, returns):
					if (name == null)
						return printType(returns) + ' __function' + printFunctionArguments(args, defaults, types) + ' ' + printBlock(expr)
					return '((() => { void* _x' + name + ' = ' + printFunctionArguments(args, defaults, types) + ' => '
					+ printBlock(expr) + ';return _x' + name + ';})())'
				case NiceExpression.Arrow(expr, args, defaults, types, returns):
					return printType(returns) + ' __arrow' + printFunctionArguments(args, defaults, types) + ' { return (' + printExpression(expr) + '); }'
				case NiceExpression.New(e, args): return '' + printExpression(e) + '_new' + printCallArguments(args)
				case NiceExpression.Array(el): return '_xArray_new(' + [for (a in el) printExpression(a)].join(', ') + ')'
				case NiceExpression.Unop(op, postfix, e):
					if (postfix) return printExpression(e) + Token.stringify(op)
					return Token.stringify(op) + printExpression(e)
				case NiceExpression.Elvis(nullable, othewise):
					return '((' + printExpression(nullable) + ')||(' + printExpression(othewise) + '))'
				case NiceExpression.Parenthesis(e): return '(' + printExpression(e) + ')'
				case NiceExpression.Binop(a, op, b):
					return printExpression(a) + ' ' + Token.stringify(op) + ' ' + printExpression(b)
				case NiceExpression.Index(expr, index):
					return  '_xArray_get(' + printExpression(expr) + ', ' + printExpression(index) + ')'
				case NiceExpression.If(econd, eif, eelse):
					var r = ''
					try {
						r += '(' + printExpression(econd) + ')?'
						r += '(' + printExpression(eif) + ')'
						r += ':' + printExpression(eelse)
						return r
					} catch (error: Any) {
						console.log('If =>', e, error)
						return r + '<!-- If => error -->'
					}
				case NiceExpression.Object(names, el):
					return '{' + [for (i in el.length) ((names[i]) + ':' + printExpression(el[i]))].join(', ') + '}'
				case NiceExpression.Map(keys, values):
					if (keys.length == 0) return '_xMap_new()'
					return '_xMap_new([' +
					[for (i in keys.length) '[' + printExpression(keys[i]) + ', ' + printExpression(values[i]) + ']'].join(', ')
					+ '])'
				case NiceExpression.Assignop(a, op, value):
					return printExpression(a) + ' ' + Token.stringify(op) + '= ' + printExpression(value)
				case NiceExpression.NativeOperator(kind, args, s): switch (kind) {
					case NativeOperatorKind.Infix: return '((' + printExpression(args[0]) + ')' + s + '(' + printExpression(args[1]) + '))'
					case NativeOperatorKind.Function: return s + printCallArguments(args)
					case NativeOperatorKind.Prefix: return '(' + s + '(' + printExpression(args[0]) + '))'
					case NativeOperatorKind.Postfix: return '((' + printExpression(args[1]) + ')' + s + ')'
				}
				case NiceExpression.Enum(typeName, tagName, tag, args):
					return '_x' + typeName + '_' + tagName + '(' + [for (a in args) printExpression(a)].join(', ') + ')'

				case _: console.error("Unknown expression kind:", (e??[])[0], e, last) return '<!-- ' + (e??[])[0] + ' -->'
			}
		}
	}
}
