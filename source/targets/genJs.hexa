// The Hexa Compiler
// Copyright (C) 2018  Oleg Petrenko
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

module {
	class GenJs2 {
		static function stringifyProject(project: NiceProject): String {
			var out = ''
			return out + new GenJs2(project).stringify()
		}

		var project
		new (project) {
			this.project = project
		}

		function stringify() {
			var out = '{\n\t"use strict"\n\tconst $global$ = typeof(window) === "undefined"?global:window'

			// Types
			for (e in project.enumsSimple) {
				// No need to output simple enum values
			}

			for (e in project.enumsComplex) {
				var i = 0
				for (name in e.names) {
					out += '\n\tconst enum$' + e.name + '$' + name + ' = '
					if (e.constructors[i] != null) {
						out += '(' + [for(c in e.constructors[i]) rename(c)].join(',') + ')=>["'
						out += name + '",' + i + ',' + [for(c in e.constructors[i]) rename(c)].join(',')
						out += '];'
					} else out += '["' + name + '",' + i + '];'
					i++
				}
			}

			for (i in project.interfaces) {
				throw i
			}

			for (c in project.classes) {
				if (c.external) {
					if (c.jsRequire != null) {
						out += '\n\t' + 'var ' + c.name + ' = require("' + c.jsRequire + '")'
						continue
					}
					out += '\n\t' + 'var ' + c.name + ' = $global$.' + (c.jsNative ?? c.name)
					continue
				}

				out += '\n\t' + 'var ' + c.name + ' = class {'
				for (v in c.vars) switch (v) {
					case NiceStatement.Var(name, expr):
					out += '\n\t\t/*' + printStatement(v) + '*/'
				}
				for (v in c.methods) switch (v) {
					case NiceStatement.Function(name, expr, args):
					if (name == null || name == 'new') out += '\n\t\tconstructor'
					else out += '\n\t\t' + rename(name)
					out += '(' + [for (a in args) rename(a)].join(', ') + ') { ' + printStatement(expr) + ' };'
				}
				out += '\n\t}'

				for (v in c.staticVars) switch (v) {
					case NiceStatement.Var(name, expr):
						out += '\n\tvar class$' + c.name + '$' + name
						out += ' = ' + c.name + '.' + name
						if (expr != null) out += ' = ' + printExpression(expr)
					case NiceStatement.Const(name, expr):
						out += '\n\tvar class$' + c.name + '$' + name
						out += ' = ' + c.name + '.' + name
						out += ' = ' + printExpression(expr)
				}
				for (v in c.staticMethods) switch (v) {
					case NiceStatement.Function(name, expr, args):
						out += '\n\tvar class$' + c.name + '$' + name + ' = ' + c.name + '.' + name + ' = '
						out += '(' + [for (a in args) rename(a)].join(', ') + ') => { ' + printStatement(expr) + ' };'
				}
			}

			for (g in project.globalFuncs) {
				throw g
			}

			for (g in project.globalVars) {
				throw g
			}

			// Init
			for (init in project.init) {
				out += '\n\t{\n\t\t'
				out += printStatement(init)
				out += '\n\t}'
			}

			return out + '\n}'
		}

		var tabs = '\t\t'
		@inline function pushTab() tabs += '\t'
		@inline function popTab() tabs = tabs.substring(0, tabs.length - 1)

		static var reserved = ['with', 'const', 'instanceof']

		// Rename to make an unique name
		static function rename(name: String) {
			if (reserved.indexOf(name) != -1) {
				return '$' +
				name
			}
			return name
		}

		// Surrounds with { brackets } single statement
		function printBlock(s: NiceStatement): String {
			switch (s) {
				case NiceStatement.Block(el):
				if (el.length == 1) return '{ ' + printStatement(el[0]) + ' }'
				if (el.length == 0) return '{}'
				return printStatement(s)
				case _: return '{ ' + printStatement(s) + ' }'
			}
		}

		function printStatement(s: NiceStatement) {
			switch (s) {
				case NiceStatement.Statements(els):
					var r = ''
					for (s in els) if (s != null) r += '\n' + tabs + printStatement(s) + ';'
					return r

				case NiceStatement.Break: return 'break'
				case NiceStatement.Continue: return 'continue'
				case NiceStatement.Block(el):
					pushTab()
					var r = '{'

					for (e in el) switch (e) {
						case null:
						case NiceStatement.Statements(els):
							for (s in els) if (s != null) r += '\n' + tabs + printStatement(s) + ';'
						case _:
							r += '\n' + tabs + printStatement(e) + ';'
					}

					popTab()
					return r + '\n' + tabs + '}'
				case NiceStatement.New(e, args): return 'new ' + printExpression(e) + printCallArguments(args)
				case NiceStatement.Const(name, expr): return 'const ' + rename(name) + (expr == null? '' : ' = ' + printExpression(expr))
				case NiceStatement.Var(name, expr): return 'let ' + rename(name) + Math.random().toString().split('.')[1] + (expr == null? '' : ' = ' + printExpression(expr))
				case NiceStatement.Function(name, expr, args):
					return 'const ' + rename(name) + ' = (' + [for (a in args) a].join(', ') + ') => ' + printBlock(expr)
				case NiceStatement.Return(e):
					if (e == null) return 'return'
					return 'return ' + printExpression(e)
				case NiceStatement.If(econd, eif, eelse):
					var r = 'if (' + printExpression(econd) + ') ' + printBlock(eif)
					if (eelse != null) r += ' else ' + printStatement(eelse)
					return r
				case NiceStatement.Call(e, args): return printExpression(e) + printCallArguments(args)
				case NiceStatement.Try(expr, t, v, catches):
					pushTab()
					var r = 'try {\n' + tabs
					r += printStatement(expr)
					popTab()
					r += '\n' + tabs + '} catch (' + v[0] + ') {\n' + tabs + '\t'
					pushTab()
					r += printStatement(catches[0])
					popTab()
					return r + '\n' + tabs + '}'
				case NiceStatement.Assign(a, v):
					return printExpression(a) + ' = ' + printExpression(v)
				case NiceStatement.Throw(e):
					return 'throw ' + printExpression(e)
				case NiceStatement.For(name, over, by):
					return 'for (const ' + rename(name) + ' of ' + printExpression(over) + ') ' + printStatement(by)
				case NiceStatement.Increment(e): return printExpression(e) + '++'
				case NiceStatement.Decrement(e): return printExpression(e) + '--'
				case NiceStatement.While(econd, e, pre):
					if (pre) return 'while (' + printExpression(econd) + ') ' + printStatement(e)
					return 'do {' + printStatement(e) + '} while (' + printExpression(econd) + ')'
				case NiceStatement.Assignop(a, op, value):
					return printExpression(a) + ' ' + Token.stringify(op) + '= ' + printExpression(value)
				case NiceStatement.Dot(expr, name): return printExpression(expr) + '.' + name

				case NiceStatement.Switch(expr, cases, statements):
					var r = 'switch (' + printExpression(expr) + ') {'

					// case 1: case 2: case 3:
					var i = 0
					for (c in cases) if (c.length > 0) {
						r += '\n' + tabs
						for (cc in c) r += 'case ' + printExpression(cc) + ': '
						pushTab()
						r += '{\n' + tabs
						r += printStatement(statements[i])
						popTab()
						r += '\n' + tabs + '} break;\n' + tabs
						i++
					}

					// default:
					var i = 0
					for (c in cases) if (c.length == 0) {
						r += '\n' + tabs + 'default: '
						r += '\n' + tabs
						r += printStatement(statements[i])
						r += '\n' + tabs
						i++
					}

					return r + '}'

				case _: console.error("Unknown statement kind:", (s||[])[0])
			}
		}

		function printCallArguments(args: [NiceExpression]) {
			return '(' + [for (a in args) printExpression(a)].join(', ') + ')'
		}

		function printExpression(e: NiceExpression) {
			switch (e) {
				case NiceExpression.Null: return 'null'
				case NiceExpression.This: return 'this'
				case NiceExpression.Ident(name): return rename(name)
				case NiceExpression.Int(v): return '' + v
				case NiceExpression.Float(v): return '' + v
				case NiceExpression.String(s):

					let s = s.split('')
					let charsOut = []
					while (s.length > 0)
					{
						switch (s[0]) {
							case "'":
							charsOut.push("\\")
							charsOut.push("'")
							s.shift()
							case "\n":
							charsOut.push("\\n")
							s.shift()
							case "\r":
							charsOut.push("\\r")
							s.shift()
							case "\\":
							s.shift()
							if (s[0] == "'") {
								charsOut.push("\\")
								charsOut.push("'")
								s.shift()
							} else {
								charsOut.push('\\')
							}
							case _:
							charsOut.push(s[0])
							s.shift()
						}
					}

					return "'" + charsOut.join('') + "'"
				case NiceExpression.Bool(v): return '' + v
				case NiceExpression.Dot(expr, name): return printExpression(expr) + '.' + name
				case NiceExpression.Call(e, args): return printExpression(e) + printCallArguments(args)
				case NiceExpression.Function(name, expr, args):
					if (name == null) return '(' + [for (a in args) rename(a)].join(', ') + ') => ' + printBlock(expr)
					return 'function ' + (name?rename(name):'') + '(' + [for (a in args) rename(a)].join(', ') + ') {'
					+ printStatement(expr) + ' }'
				case NiceExpression.Arrow(expr, args):
					return '(' + [for (a in args) rename(a)].join(', ') + ') => (' + printExpression(expr) + ')'
				case NiceExpression.New(e, args): return 'new ' + printExpression(e) + printCallArguments(args)
				case NiceExpression.Array(el): return '[' + [for (a in el) printExpression(a)].join(', ') + ']'
				case NiceExpression.Unop(op, postfix, e):
					if (postfix) return printExpression(e) + Token.stringify(op)
					return Token.stringify(op) + printExpression(e)
				case NiceExpression.Elvis(nullable, othewise):
					return '((' + printExpression(nullable) + ') || (' + printExpression(othewise) + '))'
				case NiceExpression.Parenthesis(e): return '(' + printExpression(e) + ')'
				case NiceExpression.Binop(a, op, b):
					return printExpression(a) + ' ' + Token.stringify(op) + ' ' + printExpression(b)
				case NiceExpression.Index(expr, index):
					return printExpression(expr) + '[' + printExpression(index) + ']'
				case NiceExpression.If(econd, eif, eelse):
					var r = ''
					try {
						r += '(' + printExpression(econd) + ')?'
						r += ' (' + printExpression(eif) + ')'
						r += ' : ' + printExpression(eelse)
						return r
					} catch (error: Any) {
						console.log('If =>', e, error)
						return r + '<!-- If => error -->'
					}
				case NiceExpression.Object(names, el):
					return '{' + [for (i in el.length) ((names[i]) + ':' + printExpression(el[i]))].join(', ') + '}'
				case NiceExpression.Map(keys, values):
					if (keys.length == 0) return 'new Map()'
					return 'new Map([' +
					[for (i in keys.length) '[' + printExpression(keys[i]) + ', ' + printExpression(values[i]) + ']'].join(', ')
					+ '])'
				case NiceExpression.Assignop(a, op, value):
					return printExpression(a) + ' ' + Token.stringify(op) + '= ' + printExpression(value)
				case _: console.error("Unknown expression kind:", (e||[])[0], e)
			}
		}
	}
}
