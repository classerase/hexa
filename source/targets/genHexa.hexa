// The Hexa Compiler
// Copyright (C) 2018  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

module {
	// Generates Hexa
	class GenHexa {
		new () {}

		var project: NiceProject
		let extension = '.hexa'
		let nativeEnums = true

		static function spawn() {
			return new GenHexa()
		}

		function perform(normalizer: NiceProject): String {
			project = normalizer
			return stringify()
		}

		function stringify() {
			var out = 'module {'

			// Types
			for (e in project.enumsSimple) {
				out += '\n\t' + 'enum ' + e.name + ' : Any {'
				for (v in e.names.length) {
					out += '\n\t\t' + e.names[v] + ' = ' + printExpression(e.values[v])
				}
				for (v in e.staticVars) switch (v) {
					case NiceStatement.Var(name, expr):
						out += '\n\t' + e.name + '.' + name
						if (expr != null) out += ' = ' + printExpression(expr)
					case NiceStatement.Const(name, expr):
						out += '\n\t' + e.name + '.' + name
						out += ' = ' + printExpression(expr)
				}
				for (v in e.staticMethods) switch (v) {
					case NiceStatement.Function(name, expr, args, defaults):
						out += '\n\tstatic function ' + name
						out += printFunctionArguments(args, defaults) + ' ' + printStatement(expr)
				}
				out += '\n\t}'
			}

			for (e in project.enumsComplex) {
				out += '\n\t' + 'enum ' + e.name + ' {'
				var i = 0
				for (name in e.names) {
					out += '\n\t\t' + name
					if (e.constructors[i] != null) {
						out += '('
						out += [for (k in e.constructors[i].length) {
							e.constructors[i][k] + printNodeAsType(e.types[i][k], ': ')
						}].join(', ')
						out += ')'
					}
					i++
				}
				out += '\n\t}'
			}

			for (i in project.interfaces) {
				throw i
			}

			for (c in project.classes) {
				if (c.external) {
					if (c.jsRequire != null) {
						out += '\n\t' + '// @require("' + c.jsRequire + '") declare class ' + c.name + ' {}'
						continue
					}
					out += '\n\t// '
					if (let jsNative = c.jsNative) out +='@require("' + jsNative + '") '
					out += 'declare class ' + c.name + ' {}'
					continue
				}

				out += '\n\t' + 'class ' + c.name + ' {'
				pushTab()
				for (v in c.vars) switch (v) {
					case NiceStatement.Var(name, expr, type):
					out += '\n\t\tvar ' + name + printType(type, ': ')
					if (expr != null) out += ' = ' + printExpression(expr)
					case NiceStatement.Const(name, expr):
					out += '\n\t\tlet ' + name + ' = ' + printExpression(expr)
				}

				for (v in c.methods) switch (v) {
					case NiceStatement.Function(name, expr, args):
					if (name == null || name == 'new') out += '\n\t\tnew '
					else out += '\n\t\tfunction ' + name
					out += '(' + args.join(', ') + ') '
					out += printStatement(expr)
				}

				for (v in c.staticVars) switch (v) {
					case NiceStatement.Var(name, expr):
						out += '\n\t\tstatic var ' + name
						if (expr != null) out += ' = ' + printExpression(expr)
					case NiceStatement.Const(name, expr):
						out += '\n\t\tstatic let ' + name
						out += ' = ' + printExpression(expr)
				}
				for (v in c.staticMethods) switch (v) {
					case NiceStatement.Function(name, expr, args, defaults):
						out += '\n\t\tstatic function ' + name
						out += printFunctionArguments(args, defaults) + ' ' + printStatement(expr)
				}
				popTab()
				out += '\n\t}'
			}

			for (g in project.globalFuncs) {
				throw g
			}

			for (g in project.globalVars) {
				throw g
			}

			out += '\n}\n'

			// Init
			for (init in project.init) {
				out += '\n{\n\t'
				out += printStatement(init)
				out += '\n}'
			}

			return out + '\n'
		}

		var tabs = '\t'
		@inline function pushTab() tabs += '\t'
		@inline function popTab() tabs = tabs.substring(0, tabs.length - 1)

		// returns __diranme/lib/cs/cs.h
		let reserved = [
		]
		let globalAccessor = ''

		// Surrounds with { brackets } single statement
		function printBlock(s: NiceStatement): String {
			return printStatement(s)
		}

		function printStatement(s: NiceStatement) {
			switch (s) {
				case NiceStatement.Statements(els):
					var r = ''
					for (s in els) if (s != null) r += '\n' + tabs + printStatement(s)
					return r

				case NiceStatement.Break: return 'break'
				case NiceStatement.Continue: return 'continue'
				case NiceStatement.Block(el):
					pushTab()
					var r = '{'

					for (e in el) switch (e) {
						case null:
						case NiceStatement.Statements(els):
							for (s in els) if (s != null) r += '\n' + tabs + printStatement(s)
						case _:
							r += '\n' + tabs + printStatement(e)
					}

					popTab()
					return r + '\n' + tabs + '}'
				case NiceStatement.New(e, args): return 'new ' + printExpression(e) + printCallArguments(args)
				case NiceStatement.Const(name, expr): return 'let ' + name + (expr == null? '' : ' = ' + printExpression(expr))
				case NiceStatement.Var(name, expr): return 'var ' + name + (expr == null? '' : ' = ' + printExpression(expr))
				case NiceStatement.Function(name, expr, args, defaults):
					return 'function ' + name + printFunctionArguments(args, defaults) + ' ' + printBlock(expr)
				case NiceStatement.Return(e):
					if (e == null) return 'return'
					return 'return ' + printExpression(e)
				case NiceStatement.If(econd, eif, eelse):
					var r = 'if (' + printExpression(econd) + ') ' + printBlock(eif)
					if (eelse != null) r += ' else ' + printStatement(eelse)
					return r
				case NiceStatement.Call(e, args): return printExpression(e) + printCallArguments(args)
				case NiceStatement.Try(expr, t, v, catches):
					var r = 'try '
					r += printStatement(expr)
					r += ' catch (' + v[0] + ': Any) '
					r += printStatement(catches[0])
					return r
				case NiceStatement.Assign(a, v):
					return printExpression(a) + ' = ' + printExpression(v)
				case NiceStatement.Throw(e):
					return 'throw ' + printExpression(e)
				case NiceStatement.For(name, over, by):
					return 'for (' + name + ' in ' + printExpression(over) + ') ' + printStatement(by)
				case NiceStatement.Increment(e): return printExpression(e) + '++'
				case NiceStatement.Decrement(e): return printExpression(e) + '--'
				case NiceStatement.While(econd, e, pre):
					if (pre) return 'while (' + printExpression(econd) + ') ' + printStatement(e)
					return 'do {' + printStatement(e) + '} while (' + printExpression(econd) + ')'
				case NiceStatement.Assignop(a, op, value):
					return printExpression(a) + ' ' + Token.stringify(op) + '= ' + printExpression(value)
				case NiceStatement.Dot(expr, name): return printExpression(expr) + '.' + name

				case NiceStatement.Switch(expr, cases, statements):
					var r = 'switch (' + printExpression(expr) + ') {'

					// case 1: case 2: case 3:
					for (i in cases.length) if (cases[i].length > 0) {
						r += '\n' + tabs
						for (cc in cases[i]) r += 'case ' + printExpression(cc) + ': '
						pushTab()
						r += printStatement(statements[i])
						popTab()
						r += '\n' + tabs
					}

					// default:
					for (i in cases.length) if (cases[i].length == 0) {
						r += '\n' + tabs + 'case _: '
						r += '\n' + tabs
						r += printStatement(statements[i])
						r += '\n' + tabs
					}

					return r + '}'

				case _: console.error("Unknown statement kind:", (s??[])[0])
			}

			return '<!-- undefined -->'
		}

		function printCallArguments(args: [NiceExpression]) {
			return '(' + [for (a in args) printExpression(a)].join(', ') + ')'
		}

		function printFunctionArguments(args: [String], defaults: [NiceExpression]) {
			return '(' + [for (a in args.length)
				args[a] + ((defaults != null && defaults[a] != null)? ' = ' + printExpression(defaults[a]) : '')
			].join(', ') + ')'
		}

		function printType(t: NodeType, prefix: Bool) {
			let prefix = prefix? ': ' : ''
			if (t == null) return ''

			switch (t) {
				case NodeType.ParametricType(name, params):
					return prefix + name + '<' + [for (param in params) printType(param, false)].join(', ') + '>'
				case NodeType.Type(name):
					return prefix + name
				case NodeType.Object(_):
					return prefix + '{}'
				case NodeType.Optional(t):
					return prefix + printType(t, false) + '?'
			}

			return prefix + 'Any'
		}

		function printNodeAsType(t: Node, prefix: String) {
			switch (t) {
				case Node.TIdent(name): return prefix + name
				case Node.TArray(el): return prefix + '[' + printNodeAsType(el[0], '') + ']'

				case null: return prefix + 'Any'
				case _: return prefix + 'Any'
			}
		}

		function printExpression(e: NiceExpression) {
			switch (e) {
				case NiceExpression.Null: return 'null'
				case NiceExpression.This: return 'this'
				case NiceExpression.Ident(name): return name
				case NiceExpression.Int(v): return '' + v
				case NiceExpression.Float(v): return '' + v
				case NiceExpression.String(s):

					let s = s.split('')
					let charsOut = []
					while (s.length > 0)
					{
						switch (s[0]) {
							case "'":
							charsOut.push("\\")
							charsOut.push("'")
							s.shift()
							case "\n":
							charsOut.push("\\n")
							s.shift()
							case "\r":
							charsOut.push("\\r")
							s.shift()
							case "\\":
							s.shift()
							if (s[0] == "'") {
								charsOut.push("\\")
								charsOut.push("'")
								s.shift()
							} else {
								charsOut.push('\\')
							}
							case _:
							charsOut.push(s[0])
							s.shift()
						}
					}

					return "'" + charsOut.join('') + "'"
				case NiceExpression.True: return 'true'
				case NiceExpression.False: return 'false'
				case NiceExpression.Dot(expr, name): return printExpression(expr) + '.' + name
				case NiceExpression.Call(e, args): return printExpression(e) + printCallArguments(args)
				case NiceExpression.Function(name, expr, args, defaults):
					if (name == null) return 'function' + printFunctionArguments(args, defaults) + ' ' + printBlock(expr)
					return 'function ' + name + printFunctionArguments(args, defaults) + ' '
					+ printBlock(expr)
				case NiceExpression.Arrow(expr, args, defaults):
					return printFunctionArguments(args, defaults) + ' => ' + printExpression(expr)
				case NiceExpression.New(e, args): return 'new ' + printExpression(e) + printCallArguments(args)
				case NiceExpression.Array(el): return '[' + [for (a in el) printExpression(a)].join(', ') + ']'
				case NiceExpression.Unop(op, postfix, e):
					if (postfix) return printExpression(e) + Token.stringify(op)
					return Token.stringify(op) + printExpression(e)
				case NiceExpression.Elvis(nullable, othewise):
					return '((' + printExpression(nullable) + ') ?? (' + printExpression(othewise) + '))'
				case NiceExpression.Parenthesis(e): return '(' + printExpression(e) + ')'
				case NiceExpression.Binop(a, op, b):
					return printExpression(a) + ' ' + Token.stringify(op) + ' ' + printExpression(b)
				case NiceExpression.Index(expr, index):
					return printExpression(expr) + '[' + printExpression(index) + ']'
				case NiceExpression.If(econd, eif, eelse):
					var r = ''
					try {
						r += '(' + printExpression(econd) + ')?'
						r += ' (' + printExpression(eif) + ')'
						r += ' : ' + printExpression(eelse)
						return r
					} catch (error: Any) {
						console.log('If =>', e, error)
						return r + '<!-- If => error -->'
					}
				case NiceExpression.Object(names, el):
					if (el.length == 0) return '{}'
					return '{' + [for (i in el.length) ((names[i]) + ':' + printExpression(el[i]))].join(', ') + '}'
				case NiceExpression.Map(keys, values):
					if (keys.length == 0) return '[:]'
					return '[' +
						[for (i in keys.length) printExpression(keys[i]) + ' : ' + printExpression(values[i])].join(', ')
					+ ']'
				case NiceExpression.Assignop(a, op, value):
					return printExpression(a) + ' ' + Token.stringify(op) + '= ' + printExpression(value)
				case NiceExpression.NativeOperator(kind, args, s): switch (kind) {
					case NativeOperatorKind.Infix: return '((' + printExpression(args[0]) + ') ' + s + ' (' + printExpression(args[1]) + '))'
					case NativeOperatorKind.Function: return s + printCallArguments(args)
					case NativeOperatorKind.Prefix: return '(' + s + '(' + printExpression(args[0]) + '))'
					case NativeOperatorKind.Postfix: return '((' + printExpression(args[1]) + ')' + s + ')'
				}
				case NiceExpression.Underscore: return '_'
				case _:
					console.error("Unknown expression kind:", (e??[])[0], e)
			}

			return '<!-- undefined -->'
		}
	}
}
