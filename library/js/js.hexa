// The MIT License
//
// Copyright (c) 2018 Oleg Petrenko
// Copyright (C) 2018 Bogdan Danylchenko
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

module {
	// Global
	declare function encodeURIComponent(s: String): String
	declare function decodeURIComponent(s: String): String
	declare function typeof(v: Any): String
	declare function __js__(code: String): Any
	declare function eval(code: String): Any

	// Basic
	@coreApi declare class Int {}
	@coreApi declare class Float {}
	@coreApi declare class Bool {}

	declare class String {
		var length: Int
		function toUpperCase(): String
		function toLowerCase(): String
		function charAt(index: Int): String
		function indexOf(str: String, startIndex: Int?): Int
		function lastIndexOf(str: String, startIndex: Int?): Int
		function split(delimiter: String): [String]
		function toString(): String
		function substring(startIndex: Int, endIndex: Int?): String
		static function fromCharCode(code: Int): String
		new(string: String)
	}

	declare class Math {
	}

	@native('JSON')
	declare class JSON {
		static function parse(text: String): Any
		static function stringify(value: Any, replacer: (Any, Any)=>Any?, space: String?): String
	}

	@native('Map')
	declare class Map<K, V> {
		new()
		function get(k: K): V
		function set(k: K, v: V): Void
		function has(k: K): Bool
		function keys(): Array<K>
	}

	@native("console")
	declare class Console {
		function log(str: String): Void
		function error(data: Any, message: String?): Void
	}

	declare let console: Console

	declare class Array< array.T > {
		var length: Int
		function concat(a: [array.T]): [array.T]
		function join(sep: String): String
		function pop(): array.T?
		function push(x: array.T): Int
		function reverse(): Void
		function shift(): array.T?
		function slice(pos: Int, end: Int?): [array.T]
		function sort(f: (array.T, array.T)=>Int): Void
		function splice(pos: Int, len: Int): [array.T]
		function toString(): String
		function unshift(x: array.T): Void
		new()
	}

	declare class Date {
		new(year: Int, month: Int, day: Int, hour: Int, min: Int, sec: Int)
	}

	@native('RegExp')
	declare class RegExp {
		var global: Bool
		var ignoreCase: Bool
		var multiline: Bool
		var source: String
		var lastIndex: Int
		function exec(str: String): js.regexp.RegExpMatch?
		function test(str: String): Bool
		function toString(): String
		new(pattern: String, flags: String?)
	}

	declare class RegExpMatch extends Array< String > {
		var index: Int
		var input: String
	}

	// Error
	@native('Error')
	declare class Error {
		var message: String
		var name: String
		var stack: String
		new(message: String?)
	}

	@native('EvalError')
	declare class EvalError extends js.error.Error {
		new(message: String?)
	}

	@native('URIError')
	declare class URIError extends js.error.Error {
		new(message: String?)
	}

	@native('TypeError')
	declare class TypeError extends js.error.Error {
		new(message: String?)
	}

	@native('SyntaxError')
	declare class SyntaxError extends js.error.Error {
		new(message: String?)
	}

	@native('ReferenceError')
	declare class ReferenceError extends js.error.Error {
		new(message: String?)
	}

	@native('RangeError')
	declare class RangeError extends js.error.Error {
		new(message: String?)
	}
}
