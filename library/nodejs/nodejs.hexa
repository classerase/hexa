// The MIT License
//
// Copyright (c) 2018 Oleg Petrenko
// Copyright (C) 2018 Bogdan Danylchenko
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

module {
	declare function require(package: String): Any
	declare let __dirname: String
	declare let __filename: String

	@native("Buffer")
	declare class Buffer<T> implements ArrayAccess<T> {
		static function alloc/*<T>*/(size: Int): Buffer<T>
		var length: Int
		new (bufsize: Int)
		function readUInt16LE(offset: Int): Int
		function writeUInt16LE(value: Int, offset: Int): Int
		function readUInt32LE(offset: Int): Int
		function toString(encoding: String, start: Int?, end: Int?): String
		static function from/*<T>*/(string: String, encoding: String?): Buffer<T>
	}

	declare class ProcessStd {
		function write(text: String): Void
	}

	@native("process")
	declare class Process {
		static let stdin: ProcessStd
		static let stdout: ProcessStd
		static let stderr: ProcessStd
		static let argv: [String]
		static function exit(errorCode: Int): Void
		static let versions: { node: String }
	}

	declare let process: Process

	declare class ParsedPath {
		var root: String
		var dir: String
		var base: String
		var ext: String
		var name: String
	}

	@native("path")
	@require("path")
	declare class Path {
		static let sep: String
		static function resolve(path: String): String
		static function parse(path: String): ParsedPath
	}

	@require("fs")
	declare class Fs {
		static function writeFileSync(path: String, data: String): Void
		static function readdirSync(path: String): [String]
		static function readFileSync(path: String): Buffer
		static function lstatSync(path: String): Any
		static function existsSync(path: String): Bool
		static function mkdirSync(path: String): Void
		static function readSync(fd: Int, buffer: Buffer, offset: Int, length: Int, position: Int): Int
	}
}
